//CopyRight Dustin Nelson 2010-2011. Please do not distribute
//http://www.creativecrash.com/maya/marketplace/scripts-plugins/character/c/-rapid-rig-advanced-auto-rig-for-maya--2/
//Script for BiPed Character Animation with "Rapid Rig: Advanced".
//VERSION 2.0.3
//FEBRUARY 24, 2013
//FILE IS NOT INTENDED TO BE HARMFUL, HOWEVER USE AT YOUR OWN RISK
/*////////////////////////////////////////////////////////////////////////
//                                                                      //
//	INSTRUCTIONS:                                                       //
//	1. INSTALLATION                                                     //
//	ON A MAC:                                                           //
//	Put the script DSN_RapidRig.mel in the following path:              //
//	Users/YourUser/Library/Preferences/Autodesk/maya/scripts/           //
//				                                                        //
//	ON A PC:                                                            //
//	Put the script DSN_RapidRig.mel in the following path:              //
//	C:/Users/YourUser/Documents/maya/scripts/                           //
//                                                                      //
//	2. START UP MAYA, ENTER THE FOLLOWING COMMAND INTO                  //
//	THE COMMAND LINE OR THE SCRIPT EDITOR:                              //
//                                                                      //
//	RapidRig_Poser_V2                                                   //
//                                                                      //
//	3. TO HAVE EASY ACCESS TO SCRIPT, CREATE A SHELF BUTTON             //
//	WITH ONLY THAT COMMAND. EVERY TIME YOU HIT THE BUTTON,              //
//	THE RAPID RIG INTERFACE WILL POP UP. HAPPY ANIMATING!               //
//                                                                      //
////////////////////////////////////////////////////////////////////////*/

global proc controlDialog()
{	
	string $selectControl = `confirmDialog
	-title "Please Select a Controller"
	-message "You must select a controller of your character."
	-button "OK"
	-defaultButton "OK"
	-cancelButton "OK"`;
}

global proc invalidName()
{	
	string $invalidName = `confirmDialog
	-title "Invalid Name"
	-message "That control does not match the character name."
	-button "OK"
	-defaultButton "OK"
	-cancelButton "OK"`;
}

global proc loadCurrentFrame()
{
	$currentFrame    = `currentTime -q`;
	textField -e -tx $currentFrame currentFrameTxtFld;
}

global proc getIdentification()
{
	string $rig[] = `ls -sl`;
	int $rigSize = `size $rig`;
	if ($rigSize > 0)
	{
		int $identification = `getAttr {$rig[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
	
		string $currentControl[] = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
    
		$currentControl = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
    
		$currentControl = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
    
		$currentControl = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
    
		$currentControl = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
    
		$currentControl = `ls -sl`;
		$identification = `getAttr {$currentControl[0] + ".identification"}`;
		if ($identification != 1122)
		{pickWalk -d up;}
   	}
}

//CONTROL SELECTION
global proc RRP_select(string $controlName)
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		if (`objExists ($rigName + $controlName)`)
		{
			int $mods = `getModifiers`;
			if ($mods ==0)
			{
				select {$rigName + $controlName};
			}
			else if ($mods ==1)			
			{
				select -tgl {$rigName + $controlName};
			}
			else if ($mods ==4)	
			{
				select -d {$rigName + $controlName};
			}
			else if ($mods ==5)	
			{
				select -add {$rigName + $controlName};
			}
		}
	}
	else
	{
		invalidName;
		select $rig;
	}
}

global proc RRP_selectIKFK(string $controlNameFK, string $controlNameIK, string $switchC)
{
		
	
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	
	string $controlName;
	float $IKFKVal = `getAttr ($rigName + $switchC + ".SwitchIkFk")`;
	if ($IKFKVal >= 0.5)
	{
		$controlName = $controlNameFK;
	}
	else
	{
		$controlName = $controlNameIK;
	}
	
	if (`objExists $rigName`)
	{
		if (`objExists ($rigName + $controlName)`)
		{
			int $mods = `getModifiers`;
			if ($mods ==0)
			{
				select {$rigName + $controlName};
			}
			else if ($mods ==1)			
			{
				select -tgl {$rigName + $controlName};
			}
			else if ($mods ==4)	
			{
				select -d {$rigName + $controlName};
			}
			else if ($mods ==5)	
			{
				select -add {$rigName + $controlName};
			}
		}
	}
	else
	{
		invalidName;
		select $rig;
	}
}


//RIGHT ARM TO IK
global proc rArmToIK_Ex(string $rigName)
{
	$rShoulderFKtoIKOrientLctr_R = `xform -q -ro {$rigName + "_rShoulderFKtoIKOrientLctr"}`;
	setAttr {$rigName + "_rShoulderFKC.rotateX"} $rShoulderFKtoIKOrientLctr_R[0];
	setAttr {$rigName + "_rShoulderFKC.rotateY"} $rShoulderFKtoIKOrientLctr_R[1];
	setAttr {$rigName + "_rShoulderFKC.rotateZ"} $rShoulderFKtoIKOrientLctr_R[2];
	
	$rElbowIK_R = `getAttr {$rigName + "_rElbowJIK.ry"}`;
	setAttr {$rigName + "_rElbowFKC.rotateY"} ($rElbowIK_R * 1);
	
	$rWristFKtoIKLctr_R = `xform -q -ro {$rigName + "_rWristFKtoIKLctr"}`;
	setAttr {$rigName + "_rWristFKC.rotateX"} $rWristFKtoIKLctr_R[0];
	setAttr {$rigName + "_rWristFKC.rotateY"} $rWristFKtoIKLctr_R[1];
	setAttr {$rigName + "_rWristFKC.rotateZ"} $rWristFKtoIKLctr_R[2];	
	$rWristIKC_S = `getAttr {$rigName + "_rWristIKC.sx"}`;
	setAttr {$rigName + "_rWristFKC.sx"} $rWristIKC_S;

	setAttr {$rigName + "_rArmSwitchC.SwitchIkFk"} 1;

	$rShoulderIKScale = `getAttr {$rigName + "_rShoulderJIK.sx"}`;
	setAttr {$rigName + "_rShoulderFKC.sx"} $rShoulderIKScale;
}

global proc rArmToIK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		rArmToIK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//RIGHT ARM TO FK
global proc rArmToFK_Ex(string $rigName)
{	
		$rWristIKtoFKLctr_T = `xform -q -t {$rigName + "_rWristIKtoFKLctr"}`;
		$rWristIKtoFKLctr_R = `xform -q -ro {$rigName + "_rWristIKtoFKLctr"}`;
		$rWristFKGRot = `xform -q -ro {$rigName + "_rWristFKCG"}`;
		$rWristFKC_S = `getAttr {$rigName + "_rWristFKC.sx"}`;
		
		setAttr {$rigName + "_rWristIKC.translateX"} $rWristIKtoFKLctr_T[0];
		setAttr {$rigName + "_rWristIKC.translateY"} $rWristIKtoFKLctr_T[1];
		setAttr {$rigName + "_rWristIKC.translateZ"} $rWristIKtoFKLctr_T[2];
		setAttr {$rigName + "_rWristIKC.rotateX"} $rWristIKtoFKLctr_R[0];
		setAttr {$rigName + "_rWristIKC.rotateY"} $rWristIKtoFKLctr_R[1];
		setAttr {$rigName + "_rWristIKC.rotateZ"} $rWristIKtoFKLctr_R[2];
		setAttr {$rigName + "_rWristIKC.sx"} $rWristFKC_S;
	
		$rElbowIKtoFKAimLctr_T = `xform -q -t {$rigName + "_rElbowIKtoFKAimLctr"}`;
		setAttr {$rigName + "_rElbowIKC.translateX"} $rElbowIKtoFKAimLctr_T[0];
		setAttr {$rigName + "_rElbowIKC.translateY"} $rElbowIKtoFKAimLctr_T[1];
		setAttr {$rigName + "_rElbowIKC.translateZ"} $rElbowIKtoFKAimLctr_T[2];
	
		setAttr {$rigName + "_rArmSwitchC.SwitchIkFk"} 0;
	
		setAttr {$rigName + "_rWristIKC.ElbowLock"} 0;
		$rShoulderFK_S = `getAttr {$rigName + "_rShoulderFKC.sx"}`;
		$rShoulder_S_MD = `getAttr {$rigName + "_rShoulderScale_MD.input1X"}`;
		setAttr {$rigName + "_rWristIKC.ArmScale"} ($rShoulderFK_S/$rShoulder_S_MD);
}

global proc rArmToFK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		rArmToFK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}


//RIGHT LEG TO IK
global proc rLegToIK_Ex(string $rigName)
{
	$rHipFKtoIKOrientLctr = `xform -q -ro {$rigName + "_rHipFKtoIKOrientLctr"}`;
	setAttr {$rigName + "_rHipFKC.rotateX"} $rHipFKtoIKOrientLctr[0];
	setAttr {$rigName + "_rHipFKC.rotateY"} $rHipFKtoIKOrientLctr[1];
	setAttr {$rigName + "_rHipFKC.rotateZ"} $rHipFKtoIKOrientLctr[2];
	
	$rKneeIK_R = `getAttr {$rigName + "_rKneeJIK.rz"}`;
	setAttr {$rigName + "_rKneeFKC.rotateZ"} ($rKneeIK_R * 1);
	
	$rAnkleFKtoIKLctr_R = `xform -q -ro {$rigName + "_rAnkleFKtoIKLctr"}`;
	setAttr {$rigName + "_rAnkleFKC.rotateX"} ($rAnkleFKtoIKLctr_R[1] * -1);
	setAttr {$rigName + "_rAnkleFKC.rotateY"} ($rAnkleFKtoIKLctr_R[2] * 1);
	setAttr {$rigName + "_rAnkleFKC.rotateZ"} ($rAnkleFKtoIKLctr_R[0] * -1);

	setAttr {$rigName + "_rLegSwitchC.SwitchIkFk"} 1;

	$rHipIKScale = `getAttr {$rigName + "_rHipJIK.sx"}`;
	setAttr {$rigName + "_rHipFKC.sx"} $rHipIKScale;
}

global proc rLegToIK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		rLegToIK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//RIGHT LEG TO FK
global proc rLegToFK_Ex(string $rigName)
{	
	$rAnkleIKtoFKLctr_T = `xform -q -t {$rigName + "_rAnkleIKtoFKLctr"}`;
	$rAnkleIKtoFKLctr_R = `xform -q -ro {$rigName + "_rAnkleIKtoFKLctr"}`;
	$rAnkleFKCG_R = `xform -q -ro {$rigName + "_rAnkleFKCG"}`;
	setAttr {$rigName + "_rFootIKC.translateX"} $rAnkleIKtoFKLctr_T[0];
	setAttr {$rigName + "_rFootIKC.translateY"} $rAnkleIKtoFKLctr_T[1];
	setAttr {$rigName + "_rFootIKC.translateZ"} $rAnkleIKtoFKLctr_T[2];
	setAttr {$rigName + "_rFootIKC.rotateX"} $rAnkleIKtoFKLctr_R[0];
	setAttr {$rigName + "_rFootIKC.rotateY"} $rAnkleIKtoFKLctr_R[1];
	setAttr {$rigName + "_rFootIKC.rotateZ"} $rAnkleIKtoFKLctr_R[2];
	
	$rKneeIKtoFKAimLctr_T = `xform -q -t {$rigName + "_rKneeIKtoFKAimLctr"}`;
	setAttr {$rigName + "_rKneeIKC.translateX"} $rKneeIKtoFKAimLctr_T[0];
	setAttr {$rigName + "_rKneeIKC.translateY"} $rKneeIKtoFKAimLctr_T[1];
	setAttr {$rigName + "_rKneeIKC.translateZ"} $rKneeIKtoFKAimLctr_T[2];
	
	setAttr {$rigName + "_rLegSwitchC.SwitchIkFk"} 0;
	
	setAttr {$rigName + "_rFootIKC.KneeLock"} 0;
	$rHipFK_S = `getAttr {$rigName + "_rHipFKC.sx"}`;
	$rHip_S_MD = `getAttr {$rigName + "_rHipScale_MD.input1X"}`;
	setAttr {$rigName + "_rFootIKC.LegScale"} ($rHipFK_S/$rHip_S_MD);
}

global proc rLegToFK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		rLegToFK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//LEFT ARM TO IK
global proc lArmToIK_Ex(string $rigName)
{
	$lShoulderFKtoIKOrientLctr_R = `xform -q -ro {$rigName + "_lShoulderFKtoIKOrientLctr"}`;
	setAttr {$rigName + "_lShoulderFKC.rotateX"} $lShoulderFKtoIKOrientLctr_R[0];
	setAttr {$rigName + "_lShoulderFKC.rotateY"} $lShoulderFKtoIKOrientLctr_R[1];
	setAttr {$rigName + "_lShoulderFKC.rotateZ"} $lShoulderFKtoIKOrientLctr_R[2];
	
	$lElbowIK_R = `getAttr {$rigName + "_lElbowJIK.ry"}`;
	setAttr {$rigName + "_lElbowFKC.rotateY"} ($lElbowIK_R * 1);
	
	$lWristFKtoIKLctr_R = `xform -q -ro {$rigName + "_lWristFKtoIKLctr"}`;
	setAttr {$rigName + "_lWristFKC.rotateX"} $lWristFKtoIKLctr_R[0];
	setAttr {$rigName + "_lWristFKC.rotateY"} $lWristFKtoIKLctr_R[1];
	setAttr {$rigName + "_lWristFKC.rotateZ"} $lWristFKtoIKLctr_R[2];	
	$lWristIKC_S = `getAttr {$rigName + "_lWristIKC.sx"}`;
	setAttr {$rigName + "_lWristFKC.sx"} $lWristIKC_S;	

	setAttr {$rigName + "_lArmSwitchC.SwitchIkFk"} 1;
	
	$lShoulderIKScale = `getAttr {$rigName + "_lShoulderJIK.sx"}`;
	setAttr {$rigName + "_lShoulderFKC.sx"} $lShoulderIKScale;
}

global proc lArmToIK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		lArmToIK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//LEFT ARM TO FK
global proc lArmToFK_Ex(string $rigName)
{
	$lWristIKtoFKLctr_T = `xform -q -t {$rigName + "_lWristIKtoFKLctr"}`;
	$lWristIKtoFKLctr_R = `xform -q -ro {$rigName + "_lWristIKtoFKLctr"}`;
	$lWristFKGRot = `xform -q -ro {$rigName + "_lWristFKCG"}`;
	$lWristFKC_S = `getAttr {$rigName + "_lWristFKC.sx"}`;
	setAttr {$rigName + "_lWristIKC.translateX"} $lWristIKtoFKLctr_T[0];
	setAttr {$rigName + "_lWristIKC.translateY"} $lWristIKtoFKLctr_T[1];
	setAttr {$rigName + "_lWristIKC.translateZ"} $lWristIKtoFKLctr_T[2];
	setAttr {$rigName + "_lWristIKC.rotateX"} $lWristIKtoFKLctr_R[0];
	setAttr {$rigName + "_lWristIKC.rotateY"} $lWristIKtoFKLctr_R[1];
	setAttr {$rigName + "_lWristIKC.rotateZ"} $lWristIKtoFKLctr_R[2];
	setAttr {$rigName + "_lWristIKC.sx"} $lWristFKC_S;

	$lElbowIKtoFKAimLctr_T = `xform -q -t {$rigName + "_lElbowIKtoFKAimLctr"}`;
	setAttr {$rigName + "_lElbowIKC.translateX"} $lElbowIKtoFKAimLctr_T[0];
	setAttr {$rigName + "_lElbowIKC.translateY"} $lElbowIKtoFKAimLctr_T[1];
	setAttr {$rigName + "_lElbowIKC.translateZ"} $lElbowIKtoFKAimLctr_T[2];

	setAttr {$rigName + "_lArmSwitchC.SwitchIkFk"} 0;

	setAttr {$rigName + "_lWristIKC.ElbowLock"} 0;
	$lShoulderFK_S = `getAttr {$rigName + "_lShoulderFKC.sx"}`;
	$lShoulder_S_MD = `getAttr {$rigName + "_lShoulderScale_MD.input1X"}`;
	setAttr {$rigName + "_lWristIKC.ArmScale"} ($lShoulderFK_S/$lShoulder_S_MD);
}

global proc lArmToFK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		lArmToFK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//LEFT LEG TO IK
global proc lLegToIK_Ex(string $rigName)
{
	$lHipFKtoIKOrientLctr = `xform -q -ro {$rigName + "_lHipFKtoIKOrientLctr"}`;
	setAttr {$rigName + "_lHipFKC.rotateX"} $lHipFKtoIKOrientLctr[0];
	setAttr {$rigName + "_lHipFKC.rotateY"} $lHipFKtoIKOrientLctr[1];
	setAttr {$rigName + "_lHipFKC.rotateZ"} $lHipFKtoIKOrientLctr[2];
	
	$lKneeIK_R = `getAttr {$rigName + "_lKneeJIK.rz"}`;
	setAttr {$rigName + "_lKneeFKC.rotateZ"} ($lKneeIK_R * 1);
	
	$lAnkleFKtoIKLctr_R = `xform -q -ro {$rigName + "_lAnkleFKtoIKLctr"}`;
	setAttr {$rigName + "_lAnkleFKC.rotateX"} ($lAnkleFKtoIKLctr_R[1] * -1);
	setAttr {$rigName + "_lAnkleFKC.rotateY"} ($lAnkleFKtoIKLctr_R[2] * 1);
	setAttr {$rigName + "_lAnkleFKC.rotateZ"} ($lAnkleFKtoIKLctr_R[0] * -1);

	setAttr {$rigName + "_lLegSwitchC.SwitchIkFk"} 1;

	$lHipIKScale = `getAttr {$rigName + "_lHipJIK.sx"}`;
	setAttr {$rigName + "_lHipFKC.sx"} $lHipIKScale;
}

global proc lLegToIK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		lLegToIK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//LEFT LEG TO FK
global proc lLegToFK_Ex(string $rigName)
{	
	$lAnkleIKtoFKLctr_T = `xform -q -t {$rigName + "_lAnkleIKtoFKLctr"}`;
	$lAnkleIKtoFKLctr_R = `xform -q -ro {$rigName + "_lAnkleIKtoFKLctr"}`;
	$lAnkleFKCG_R = `xform -q -ro {$rigName + "_lAnkleFKCG"}`;
	setAttr {$rigName + "_lFootIKC.translateX"} $lAnkleIKtoFKLctr_T[0];
	setAttr {$rigName + "_lFootIKC.translateY"} $lAnkleIKtoFKLctr_T[1];
	setAttr {$rigName + "_lFootIKC.translateZ"} $lAnkleIKtoFKLctr_T[2];
	setAttr {$rigName + "_lFootIKC.rotateX"} $lAnkleIKtoFKLctr_R[0];
	setAttr {$rigName + "_lFootIKC.rotateY"} $lAnkleIKtoFKLctr_R[1];
	setAttr {$rigName + "_lFootIKC.rotateZ"} $lAnkleIKtoFKLctr_R[2];

	$lKneeIKtoFKAimLctr_T = `xform -q -t {$rigName + "_lKneeIKtoFKAimLctr"}`;
	setAttr {$rigName + "_lKneeIKC.translateX"} $lKneeIKtoFKAimLctr_T[0];
	setAttr {$rigName + "_lKneeIKC.translateY"} $lKneeIKtoFKAimLctr_T[1];
	setAttr {$rigName + "_lKneeIKC.translateZ"} $lKneeIKtoFKAimLctr_T[2];

	setAttr {$rigName + "_lLegSwitchC.SwitchIkFk"} 0;

	setAttr {$rigName + "_lFootIKC.KneeLock"} 0;
	$lHipFK_S = `getAttr {$rigName + "_lHipFKC.sx"}`;
	$lHip_S_MD = `getAttr {$rigName + "_lHipScale_MD.input1X"}`;
	setAttr {$rigName + "_lFootIKC.LegScale"} ($lHipFK_S/$lHip_S_MD);
}

global proc lLegToFK()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		lLegToFK_Ex($rigName);
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//SELECT ALL CONTROLS//////////////////////////////////////////////////////////////////////


global proc selectAllControlsAdv(string $rigName)
{
	select ($rigName + "_*C");
}

global proc selectAllControlsCheckAdv()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
			select $rigName;
			selectAllControlsAdv($rigName);
	}
	else
	{	
		controlDialog;
	}
}

global proc deselectAllControls()
{select -d;}

////////////////////////////////////////////////////////////////////////////
//BOTTOM BUTTONS////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
global proc resetTransformsAdv()
{
	string $rig[] = `ls -sl`;
	string $currentControl;
	for ($currentControl in $rig)
	{
		$lockTX = `getAttr -lock ($currentControl + ".tx")`;
		$lockTY = `getAttr -lock ($currentControl + ".ty")`;
		$lockTZ = `getAttr -lock ($currentControl + ".tz")`;
		$lockRX = `getAttr -lock ($currentControl + ".rx")`;
		$lockRY = `getAttr -lock ($currentControl + ".ry")`;
		$lockRZ = `getAttr -lock ($currentControl + ".rz")`;
		$lockSX = `getAttr -lock ($currentControl + ".sx")`;
		$lockSY = `getAttr -lock ($currentControl + ".sy")`;
		$lockSZ = `getAttr -lock ($currentControl + ".sz")`;
	
		if ($lockTX == 0)
		{
			setAttr {$currentControl + ".tx"} 0;
		}
		if ($lockTY == 0)
		{
			setAttr {$currentControl + ".ty"} 0;
		}
		if ($lockTZ == 0)
		{
			setAttr {$currentControl + ".tz"} 0;
		}
		if ($lockRX == 0)
		{
			setAttr {$currentControl + ".rx"} 0;
		}
		if ($lockRY == 0)
		{
			setAttr {$currentControl + ".ry"} 0;
		}
		if ($lockRZ == 0)
		{
			setAttr {$currentControl + ".rz"} 0;
		}
		if ($lockSX == 0)
		{
			setAttr {$currentControl + ".sx"} 1;
		}
		if ($lockSY == 0)
		{
			setAttr {$currentControl + ".sy"} 1;
		}
		if ($lockSZ == 0)
		{
			setAttr {$currentControl + ".sz"} 1;
		}
	}
}

global proc resetTransformsCheckAdv()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	$applyToCheck = `checkBox -q -v resetTransformsAdvApplyTo`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		if ($applyToCheck == 1)
		{
			select {$rigName + "_*C"};
		}
		resetTransformsAdv;
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

global proc resetExtrasAdv()
{
	string $rig[] = `ls -sl`;
	string $currentC;
	for ($currentC in $rig)
	{
		//SPINE
		if (`objExists ($currentC + ".SpineAutoVolume")`)
		{
			setAttr ($currentC + ".SpineAutoVolume") 1;
		}
		if (`objExists ($currentC + ".SpineTopOrient")`)
		{
			setAttr ($currentC + ".SpineTopOrient") 1;
		}
		if (`objExists ($currentC + ".SpineCurve")`)
		{
			setAttr ($currentC + ".SpineCurve") 1;
		}
		//NECK
		if (`objExists ($currentC + ".NeckOrient")`)
		{
			setAttr ($currentC + ".NeckOrient") 1;
		}				
		if (`objExists ($currentC + ".NeckAutoVolume")`)
		{
			setAttr ($currentC + ".NeckAutoVolume") 1;
		}	
		if (`objExists ($currentC + ".AutoVolume")`)
		{
			setAttr ($currentC + ".AutoVolume") 1;
		}
		//HEAD
		if (`objExists ($currentC + ".HeadOrient")`)
		{
			setAttr ($currentC + ".HeadOrient") 1;
		}
		//EYES
		if (`objExists ($currentC + ".AutoAim")`)
		{
			setAttr ($currentC + ".AutoAim") 1;
		}
		if (`objExists ($currentC + ".LocalGlobal")`)
		{
			setAttr ($currentC + ".LocalGlobal") 1;
		}

		
		
		//ARMS
		if (`objExists ($currentC + ".ShoulderOrient")`)
		{
			setAttr ($currentC + ".ShoulderOrient") 1;
		}					
		if (`objExists ($currentC + ".ClavicleInfluence")`)
		{
			setAttr ($currentC + ".ClavicleInfluence") 0;
		}
		
		//IK HANDS
		if (`objExists ($currentC + ".Stretch")`)
		{
			setAttr ($currentC + ".Stretch") 0;
		}				
		if (`objExists ($currentC + ".ElbowLock")`)
		{
			setAttr ($currentC + ".ElbowLock") 0;
		}
		if (`objExists ($currentC + ".ArmScale")`)
		{
			setAttr ($currentC + ".ArmScale") 1;
		}
		if (`objExists ($currentC + ".Hips")`)
		{
			setAttr ($currentC + ".Hips") 0;
		}
		if (`objExists ($currentC + ".Chest")`)
		{
			setAttr ($currentC + ".Chest") 0;
		}
		if (`objExists ($currentC + ".Head")`)
		{
			setAttr ($currentC + ".Head") 0;
		}
		
		//IK ELBOWS
		if (`objExists ($currentC + ".Follow")`)
		{
			setAttr ($currentC + ".Follow") 0;
		}
							
		//IKFK SWITCH
		if (`gmatch $currentC ($rig[0] + "_?ArmSwitchC")`)
		{
			if (`objExists ($currentC + ".SwitchIkFk")`)
			{
				setAttr ($currentC + ".SwitchIkFk") 1;
			}
		}
		if (`gmatch $currentC ($rig[0] + "_?LegSwitchC")`)
		{
			if (`objExists ($currentC + ".SwitchIkFk")`)
			{
				setAttr ($currentC + ".SwitchIkFk") 0;
			}
		}
		if (`objExists ($currentC + ".AutoVolume")`)
		{
			setAttr ($currentC + ".AutoVolume") 1;
		}
		if (`objExists ($currentC + ".curve")`)
		{
			setAttr ($currentC + ".curve") 0;
			if (`objExists ($currentC + ".upperCurve")`)
			{
				setAttr ($currentC + ".upperCurve") 0;
				setAttr ($currentC + ".midCurve") 0;
				setAttr ($currentC + ".lowerCurve") 0;
			}			
		}
			//THUMB CHANNELS
		if (`objExists ($currentC + ".thumbChannels")`)
		{
			setAttr ($currentC + ".thumbCurl1") 0;
			setAttr ($currentC + ".thumbCurl2") 0;
			setAttr ($currentC + ".thumbCurl3") 0;
			setAttr ($currentC + ".thumbSplay1") 0;
			setAttr ($currentC + ".thumbSplay2") 0;
			setAttr ($currentC + ".thumbSplay3") 0;
			setAttr ($currentC + ".thumbTwist1") 0;
			setAttr ($currentC + ".thumbTwist2") 0;
			setAttr ($currentC + ".thumbTwist3") 0;
		}
		
			//FINGER CHANNELS
		$i = 1;
		$end = 0;
		
		while ($i != $end)
		{
			if (`objExists ($currentC + ".finger" + $i + "Channels")`)
			{
				setAttr ($currentC + ".finger" + $i + "Curl1")  0;
				setAttr ($currentC + ".finger" + $i + "Curl2")  0;
				setAttr ($currentC + ".finger" + $i + "Curl3")  0;
				setAttr ($currentC + ".finger" + $i + "Splay1") 0;
				setAttr ($currentC + ".finger" + $i + "Splay2") 0;
				setAttr ($currentC + ".finger" + $i + "Splay3") 0;
				setAttr ($currentC + ".finger" + $i + "Twist1") 0;
				setAttr ($currentC + ".finger" + $i + "Twist2") 0;
				setAttr ($currentC + ".finger" + $i + "Twist3") 0;
				$i++;
			}
			$end++;
		}
		if (`objExists ($currentC + ".palmInfluence")`)
		{
			setAttr ($currentC + ".palmInfluence") 1;
		}
			
		
			//TOE CHANNELS
		$i = 1;
		$end = 0;
		$nPad = "0";
		
		while ($i != $end)
		{
			if ($i >= 10)
			{
				$nPad = "";
			}
			if (`objExists ($currentC + ".toe" + $nPad + $i + "Channels")`)
			{
				setAttr ($currentC + ".toe" + $nPad + $i + "Curl1")  0;
				setAttr ($currentC + ".toe" + $nPad + $i + "Curl2")  0;
				setAttr ($currentC + ".toe" + $nPad + $i + "Splay1") 0;
				setAttr ($currentC + ".toe" + $nPad + $i + "Splay2") 0;
				setAttr ($currentC + ".toe" + $nPad + $i + "Twist1") 0;
				setAttr ($currentC + ".toe" + $nPad + $i + "Twist2") 0;

				if ($i > 1)
				{
					setAttr ($currentC + ".toe" + $nPad + $i + "Curl3")  0;
					setAttr ($currentC + ".toe" + $nPad + $i + "Splay3") 0;
					setAttr ($currentC + ".toe" + $nPad + $i + "Twist3") 0;
				}
				
				$i++;
			}
			$end++;
		}
		
		//LEGS
		if (`objExists ($currentC + ".HipOrient")`)
		{
			setAttr {$currentC + ".HipOrient"} 1;
		}
		if (`objExists ($currentC + ".AutoVolume")`)
		{
			setAttr {$currentC + ".AutoVolume"} 1;
		}
		//IK FEET
		if (`objExists ($currentC + ".KneeLock")`)
		{
			setAttr {$currentC + ".KneeLock"} 0;
		}
		if (`objExists ($currentC + ".LegScale")`)
		{
			setAttr {$currentC + ".LegScale"} 1;
		}					
		if (`objExists ($currentC + ".footTilt")`)
		{
			setAttr {$currentC + ".footTilt"} 0;
		}
		if (`objExists ($currentC + ".heelBall")`)
		{
			setAttr {$currentC + ".heelBall"} 0;
		}
		if (`objExists ($currentC + ".toeUpDn")`)
		{
			setAttr {$currentC + ".toeUpDn"} 0;
		}					
		if (`objExists ($currentC + ".ballSwivel")`)
		{
			setAttr {$currentC + ".ballSwivel"} 0;
		}
	}
}
				
global proc resetExtrasCheckAdv()
{
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	$applyToCheck = `checkBox -q -v resetExtrasAdvApplyTo`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "NOTHING SELECTED";
			}
		}
		else
		{
			error "CURRENT SELECTED OBJECT IS NOT A RIG CONTROL";
		}
	}
	if (`objExists $rigName`)
	{
		if ($applyToCheck == 1)
		{
			select {$rigName + "_*C"};
		}
		resetExtrasAdv;
	}
	else
	{	
		controlDialog;
	}
	select $rig;
}

//MIRROR LOCATORS////////////////////////////////////////////////////////////////////////////////////
global proc createMirrorLctrs()
{
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select /*{$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"}*/ {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"};
	}
	$rigControls = `ls -sl`;
	string $currentC;
	if (`objExists ($rigName[0] + "_mLctrG")`)
	{
		delete {$rigName[0] + "_mLctrG"};
	}

	group -em -n {$rigName[0] + "_mLctrG"};
	setAttr {$rigName[0] + "_mLctrG.visibility"} 0;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			spaceLocator -n {$currentC + "_mLctr"};
			
			parent {$currentC + "_mLctr"} {$rigName[0] + "_mLctrG"};
			//LOCK AND HIDE CHANNELS
			if (`getAttr -k ($currentC + ".translateX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.translateX");}
			if (`getAttr -k ($currentC + ".translateY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.translateY");}
			if (`getAttr -k ($currentC + ".translateZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.translateZ");}
			if (`getAttr -k ($currentC + ".rotateX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.rotateX");}
			if (`getAttr -k ($currentC + ".rotateY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.rotateY");}
			if (`getAttr -k ($currentC + ".rotateZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.rotateZ");}
			if (`getAttr -k ($currentC + ".scaleX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.scaleX");}
			if (`getAttr -k ($currentC + ".scaleY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.scaleY");}
			if (`getAttr -k ($currentC + ".scaleZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.scaleZ");}
			if (`getAttr -k ($currentC + ".v")`){}
			else {setAttr -k 0 ($currentC + "_mLctr.v");}
			
			//ADD ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			for ($currentChannel in $channels)
			{
				if (!`objExists ($currentC + "_mLctr." + $currentChannel)`)
				{
					addAttr -ln $currentChannel  -at double -dv 1 ($currentC + "_mLctr");
					setAttr -e-k true ($currentC + "_mLctr." + $currentChannel);
				}
			}

			//ADD CUSTOM FRAME ATTRIBUTE
			addAttr -ln "CurrentFrame"  -at double  {$currentC + "_mLctr"};
			setAttr -e-k true {$currentC + "_mLctr.CurrentFrame"};
			float $currentFrame = `currentTime -q`;
			setAttr {$currentC + "_mLctr.CurrentFrame"} $currentFrame;
			setAttr -lock true {$currentC + "_mLctr.CurrentFrame"};
		}
	}
	select $rig;
}

//SET TO LOCATOR CHANNELS////////////////////////////////////////////////////////////
global proc setToMirrorLocatorChannelsCenter()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{
					$channel = `getAttr ($currentC + "." + $currentChannel)`;
					setAttr ($currentC + "_mLctr." + $currentChannel) $channel;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setToMirrorLocatorChannelsLeft()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				$channel = `getAttr ($currentC + "." + $currentChannel)`;
				setAttr ($currentC + "_mLctr." + $currentChannel) $channel;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setToMirrorLocatorChannelsRight()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				$channel = `getAttr ($currentC + "." + $currentChannel)`;
				setAttr ($currentC + "_mLctr." + $currentChannel) $channel;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

//SET TO LOCATOR KEYS////////////////////////////////////////////////////////////
global proc setToMirrorLocatorKeysCenter()
{
	float $currentFrame = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//FIND KEYABLE ATTRIBUTES
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{
					//CHECK IF ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							if ($AnimCurve=="character")
							{
								string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
								{
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
							}
							else
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
								{
									$AnimConnection = ($currentC + "." + $currentChannel);
								}
							}
							//CHECK FOR KEYFRAME
							$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
							//print ($KeyCheck[0] + "\n");
							if ($KeyCheck[0] > 0)
							{
								//print "setToMirrorLocatorKeysCenter keyCheck works\n";
								$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
								$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
								$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
								$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
								$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
								$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
								$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
								$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
								
								//SET KEY
								setKeyframe -t $currentFrame {$currentC + "_mLctr." + $currentChannel};
								keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
								{$currentC + "_mLctr_" + $currentChannel};
								keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
								-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};
								if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
								{
									keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
									-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
								}
								if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
								}
								keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};						
							}
						}
					}
				}
			}
		}
	}
	select$rig;
}

global proc setToMirrorLocatorKeysLeft()
{
	float $currentFrame    = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//CHECK IF ANIMATED
				$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
				if ($AnimCheck == 1)
				{
					//CHECK WHAT IS ANIMATING IT
					string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
					//CHECK FOR ANIM CURVE
					$AnimCurve = `nodeType $AnimConnection`;
					string $AnimCurveString = $AnimCurve;
					if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
					{
						if ($AnimCurve=="character")
						{
							string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
							if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
							{
								$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
							}
						}
						else
						{
							$AnimConnection = ($currentC + "_" + $currentChannel);
							if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
							{
								$AnimConnection = ($currentC + "." + $currentChannel);
							}
						}
						//CHECK FOR KEYFRAME
						$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
						//print ($KeyCheck[0] + "\n");
						if ($KeyCheck[0] > 0)
						{
							//print "setToMirrorLocatorKeysLeft keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
							
							//SET KEY
							setKeyframe -t $currentFrame {$currentC + "_mLctr." + $currentChannel};
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							{$currentC + "_mLctr_" + $currentChannel};
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
							}
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};						
						}
					}
				}
			}
		}
	}
	select$rig;
}

global proc setToMirrorLocatorKeysRight()
{
	float $currentFrame    = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//CHECK IF ANIMATED
				$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
				if ($AnimCheck == 1)
				{
					//CHECK WHAT IS ANIMATING IT
					string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
					//CHECK FOR ANIM CURVE
					$AnimCurve = `nodeType $AnimConnection`;
					string $AnimCurveString = $AnimCurve;
					if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
					{
						if ($AnimCurve=="character")
						{
							string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
							if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
							{
								$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
							}
						}
						else
						{
							$AnimConnection = ($currentC + "_" + $currentChannel);
							if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
							{
								$AnimConnection = ($currentC + "." + $currentChannel);
							}
						}
						//CHECK FOR KEYFRAME
						$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
						if ($KeyCheck[0] > 0)
						{
							//print "setToMirrorLocatorKeysRight keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
							
							//SET KEY
							setKeyframe -t $currentFrame {$currentC + "_mLctr." + $currentChannel};
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							{$currentC + "_mLctr_" + $currentChannel};
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_" + $currentChannel};
							}
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_" + $currentChannel};						
						}
					}
				}
			}
		}
	}
	select $rig;
}

//SET FROM LOCATOR CHANNELS////////////////////////////////////////////////////////////
global proc setFromMirrorLocatorChannelsCenter()
{
	//print "mirror from locators runs\n";
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;
		
		//CENTER
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//print ("current Control is " + $currentC + "\n");
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				int $i=0;
				while ($i < $numChannels)
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "rotateY"||$channels[$i] == "rotateZ")
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$currentC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$currentC + "." + $channels[$i]} $channelVal;
					}
				$i++;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setFromMirrorLocatorChannelsLeft()
{
	//print "mirror from locators runs\n";
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;

		//LEFT TO RIGHT
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//print ("current Control is " + $currentC + "\n");
			string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			int $i=0;
			while ($i < $numChannels)
			{
				if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC")||$currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
				{
					if ($channels[$i] == "translateX")
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} $channelVal;
					}
					if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
					{
						if (($channels[$i] == "rotateY")||($channels[$i] == "rotateZ"))
						{
							$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
							setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
						}
					}
				}
				else
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} $channelVal;
					}
				}
			$i++;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setFromMirrorLocatorChannelsRight()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;

		//RIGHT TO LEFT
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			int $i=0;
			while ($i < $numChannels)
			{
				if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC")||$currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
				{
					if ($channels[$i] == "translateX")
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} $channelVal;
					}
					if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
					{
						if (($channels[$i] == "rotateY")||($channels[$i] == "rotateZ"))
						{
							$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
							setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
						}
					}
				}
				else
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $previousFrame {$currentC + "_mLctr." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} $channelVal;
					}
				}
			$i++;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}


//SET FROM LOCATOR KEYS////////////////////////////////////////////////////////////
global proc setFromMirrorLocatorKeysCenter()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"}  {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//GET PREVIOUS TIME
				float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;

				string $AnimConnection;
				/*string $OppositeAnimConnection;*/
				//DEFINE OPPOSITE CONTROL
				/*string $oppositeC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;*/
				//FIND KEYABLE ATTRIBUTES
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{		
					//CHECK IF ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								/*//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$AnimConnection = `substitute ($buffer[($numTokens-3)] + "_l") $AnimConnection ($buffer[($numTokens-3)] + "_r")`;
								if (!`objExists $AnimConnection`)
								{
									$AnimConnection = `substitute ("_" + $currentChannel) $AnimConnection ("." + $currentChannel)`;
								}*/
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								/*$AnimConnection = ($oppositeC + "." + $currentChannel);*/
							}
							//CHECK FOR KEYFRAME
							$KeyCheck[0] = `keyframe -t $previousFrame -q -keyframeCount {$currentC + "_mLctr." + $currentChannel}`;
							if ($KeyCheck[0] > 0)
							{
								//print "setFromMirrorLocatorKeysCenter keyCheck works\n";
								$inTangentCurrentC     = `keyTangent -t $previousFrame -q -inAngle ($currentC + "_mLctr_" + $currentChannel)`;
								$outTangentCurrentC    = `keyTangent -t $previousFrame -q -outAngle ($currentC + "_mLctr_" + $currentChannel)`;
								$inWeightCurrentC      = `keyTangent -t $previousFrame -q -inWeight ($currentC + "_mLctr_" + $currentChannel)`;
								$outWeightCurrentC     = `keyTangent -t $previousFrame -q -outWeight ($currentC + "_mLctr_" + $currentChannel)`;
								$inTangentTypeCurrentC = `keyTangent -t $previousFrame -q -inTangentType ($currentC + "_mLctr_" + $currentChannel)`;
								$outTangentTypeCurrentC= `keyTangent -t $previousFrame -q -outTangentType ($currentC + "_mLctr_" + $currentChannel)`;
								$lockCurrentC          = `keyTangent -t $previousFrame -q -lock ($currentC + "_mLctr_" + $currentChannel)`;
								$weightedCurrentC      = `keyTangent -t $previousFrame -q -weightedTangents ($currentC + "_mLctr_" + $currentChannel)`;
								
								//SUBSTITUTE
								/*string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;*/
								//SET KEY
								if (`objExists ($AnimConnection + "2")`)
								{
									rename ($AnimConnection + "2") $AnimConnection;
								}
								setKeyframe -t $currentFrame $AnimConnection;
								keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0] $AnimConnection;
								keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
								-outTangentType $outTangentTypeCurrentC[0] $AnimConnection;

								if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
								{
									if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
								}
								if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
								{
									if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($inTangentCurrentC[0]*-1)
										-outWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $inTangentCurrentC[0]
										-outWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
								}
								//KEY ATTRIBUTE	
								if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $AnimConnection;
								}
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $AnimConnection;
								}
								keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $AnimConnection;						
							}
							else 
							{
								string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
								cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
							}
						}
					}
					else
					{
						string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
						cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
					}			
				}
			}
		}	
	}
	autoKeyframe -state $autoKey;	
	select$rig;
}

global proc setFromMirrorLocatorKeysLeft()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//print ($currentC+ "\n");
			string $AnimConnection;
			//DEFINE OPPOSITE CONTROL
			string $oppositeC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//GET PREVIOUS TIME
				float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;
				//CHECK FOR LOCATOR KEYFRAME
				$KeyCheck[0] = `keyframe -t $previousFrame -q -keyframeCount {$currentC + "_mLctr." + $currentChannel}`;
				if ($KeyCheck[0] > 0)
				{
					//print ($currentChannel+ "\n");				
					//CHECK IF CONTROLLER IS ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							string $OppositeAnimConnection;
							
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$OppositeAnimConnection = `substitute ($buffer[($numTokens-3)] + "_l") $AnimConnection ($buffer[($numTokens-3)] + "_r")`;
								if (!`objExists $OppositeAnimConnection`)
								{
									$OppositeAnimConnection = `substitute ("_" + $currentChannel) $OppositeAnimConnection ("." + $currentChannel)`;
								}
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								$OppositeAnimConnection = ($oppositeC + "." + $currentChannel);
							}
                	
							//print "setFromMirrorLocatorKeysLeft keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $previousFrame -q -inAngle ($currentC + "_mLctr_" + $currentChannel)`;
							$outTangentCurrentC    = `keyTangent -t $previousFrame -q -outAngle ($currentC + "_mLctr_" + $currentChannel)`;
							$inWeightCurrentC      = `keyTangent -t $previousFrame -q -inWeight ($currentC + "_mLctr_" + $currentChannel)`;
							$outWeightCurrentC     = `keyTangent -t $previousFrame -q -outWeight ($currentC + "_mLctr_" + $currentChannel)`;
							$inTangentTypeCurrentC = `keyTangent -t $previousFrame -q -inTangentType ($currentC + "_mLctr_" + $currentChannel)`;
							$outTangentTypeCurrentC= `keyTangent -t $previousFrame -q -outTangentType ($currentC + "_mLctr_" + $currentChannel)`;
							$lockCurrentC          = `keyTangent -t $previousFrame -q -lock ($currentC + "_mLctr_" + $currentChannel)`;
							$weightedCurrentC      = `keyTangent -t $previousFrame -q -weightedTangents ($currentC + "_mLctr_" + $currentChannel)`;
							//print $inTangentTypeCurrentC;
							//print "\n";
							
							//SUBSTITUTE
							string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
							if (!`objExists $OppositeAnimConnection`)
							{
								$OppositeAnimConnection = ($rightC + "." + $currentChannel);
							}
							//SET KEY
							setKeyframe -t $currentFrame $OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							$OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] $OppositeAnimConnection;
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
								{
									if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else if ($currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}						
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else
								{
									keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
									-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
								{
									if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else if ($currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							//KEY ATTRIBUTE
							if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
							{
								if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
							}
							else if ($currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
							{
								if ($currentChannel == "translateX")
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}										
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
							}
							else
							{
								$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
								keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							}
								
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $OppositeAnimConnection;						
						}
						else 
						{
							string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
							cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
						}
					}
				}
				else
				{
					string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
					cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
				}			
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select$rig;
}

global proc setFromMirrorLocatorKeysRight()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{	
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			string $AnimConnection;
			string $OppositeAnimConnection;
			//DEFINE OPPOSITE CONTROL
			string $oppositeC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//GET PREVIOUS TIME
				float $previousFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;
				//CHECK FOR LOCATOR KEYFRAME
				$KeyCheck[0] = `keyframe -t $previousFrame -q -keyframeCount {$currentC + "_mLctr." + $currentChannel}`;
				if ($KeyCheck[0] > 0)
				{
					//print ($currentChannel+ "\n");				
					//CHECK IF CONTROLLER IS ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							//print ("AnimCurve is " + $AnimCurve + "\n");
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$OppositeAnimConnection = `substitute ($buffer[($numTokens-3)] + "_r") $AnimConnection ($buffer[($numTokens-3)] + "_l")`;
								if (!`objExists $OppositeAnimConnection`)
								{
									$OppositeAnimConnection = `substitute ("_" + $currentChannel) $OppositeAnimConnection ("." + $currentChannel)`;
								}
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								$OppositeAnimConnection = ($oppositeC + "." + $currentChannel);
							}
							//print "setFromMirrorLocatorKeysRight keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $previousFrame -q -inAngle ($currentC + "_mLctr_" + $currentChannel)`;
							$outTangentCurrentC    = `keyTangent -t $previousFrame -q -outAngle ($currentC + "_mLctr_" + $currentChannel)`;
							$inWeightCurrentC      = `keyTangent -t $previousFrame -q -inWeight ($currentC + "_mLctr_" + $currentChannel)`;
							$outWeightCurrentC     = `keyTangent -t $previousFrame -q -outWeight ($currentC + "_mLctr_" + $currentChannel)`;
							$inTangentTypeCurrentC = `keyTangent -t $previousFrame -q -inTangentType ($currentC + "_mLctr_" + $currentChannel)`;
							$outTangentTypeCurrentC= `keyTangent -t $previousFrame -q -outTangentType ($currentC + "_mLctr_" + $currentChannel)`;
							$lockCurrentC          = `keyTangent -t $previousFrame -q -lock ($currentC + "_mLctr_" + $currentChannel)`;
							$weightedCurrentC      = `keyTangent -t $previousFrame -q -weightedTangents ($currentC + "_mLctr_" + $currentChannel)`;
							//print $inTangentTypeCurrentC;
							//print "\n";

							//SUBSTITUTE
							string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
							{
								$OppositeAnimConnection = ($leftC + "." + $currentChannel);
							}							
							//SET KEY
							setKeyframe -t $currentFrame $OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							$OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] $OppositeAnimConnection;
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
								{
									if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else if ($currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else
								{
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
								{
									if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else if ($currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
								}
								else
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							//KEY ATTRIBUTE
							if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
							{
								if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
							}
							else if ($currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
							{
								if ($currentChannel == "translateX")
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}										
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
							}
							else
							{
								$currentVal = `getAttr {$currentC + "_mLctr." + $currentChannel}`;
								keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							}
							
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $OppositeAnimConnection;				
						}
						else 
						{
							string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
							cutKey -t $currentFrame -attribute $currentChannel -option keys $leftC;
						}
					}
				}
				else
				{
					string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
					cutKey -t $currentFrame -attribute $currentChannel -option keys $leftC;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc leftToRightControlsAdv(string $rigName)
{    	
	float $currentFrame    = `currentTime -q`;
	float $destinationFrame = `currentTime -q`;
	int $frameCheck = `checkBox -q -v toFrame`;

	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select $rigName ($rigName + "_*C");
	}
	string $mirroringSelection[] = `ls -sl`;
	createMirrorLctrs;
	print "...";
	setToMirrorLocatorChannelsLeft;
	print "...";
	setToMirrorLocatorKeysLeft;
	print "...";
	if ($frameCheck == 1)
	{
		$destinationFrame = `textField -q -text currentFrameTxtFld`;
		currentTime -update yes $destinationFrame;
	}
	setFromMirrorLocatorChannelsLeft;
	print "...";
	setFromMirrorLocatorKeysLeft;
	print "...";
	setFromMirrorLocatorChannelsLeft;
	print "...";

	delete {$mirroringSelection[0] + "_mLctrG"};
	print "\nLEFT TO RIGHT COMPLETE!\n";
}

global proc leftToRightControlsCheckAdv()
{
	print "MIRRORING LEFT TO RIGHT...";
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
			}
		}
		else
		{
			error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
		}
	}
	if (`objExists $rigName`)
	{
		select $rigName $rig;
		leftToRightControlsAdv($rigName);
	}
	else
	{invalidName;}
	select $rig;
}


global proc rightToLeftControlsAdv(string $rigName)
{
    float $currentFrame    = `currentTime -q`;
	float $destinationFrame = `currentTime -q`;
	int $frameCheck = `checkBox -q -v toFrame`;
	
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select $rigName ($rigName + "_*C");
	}
	string $mirroringSelection[] = `ls -sl`;
	createMirrorLctrs;
	print "...";
	setToMirrorLocatorChannelsRight;
	print "...";
	setToMirrorLocatorKeysRight;
	print "...";
	if ($frameCheck == 1)
	{
		$destinationFrame = `textField -q -text currentFrameTxtFld`;
		currentTime -update yes $destinationFrame;
	}
	setFromMirrorLocatorChannelsRight;
	print "...";
	setFromMirrorLocatorKeysRight;
	print "...";
	setFromMirrorLocatorChannelsRight;
	print "...";
	
	delete {$mirroringSelection[0] + "_mLctrG"};
	print "\nRIGHT TO LEFT COMPLETE!\n";
}

global proc rightToLeftControlsCheckAdv()
{
	print "MIRRORING RIGHT TO LEFT...";
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
			}
		}
		else
		{
			error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
		}
	}
	if (`objExists $rigName`)
	{
		select $rigName $rig;
		rightToLeftControlsAdv($rigName);
	}
	else
	{invalidName;}
	select $rig;
}

global proc mirrorAdv(string $rigName)
{
	float $currentFrame    = `currentTime -q`;
	float $destinationFrame = `currentTime -q`;
	int $frameCheck = `checkBox -q -v toFrame`;
	
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select $rigName ($rigName + "_*C");
	}
	string $mirroringSelection[] = `ls -sl`;
	createMirrorLctrs;
	print "...";
	setToMirrorLocatorChannelsCenter;
	print "...";
	setToMirrorLocatorChannelsLeft;
	print "...";
	setToMirrorLocatorChannelsRight;
	print "...";
	
	setToMirrorLocatorKeysCenter;
	print "...";
	setToMirrorLocatorKeysLeft;
	print "...";
	setToMirrorLocatorKeysRight;
	print "...";

	if ($frameCheck == 1)
	{
		$destinationFrame = `textField -q -text currentFrameTxtFld`;
		currentTime -update yes $destinationFrame;
	}
	setFromMirrorLocatorChannelsCenter;
	print "...";
	setFromMirrorLocatorChannelsLeft;
	print "...";
	setFromMirrorLocatorChannelsRight;
	print "...";
	
	setFromMirrorLocatorKeysCenter;
	print "...";
	setFromMirrorLocatorKeysLeft;
	print "...";
	setFromMirrorLocatorKeysRight;
	print "...";

	setFromMirrorLocatorChannelsCenter;
	print "...";
	setFromMirrorLocatorChannelsLeft;
	print "...";
	setFromMirrorLocatorChannelsRight;
	print "...";

	delete {$mirroringSelection[0] + "_mLctrG"};
	print "\nMIRRORING COMPLETE!\n";
}

global proc mirrorCheckAdv()
{
	print "MIRRORING...";
	string $rig[] = `ls -sl`;
	int $nameCheck = `checkBox -q -v useName`;
	string $rigName = `textField -q -text textFieldEntry`;
	if ($nameCheck == 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			int $rigSize = `size $rig`;
			if ($rigSize == 0)
			{
				error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
			}
		}
		else
		{
			error "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR";
		}
	}
	if (`objExists $rigName`)
	{
		select $rigName $rig; 
		mirrorAdv($rigName);
	}
	else
	{invalidName;}
	select $rig;
}

////////////////////////////////////////////////////////////////////////////////////
//BATCH MIRRORING///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

//MIRROR LOCATORS///////////////////////////////////////////////////////////////////
global proc createBatchMirrorLctrs()
{
	float $currentFrame = `currentTime -q`;	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select /*{$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"}*/ {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"};
	}
	$rigControls = `ls -sl`;
	string $currentC;
	if (`objExists ($rigName[0] + "mBatchLctrG")`)
	{
		delete {$rigName[0] + "mBatchLctrG"};
	}

	group -em -n {$rigName[0] + "mBatchLctrG_Frame" + $currentFrame};
	setAttr {$rigName[0] + "mBatchLctrG_Frame" + $currentFrame + ".visibility"} 0;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			spaceLocator -n {$currentC + "_mLctr_Frame" + $currentFrame};
			
			parent {$currentC + "_mLctr_Frame" + $currentFrame} {$rigName[0] + "mBatchLctrG_Frame" + $currentFrame};
			//LOCK AND HIDE CHANNELS
			if (`getAttr -k ($currentC + ".translateX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".translateX");}
			if (`getAttr -k ($currentC + ".translateY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".translateY");}
			if (`getAttr -k ($currentC + ".translateZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".translateZ");}
			if (`getAttr -k ($currentC + ".rotateX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".rotateX");}
			if (`getAttr -k ($currentC + ".rotateY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".rotateY");}
			if (`getAttr -k ($currentC + ".rotateZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".rotateZ");}
			if (`getAttr -k ($currentC + ".scaleX")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".scaleX");}
			if (`getAttr -k ($currentC + ".scaleY")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".scaleY");}
			if (`getAttr -k ($currentC + ".scaleZ")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".scaleZ");}
			if (`getAttr -k ($currentC + ".v")`){}
			else {setAttr -k 0 ($currentC + "_mLctr_Frame" + $currentFrame + ".v");}
			
			//ADD ATTRIBUTES
			if (`objExists ($currentC + ".spineIK")`)
			{
				addAttr -ln "spineIK"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".spineIK"};
			}
			if (`objExists ($currentC + ".spineMicro")`)
			{
				addAttr -ln "spineMicro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".spineMicro"};
			}
			if (`objExists ($currentC + ".neckIK")`)
			{
				addAttr -ln "neckIK"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".neckIK"};
			}
			if (`objExists ($currentC + ".neckMicro")`)
			{
				addAttr -ln "neckMicro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".neckMicro"};
			}
			if (`objExists ($currentC + ".armCurveMicro")`)
			{
				addAttr -ln "armCurveMicro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".armCurveMicro"};
			}
			if (`objExists ($currentC + ".armCurveMacro")`)
			{
				addAttr -ln "armCurveMacro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".armCurveMacro"};
			}
			if (`objExists ($currentC + ".legCurveMicro")`)
			{
				addAttr -ln "legCurveMicro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".legCurveMicro"};
			}
			if (`objExists ($currentC + ".legCurveMacro")`)
			{
				addAttr -ln "legCurveMacro"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".legCurveMacro"};
			}
			if (`objExists ($currentC + ".SpineAutoVolume")`)
			{
				addAttr -ln "SpineAutoVolume"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".SpineAutoVolume"};
			}
			if (`objExists ($currentC + ".SpineTopOrient")`)
			{
				addAttr -ln "SpineTopOrient"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".SpineTopOrient"};
			}
			if (`objExists ($currentC + ".SpineCurve")`)
			{
				addAttr -ln "SpineCurve"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".SpineCurve"};
			}
			if (`objExists ($currentC + ".HeadOrient")`)
			{
				addAttr -ln "HeadOrient"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".HeadOrient"};
			}
			if (`objExists ($currentC + ".NeckAutoVolume")`)
			{
				addAttr -ln "NeckAutoVolume"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".NeckAutoVolume"};
			}
			if (`objExists ($currentC + ".AutoVolume")`)
			{
				addAttr -ln "AutoVolume"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".AutoVolume"};
			}
			if (`objExists ($currentC + ".NeckOrient")`)
			{
				addAttr -ln "NeckOrient"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".NeckOrient"};
			}
			if (`objExists ($currentC + ".ShoulderOrient")`)
			{
				addAttr -ln "ShoulderOrient"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".ShoulderOrient"};
			}
			if (`objExists ($currentC + ".ClavicleInfluence")`)
			{
				addAttr -ln "ClavicleInfluence"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".ClavicleInfluence"};
			}
			if (`objExists ($currentC + ".SwitchIkFk")`)
			{
				addAttr -ln "SwitchIkFk"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".SwitchIkFk"};
			}
			if (`objExists ($currentC + ".curve")`)
			{
				addAttr -ln "curve"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".curve"};
				if (`objExists ($currentC + ".upperCurve")`)
				{
					addAttr -ln "upperCurve" -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".upperCurve"};
					addAttr -ln "midCurve" -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".midCurve"};
					addAttr -ln "lowerCurve" -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".lowerCurve"};
				}
			}
			if (`objExists ($currentC + ".palmInfluence")`)
			{
				addAttr -ln "palmInfluence"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".palmInfluence"};
			}
			
			//FINGER AND TOE CHANNELS
			//THUMBS
			if (`objExists ($currentC + ".thumbChannels")`)
			{
				addAttr -ln "thumbCurl1"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbCurl1"};
				addAttr -ln "thumbCurl2"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbCurl2"};
				addAttr -ln "thumbCurl3"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbCurl3"};

				addAttr -ln "thumbSplay1"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbSplay1"};
				addAttr -ln "thumbSplay2"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbSplay2"};
				addAttr -ln "thumbSplay3"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbSplay3"};

				addAttr -ln "thumbTwist1"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbTwist1"};
				addAttr -ln "thumbTwist2"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbTwist2"};
				addAttr -ln "thumbTwist3"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".thumbTwist3"};
			}
			//FINGERS
			$i = 1;
			while (`objExists ($currentC + ".finger" + $i + "Channels")`)
			{
				addAttr -ln ("finger" + $i + "Curl1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Curl1"};
				addAttr -ln ("finger" + $i + "Curl2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Curl2"};
				addAttr -ln ("finger" + $i + "Curl3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Curl3"};

				addAttr -ln ("finger" + $i + "Splay1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Splay1"};
				addAttr -ln ("finger" + $i + "Splay2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Splay2"};
				addAttr -ln ("finger" + $i + "Splay3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Splay3"};

				addAttr -ln ("finger" + $i + "Twist1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Twist1"};
				addAttr -ln ("finger" + $i + "Twist2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Twist2"};
				addAttr -ln ("finger" + $i + "Twist3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".finger" + $i + "Twist3"};
				$i++;
			}
			//TOES
			$i = 1;
			string $nPad = "0";
			while (`objExists ($currentC + ".toe" + $nPad + $i + "Channels")`)
			{
				if ($i == 1)
				{
					addAttr -ln ("toe" + $nPad + $i + "Curl1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Curl1"};
					addAttr -ln ("toe" + $nPad + $i + "Curl2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Curl2"};
                	
					addAttr -ln ("toe" + $nPad + $i + "Splay1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Splay1"};
					addAttr -ln ("toe" + $nPad + $i + "Splay2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Splay2"};
                	
					addAttr -ln ("toe" + $nPad + $i + "Twist1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Twist1"};
					addAttr -ln ("toe" + $nPad + $i + "Twist2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Twist2"};
				}
				else 
				{
					addAttr -ln ("toe" + $nPad + $i + "Curl1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Curl1"};
					addAttr -ln ("toe" + $nPad + $i + "Curl2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Curl2"};
					addAttr -ln ("toe" + $nPad + $i + "Curl3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Curl3"};
                	
					addAttr -ln ("toe" + $nPad + $i + "Splay1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Splay1"};
					addAttr -ln ("toe" + $nPad + $i + "Splay2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Splay2"};
					addAttr -ln ("toe" + $nPad + $i + "Splay3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Splay3"};
                	
					addAttr -ln ("toe" + $nPad + $i + "Twist1")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Twist1"};
					addAttr -ln ("toe" + $nPad + $i + "Twist2")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Twist2"};
					addAttr -ln ("toe" + $nPad + $i + "Twist3")  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame + ""};
					setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toe" + $nPad + $i + "Twist3"};
				}
				if ($i >= 10)
				{
					$nPad = "";
				}
				$i++;
			}
			if (`objExists ($currentC + ".Follow")`)
			{
				addAttr -ln "Follow"  -at "enum" -en "Main:Wrist:Shoulder:Wrist and Shoulder:" {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".Follow"};
			}
			if (`objExists ($currentC + ".Stretch")`)
			{
				addAttr -ln "Stretch"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".Stretch"};
			}
			if (`objExists ($currentC + ".ElbowLock")`)
			{
				addAttr -ln "ElbowLock"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".ElbowLock"};
			}
			if (`objExists ($currentC + ".ArmScale")`)
			{
				addAttr -ln "ArmScale"  -at double  -min 0.01 -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".ArmScale"};
			}
			if (`objExists ($currentC + ".Hips")`)
			{
				addAttr -ln "Hips"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".Hips"};
			}
			if (`objExists ($currentC + ".Chest")`)
			{
				addAttr -ln "Chest"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".Chest"};
			}
			if (`objExists ($currentC + ".Head")`)
			{
				addAttr -ln "Head"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".Head"};
			}
			if (`objExists ($currentC + ".HipOrient")`)
			{
				addAttr -ln "HipOrient"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".HipOrient"};
			}
			if (`objExists ($currentC + ".KneeLock")`)
			{
				addAttr -ln "KneeLock"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".KneeLock"};
			}
			if (`objExists ($currentC + ".LegScale")`)
			{
				addAttr -ln "LegScale"  -at double  -min 0.01 -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".LegScale"};
			}
			if (`objExists ($currentC + ".footTilt")`)
			{
				addAttr -ln "footTilt"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".footTilt"};
			}
			if (`objExists ($currentC + ".heelBall")`)
			{
				addAttr -ln "heelBall"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".heelBall"};
			}
			if (`objExists ($currentC + ".toeUpDn")`)
			{
				addAttr -ln "toeUpDn"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".toeUpDn"};
			}
			if (`objExists ($currentC + ".ballSwivel")`)
			{
				addAttr -ln "ballSwivel"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".ballSwivel"};
			}
			//EYES			
			if (`objExists ($currentC + ".LocalGlobal")`)
			{
				addAttr -ln "LocalGlobal"  -at double -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e -k true {$currentC + "_mLctr_Frame" + $currentFrame + ".LocalGlobal"};
			}
			if (`objExists ($currentC + ".TopOpenClose")`)
			{
				addAttr -ln "TopOpenClose"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".TopOpenClose"};
			}
			if (`objExists ($currentC + ".BtmOpenClose")`)
			{
				addAttr -ln "BtmOpenClose"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".BtmOpenClose"};
			}
			if (`objExists ($currentC + ".TopExpress")`)
			{
				addAttr -ln "TopExpress"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".TopExpress"};
			}
			if (`objExists ($currentC + ".BtmExpress")`)
			{
				addAttr -ln "BtmExpress"  -at double  -min -10 -max 10 -dv 0 {$currentC + "_mLctr_Frame" + $currentFrame};
				setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".BtmExpress"};
			}
			if (`objExists ($currentC + ".LidsFollow")`)
			{			
			addAttr -ln "LidsFollow"  -at double -dv 1 {$currentC + "_mLctr_Frame" + $currentFrame};
			setAttr -e-keyable true {$currentC + "_mLctr_Frame" + $currentFrame + ".LidsFollow"};
			}
					
			//ADD CUSTOM FRAME ATTRIBUTE
			addAttr -ln "CurrentFrame"  -at double  {$currentC + "_mLctr_Frame" + $currentFrame};
			setAttr -e-k true {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"};
			float $currentFrame = `currentTime -q`;
			setAttr {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"} $currentFrame;
			setAttr -lock true {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"};
		}
	}
	select $rig;
}

//SET MIRROR LOCATOR CHANNELS
//SET TO LOCATOR CHANNELS////////////////////////////////////////////////////////////
global proc setToBatchMirrorLocatorChannelsCenter()
{
	float $currentFrame = `currentTime -q`;
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{
					$channel = `getAttr ($currentC + "." + $currentChannel)`;
					setAttr ($currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel) $channel;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setToBatchMirrorLocatorChannelsLeft()
{
	float $currentFrame = `currentTime -q`;
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				$channel = `getAttr ($currentC + "." + $currentChannel)`;
				setAttr ($currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel) $channel;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setToBatchMirrorLocatorChannelsRight()
{
	float $currentFrame = `currentTime -q`;
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;
	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				$channel = `getAttr ($currentC + "." + $currentChannel)`;
				setAttr ($currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel) $channel;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

//SET FROM BATCH LOCATOR CHANNELS////////////////////////////////////////////////////////////
global proc setFromBatchMirrorLocatorChannelsCenter()
{
	//print "mirror from locators runs\n";
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		//float $currentFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;
		
		//CENTER
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//print ("current Control is " + $currentC + "\n");
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				int $i=0;
				while ($i < $numChannels)
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "rotateY"||$channels[$i] == "rotateZ")
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$currentC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$currentC + "." + $channels[$i]} $channelVal;
					}
				$i++;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setFromBatchMirrorLocatorChannelsLeft()
{
	//print "mirror from locators runs\n";
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		//float $currentFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;

		//LEFT TO RIGHT
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//print ("current Control is " + $currentC + "\n");
			string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			int $i=0;
			while ($i < $numChannels)
			{
				//if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
				//{
				//	if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
				//	{
				//		$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
				//		setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
				//	}
				//	else
				//	{
				//		$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
				//		setAttr {$rightC + "." + $channels[$i]} $channelVal;
				//	}
				//}
				if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC")||$currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
				{
					if ($channels[$i] == "translateX")
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} $channelVal;
					}
					if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
					{
						if (($channels[$i] == "rotateY")||($channels[$i] == "rotateZ"))
						{
							$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
							setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
						}
					}
				}
				else
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$rightC + "." + $channels[$i]} $channelVal;
					}
				}
			$i++;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

global proc setFromBatchMirrorLocatorChannelsRight()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame = `currentTime -q`;
	
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$Controls = `ls -sl`;
	string $currentC;
	for ($currentC in $Controls)
	{
		//GET PREVIOUS TIME
		//float $currentFrame = `getAttr {$currentC + "_mLctr.CurrentFrame"}`;

		//RIGHT TO LEFT
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			int $i=0;
			while ($i < $numChannels)
			{
				//if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
				//{
				//	if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
				//	{
				//		$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
				//		setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
				//	}
				//	else
				//	{
				//		$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
				//		setAttr {$leftC + "." + $channels[$i]} $channelVal;
				//	}
				//}
				if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC")||$currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
				{
					if ($channels[$i] == "translateX")
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} $channelVal;
					}
					if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
					{
						if (($channels[$i] == "rotateY")||($channels[$i] == "rotateZ"))
						{
							$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
							setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
						}
					}
				}
				else
				{
					if ($channels[$i] == "translateX"||$channels[$i] == "translateY"||$channels[$i] == "translateZ")
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} ($channelVal*-1);
					}
					else
					{
						$channelVal = `getAttr -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $channels[$i]}`;
						setAttr {$leftC + "." + $channels[$i]} $channelVal;
					}
				}
			$i++;
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}


//SET TO BATCH LOCATOR KEYS////////////////////////////////////////////////////////////
global proc setToBatchMirrorLocatorKeysCenter()
{
	float $currentFrame = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"} {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//FIND KEYABLE ATTRIBUTES
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{
					//CHECK IF ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							if ($AnimCurve=="character")
							{
								string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
								{
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
							}
							else
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
								{
									$AnimConnection = ($currentC + "." + $currentChannel);
								}
							}
							//CHECK FOR KEYFRAME
							$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
							//print ($KeyCheck[0] + "\n");
							if ($KeyCheck[0] > 0)
							{
								//print "setToMirrorLocatorKeysCenter keyCheck works\n";
								$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
								$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
								$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
								$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
								$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
								$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
								$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
								$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
								
								//SET KEY
								setKeyframe -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel};
								keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
								{$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
								keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
								-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
								if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
								{
									keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
									-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
								}
								if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
								}
								keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};						
							}
						}
					}
				}
			}
		}
	}
	select$rig;
}

global proc setToBatchMirrorLocatorKeysLeft()
{
	float $currentFrame    = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//CHECK IF ANIMATED
				$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
				if ($AnimCheck == 1)
				{
					//CHECK WHAT IS ANIMATING IT
					string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
					//CHECK FOR ANIM CURVE
					$AnimCurve = `nodeType $AnimConnection`;
					string $AnimCurveString = $AnimCurve;
					if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
					{
						if ($AnimCurve=="character")
						{
							string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
							if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
							{
								$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
							}
						}
						else
						{
							$AnimConnection = ($currentC + "_" + $currentChannel);
							if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
							{
								$AnimConnection = ($currentC + "." + $currentChannel);
							}
						}
						//CHECK FOR KEYFRAME
						$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
						//print ($KeyCheck[0] + "\n");
						if ($KeyCheck[0] > 0)
						{
							//print "setToMirrorLocatorKeysLeft keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
							//if ($currentFrame == 8)
							//{
							//	print ($AnimConnection + " inTangent Type is ");
							//	print $inTangentTypeCurrentC;
							//	print (" and inTangent Angle is ");
							//	print $inTangentCurrentC;
							//	print "\n";
							//}
							
							//SET KEY
							setKeyframe -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel};
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							{$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
							//if ($currentFrame == 8)
							//	{
							//		print ("In angle is ");
							//		print $inTangentCurrentC[0];
							//		print "\n";
							//	}
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							}
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};						
						}
					}
				}
			}
		}
	}
	select$rig;
}

global proc setToBatchMirrorLocatorKeysRight()
{
	float $currentFrame    = `currentTime -q`;
	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;

	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//CHECK IF ANIMATED
				$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
				if ($AnimCheck == 1)
				{
					//CHECK WHAT IS ANIMATING IT
					string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
					//CHECK FOR ANIM CURVE
					$AnimCurve = `nodeType $AnimConnection`;
					string $AnimCurveString = $AnimCurve;
					if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
					{
						if ($AnimCurve=="character")
						{
							string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
							if (`objExists ($IncomingConnection[0] + "_" + $currentC + "." + $currentChannel)`)
							{
								$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
							}
						}
						else
						{
							$AnimConnection = ($currentC + "_" + $currentChannel);
							if ($currentChannel=="scaleX"||$currentChannel=="scaleX"||$currentChannel=="scaleY"||$currentChannel=="scaleZ")
							{
								$AnimConnection = ($currentC + "." + $currentChannel);
							}
						}
						//CHECK FOR KEYFRAME
						$KeyCheck[0] = `selectKey -add -k -t $currentFrame $AnimConnection`;
						if ($KeyCheck[0] > 0)
						{
							//print "setToMirrorLocatorKeysRight keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle $AnimConnection`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle $AnimConnection`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight $AnimConnection`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight $AnimConnection`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType $AnimConnection`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType $AnimConnection`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock $AnimConnection`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents $AnimConnection`;
							
							//SET KEY
							setKeyframe -t $currentFrame {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel};
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							{$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								-outWeight $outWeightCurrentC[0] -lock 0 {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};
							}
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] {$currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel};						
						}
					}
				}
			}
		}
	}
	select $rig;
}


//SET FROM BATCH MIRROR LOCATOR KEYS
global proc setFromBatchMirrorLocatorKeysCenter()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_*C"};
		select -d {$rigName[0] + "_MainC"}  {$rigName[0] + "_l*C"} {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_*C")`)
		{
			if (!`gmatch $currentC ($rigName[0] + "_[l,r]*C")`)
			{
				//GET PREVIOUS TIME
				$currentFrame = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"}`;

				string $AnimConnection;
				/*string $OppositeAnimConnection;*/
				//DEFINE OPPOSITE CONTROL
				/*string $oppositeC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;*/
				//FIND KEYABLE ATTRIBUTES
				$channels = `listAttr -k -u $currentC`;
				$numChannels = `size $channels`;
				for ($currentChannel in $channels)
				{		
					//CHECK IF ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								/*//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$AnimConnection = `substitute ($buffer[($numTokens-3)] + "_l") $AnimConnection ($buffer[($numTokens-3)] + "_r")`;
								if (!`objExists $AnimConnection`)
								{
									$AnimConnection = `substitute ("_" + $currentChannel) $AnimConnection ("." + $currentChannel)`;
								}*/
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								/*$AnimConnection = ($oppositeC + "." + $currentChannel);*/
							}
							//CHECK FOR KEYFRAME
							$KeyCheck[0] = `keyframe -t $currentFrame -q -keyframeCount {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
							if ($KeyCheck[0] > 0)
							{
								//print "setFromMirrorLocatorKeysCenter keyCheck works\n";
								$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$lockCurrentC          = `keyTangent -t $currentFrame -q -lock ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
								
								//SUBSTITUTE
								/*string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;*/
								//SET KEY
								if (`objExists ($AnimConnection + "2")`)
								{
									rename ($AnimConnection + "2") $AnimConnection;
								}
								setKeyframe -t $currentFrame $AnimConnection;
								keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0] $AnimConnection;
								keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
								-outTangentType $outTangentTypeCurrentC[0] $AnimConnection;

								if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
								{
									if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
								}
								if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
								{
									if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($inTangentCurrentC[0]*-1)
										-outWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $inTangentCurrentC[0]
										-outWeight $inWeightCurrentC[0] -lock 0 $AnimConnection;
									}
								}
								//KEY ATTRIBUTE	
								if ($currentChannel == "translateX"||$currentChannel == "rotateY"||$currentChannel == "rotateZ")
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $AnimConnection;
								}
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $AnimConnection;
								}
								keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $AnimConnection;						
							}
							else 
							{
								string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
								cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
							}
						}
					}
					else
					{
						string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
						cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
					}			
				}
			}
		}	
	}
	autoKeyframe -state $autoKey;	
	select$rig;
}

global proc setFromBatchMirrorLocatorKeysLeft()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

//	//if ($currentFrame ==8)
//	//{
//		$tangentType = `keyTangent -t 8 -q -inTangentType Skeleton:BumblebeeRobot_lFootIKCmLctr_Frame8_rotateX` ;
//		$tangent = `keyTangent -t 8 -q -inAngle Skeleton:BumblebeeRobot_lFootIKCmLctr_Frame8_rotateX` ;
//		print "tangent type is ";
//		print $tangent;
//		print " and tangent angle is ";
//		print $tangent;
//		print"\n";
//	//}

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_l*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{
		if (`gmatch $currentC ($rigName[0] + "_l*C")`)
		{
			//print ($currentC+ "\n");
			string $AnimConnection;
			//DEFINE OPPOSITE CONTROL
			string $oppositeC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//GET PREVIOUS TIME
				//float $currentFrame = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"}`;
				//CHECK FOR LOCATOR KEYFRAME
				$KeyCheck[0] = `keyframe -t $currentFrame -q -keyframeCount {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
				if ($KeyCheck[0] > 0)
				{
					//print ($currentChannel+ "\n");				
					//CHECK IF CONTROLLER IS ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							string $OppositeAnimConnection;
							
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$OppositeAnimConnection = `substitute ($buffer[($numTokens-3)] + "_l") $AnimConnection ($buffer[($numTokens-3)] + "_r")`;
								if (!`objExists $OppositeAnimConnection`)
								{
									$OppositeAnimConnection = `substitute ("_" + $currentChannel) $OppositeAnimConnection ("." + $currentChannel)`;
								}
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								$OppositeAnimConnection = ($oppositeC + "." + $currentChannel);
							}
                	
							//print "setFromMirrorLocatorKeysLeft keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							//print ("Anim Connection is " + $AnimConnection + "\n");
							//print $inTangentTypeCurrentC;
							//print "\n";
							
							//SUBSTITUTE
							string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
							if (!`objExists $OppositeAnimConnection`)
							{
								$OppositeAnimConnection = ($rightC + "." + $currentChannel);
							}
							//SET KEY
							setKeyframe -t $currentFrame $OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							$OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] $OppositeAnimConnection;
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								//if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
								//{
								//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								//	{
								//		keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
								//		-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//	else
								//	{
								//		keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								//		-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//}
								if (($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC")||$currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}						
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
									{
										if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
										{
											keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
											-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
										}
									}									
								}
								else
								{
									keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
									-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								//if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
								//{
								//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								//	{
								//		keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
								//		-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//	else
								//	{
								//		keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								//		-outWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//}
								if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC")||$currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
									{
										if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
										{
											keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
											-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
										}
									}
								}
								else
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							//KEY ATTRIBUTE
							//if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
							//{
							//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
							//	{
							//		$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
							//		keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
							//	}
							//	else
							//	{
							//		$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
							//		keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							//	}
							//}
							if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC")||$currentC == ($rigName[0] + "_lElbowIKC")||$currentC == ($rigName[0] + "_lKneeIKC"))
							{
								if ($currentChannel == "translateX")
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}										
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
								if ($currentC == ($rigName[0] + "_lWristIKC")||$currentC == ($rigName[0] + "_lFootIKC"))
								{
									if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
									{
										$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
										keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
									}
								}
							}
							else
							{
								$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
								keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							}
								
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $OppositeAnimConnection;						
						}
						else 
						{
							string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
							cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
						}
					}
				}
				else
				{
					string $rightC = `substitute ($rigName[0] + "_l") $currentC ($rigName[0] + "_r")`;
					cutKey -t $currentFrame -attribute $currentChannel -option keys $rightC;
				}			
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select$rig;
}

global proc setFromBatchMirrorLocatorKeysRight()
{
	$autoKey = `autoKeyframe -q -state`;
	autoKeyframe -state false;
	float $currentFrame    = `currentTime -q`;
	//float $destinationFrame = `currentTime -q`;

	string $rig[] = `ls -sl`;
	select $rig[0];
	string $rigName[] = `ls -sl`;
	select $rig;
	select -d $rig[0];
	string $rigControls[] = `ls -sl`;
	$applyToCheck = `checkBox -q -v mirrorAdvApplyTo`;
	if ($applyToCheck == 1)
	{
		select {$rigName[0] + "_r*C"};
	}
	$rigControls = `ls -sl`;
	string $currentC;

	for ($currentC in $rigControls)
	{	
		if (`gmatch $currentC ($rigName[0] + "_r*C")`)
		{
			string $AnimConnection;
			string $OppositeAnimConnection;
			//DEFINE OPPOSITE CONTROL
			string $oppositeC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
			//FIND KEYABLE ATTRIBUTES
			$channels = `listAttr -k -u $currentC`;
			$numChannels = `size $channels`;
			for ($currentChannel in $channels)
			{
				//GET PREVIOUS TIME
				//float $currentFrame = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + ".CurrentFrame"}`;
				//CHECK FOR LOCATOR KEYFRAME
				$KeyCheck[0] = `keyframe -t $currentFrame -q -keyframeCount {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
				if ($KeyCheck[0] > 0)
				{
					//print ($currentChannel+ "\n");				
					//CHECK IF CONTROLLER IS ANIMATED
					$AnimCheck = `connectionInfo -isDestination {$currentC + "." + $currentChannel}`;
					if ($AnimCheck == 1)
					{
						//CHECK WHAT IS ANIMATING IT
						string $AnimConnection = `connectionInfo -sourceFromDestination {$currentC + "." + $currentChannel}`;
						//CHECK FOR ANIM CURVE
						$AnimCurve = `nodeType $AnimConnection`;
						string $AnimCurveString = $AnimCurve;
						if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU"||$AnimCurve=="character")
						{
							//print ("AnimCurve is " + $AnimCurve + "\n");
							if ($AnimCurve=="character")
							{
								$charSetName = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
								$charSetConnections = `listConnections -d off -s on -t clipScheduler $charSetName`;
								$sizeCharSet = `size $charSetConnections`;
								if ($sizeCharSet > 0)
								{
									string $IncomingConnection[] = `listConnections -d off -s on {$currentC + "." + $currentChannel}`;
									$AnimConnection = `substitute ($IncomingConnection[0] + ".") $AnimConnection ($IncomingConnection[0] + "_")`;
								}
								//GET OPPOSITE
								string $buffer[];
								$numTokens = `tokenize $AnimConnection "_" $buffer`;
								$OppositeAnimConnection = `substitute ($buffer[($numTokens-3)] + "_r") $AnimConnection ($buffer[($numTokens-3)] + "_l")`;
								if (!`objExists $OppositeAnimConnection`)
								{
									$OppositeAnimConnection = `substitute ("_" + $currentChannel) $OppositeAnimConnection ("." + $currentChannel)`;
								}
							}
							else if ($AnimCurve=="animCurveTA"||$AnimCurve=="animCurveTL"||$AnimCurve=="animCurveTU")
							{
								$AnimConnection = ($currentC + "_" + $currentChannel);
								$OppositeAnimConnection = ($oppositeC + "." + $currentChannel);
							}
							//print "setFromMirrorLocatorKeysRight keyCheck works\n";
							$inTangentCurrentC     = `keyTangent -t $currentFrame -q -inAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outTangentCurrentC    = `keyTangent -t $currentFrame -q -outAngle ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$inWeightCurrentC      = `keyTangent -t $currentFrame -q -inWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outWeightCurrentC     = `keyTangent -t $currentFrame -q -outWeight ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$inTangentTypeCurrentC = `keyTangent -t $currentFrame -q -inTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$outTangentTypeCurrentC= `keyTangent -t $currentFrame -q -outTangentType ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$lockCurrentC          = `keyTangent -t $currentFrame -q -lock ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							$weightedCurrentC      = `keyTangent -t $currentFrame -q -weightedTangents ($currentC + "_mLctr_Frame" + $currentFrame + "_" + $currentChannel)`;
							//print $inTangentTypeCurrentC;
							//print "\n";

							//SUBSTITUTE
							string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
							{
								$OppositeAnimConnection = ($leftC + "." + $currentChannel);
							}							
							//SET KEY
							setKeyframe -t $currentFrame $OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -weightedTangents $weightedCurrentC[0]
							$OppositeAnimConnection;
							keyTangent -e -a -t $currentFrame -inTangentType $inTangentTypeCurrentC[0]
							-outTangentType $outTangentTypeCurrentC[0] $OppositeAnimConnection;
							if ($inTangentTypeCurrentC[0]=="fixed"||$inTangentTypeCurrentC[0]=="plateau")
							{
								//if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
								//{
								//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								//	{
								//		keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
								//		-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//	else
								//	{
								//		keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								//		-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//}
								if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC")||$currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
									{
										if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
										{
										keyTangent -e -a -t $currentFrame -inAngle ($inTangentCurrentC[0]*-1)
										-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
										}
									}
								}
								else
								{
								keyTangent -e -a -t $currentFrame -inAngle $inTangentCurrentC[0]
								-inWeight $inWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							if ($outTangentTypeCurrentC[0]=="fixed"||$outTangentTypeCurrentC[0]=="plateau")
							{
								//if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
								//{
								//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
								//	{
								//		keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
								//		-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//	else
								//	{
								//		keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
								//		-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								//	}
								//}
								if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC")||$currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
								{
									if ($currentChannel == "translateX")
									{
										keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}										
									else
									{
										keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
										-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
									}
									if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
									{
										if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
										{
											keyTangent -e -a -t $currentFrame -outAngle ($outTangentCurrentC[0]*-1)
											-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
										}
									}
								}
								else
								{
									keyTangent -e -a -t $currentFrame -outAngle $outTangentCurrentC[0]
									-outWeight $outWeightCurrentC[0] -lock 0 $OppositeAnimConnection;
								}
							}
							//KEY ATTRIBUTE
							//if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
							//{
							//	if ($currentChannel == "translateX"||$currentChannel == "translateY"||$currentChannel == "translateZ")
							//	{
							//		$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
							//		keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
							//	}
							//	else
							//	{
							//		$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
							//		keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							//	}
							//}
							if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC")||$currentC == ($rigName[0] + "_rElbowIKC")||$currentC == ($rigName[0] + "_rKneeIKC"))
							{
								if ($currentChannel == "translateX")
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
								}										
								else
								{
									$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
									keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
								}
								if ($currentC == ($rigName[0] + "_rWristIKC")||$currentC == ($rigName[0] + "_rFootIKC"))
								{
									if (($currentChannel == "rotateY")||($currentChannel == "rotateZ"))
									{
										$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
										keyframe -e -a -t $currentFrame -vc ($currentVal*-1) $OppositeAnimConnection;
									}
								}
							}
							else
							{
								$currentVal = `getAttr {$currentC + "_mLctr_Frame" + $currentFrame + "." + $currentChannel}`;
								keyframe -e -a -t $currentFrame -vc $currentVal $OppositeAnimConnection;
							}
							
							keyTangent -e -a -t $currentFrame -lock $lockCurrentC[0] $OppositeAnimConnection;				
						}
						else 
						{
							string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
							cutKey -t $currentFrame -attribute $currentChannel -option keys $leftC;
						}
					}
				}
				else
				{
					string $leftC = `substitute ($rigName[0] + "_r") $currentC ($rigName[0] + "_l")`;
					cutKey -t $currentFrame -attribute $currentChannel -option keys $leftC;
				}
			}
		}
	}
	autoKeyframe -state $autoKey;	
	select $rig;
}

//BATCH ADVANCED COMMANDS
global proc batchMirrorAdv()
{
	print "BATCH MIRRORING...";
    
	int $rangeCheck = `radioButtonGrp -q -select batchRange`;
	playButtonEnd;
	float $endFrame = `currentTime -q`;
	playButtonStart;
	float $startFrame = `currentTime -q`;
	if ($rangeCheck == 2)
	{
		$startFrame = `textField -q -text batchMirrorStartTxtFld`;
		$endFrame   = `textField -q -text batchMirrorEndTxtFld`;
	}
		
	currentTime $startFrame;
	float $currentFrame = $startFrame;
	float $previousFrame = ($currentFrame -1);
	int $numberOfFrames = 0;
	
	//CHECK NUMBER OF KEYS
	print "CHECKING KEYS...";
	while (($currentFrame <= $endFrame)&&($previousFrame != $currentFrame))
	{
		string $mirroringSelection[] = `ls -sl`;
		$applyToBatchCheck = `checkBox -q -v batchMirrorAdvApplyTo`;
		if ($applyToBatchCheck == 1)
		{
			select $mirroringSelection[0] {$mirroringSelection[0] + "_*C"};
		}
		currentTime -edit `findKeyframe -which next`;
		$previousFrame = $currentFrame;
		$currentFrame = `currentTime -q`;
		//if ($currentFrame == $previousFrame)
		//{
		//	$currentFrame = ($currentFrame + 1);
		//}
		$numberOfFrames = ($numberOfFrames + 1);
		select $mirroringSelection;
	}
	int $numberOfSteps = ($numberOfFrames * 17);
		
	//global string $gMainProgressBar;
	//progressBar -edit
    //	-beginProgress
    //	-isInterruptable true
    //	-status "Mirroring ..."
    //	-maxValue $numberOfSteps
    //	gMainProgressBar;
		
    currentTime $startFrame;
    float $currentFrame = $startFrame;
	float $previousFrame = ($currentFrame -1);

	//CREATE LOCATORS
	print "SAVING ANIMATION...";
	while (($currentFrame <= $endFrame)&&($previousFrame != $currentFrame))
	{
		string $mirroringSelection[] = `ls -sl`;
		$applyToBatchCheck = `checkBox -q -v batchMirrorAdvApplyTo`;
		if ($applyToBatchCheck == 1)
		{
			select $mirroringSelection[0] {$mirroringSelection[0] + "_*C"};
		}
		createBatchMirrorLctrs;
		//progressBar -edit -step 1 gMainProgressBar;
		currentTime -edit `findKeyframe -which next`;
		$previousFrame = $currentFrame;
		$currentFrame = `currentTime -q`;
		select $mirroringSelection;
	}

    currentTime $startFrame;
    float $currentFrame = $startFrame;
	float $previousFrame = ($currentFrame -1);

	//RUN MIRROR
	while (($currentFrame <= $endFrame)&&($previousFrame != $currentFrame))
	{
		//print ("Current frame is " + $currentFrame + " and end frame is " + $endFrame + "\n");
		//float $newFrame = ($currentFrame + 1)
		//$currentFrame    = `currentTime -q`;
		//$destinationFrame = `currentTime -q`;
		//int $frameCheck = `checkBox -q -v toFrame`;
		
		string $mirroringSelection[] = `ls -sl`;
		$applyToBatchCheck = `checkBox -q -v batchMirrorAdvApplyTo`;
		if ($applyToBatchCheck == 1)
		{
			select $mirroringSelection[0] {$mirroringSelection[0] + "_*C"};
		}
		string $mirroringSelection[] = `ls -sl`;
		//createBatchMirrorLctrs;
		//progressBar -edit -step 1 gMainProgressBar;
		setToBatchMirrorLocatorChannelsCenter;
		//progressBar -edit -step 1 gMainProgressBar;
		setToBatchMirrorLocatorChannelsLeft;
		//progressBar -edit -step 1 gMainProgressBar;
		setToBatchMirrorLocatorChannelsRight;
		//progressBar -edit -step 1 gMainProgressBar;
		
		setToBatchMirrorLocatorKeysCenter;
		//progressBar -edit -step 1 gMainProgressBar;
		setToBatchMirrorLocatorKeysLeft;
		//progressBar -edit -step 1 gMainProgressBar;
		setToBatchMirrorLocatorKeysRight;
		//progressBar -edit -step 1 gMainProgressBar;
    	
		//if ($frameCheck == 1)
		//{
		//	$destinationFrame = `textField -q -text currentFrameTxtFld`;
		//	currentTime -update yes $destinationFrame;
		//}
		setFromBatchMirrorLocatorChannelsCenter;
		//progressBar -edit -step 1 gMainProgressBar;
		setFromBatchMirrorLocatorChannelsLeft;
		//progressBar -edit -step 1 gMainProgressBar;
		setFromBatchMirrorLocatorChannelsRight;
		//progressBar -edit -step 1 gMainProgressBar;
		
		setFromBatchMirrorLocatorKeysCenter;
		//progressBar -edit -step 1 gMainProgressBar;
		setFromBatchMirrorLocatorKeysLeft;
		//progressBar -edit -step 1 gMainProgressBar;
		setFromBatchMirrorLocatorKeysRight;
		//progressBar -edit -step 1 gMainProgressBar;
    	/*
		//setFromBatchMirrorLocatorChannelsCenter;
		progressBar -edit -step 1 $gMainProgressBar;
		//setFromBatchMirrorLocatorChannelsLeft;
		progressBar -edit -step 1 $gMainProgressBar;
		//setFromBatchMirrorLocatorChannelsRight;
		progressBar -edit -step 1 $gMainProgressBar;
    	*/
		delete {$mirroringSelection[0] + "mBatchLctrG_Frame" + $currentFrame};
		
		currentTime -edit `findKeyframe -which next`;
		$previousFrame = $currentFrame;
		$currentFrame = `currentTime -q`;
		//print ("Previous frame is " + $previousFrame + " and current Frame is " + $currentFrame + "\n");
	}
	//progressBar -edit -endProgress gMainProgressBar;
	currentTime $endFrame;
	print "\nBATCH MIRRORING COMPLETE!\n";
	
	//*/
}

global proc batchMirrorVerifyAdv()
{
	
	//CHARACTER NAME
	//global string $charName;
	//string $rigMame = `textField -q -text textFieldEntry`;

	string $returnVal_BatchMirror = `confirmDialog
	-title "Warning: Batch Mirroring Can Take Several Minutes!"
	-message "Are you sure you wish to proceed?"
	-button "Cancel"
	-button "Proceed"
	-defaultButton "Cancel"
	-cancelButton "Cancel"`;
	
	if ($returnVal_BatchMirror == "Proceed")
	{
		batchMirrorAdv;
	}
}

global proc batchMirrorCheckAdv()
{
	int $rangeCheck = `radioButtonGrp -q -select batchRange`;
	float $startFrame = `textField -q -text batchMirrorStartTxtFld`;
	float $endFrame   = `textField -q -text batchMirrorEndTxtFld`;

	if ($rangeCheck = 1)
	{
		if ($startFrame < $endFrame)
		{
			string $rig[] = `ls -sl`;
			$nameCheck = `checkBox -q -v useName`;
			if ($nameCheck == 0)
			{
				int $rigSize = `size $rig`;
				if ($rigSize > 0)
				{
					getIdentification;
					string $currentControl[] = `ls -sl`;
					int $identification = `getAttr {$currentControl[0] + ".identification"}`;
    		
					if ($identification == 1122)
					{
						string $rigName[] = `ls -sl`;
						select $rigName $rig; 
						batchMirrorVerifyAdv;
					}
					else
					{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR\n";}
				}
				else
				{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR\n";}	
			}
			else
			{
				string $rigName = `textField -q -text textFieldEntry`;
				if (`objExists ($rigName)`)
				{
					select $rigName $rig;
					{
						batchMirrorVerifyAdv;
					}
				}
				else
				{invalidName;}
			}
			select $rig;
		}
		else
		{
			warning "INVALID TIME RANGE.";
		}
	}
	else
	{
		string $rig[] = `ls -sl`;
		$nameCheck = `checkBox -q -v useName`;
		if ($nameCheck == 0)
		{
			int $rigSize = `size $rig`;
			if ($rigSize > 0)
			{
				getIdentification;
				string $currentControl[] = `ls -sl`;
				int $identification = `getAttr {$currentControl[0] + ".identification"}`;
    	
				if ($identification == 1122)
				{
					string $rigName[] = `ls -sl`;
					select $rigName $rig; 
					batchMirrorVerifyAdv;
				}
				else
				{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR\n";}
			}
			else
			{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO MIRROR\n";}	
		}
		else
		{
			string $rigName = `textField -q -text textFieldEntry`;
			if (`objExists ($rigName)`)
			{
				select $rigName $rig;
				{
					batchMirrorVerifyAdv;
				}
			}
			else
			{invalidName;}
		}
		select $rig;
	}
}

//UI'S//////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

global proc loadRig()
{
	string $rig[] = `ls -sl`;
	$nameCheck = `checkBox -q -v useName`;
	int $rigSize = `size $rig`;
	if ($rigSize > 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			textField -e -tx $rigName textFieldEntry;
		}
		else
		{warning "YOU MUST SELECT A VALID CONTROLLER OF THE CHARACTER YOU WISH TO LOAD\n";}
	}
	else
	{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO LOAD\n";}	

	select $rig;
}


//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//SAVE & LOAD

//RIG TEXT FIELD
global proc loadRigTab2()
{
	string $rig[] = `ls -sl`;
	//$nameCheck = `checkBox -q -v useNameSave`;
	int $rigSize = `size $rig`;
	if ($rigSize > 0)
	{
		if (`objExists ($rig[0] + ".RRARigConnection")`)
		{
			$rigConnections = `listConnections ($rig[0] + ".RRARigConnection")`;
			$rigName = $rigConnections[0];
			textField -e -tx $rigName textFieldEntrySave;
		}
		else
		{warning "YOU MUST SELECT A VALID CONTROLLER OF THE CHARACTER YOU WISH TO LOAD\n";}
	}
	else
	{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO LOAD\n";}	

	select $rig;
}

//SAVE////////////////////////////////////////////////////////////////////////////////////
global proc savePosePath()
{
	string $mayaFolder;

	fileBrowserDialog -mode 1
    -fileCommand ( "savePose \"" + $mayaFolder + "\"" )
    -actionName "Save";
}

global proc savePose(string $mayaFolder, string $result, string $type)
{
	print {"\nSAVING TO: "+ $result + "\n"};
	$fileID = `fopen $result "w"`;
    
	string $rigFileName[] = `ls -sl`;
	select {$rigFileName[0] + "_*C"};
	select -d {$rigFileName[0] + "_MainC"}; 
	string $Controls[] = `ls -sl`;
	string $currentControl;

	fprint $fileID ("string $rigFileName[] = `ls -sl`;\n");
	for ($currentControl in $Controls)
	{
		string $buffer[];
		$numTokens = `tokenize $currentControl "_" $buffer`;
		
		$lockTX = `getAttr -lock ($currentControl + ".tx")`;
		$lockTY = `getAttr -lock ($currentControl + ".ty")`;
		$lockTZ = `getAttr -lock ($currentControl + ".tz")`;
		$lockRX = `getAttr -lock ($currentControl + ".rx")`;
		$lockRY = `getAttr -lock ($currentControl + ".ry")`;
		$lockRZ = `getAttr -lock ($currentControl + ".rz")`;
		$lockSX = `getAttr -lock ($currentControl + ".sx")`;
		$lockSY = `getAttr -lock ($currentControl + ".sy")`;
		$lockSZ = `getAttr -lock ($currentControl + ".sz")`;
		if ($lockTX == 0)
		{
			$currentTX = `getAttr ($currentControl + ".tx")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".tx\"} "+$currentTX+";}\n");
		}
		if ($lockTY == 0)
		{
			$currentTY = `getAttr ($currentControl + ".ty")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".ty\"} "+$currentTY+";}\n");
		}
		if ($lockTZ == 0)
		{
			$currentTZ = `getAttr ($currentControl + ".tz")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".tz\"} "+$currentTZ+";}\n");
		}

		if ($lockRX == 0)
		{
			$currentRX = `getAttr ($currentControl + ".rx")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".rx\"} "+$currentRX+";}\n");
		}
		if ($lockRY == 0)
		{
			$currentRY = `getAttr ($currentControl + ".ry")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".ry\"} "+$currentRY+";}\n");
		}
		if ($lockRZ == 0)
		{
			$currentRZ = `getAttr ($currentControl + ".rz")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".rz\"} "+$currentRZ+";}\n");
		}

		if ($lockSX == 0)
		{
			$currentSX = `getAttr ($currentControl + ".sx")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".sx\"} "+$currentSX+";}\n");
		}
		if ($lockSY == 0)
		{
			$currentSY = `getAttr ($currentControl + ".sy")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".sy\"} "+$currentSY+";}\n");
		}
		if ($lockSZ == 0)
		{
			$currentSZ = `getAttr ($currentControl + ".sz")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+"\")`) {setAttr {$rigFileName[0]+ \"_"+$buffer[($numTokens -1)]+".sz\"} "+$currentSZ+";}\n");
		}

	}

	//MAIN CONTROL CHECK
	$loadMainCheckT = `checkBoxGrp -q -value1 saveMainXforms`;
	$loadMainCheckR = `checkBoxGrp -q -value2 saveMainXforms`;
	$loadMainCheckS = `checkBoxGrp -q -value3 saveMainXforms`;
	if ($loadMainCheckT == 1)
	{
		$MainC_T = `getAttr ($rigFileName[0] + "_MainC.translate")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.translate\"} "+$MainC_T[0]+" "+$MainC_T[1]+" "+$MainC_T[2]+";}\n");
	}
	if ($loadMainCheckR == 1)
	{	
		$MainC_R = `getAttr ($rigFileName[0] + "_MainC.rotate")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.rotate\"} "+$MainC_R[0]+" "+$MainC_R[1]+" "+$MainC_R[2]+";}\n");
	}
	if ($loadMainCheckS == 1)
	{
		$MainC_S = `getAttr ($rigFileName[0] + "_MainC.scaleY")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.sy\"} "+$MainC_S+";}\n");
	}	
	
	
	
	//EXTRA ATTRIBUTES
	//MAINC
	$SpineIK = `getAttr ($rigFileName[0] + "_MainC.spineIK")`;
	$SpineMicro = `getAttr ($rigFileName[0] + "_MainC.spineMicro")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.spineIK\"} "+$SpineIK+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.spineMicro\"} "+$SpineMicro+";}\n");

	$NeckIK = `getAttr ($rigFileName[0] + "_MainC.neckIK")`;
	$NeckMicro = `getAttr ($rigFileName[0] + "_MainC.neckMicro")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.neckIK\"} "+$NeckIK+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_MainC\")`) {setAttr {$rigFileName[0]+ \"_MainC.neckMicro\"} "+$NeckMicro+";}\n");
			
	//SPINE TOP
	$SpineAV = `getAttr ($rigFileName[0] + "_SpineTopIKC.SpineAutoVolume")`;
	$SpineTO = `getAttr ($rigFileName[0] + "_SpineTopIKC.SpineTopOrient")`;
	//$SpineCurve = `getAttr ($rigFileName[0] + "_SpineTopIKC.SpineCurve")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_SpineTopIKC\")`) {setAttr {$rigFileName[0]+ \"_SpineTopIKC.SpineAutoVolume\"} "+$SpineAV+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_SpineTopIKC\")`) {setAttr {$rigFileName[0]+ \"_SpineTopIKC.SpineTopOrient\"} "+$SpineTO+";}\n");
	
	//NECK01
	if (`objExists ($rigFileName[0] + "_Neck01C.NeckOrient")`)
	{
		$NeckOrient = `getAttr 	($rigFileName[0] + "_Neck01C.NeckOrient")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_Neck01C\")`) {setAttr {$rigFileName[0]+ \"_Neck01C.NeckOrient\"} "+$NeckOrient+";}\n");
	}
	
	//HEADC
	$NeckAutoVolume = `getAttr ($rigFileName[0] + "_HeadC.NeckAutoVolume")`;
	$HeadOrient = `getAttr ($rigFileName[0] + "_HeadC.HeadOrient")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_HeadC\")`) {setAttr {$rigFileName[0]+ \"_HeadC.NeckAutoVolume\"} "+$NeckAutoVolume+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_HeadC\")`) {setAttr {$rigFileName[0]+ \"_HeadC.HeadOrient\"} "+$HeadOrient+";}\n");
	//LSHOULDERFKC
	$lShoulderFKOrient = `getAttr ($rigFileName[0] + "_lShoulderFKC.ShoulderOrient")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lShoulderFKC\")`) {setAttr {$rigFileName[0]+ \"_lShoulderFKC.ShoulderOrient\"} "+$lShoulderFKOrient+";}\n");
	if (`objExists ($rigFileName[0] + "_lShoulderFKC.ClavicleInfluence")`)
	{
		$lShoulderFKClavInf = `getAttr ($rigFileName[0] + "_lShoulderFKC.ClavicleInfluence")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lShoulderFKC.ClavicleInfluence\")`) {setAttr {$rigFileName[0]+ \"_lShoulderFKC.ClavicleInfluence\"} "+$lShoulderFKClavInf+";}\n");
	}
	//LELBOWIKC
	$lElbowIKFollow = `getAttr ($rigFileName[0] + "_lElbowIKC.Follow")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lElbowIKC\")`) {setAttr {$rigFileName[0]+ \"_lElbowIKC.Follow\"} "+$lElbowIKFollow+";}\n");
	//LWRISTIKC
	$lWristIKStretch = `getAttr ($rigFileName[0] + "_lWristIKC.Stretch")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.Stretch\"} "+$lWristIKStretch+";}\n");
	$lWristIKElbowLock = `getAttr ($rigFileName[0] + "_lWristIKC.ElbowLock")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.ElbowLock\"} "+$lWristIKElbowLock+";}\n");
	$lWristIKArmScale = `getAttr ($rigFileName[0] + "_lWristIKC.ArmScale")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.ArmScale\"} "+$lWristIKArmScale+";}\n");
	$lWristIKHips = `getAttr ($rigFileName[0] + "_lWristIKC.Hips")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.Hips\"} "+$lWristIKHips+";}\n");
	$lWristIKChest = `getAttr ($rigFileName[0] + "_lWristIKC.Chest")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.Chest\"} "+$lWristIKChest+";}\n");
	$lWristIKHead = `getAttr ($rigFileName[0] + "_lWristIKC.Head")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lWristIKC\")`) {setAttr {$rigFileName[0]+ \"_lWristIKC.Head\"} "+$lWristIKHead+";}\n");
	//LARMSWITCH
	$lArmSwitchIkFk = `getAttr ($rigFileName[0] + "_lArmSwitchC.SwitchIkFk")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.SwitchIkFk\"} "+$lArmSwitchIkFk+";}\n");
	$lArmSwitchAV = `getAttr ($rigFileName[0] + "_lArmSwitchC.AutoVolume")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.AutoVolume\"} "+$lArmSwitchAV+";}\n");
	if (`objExists ($rigFileName[0]+"_lArmSwitchC.curve")`)
	{
		$lArmSwitchCurve = `getAttr ($rigFileName[0] + "_lArmSwitchC.curve")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.curve\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.curve\"} "+$lArmSwitchCurve+";}\n");
		if (`objExists ($rigFileName[0]+"_lArmSwitchC.upperCurve")`)
		{
			$lArmSwitchCurve = `getAttr ($rigFileName[0] + "_lArmSwitchC.upperCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.upperCurve\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.upperCurve\"} "+$lArmSwitchCurve+";}\n");
			$lArmSwitchCurve = `getAttr ($rigFileName[0] + "_lArmSwitchC.midCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.midCurve\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.midCurve\"} "+$lArmSwitchCurve+";}\n");
			$lArmSwitchCurve = `getAttr ($rigFileName[0] + "_lArmSwitchC.lowerCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.lowerCurve\")`) {setAttr {$rigFileName[0]+ \"_lArmSwitchC.lowerCurve\"} "+$lArmSwitchCurve+";}\n");
		}
	}
	if (`objExists ($rigFileName[0] + "_lShoulderFKC.palmInfluence")`)
	{
		$lShoulderFKClavInf = `getAttr ($rigFileName[0] + "_lShoulderFKC.palmInfluence")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lShoulderFKC.palmInfluence\")`) {setAttr {$rigFileName[0]+ \"_lShoulderFKC.palmInfluence\"} "+$lShoulderFKClavInf+";}\n");
	}
	//THUMB CHANNELS
	if (`objExists ($rigFileName[0] + "_lArmSwitchC.thumbChannels")`)
	{
		$lArmSwitchthumbCurl1 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbCurl1")`;
		$lArmSwitchthumbCurl2 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbCurl2")`;
		$lArmSwitchthumbCurl3 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbCurl3")`;
		$lArmSwitchthumbSplay1 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbSplay1")`;
		$lArmSwitchthumbSplay2 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbSplay2")`;
		$lArmSwitchthumbSplay3 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbSplay3")`;
		$lArmSwitchthumbTwist1 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbTwist1")`;
		$lArmSwitchthumbTwist2 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbTwist2")`;
		$lArmSwitchthumbTwist3 = `getAttr ($rigFileName[0] + "_lArmSwitchC.thumbTwist3")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.thumbChannels\")`){" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbCurl1\") "+$lArmSwitchthumbCurl1+";" +
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbCurl2\") "+$lArmSwitchthumbCurl2+";" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbCurl3\") "+$lArmSwitchthumbCurl3+";" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbSplay1\") "+$lArmSwitchthumbSplay1+";" +
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbSplay2\") "+$lArmSwitchthumbSplay2+";" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbSplay3\") "+$lArmSwitchthumbSplay3+";" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbTwist1\") "+$lArmSwitchthumbTwist1+";" +
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbTwist2\") "+$lArmSwitchthumbTwist2+";" + 
		"setAttr ($rigFileName[0]+ \"_lArmSwitchC.thumbTwist3\") "+$lArmSwitchthumbTwist3+";}\n");
	}
	
	//FINGER CHANNELS
	$i = 1;
	$end = 0;
	
	while ($i != $end)
	{
		if (`objExists ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Channels")`)
		{
			$lArmSwitchfingerCurl1  = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Curl1")`;
			$lArmSwitchfingerCurl2  = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Curl2")`;
			$lArmSwitchfingerCurl3  = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Curl3")`;
			$lArmSwitchfingerSplay1 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Splay1")`;
			$lArmSwitchfingerSplay2 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Splay2")`;
			$lArmSwitchfingerSplay3 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Splay3")`;
			$lArmSwitchfingerTwist1 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Twist1")`;
			$lArmSwitchfingerTwist2 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Twist2")`;
			$lArmSwitchfingerTwist3 = `getAttr ($rigFileName[0] + "_lArmSwitchC.finger" + $i + "Twist3")`;
			$lFingerPalmInfluence   = `getAttr ($rigFileName[0] + "_lFinger" + $i + "J1C.palmInfluence")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Channels\")`){" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Curl1\")  "+$lArmSwitchfingerCurl1+";" +
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Curl2\")  "+$lArmSwitchfingerCurl2+";" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Curl3\")  "+$lArmSwitchfingerCurl3+";" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Splay1\") "+$lArmSwitchfingerSplay1+";" +
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Splay2\") "+$lArmSwitchfingerSplay2+";" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Splay3\") "+$lArmSwitchfingerSplay3+";" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Twist1\") "+$lArmSwitchfingerTwist1+";" +
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Twist2\") "+$lArmSwitchfingerTwist2+";" + 
			"setAttr ($rigFileName[0]+ \"_lArmSwitchC.finger" + $i + "Twist3\") "+$lArmSwitchfingerTwist3+";" +
			"setAttr ($rigFileName[0]+ \"_lFinger" + $i + "J1C.palmInfluence\") "+$lFingerPalmInfluence+";}\n");
			$i++;
		}
		$end++;
	}
	//LHIP
	$lHipFKOrient = `getAttr ($rigFileName[0] + "_lHipFKC.HipOrient")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lHipFKC\")`) {setAttr {$rigFileName[0]+ \"_lHipFKC.HipOrient\"} "+$lHipFKOrient+";}\n");
	//LKNEEIKC
	$lKneeIKFollow = `getAttr ($rigFileName[0] + "_lKneeIKC.Follow")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lKneeIKC\")`) {setAttr {$rigFileName[0]+ \"_lKneeIKC.Follow\"} "+$lKneeIKFollow+";}\n");
	//LFOOTIKC
	$lFootIKStretch = `getAttr ($rigFileName[0] + "_lFootIKC.Stretch")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.Stretch\"} "+$lFootIKStretch+";}\n");
	$lFootIKKneeLock = `getAttr ($rigFileName[0] + "_lFootIKC.KneeLock")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.KneeLock "+$lFootIKKneeLock+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.KneeLock\"} "+$lFootIKKneeLock+";}\n");
	$lFootIKLegScale = `getAttr ($rigFileName[0] + "_lFootIKC.LegScale")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.LegScale "+$lFootIKLegScale+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.LegScale\"} "+$lFootIKLegScale+";}\n");
	$lFootIKTilt = `getAttr ($rigFileName[0] + "_lFootIKC.footTilt")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.footTilt "+$lFootIKTilt+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.footTilt\"} "+$lFootIKTilt+";}\n");
	$lFootIKheelBall = `getAttr ($rigFileName[0] + "_lFootIKC.heelBall")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.heelBall "+$lFootIKheelBall+";}\n");	
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.heelBall\"} "+$lFootIKheelBall+";}\n");
	$lFootIKtoeUpDn = `getAttr ($rigFileName[0] + "_lFootIKC.toeUpDn")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.toeUpDn "+$lFootIKtoeUpDn+";}\n");	
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.toeUpDn\"} "+$lFootIKtoeUpDn+";}\n");
	$lFootIKballSwivel = `getAttr ($rigFileName[0] + "_lFootIKC.ballSwivel")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lFootIKC`) {setAttr "+$rigFileName[0]+"_lFootIKC.ballSwivel "+$lFootIKballSwivel+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lFootIKC\")`) {setAttr {$rigFileName[0]+ \"_lFootIKC.ballSwivel\"} "+$lFootIKballSwivel+";}\n");
	//LLEGSWITCH
	$lLegSwitchIkFk = `getAttr ($rigFileName[0] + "_lLegSwitchC.SwitchIkFk")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_lLegSwitchC`) {setAttr "+$rigFileName[0]+"_lLegSwitchC.SwitchIkFk "+$lLegSwitchIkFk+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC\")`) {setAttr {$rigFileName[0]+ \"_lLegSwitchC.SwitchIkFk\"} "+$lLegSwitchIkFk+";}\n");
	if (`objExists ($rigFileName[0]+"_lLegSwitchC.curve")`)
	{
		$lLegSwitchCurve = `getAttr ($rigFileName[0] + "_lLegSwitchC.curve")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.curve\")`) {setAttr {$rigFileName[0]+ \"_lLegSwitchC.curve\"} "+$lLegSwitchCurve+";}\n");
		if (`objExists ($rigFileName[0]+"_lLegSwitchC.upperCurve")`)
		{
			$lLegSwitchCurve = `getAttr ($rigFileName[0] + "_lLegSwitchC.upperCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.upperCurve\")`) {setAttr {$rigFileName[0]+ \"_lLegSwitchC.upperCurve\"} "+$lLegSwitchCurve+";}\n");
			$lLegSwitchCurve = `getAttr ($rigFileName[0] + "_lLegSwitchC.midCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.midCurve\")`) {setAttr {$rigFileName[0]+ \"_lLegSwitchC.midCurve\"} "+$lLegSwitchCurve+";}\n");
			$lLegSwitchCurve = `getAttr ($rigFileName[0] + "_lLegSwitchC.lowerCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.lowerCurve\")`) {setAttr {$rigFileName[0]+ \"_lLegSwitchC.lowerCurve\"} "+$lLegSwitchCurve+";}\n");
		}
	}
	//TOE CHANNELS
	$i = 1;
	$end = 0;
	string $nPad = "0";
	
	while ($i != $end)
	{
		if ($i >= 10)
		{
			$nPad = "";
		}
		if (`objExists ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Channels")`)
		{
			if ($i == 1)
			{
				$lLegSwitchtoeCurl1  = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Curl1")`;
				$lLegSwitchtoeCurl2  = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Curl2")`;
				$lLegSwitchtoeSplay1 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Splay1")`;
				$lLegSwitchtoeSplay2 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Splay2")`;
				$lLegSwitchtoeTwist1 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Twist1")`;
				$lLegSwitchtoeTwist2 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Twist2")`;
				fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Channels\")`){" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Curl1\")  "+$lLegSwitchtoeCurl1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Curl2\")  "+$lLegSwitchtoeCurl2+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Splay1\") "+$lLegSwitchtoeSplay1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Splay2\") "+$lLegSwitchtoeSplay2+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Twist1\") "+$lLegSwitchtoeTwist1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Twist2\") "+$lLegSwitchtoeTwist2+";}\n");
				$i++;
			}
			else
			{
				$lLegSwitchtoeCurl1  = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Curl1")`;
				$lLegSwitchtoeCurl2  = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Curl2")`;
				$lLegSwitchtoeCurl3  = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Curl3")`;
				$lLegSwitchtoeSplay1 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Splay1")`;
				$lLegSwitchtoeSplay2 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Splay2")`;
				$lLegSwitchtoeSplay3 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Splay3")`;
				$lLegSwitchtoeTwist1 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Twist1")`;
				$lLegSwitchtoeTwist2 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Twist2")`;
				$lLegSwitchtoeTwist3 = `getAttr ($rigFileName[0] + "_lLegSwitchC.toe" + $nPad + $i + "Twist3")`;
				fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Channels\")`){" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Curl1\")  "+$lLegSwitchtoeCurl1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Curl2\")  "+$lLegSwitchtoeCurl2+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Curl3\")  "+$lLegSwitchtoeCurl3+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Splay1\") "+$lLegSwitchtoeSplay1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Splay2\") "+$lLegSwitchtoeSplay2+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Twist1\") "+$lLegSwitchtoeTwist1+";" +
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Twist2\") "+$lLegSwitchtoeTwist2+";" + 
				"setAttr ($rigFileName[0]+ \"_lLegSwitchC.toe" + $nPad + $i + "Twist3\") "+$lLegSwitchtoeTwist3+";}\n");
				$i++;
			}
		}
		$end++;
	}
	
	//RSHOULDERFKC
	$rShoulderFKOrient = `getAttr ($rigFileName[0] + "_rShoulderFKC.ShoulderOrient")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rShoulderFKC\")`) {setAttr {$rigFileName[0]+ \"_rShoulderFKC.ShoulderOrient\"} "+$rShoulderFKOrient+";}\n");
	if (`objExists ($rigFileName[0] + "_rShoulderFKC.ClavicleInfluence")`)
	{
		$rShoulderFKClavInf = `getAttr ($rigFileName[0] + "_rShoulderFKC.ClavicleInfluence")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rShoulderFKC.ClavicleInfluence\")`) {setAttr {$rigFileName[0]+ \"_rShoulderFKC.ClavicleInfluence\"} "+$rShoulderFKClavInf+";}\n");
	}
	//RELBOWIKC
	$rElbowIKFollow = `getAttr ($rigFileName[0] + "_rElbowIKC.Follow")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rElbowIKC\")`) {setAttr {$rigFileName[0]+ \"_rElbowIKC.Follow\"} "+$rElbowIKFollow+";}\n");
	//RWRISTIKC
	$rWristIKStretch = `getAttr ($rigFileName[0] + "_rWristIKC.Stretch")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.Stretch\"} "+$rWristIKStretch+";}\n");
	$rWristIKElbowLock = `getAttr ($rigFileName[0] + "_rWristIKC.ElbowLock")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.ElbowLock\"} "+$rWristIKElbowLock+";}\n");
	$rWristIKArmScale = `getAttr ($rigFileName[0] + "_rWristIKC.ArmScale")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.ArmScale\"} "+$rWristIKArmScale+";}\n");
	$rWristIKHips = `getAttr ($rigFileName[0] + "_rWristIKC.Hips")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.Hips\"} "+$rWristIKHips+";}\n");
	$rWristIKChest = `getAttr ($rigFileName[0] + "_rWristIKC.Chest")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.Chest\"} "+$rWristIKChest+";}\n");
	$rWristIKHead = `getAttr ($rigFileName[0] + "_rWristIKC.Head")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rWristIKC\")`) {setAttr {$rigFileName[0]+ \"_rWristIKC.Head\"} "+$rWristIKHead+";}\n");
	//RARMSWITCH
	$rArmSwitchIkFk = `getAttr ($rigFileName[0] + "_rArmSwitchC.SwitchIkFk")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.SwitchIkFk\"} "+$rArmSwitchIkFk+";}\n");
	$rArmSwitchAV = `getAttr ($rigFileName[0] + "_rArmSwitchC.AutoVolume")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.AutoVolume\"} "+$rArmSwitchAV+";}\n");
	if (`objExists ($rigFileName[0]+"_rArmSwitchC.curve")`)
	{
		$rArmSwitchCurve = `getAttr ($rigFileName[0] + "_rArmSwitchC.curve")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.curve\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.curve\"} "+$rArmSwitchCurve+";}\n");
		if (`objExists ($rigFileName[0]+"_rArmSwitchC.upperCurve")`)
		{
			$rArmSwitchCurve = `getAttr ($rigFileName[0] + "_rArmSwitchC.upperCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.upperCurve\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.upperCurve\"} "+$rArmSwitchCurve+";}\n");
			$rArmSwitchCurve = `getAttr ($rigFileName[0] + "_rArmSwitchC.midCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.midCurve\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.midCurve\"} "+$rArmSwitchCurve+";}\n");
			$rArmSwitchCurve = `getAttr ($rigFileName[0] + "_rArmSwitchC.lowerCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.lowerCurve\")`) {setAttr {$rigFileName[0]+ \"_rArmSwitchC.lowerCurve\"} "+$rArmSwitchCurve+";}\n");
		}
	}
	//THUMB CHANNELS
	if (`objExists ($rigFileName[0] + "_rArmSwitchC.thumbChannels")`)
	{
		$rArmSwitchthumbCurl1 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbCurl1")`;
		$rArmSwitchthumbCurl2 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbCurl2")`;
		$rArmSwitchthumbCurl3 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbCurl3")`;
		$rArmSwitchthumbSplay1 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbSplay1")`;
		$rArmSwitchthumbSplay2 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbSplay2")`;
		$rArmSwitchthumbSplay3 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbSplay3")`;
		$rArmSwitchthumbTwist1 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbTwist1")`;
		$rArmSwitchthumbTwist2 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbTwist2")`;
		$rArmSwitchthumbTwist3 = `getAttr ($rigFileName[0] + "_rArmSwitchC.thumbTwist3")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.thumbChannels\")`){" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbCurl1\") "+$rArmSwitchthumbCurl1+";" +
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbCurl2\") "+$rArmSwitchthumbCurl2+";" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbCurl3\") "+$rArmSwitchthumbCurl3+";" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbSplay1\") "+$rArmSwitchthumbSplay1+";" +
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbSplay2\") "+$rArmSwitchthumbSplay2+";" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbSplay3\") "+$rArmSwitchthumbSplay3+";" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbTwist1\") "+$rArmSwitchthumbTwist1+";" +
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbTwist2\") "+$rArmSwitchthumbTwist2+";" + 
		"setAttr ($rigFileName[0]+ \"_rArmSwitchC.thumbTwist3\") "+$rArmSwitchthumbTwist3+";}\n");
	}
	
	//FINGER CHANNELS
	$i = 1;
	$end = 0;
	
	while ($i != $end)
	{
		if (`objExists ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Channels")`)
		{
			$rArmSwitchfingerCurl1  = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Curl1")`;
			$rArmSwitchfingerCurl2  = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Curl2")`;
			$rArmSwitchfingerCurl3  = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Curl3")`;
			$rArmSwitchfingerSplay1 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Splay1")`;
			$rArmSwitchfingerSplay2 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Splay2")`;
			$rArmSwitchfingerSplay3 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Splay3")`;
			$rArmSwitchfingerTwist1 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Twist1")`;
			$rArmSwitchfingerTwist2 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Twist2")`;
			$rArmSwitchfingerTwist3 = `getAttr ($rigFileName[0] + "_rArmSwitchC.finger" + $i + "Twist3")`;
			$rFingerPalmInfluence   = `getAttr ($rigFileName[0] + "_rFinger" + $i + "J1C.palmInfluence")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Channels\")`){" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Curl1\")  "+$rArmSwitchfingerCurl1+";" +
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Curl2\")  "+$rArmSwitchfingerCurl2+";" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Curl3\")  "+$rArmSwitchfingerCurl3+";" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Splay1\") "+$rArmSwitchfingerSplay1+";" +
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Splay2\") "+$rArmSwitchfingerSplay2+";" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Splay3\") "+$rArmSwitchfingerSplay3+";" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Twist1\") "+$rArmSwitchfingerTwist1+";" +
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Twist2\") "+$rArmSwitchfingerTwist2+";" + 
			"setAttr ($rigFileName[0]+ \"_rArmSwitchC.finger" + $i + "Twist3\") "+$rArmSwitchfingerTwist3+";" +
			"setAttr ($rigFileName[0]+ \"_rFinger" + $i + "J1C.palmInfluence\") "+$rFingerPalmInfluence+";}\n");
			$i++;
		}
		$end++;
	}

	//RHIP
	$rHipFKOrient = `getAttr ($rigFileName[0] + "_rHipFKC.HipOrient")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rHipFKC\")`) {setAttr {$rigFileName[0]+ \"_rHipFKC.HipOrient\"} "+$rHipFKOrient+";}\n");
	//RKNEEIKC
	$rKneeIKFollow = `getAttr ($rigFileName[0] + "_rKneeIKC.Follow")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rKneeIKC\")`) {setAttr {$rigFileName[0]+ \"_rKneeIKC.Follow\"} "+$rKneeIKFollow+";}\n");
	//RFOOTIKC
	$rFootIKStretch = `getAttr ($rigFileName[0] + "_rFootIKC.Stretch")`;
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.Stretch\"} "+$rFootIKStretch+";}\n");
	$rFootIKKneeLock = `getAttr ($rigFileName[0] + "_rFootIKC.KneeLock")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.KneeLock "+$rFootIKKneeLock+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.KneeLock\"} "+$rFootIKKneeLock+";}\n");
	$rFootIKLegScale = `getAttr ($rigFileName[0] + "_rFootIKC.LegScale")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.LegScale "+$rFootIKLegScale+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.LegScale\"} "+$rFootIKLegScale+";}\n");
	$rFootIKTilt = `getAttr ($rigFileName[0] + "_rFootIKC.footTilt")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.footTilt "+$rFootIKTilt+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.footTilt\"} "+$rFootIKTilt+";}\n");
	$rFootIKheelBall = `getAttr ($rigFileName[0] + "_rFootIKC.heelBall")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.heelBall "+$rFootIKheelBall+";}\n");	
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.heelBall\"} "+$rFootIKheelBall+";}\n");
	$rFootIKtoeUpDn = `getAttr ($rigFileName[0] + "_rFootIKC.toeUpDn")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.toeUpDn "+$rFootIKtoeUpDn+";}\n");	
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.toeUpDn\"} "+$rFootIKtoeUpDn+";}\n");
	$rFootIKballSwivel = `getAttr ($rigFileName[0] + "_rFootIKC.ballSwivel")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rFootIKC`) {setAttr "+$rigFileName[0]+"_rFootIKC.ballSwivel "+$rFootIKballSwivel+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rFootIKC\")`) {setAttr {$rigFileName[0]+ \"_rFootIKC.ballSwivel\"} "+$rFootIKballSwivel+";}\n");
	//RLEGSWITCH
	$rLegSwitchIkFk = `getAttr ($rigFileName[0] + "_rLegSwitchC.SwitchIkFk")`;
	fprint $fileID ("if (`objExists "+$rigFileName[0]+"_rLegSwitchC`) {setAttr "+$rigFileName[0]+"_rLegSwitchC.SwitchIkFk "+$rLegSwitchIkFk+";}\n");
	fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC\")`) {setAttr {$rigFileName[0]+ \"_rLegSwitchC.SwitchIkFk\"} "+$rLegSwitchIkFk+";}\n");

	if (`objExists ($rigFileName[0]+"_rLegSwitchC.curve")`)
	{
		$rLegSwitchCurve = `getAttr ($rigFileName[0] + "_rLegSwitchC.curve")`;
		fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.curve\")`) {setAttr {$rigFileName[0]+ \"_rLegSwitchC.curve\"} "+$rLegSwitchCurve+";}\n");
		if (`objExists ($rigFileName[0]+"_rLegSwitchC.upperCurve")`)
		{
			$rLegSwitchCurve = `getAttr ($rigFileName[0] + "_rLegSwitchC.upperCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.upperCurve\")`) {setAttr {$rigFileName[0]+ \"_rLegSwitchC.upperCurve\"} "+$rLegSwitchCurve+";}\n");
			$rLegSwitchCurve = `getAttr ($rigFileName[0] + "_rLegSwitchC.midCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.midCurve\")`) {setAttr {$rigFileName[0]+ \"_rLegSwitchC.midCurve\"} "+$rLegSwitchCurve+";}\n");
			$rLegSwitchCurve = `getAttr ($rigFileName[0] + "_rLegSwitchC.lowerCurve")`;
			fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.lowerCurve\")`) {setAttr {$rigFileName[0]+ \"_rLegSwitchC.lowerCurve\"} "+$rLegSwitchCurve+";}\n");
		}
	}
	//TOE CHANNELS
	$i = 1;
	$end = 0;
	string $nPad = "0";
	
	while ($i != $end)
	{
		if ($i >= 10)
		{
			$nPad = "";
		}
		if (`objExists ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Channels")`)
		{
			if ($i == 1)
			{
				$rLegSwitchtoeCurl1  = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Curl1")`;
				$rLegSwitchtoeCurl2  = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Curl2")`;
				$rLegSwitchtoeSplay1 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Splay1")`;
				$rLegSwitchtoeSplay2 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Splay2")`;
				$rLegSwitchtoeTwist1 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Twist1")`;
				$rLegSwitchtoeTwist2 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Twist2")`;
				fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Channels\")`){" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Curl1\")  "+$rLegSwitchtoeCurl1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Curl2\")  "+$rLegSwitchtoeCurl2+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Splay1\") "+$rLegSwitchtoeSplay1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Splay2\") "+$rLegSwitchtoeSplay2+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Twist1\") "+$rLegSwitchtoeTwist1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Twist2\") "+$rLegSwitchtoeTwist2+";}\n");
				$i++;
			}
			else
			{
				$rLegSwitchtoeCurl1  = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Curl1")`;
				$rLegSwitchtoeCurl2  = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Curl2")`;
				$rLegSwitchtoeCurl3  = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Curl3")`;
				$rLegSwitchtoeSplay1 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Splay1")`;
				$rLegSwitchtoeSplay2 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Splay2")`;
				$rLegSwitchtoeSplay3 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Splay3")`;
				$rLegSwitchtoeTwist1 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Twist1")`;
				$rLegSwitchtoeTwist2 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Twist2")`;
				$rLegSwitchtoeTwist3 = `getAttr ($rigFileName[0] + "_rLegSwitchC.toe" + $nPad + $i + "Twist3")`;
				fprint $fileID ("if (`objExists ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Channels\")`){" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Curl1\")  "+$rLegSwitchtoeCurl1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Curl2\")  "+$rLegSwitchtoeCurl2+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Curl3\")  "+$rLegSwitchtoeCurl3+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Splay1\") "+$rLegSwitchtoeSplay1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Splay2\") "+$rLegSwitchtoeSplay2+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Twist1\") "+$rLegSwitchtoeTwist1+";" +
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Twist2\") "+$rLegSwitchtoeTwist2+";" + 
				"setAttr ($rigFileName[0]+ \"_rLegSwitchC.toe" + $nPad + $i + "Twist3\") "+$rLegSwitchtoeTwist3+";}\n");
				$i++;
			}
		}
		$end++;
	}
	
	fclose $fileID;
	 
}

global proc savePoseCheck()
{
	string $rig[] = `ls -sl`;
	$nameCheck = `checkBox -q -v useNameSave`;
	if ($nameCheck == 0)
	{
		string $rig[] = `ls -sl`;
		int $rigSize = `size $rig`;
		if ($rigSize > 0)
		{
			getIdentification;
			string $currentControl[] = `ls -sl`;
			int $identification = `getAttr {$currentControl[0] + ".identification"}`;

			if ($identification == 1122)
			{
				savePosePath;
			}
			else
			{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO SAVE FROM\n";}
		}
		else
		{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO SAVE FROM\n";}
	}
	else
	{
		string $rigName = `textField -q -text textFieldEntrySave`;
		if (`objExists ($rigName)`)
		{
			select $rigName;
			{
				savePosePath;
			}
		}
		else
		{
			{warning ($rigName+" IS NOT A VALID NAME\n");}
		}
	}
	select $rig;
}
	
//LOAD////////////////////////////////////////////////////////////////////////////////////
global proc loadPosePath()
{
	string $mayaFolder2;

	fileBrowserDialog -mode 0
    -fileCommand ( "loadPose \"" + $mayaFolder2 + "\"" )
    -actionName "Load";
}

global proc loadPose(string $mayaFolder2, string $result2, string $type2)
{
	string $rigName[] = `ls -sl`;	
	//string $rigName = `textField -q -text textFieldEntrySave`;
	int $identification = `getAttr ($rigName[0] + ".identification")`;
	//print $identification;
	if ($identification == 1122)
	{
		//FILE PATH
		print {"Loading Pose from "+$result2+"...\n"};
		//OPEN FILE FOR READING
		$fileID = `fopen $result2 "r"`;
		//print ($fileID+" is FileID"+"\n");
		//GET FIRST LINE
		string $nextLine = `fgetline $fileID`;
		//print ($nextLine+" is nextLine"+"\n");
		//LOOP
		while (size($nextLine) > 0)
		{
			eval ($nextLine);
			//print ($nextLine);
			$nextLine = `fgetline $fileID`;
		}
		//RETURN ARRAY
		//return $dataArray;
		fclose $fileID;
		print "Pose Loaded\n";
	}
	else
		{warning "PLEASE CHOOSE A VALID RIG";}
	 
}

global proc loadPoseCheck()
{
	string $rig[] = `ls -sl`;
	$nameCheck = `checkBox -q -v useNameSave`;
	if ($nameCheck == 0)
	{
		int $rigSize = `size $rig`;
		if ($rigSize > 0)
		{
			getIdentification;
			string $currentControl[] = `ls -sl`;
			int $identification = `getAttr {$currentControl[0] + ".identification"}`;

			if ($identification == 1122)
			{
				select $currentControl[0];
				//print ("current Control is" + $currentControl[0] + "\n");
				loadPosePath;
			}
			else
			{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO SAVE FROM\n";}
		}
		else
		{warning "YOU MUST SELECT A CONTROLLER OF THE CHARACTER YOU WISH TO SAVE FROM\n";}
	}
	else
	{
		string $rigName = `textField -q -text textFieldEntrySave`;
		if (`objExists ($rigName)`)
		{
			select $rigName;
			{
				//print "skips\n";
				loadPosePath;
			}
		}
		else
		{invalidName;}
	}
	select $rig;
}
		
/////CANCEL///////////////////
global proc cancelAnimUI()
{
	if (`window -exists createUIWindow`)
	{
		deleteUI createUIWindow;
	}
}

global proc TglTab1LoadRig()
{
	$currentSetting = `checkBox -q -v useName`;
	if ($currentSetting == 1)
	{
		textField -e -enable 1 textFieldEntry;
		button    -e -enable 1 loadRigButton;
	}
	else
	{
		textField -e -enable 0 textFieldEntry;
		button    -e -enable 0 loadRigButton;
	}
}

global proc TglTab2LoadRig()
{
	$currentSetting = `checkBox -q -v useNameSave`;
	if ($currentSetting == 1)
	{
		textField -e -enable 1 textFieldEntrySave;
		button    -e -enable 1 loadRigButtonSave;
	}
	else
	{
		textField -e -enable 0 textFieldEntrySave;
		button    -e -enable 0 loadRigButtonSave;
	}
}

global proc tglCurrentFrameTxtFld()
{
	$currentSetting = `checkBox -q -v toFrame`;
	if ($currentSetting == 1)
	{
		textField -e -enable 1 currentFrameTxtFld;
		button    -e -enable 1 loadCurrentFrameBtn;
	}
	else
	{
		textField -e -enable 0 currentFrameTxtFld;
		button    -e -enable 0 loadCurrentFrameBtn;
	}
}	

global proc tglBatchMirrorTxtFld()
{
	$currentSetting = `radioButtonGrp -q -select batchRange`;
	if ($currentSetting == 2)
	{
		textField -e -enable 1 batchMirrorStartTxtFld;
		textField -e -enable 1 batchMirrorEndTxtFld;
	}
	else
	{
		textField -e -enable 0 batchMirrorStartTxtFld;
		textField -e -enable 0 batchMirrorEndTxtFld;
	}
}

global proc createPoserUI()
{
	//string $fingerToeWindow;
	if (`window -exists RapidPoserUI`)
	{
		deleteUI RapidPoserUI;
	}
	
	int $fingersTotal = `intSliderGrp -q -v fingersChosen`;
	int $thumbsTotal = `checkBox -q -v thumbsChosen`;
	int $toesTotal = `intSliderGrp -q -v toesChosen`;
	int $spineTotal = `intSliderGrp -q -v spineChosen`;
	int $neckTotal = `intSliderGrp -q -v neckChosen`;
	int $toonArmsQuery = `checkBox -q -v toonArmsChosen`;
	int $toonLegsQuery = `checkBox -q -v toonLegsChosen`;
	int $UISize = `radioButtonGrp -q -sl RRP_UISize`;
	int $buttonOffset = 108;
	int $RToeOffset = 203;
	int $LToeOffset = 291;
	
	int $buttonHeight = 18;
	int $buttonWidth = 18;
	int $buttonGap = 0;
	int $fingerToeGap = 0;
	int $horizontalShiftRH = 0;
	int $horizontalShiftCenter = 0;
	int $horizontalShiftLH = 0;
	string $mirrorRangeGap = "           ";

	if ($UISize == 2)
	{//SMALL UI
		$buttonHeight = 16;
		$buttonWidth = 16;
		$buttonGap = 6;
		$fingerToeGap = 2;
		$horizontalShiftRH = -16;
		$horizontalShiftCenter = -38;
		$horizontalShiftLH = -60;
		$mirrorRangeGap = "";
	}
		
	
	if ($neckTotal == 1 && $toonArmsQuery == 1)
	{
		$buttonOffset = 122;
	}
	
	string $fingerToeWindow = `window -title "Rapid Poser" RapidPoserUI`;
	
	string $tabForm = `formLayout`;
	string $poserTabs = `tabLayout`;



	//TAB 1
	string $selectForm = `formLayout -numberOfDivisions 100`;
	//NAME TEXT FIELD
	string $nameCheckBox = `checkBox -label "Use Name:" -cc "TglTab1LoadRig" useName`;
	string $nameTxtFld = `textField -ed 1 -vis 1 -w (300 + $horizontalShiftLH - $buttonGap*2) -en 0 -enterCommand "setFocus useName" textFieldEntry`;
	string $rigLoadButton = `button -w 76 -h 24 -bgc .9 .9 .9 -l "Load Rig" -en 0 -c loadRig loadRigButton`;
	//HIDDEN TEXT FIELD
	string $controlNameTextField = `textField -ed 0 -vis 0 -w 300 controlName`;

	//columnLayout;	
	formLayout -edit
	-attachForm $nameCheckBox "left" (16 - $buttonGap)
	-attachForm $nameCheckBox "top" 8

	-attachForm $nameTxtFld "left" 105
	-attachForm $nameTxtFld "top" 8
	
	-attachForm $rigLoadButton "left" (418 + $horizontalShiftLH - $buttonGap*2)
	-attachForm $rigLoadButton "top" 8
	$selectForm;
	
	//CENTER CONTROLS
	string $Eyes        = `button -bgc .30 .65 .30 -w 35 -h $buttonHeight -label "Eyes"  -command "RRP_select(\"_EyeAimC\")"`;
	string $LEye        = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "L"     -command "RRP_select(\"_lEyeAimC\")"`;
	string $REye        = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "R"     -command "RRP_select(\"_rEyeAimC\")"`;
	string $HeadC       = `button -bgc .30 .65 .30 -w 79 -h $buttonHeight -label "Head"  -command "RRP_select(\"_HeadC\")"`;
	string $JawC        = `button -bgc .30 .65 .30 -w 79 -h $buttonHeight -label "Jaw"   -command "RRP_select(\"_JawC\")"`;
	
	formLayout -edit
	//CENTER
	-attachForm $Eyes "left" (240 + $horizontalShiftCenter)
	-attachForm $Eyes "top" ($buttonOffset - 66 - $buttonGap)
	
	-attachForm $REye "left" (218 + $horizontalShiftCenter)
	-attachForm $REye "top" ($buttonOffset - 66 - $buttonGap)
	
	-attachForm $LEye "left" (279 + $horizontalShiftCenter)
	-attachForm $LEye "top" ($buttonOffset - 66 - $buttonGap)
	
	-attachForm $HeadC "left" (218 + $horizontalShiftCenter)
	-attachForm $HeadC "top" ($buttonOffset - 44 - $buttonGap*2)

	-attachForm $JawC "left" (218 + $horizontalShiftCenter)
	-attachForm $JawC "top" ($buttonOffset - 22 - $buttonGap*3)
	$selectForm;

	//NECK
	int $allNeckLoc = ($buttonOffset - $buttonGap*4);
	
	if ($neckTotal >= 9)
	{
		string $Neck09C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk9"   -command "RRP_select(\"_Neck09FKC\")"`;
		string $Neck09Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C9"    -command "RRP_select(\"_Neck09CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck09C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck09C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck09Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck09Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 8)
	{
		string $Neck08C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk8"   -command "RRP_select(\"_Neck08FKC\")"`;
		string $Neck08Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C8"    -command "RRP_select(\"_Neck08CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck08C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck08C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck08Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck08Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 7)
	{
		string $Neck07C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk7"   -command "RRP_select(\"_Neck07FKC\")"`;
		string $Neck07Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C7"    -command "RRP_select(\"_Neck07CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck07C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck07C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck07Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck07Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 6)
	{
		string $Neck06C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk6"   -command "RRP_select(\"_Neck06FKC\")"`;
		string $Neck06Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C6"    -command "RRP_select(\"_Neck06CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck06C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck06C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck06Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck06Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 5)
	{
		string $Neck05C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk5"   -command "RRP_select(\"_Neck05FKC\")"`;
		string $Neck05Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C5"    -command "RRP_select(\"_Neck05CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck05C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck05C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck05Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck05Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 4)
	{
		string $Neck04C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk4"   -command "RRP_select(\"_Neck04FKC\")"`;
		string $Neck04Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C4"    -command "RRP_select(\"_Neck04CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck04C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck04C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck04Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck04Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 3)
	{
		string $Neck03C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk3"   -command "RRP_select(\"_Neck03FKC\")"`;
		string $Neck03Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3"    -command "RRP_select(\"_Neck03CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck03C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck03C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck03Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck03Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 2)
	{
		string $Neck02C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk2"   -command "RRP_select(\"_Neck02FKC\")"`;
		string $Neck02Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2"    -command "RRP_select(\"_Neck02CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck02C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck02C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck02Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck02Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}

	if ($neckTotal >= 1)
	{
		string $Neck01C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Nk1"   -command "RRP_select(\"_Neck01FKC\")"`;
		string $Neck01Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1"    -command "RRP_select(\"_Neck01CurveC\")"`;
		formLayout -edit
	
		-attachForm $Neck01C "left" (230 + $horizontalShiftCenter)
		-attachForm $Neck01C "top" ($buttonOffset - $buttonGap*4)
		
		-attachForm $Neck01Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Neck01Curve "top" ($buttonOffset - $buttonGap*4)
		$selectForm;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap);
	}
	
	if ($neckTotal >= 1)
	{
		string $NeckAFKC   = `button -bgc .85 .85 .70 -w $buttonWidth -h (((22 - $buttonGap)* $neckTotal) - 4 + $buttonGap) -label ">"     -command "RRP_select(\"_Neck??FKC\")"`;
		string $NeckAC     = `button -bgc .85 .85 .70 -w $buttonWidth -h (((22 - $buttonGap)* $neckTotal) - 4 + $buttonGap) -label "<"     -command "RRP_select(\"_Neck??CurveC\")"`;
		formLayout -edit
	
		-attachForm $NeckAFKC "left" (208 + $horizontalShiftCenter)
		-attachForm $NeckAFKC "top" $allNeckLoc

		-attachForm $NeckAC "left" (284 + $horizontalShiftCenter)
		-attachForm $NeckAC "top" $allNeckLoc
		
		$selectForm;
	}
	
	//NECK MID IK
	string $NeckMidIKC = `button -bgc .30 .65 .30 -w 49 -h $buttonHeight -label "NkMidIK"  -command "RRP_select(\"_NeckMidIKC\")"`;
	formLayout -edit

	-attachForm $NeckMidIKC "left" (231 + $horizontalShiftCenter)
	-attachForm $NeckMidIKC "top" (0 + $buttonOffset - $buttonGap*4)
	
	$selectForm;
	$buttonOffset = ($buttonOffset + 22 - $buttonGap*5);
	
	
	//ROOT AND MAIN
	string $SpineTopIKC = `button -bgc .30 .65 .30 -w 29 -h (29 - ($buttonGap*1.5)) -label "TpIK"  -command "RRP_select(\"_SpineTopIKC\")"`;

	string $ROOTC       = `button -bgc 0.8 0.8 0.8 -w 40 -h $buttonHeight -label "Root"  -command "RRP_select(\"_ROOTC\")"`;
	string $MainC       = `button -bgc 0.8 0.8 0.8 -w 40 -h $buttonHeight -label "Main"  -command "RRP_select(\"_MainC\")"`;
	
	formLayout -edit
	//CENTER
	
	-attachForm $SpineTopIKC "left" (241 + $horizontalShiftCenter)
	-attachForm $SpineTopIKC "top" (0 + $buttonOffset)
	
	-attachForm $ROOTC "left" (147 - $buttonGap*23)
	-attachForm $ROOTC "top" (80 + $buttonOffset + $buttonGap*6)
	
	-attachForm $MainC "left" (324 - $buttonGap*52.5)
	-attachForm $MainC "top" (80 + $buttonOffset + $buttonGap*10)
	
	$selectForm;
	

	//RIGHT ARM////////////////////////////////////////////////////////////
	string $RArmIkFk    = `button -bgc .89 .55 .55 -w (84 - $fingerToeGap*2) -h $buttonHeight -label "Switch"	-command "RRP_select(\"_rArmSwitchC\")"`;
	string $RHIk        = `button -bgc .89 .55 .55 -w 40 -h $buttonHeight -label "FKtoIK"	-command "rArmToIK"`;
	string $RHFk        = `button -bgc .89 .55 .55 -w 40 -h $buttonHeight -label "IKtoFK"	-command "rArmToFK"`;
	string $RPalmC      = `button -bgc .75 .34 .34 -w $buttonWidth -h 40 -label "P"		-command "RRP_select(\"_rPalmC\")"`;
	string $RWristC     = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "W" 		-command "RRP_selectIKFK(\"_rWristFKC\",\"_rWristIKC\",\"_rArmSwitchC\")"`;
	string $RElbowC     = `button -bgc .75 .34 .34 -w 34 -h $buttonHeight -label "Elbw"	-command "RRP_selectIKFK(\"_rElbowFKC\",\"_rElbowIKC\",\"_rArmSwitchC\")"`;
	string $RShoulderC  = `button -bgc .75 .34 .34 -w 34 -h $buttonHeight -label "Shldr"	-command "RRP_select(\"_rShoulderFKC\")"`;
	string $RCLavicleC  = `button -bgc .75 .34 .34 -w 29 -h (29 - ($buttonGap*1.5)) -label "Clvcl"	-command "RRP_select(\"_rClavicleC\")"`;
	//LEFT ARM////////////////////////////////////////////////////////////
	string $LArmIkFk    = `button -bgc .58 .68 .85 -w (84 - $fingerToeGap*2) -h $buttonHeight -label "Switch"	-command "RRP_select(\"_lArmSwitchC\")"`;
	string $LHIk        = `button -bgc .58 .68 .85 -w 40 -h $buttonHeight -label "FKtoIK"	-command "lArmToIK"`;
	string $LHFk        = `button -bgc .58 .68 .85 -w 40 -h $buttonHeight -label "IKtoFK"	-command "lArmToFK"`;
	string $LPalmC      = `button -bgc .40 .53 .74 -w $buttonWidth -h 40 -label "P"		-command "RRP_select(\"_lPalmC\")"`;
	string $LWristC     = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "W" 		-command "RRP_selectIKFK(\"_lWristFKC\",\"_lWristIKC\",\"_lArmSwitchC\")"`;
	string $LElbowC     = `button -bgc .40 .53 .74 -w 34 -h $buttonHeight -label "Elbw"	-command "RRP_selectIKFK(\"_lElbowFKC\",\"_lElbowIKC\",\"_lArmSwitchC\")"`;
	string $LShoulderC  = `button -bgc .40 .53 .74 -w 34 -h $buttonHeight -label "Shldr"	-command "RRP_select(\"_lShoulderFKC\")"`;
	string $LCLavicleC  = `button -bgc .40 .53 .74 -w 29 -h (29 - ($buttonGap*1.5)) -label "Clvcl"	-command "RRP_select(\"_lClavicleC\")"`;
	formLayout -edit
	//RIGHT ARM
	-attachForm $RArmIkFk "left" (88 + $fingerToeGap*11 + $horizontalShiftCenter)
	-attachForm $RArmIkFk "top" ($buttonOffset + 33 - $buttonGap)

	-attachForm $RHIk "left" (88 + $fingerToeGap*11 + $horizontalShiftCenter)
	-attachForm $RHIk "top" ($buttonOffset + 55 - $buttonGap*2)
	
	-attachForm $RHFk "left" (132 + $fingerToeGap*9 + $horizontalShiftCenter)
	-attachForm $RHFk "top" ($buttonOffset + 55 - $buttonGap*2)

	-attachForm $RPalmC "left" (88 + $fingerToeGap*11 + $horizontalShiftCenter)
	-attachForm $RPalmC "top" ($buttonOffset - 11)

	-attachForm $RWristC "left" (110 + $fingerToeGap*8 + $horizontalShiftCenter)
	-attachForm $RWristC "top" ($buttonOffset - 0)
	
	-attachForm $RElbowC "left"( 132 + $fingerToeGap*6 + $horizontalShiftCenter)
	-attachForm $RElbowC "top" ($buttonOffset - 0)

	-attachForm $RShoulderC "left" (170 + $fingerToeGap*4 + $horizontalShiftCenter)
	-attachForm $RShoulderC "top" ($buttonOffset - 0)
	
	-attachForm $RCLavicleC "left" (208 + $fingerToeGap*2 + $horizontalShiftCenter)
	-attachForm $RCLavicleC "top" ($buttonOffset - 0)


	//LEFT ARM
	-attachForm $LArmIkFk "left" (339 - $fingerToeGap*10 + $horizontalShiftCenter)
	-attachForm $LArmIkFk "top" ($buttonOffset + 33 - $buttonGap)

	-attachForm $LHIk "left" (339 - $fingerToeGap*10 + $horizontalShiftCenter)
	-attachForm $LHIk "top" ($buttonOffset + 55 - $buttonGap*2)
	
	-attachForm $LHFk "left" (383 - $fingerToeGap*12 + $horizontalShiftCenter)
	-attachForm $LHFk "top" ($buttonOffset + 55 - $buttonGap*2)

	-attachForm $LPalmC "left" (405 - $fingerToeGap*11 + $horizontalShiftCenter)
	-attachForm $LPalmC "top" ($buttonOffset - 11)

	-attachForm $LWristC "left" (383 - $fingerToeGap*8 + $horizontalShiftCenter)
	-attachForm $LWristC "top" ($buttonOffset - 0)
	
	-attachForm $LElbowC "left" (345 - $fingerToeGap*6 + $horizontalShiftCenter)
	-attachForm $LElbowC "top" ($buttonOffset - 0)

	-attachForm $LShoulderC "left" (307 - $fingerToeGap*4 + $horizontalShiftCenter)
	-attachForm $LShoulderC "top" ($buttonOffset - 0)
	
	-attachForm $LCLavicleC "left" (274 - $fingerToeGap*2 + $horizontalShiftCenter)
	-attachForm $LCLavicleC "top" ($buttonOffset - 0)

	$selectForm;	


	//ARM CURVE CONTROLS
	if ($toonArmsQuery ==1)
	{
		//MACRO
		string $RLowerArmCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "LC"  -command "RRP_select(\"_rLowerArmCurveC\")"`;
		string $RElbowCurve    = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "EC"  -command "RRP_select(\"_rElbowCurveC\")"`;
		string $RUpperArmCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "UC"  -command "RRP_select(\"_rUpperArmCurveC\")"`;
		string $LLowerArmCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "LC"  -command "RRP_select(\"_lLowerArmCurveC\")"`;
		string $LElbowCurve    = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "EC"  -command "RRP_select(\"_lElbowCurveC\")"`;
		string $LUpperArmCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "UC"  -command "RRP_select(\"_lUpperArmCurveC\")"`;	
    	
		//MICRO
		string $RLowerArmCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v"  -command "RRP_select(\"_rLowerArmCurve?C\")"`;
		string $RLowerArmCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_rLowerArmCurve1C\")"`;
		string $RLowerArmCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_rLowerArmCurve2C\")"`;
		string $RLowerArmCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_rLowerArmCurve3C\")"`;
		string $RUpperArmCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v"  -command "RRP_select(\"_rUpperArmCurve?C\")"`;
		string $RUpperArmCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_rUpperArmCurve1C\")"`;
		string $RUpperArmCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_rUpperArmCurve2C\")"`;
		string $RUpperArmCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_rUpperArmCurve3C\")"`;
    	
		string $LLowerArmCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v"  -command "RRP_select(\"_lLowerArmCurve?C\")"`;
		string $LLowerArmCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_lLowerArmCurve1C\")"`;
		string $LLowerArmCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_lLowerArmCurve2C\")"`;
		string $LLowerArmCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_lLowerArmCurve3C\")"`;
		string $LUpperArmCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v"  -command "RRP_select(\"_lUpperArmCurve?C\")"`;
		string $LUpperArmCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_lUpperArmCurve1C\")"`;
		string $LUpperArmCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_lUpperArmCurve2C\")"`;
		string $LUpperArmCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_lUpperArmCurve3C\")"`;
    	
		formLayout -edit
		
		-attachForm $RLowerArmCurve "left" (132 + $horizontalShiftCenter + $buttonGap*2)
		-attachForm $RLowerArmCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
		-attachForm $RElbowCurve "left" (157 + $horizontalShiftCenter + $buttonGap*1 + $fingerToeGap)
		-attachForm $RElbowCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
		-attachForm $RUpperArmCurve "left" (182 + $horizontalShiftCenter + $fingerToeGap*2)
		-attachForm $RUpperArmCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
		-attachForm $LLowerArmCurve "left" (357 + $horizontalShiftCenter - $buttonGap*2 + $fingerToeGap*2)
		-attachForm $LLowerArmCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
		-attachForm $LElbowCurve "left" (332 + $horizontalShiftCenter - $buttonGap*1 + $fingerToeGap)
		-attachForm $LElbowCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
		-attachForm $LUpperArmCurve "left" (307 + $horizontalShiftCenter)
		-attachForm $LUpperArmCurve "top" ($buttonOffset - 112 + $buttonGap*5)
    	
			
		-attachForm $RLowerArmCurveA "left" (140 + $horizontalShiftCenter + $buttonGap*1.5)
		-attachForm $RLowerArmCurveA "top" ($buttonOffset - 88 + $buttonGap*4)
		
		-attachForm $RLowerArmCurve1 "left" (140 + $horizontalShiftCenter + $buttonGap*1.5)
		-attachForm $RLowerArmCurve1 "top" ($buttonOffset - 66 + $buttonGap*3)
		
		-attachForm $RLowerArmCurve2 "left" (140 + $horizontalShiftCenter + $buttonGap*1.5)
		-attachForm $RLowerArmCurve2 "top" ($buttonOffset - 44 + $buttonGap*2)
		
		-attachForm $RLowerArmCurve3 "left" (140 + $horizontalShiftCenter + $buttonGap*1.5)
		-attachForm $RLowerArmCurve3 "top" ($buttonOffset - 22 + $buttonGap*1)
    	
		
		-attachForm $RUpperArmCurveA "left" (178 + $horizontalShiftCenter + $buttonGap*0.5)
		-attachForm $RUpperArmCurveA "top" ($buttonOffset - 88 + $buttonGap*4)
		
		-attachForm $RUpperArmCurve1 "left" (178 + $horizontalShiftCenter + $buttonGap*0.5)
		-attachForm $RUpperArmCurve1 "top" ($buttonOffset - 66 + $buttonGap*3)
		
		-attachForm $RUpperArmCurve2 "left" (178 + $horizontalShiftCenter + $buttonGap*0.5)
		-attachForm $RUpperArmCurve2 "top" ($buttonOffset - 44 + $buttonGap*2)
		
		-attachForm $RUpperArmCurve3 "left" (178 + $horizontalShiftCenter + $buttonGap*0.5)
		-attachForm $RUpperArmCurve3 "top" ($buttonOffset - 22 + $buttonGap*1)
    	
		
		-attachForm $LLowerArmCurveA "left" (353 + $horizontalShiftCenter - $buttonGap*1.5)
		-attachForm $LLowerArmCurveA "top" ($buttonOffset - 88 + $buttonGap*4)
		
		-attachForm $LLowerArmCurve1 "left" (353 + $horizontalShiftCenter - $buttonGap*1.5)
		-attachForm $LLowerArmCurve1 "top" ($buttonOffset - 66 + $buttonGap*3)
		
		-attachForm $LLowerArmCurve2 "left" (353 + $horizontalShiftCenter - $buttonGap*1.5)
		-attachForm $LLowerArmCurve2 "top" ($buttonOffset - 44 + $buttonGap*2)
		
		-attachForm $LLowerArmCurve3 "left" (353 + $horizontalShiftCenter - $buttonGap*1.5)
		-attachForm $LLowerArmCurve3 "top" ($buttonOffset - 22 + $buttonGap*1)
		
		
		-attachForm $LUpperArmCurveA "left" (315 + $horizontalShiftCenter - $buttonGap*0.5)
		-attachForm $LUpperArmCurveA "top" ($buttonOffset - 88 + $buttonGap*4)
		
		-attachForm $LUpperArmCurve1 "left" (315 + $horizontalShiftCenter - $buttonGap*0.5)
		-attachForm $LUpperArmCurve1 "top" ($buttonOffset - 66 + $buttonGap*3)
		
		-attachForm $LUpperArmCurve2 "left" (315 + $horizontalShiftCenter - $buttonGap*0.5)
		-attachForm $LUpperArmCurve2 "top" ($buttonOffset - 44 + $buttonGap*2)
		
		-attachForm $LUpperArmCurve3 "left" (315 + $horizontalShiftCenter - $buttonGap*0.5)
		-attachForm $LUpperArmCurve3 "top" ($buttonOffset - 22 + $buttonGap*1)
		$selectForm;
	}
	
	
	//SPINE CONTROLS
	int $HipStart = ($buttonOffset + 120 + ($buttonGap*1.5));
	int $spineButtonOffset = ($buttonOffset + 33 - ($buttonGap*1.1));
	int $allSpineLoc = ($spineButtonOffset - $buttonGap*1);

	if ($spineTotal >= 10)
	{
		string $Spine10C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp10"   -command "RRP_select(\"_Spine10FKC\")"`;
		string $Spine10Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C10"    -command "RRP_select(\"_Spine10CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine10C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine10C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine10Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine10Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}
	
	if ($spineTotal >= 9)
	{
		string $Spine09C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp9"   -command "RRP_select(\"_Spine09FKC\")"`;
		string $Spine09Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C9"    -command "RRP_select(\"_Spine09CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine09C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine09C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine09Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine09Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 8)
	{
		string $Spine08C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp8"   -command "RRP_select(\"_Spine08FKC\")"`;
		string $Spine08Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C8"    -command "RRP_select(\"_Spine08CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine08C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine08C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine08Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine08Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 7)
	{
		string $Spine07C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp7"   -command "RRP_select(\"_Spine07FKC\")"`;
		string $Spine07Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C7"    -command "RRP_select(\"_Spine07CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine07C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine07C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine07Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine07Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 6)
	{
		string $Spine06C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp6"   -command "RRP_select(\"_Spine06FKC\")"`;
		string $Spine06Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C6"    -command "RRP_select(\"_Spine06CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine06C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine06C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine06Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine06Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 5)
	{
		string $Spine05C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp5"   -command "RRP_select(\"_Spine05FKC\")"`;
		string $Spine05Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C5"    -command "RRP_select(\"_Spine05CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine05C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine05C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine05Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine05Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 4)
	{
		string $Spine04C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp4"   -command "RRP_select(\"_Spine04FKC\")"`;
		string $Spine04Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C4"    -command "RRP_select(\"_Spine04CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine04C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine04C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine04Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine04Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 3)
	{
		string $Spine03C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp3"   -command "RRP_select(\"_Spine03FKC\")"`;
		string $Spine03Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3"    -command "RRP_select(\"_Spine03CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine03C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine03C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine03Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine03Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 2)
	{
		string $Spine02C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp2"   -command "RRP_select(\"_Spine02FKC\")"`;
		string $Spine02Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2"    -command "RRP_select(\"_Spine02CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine02C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine02C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine02Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine02Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}

	if ($spineTotal >= 1)
	{
		string $Spine01C     = `button -bgc .30 .65 .30 -w 29 -h $buttonHeight -label "Sp1"   -command "RRP_select(\"_Spine01FKC\")"`;
		string $Spine01Curve = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1"    -command "RRP_select(\"_Spine01CurveC\")"`;
		formLayout -edit
	
		-attachForm $Spine01C "left" (230 + $horizontalShiftCenter)
		-attachForm $Spine01C "top" ($spineButtonOffset - $buttonGap*1)
		
		-attachForm $Spine01Curve "left" (262 + $horizontalShiftCenter)
		-attachForm $Spine01Curve "top" ($spineButtonOffset - $buttonGap*1)
		$selectForm;
		$spineButtonOffset = ($spineButtonOffset + 22 - $buttonGap);
	}
	
	if ($spineTotal >= 1)
	{
		string $SpineAFKC   = `button -bgc .85 .85 .70 -w $buttonWidth -h (((22 - $buttonGap)* $spineTotal) - 4 + $buttonGap) -label ">"     -command "RRP_select(\"_Spine??FKC\")"`;
		string $SpineAC     = `button -bgc .85 .85 .70 -w $buttonWidth -h (((22 - $buttonGap)* $spineTotal) - 4 + $buttonGap) -label "<"     -command "RRP_select(\"_Spine??CurveC\")"`;
		formLayout -edit
	
		-attachForm $SpineAFKC "left" (208 + $horizontalShiftCenter)
		-attachForm $SpineAFKC "top" $allSpineLoc

		-attachForm $SpineAC "left" (284 + $horizontalShiftCenter)
		-attachForm $SpineAC "top" $allSpineLoc
		
		$selectForm;
	}

	$HipStart = ($spineButtonOffset + 22 - $buttonGap);
	
	//LEGS
	string $SpineMidIKC = `button -bgc .30 .65 .30 -w 35 -h $buttonHeight -label "MidIK"  		-command "RRP_select(\"_SpineMidIKC\")"`;
	string $MainHipC    = `button -bgc .30 .65 .30 -w $buttonWidth -h $buttonHeight -label "H"     		-command "RRP_select(\"_MainHipC\")"`;
		
	string $RHipC        = `button -bgc .75 .34 .34 -w $buttonWidth -h 34 -label "R"      	-command "RRP_select(\"_rHipFKC\")"`;
	string $RKneeC       = `button -bgc .75 .34 .34 -w $buttonWidth -h 34 -label "K"      	-command "RRP_selectIKFK(\"_rKneeFKC\",\"_rKneeIKC\",\"_rLegSwitchC\")"`;
	string $RFoot1C      = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "F1"     	-command "RRP_selectIKFK(\"_rAnkleFKC\",\"_rFootIKC\",\"_rLegSwitchC\")"`;
	string $RFoot2C      = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "F2"     	-command "RRP_selectIKFK(\"_rBallFKC\",\"_rToeIKC\",\"_rLegSwitchC\")"`;
	string $RFIkFkC      = `button -bgc .89 .55 .55 -w 84 -h $buttonHeight -label "Switch" 	-command "RRP_select(\"_rLegSwitchC\")"`;
	string $RFIk         = `button -bgc .89 .55 .55 -w 40 -h $buttonHeight -label "FKtoIK"     -command "rLegToIK"`;
	string $RFFk         = `button -bgc .89 .55 .55 -w 40 -h $buttonHeight -label "IKtoFK"     -command "rLegToFK"`; 
	
	string $LHipC        = `button -bgc .40 .53 .74 -w $buttonWidth -h 34 -label "L"      	-command "RRP_select(\"_lHipFKC\")"`;
	string $LKneeC       = `button -bgc .40 .53 .74 -w $buttonWidth -h 34 -label "K"      	-command "RRP_selectIKFK(\"_lKneeFKC\",\"_lKneeIKC\",\"_lLegSwitchC\")"`;
	string $LFoot1C      = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "F1"     	-command "RRP_selectIKFK(\"_lAnkleFKC\",\"_lFootIKC\",\"_lLegSwitchC\")"`;
	string $LFoot2C      = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "F2"     	-command "RRP_selectIKFK(\"_lBallFKC\",\"_lToeIKC\",\"_lLegSwitchC\")"`;
	string $LFIkFkC      = `button -bgc .58 .68 .85 -w 84 -h $buttonHeight -label "Switch" 	-command "RRP_select(\"_lLegSwitchC\")"`;
	string $LFIk         = `button -bgc .58 .68 .85 -w 40 -h $buttonHeight -label "FKtoIK"     -command "lLegToIK"`;
	string $LFFk         = `button -bgc .58 .68 .85 -w 40 -h $buttonHeight -label "IKtoFK"     -command "lLegToFK"`;  
	
	formLayout -edit

	-attachForm $SpineMidIKC "left" (238 + $horizontalShiftCenter)
	-attachForm $SpineMidIKC "top" ($HipStart - 22)

	-attachForm $MainHipC "left" (247 + $horizontalShiftCenter)
	-attachForm $MainHipC "top" ($HipStart - $buttonGap)
	
	//RIGHT LEG
	-attachForm $RHipC "left" (225 + $horizontalShiftCenter) 
	-attachForm $RHipC "top" ($HipStart - $buttonGap)

	-attachForm $RKneeC "left" (225 + $horizontalShiftCenter) 
	-attachForm $RKneeC "top" ($HipStart + 38 - $buttonGap*2)

	-attachForm $RFoot1C "left" (225 + $horizontalShiftCenter) 
	-attachForm $RFoot1C "top" ($HipStart + 76 - $buttonGap*3)

	-attachForm $RFoot2C "left" (225 + $horizontalShiftCenter) 
	-attachForm $RFoot2C "top" ($HipStart + 98 - $buttonGap*4)
	
	-attachForm $RFIkFkC "left" (137 + $horizontalShiftCenter) 
	-attachForm $RFIkFkC "top" ($HipStart + 76 - $buttonGap*3)

	-attachForm $RFIk "left" (137 + $horizontalShiftCenter) 
	-attachForm $RFIk "top" ($HipStart + 98 - $buttonGap*4)

	-attachForm $RFFk "left" (181 + $horizontalShiftCenter) 
	-attachForm $RFFk "top" ($HipStart + 98 - $buttonGap*4)

	//LEFT LEG	
	-attachForm $LHipC "left" (269 + $horizontalShiftCenter) 
	-attachForm $LHipC "top" ($HipStart - $buttonGap)

	-attachForm $LKneeC "left" (269 + $horizontalShiftCenter)
	-attachForm $LKneeC "top" ($HipStart + 38 - $buttonGap*2)

	-attachForm $LFoot1C "left" (269 + $horizontalShiftCenter)
	-attachForm $LFoot1C "top" ($HipStart + 76 - $buttonGap*3)
	
	-attachForm $LFoot2C "left" (269 + $horizontalShiftCenter)
	-attachForm $LFoot2C "top" ($HipStart + 98 - $buttonGap*4)
	
	-attachForm $LFIkFkC "left" (291 - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
	-attachForm $LFIkFkC "top" ($HipStart + 76 - $buttonGap*3)
	
	-attachForm $LFIk "left" (291 + $horizontalShiftCenter - $fingerToeGap*2)
	-attachForm $LFIk "top" ($HipStart + 98 - $buttonGap*4)
	
	-attachForm $LFFk "left" (335 + $horizontalShiftCenter - $fingerToeGap*2)
	-attachForm $LFFk "top" ($HipStart + 98 - $buttonGap*4)
	
	$selectForm;	

	//TOES
	if ($toesTotal >= 2)
	{
		string $RToe01J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "1" -command "RRP_select(\"_rToe01J1C\")"`; 
		string $RToe01J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe01J2C\")"`;
		string $RToe01JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe01J?C\")"`;
		string $LToe01J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "1" -command "RRP_select(\"_lToe01J1C\")"`;
		string $LToe01J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe01J2C\")"`;
		string $LToe01JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe01J?C\")"`;
		
		string $RToe02J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "2" -command "RRP_select(\"_rToe02J1C\")"`; 
		string $RToe02J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe02J2C\")"`;
		string $RToe02J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe02J3C\")"`; 
		string $RToe02JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe02J?C\")"`; 
		string $LToe02J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "2" -command "RRP_select(\"_lToe02J1C\")"`; 
		string $LToe02J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe02J2C\")"`;
		string $LToe02J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe02J3C\")"`;
		string $LToe02JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe02J?C\")"`;
		
		formLayout -edit
		-attachForm $RToe01J1C "left" (225 + $horizontalShiftCenter)
		-attachForm $RToe01J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe01J2C "left" (225 + $horizontalShiftCenter)
		-attachForm $RToe01J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
		
		-attachForm $RToe01JAC "left" (225 + $horizontalShiftCenter)
		-attachForm $RToe01JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		-attachForm $RToe02J1C "left" (203 + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToe02J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe02J2C "left" (203 + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToe02J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe02J3C "left" (203 + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToe02J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe02JAC "left" (203 + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToe02JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
		
		
		-attachForm $LToe01J1C "left" (269 + $horizontalShiftCenter)
		-attachForm $LToe01J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe01J2C "left" (269 + $horizontalShiftCenter)
		-attachForm $LToe01J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
		
		-attachForm $LToe01JAC "left" (269 + $horizontalShiftCenter)
		-attachForm $LToe01JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		-attachForm $LToe02J1C "left" (291 - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToe02J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe02J2C "left" (291 - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToe02J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe02J3C "left" (291 - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToe02J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe02JAC "left" (291 - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToe02JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
		
		
		$selectForm;
	}

	if ($toesTotal >= 3)
	{
		string $RToe03J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "3" -command "RRP_select(\"_rToe03J1C\")"`; 
		string $RToe03J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe03J2C\")"`;
		string $RToe03J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe03J3C\")"`; 
		string $RToe03JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe03J?C\")"`; 
		string $LToe03J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "3" -command "RRP_select(\"_lToe03J1C\")"`; 
		string $LToe03J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe03J2C\")"`;
		string $LToe03J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe03J3C\")"`;
		string $LToe03JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe03J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap + $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap - $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe03J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe03J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe03J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe03J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe03J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe03J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe03JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe03JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
	
		
		-attachForm $LToe03J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe03J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe03J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe03J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe03J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe03J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe03JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe03JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}

	if ($toesTotal >= 4)
	{
		string $RToe04J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "4" -command "RRP_select(\"_rToe04J1C\")"`; 
		string $RToe04J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe04J2C\")"`;
		string $RToe04J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe04J3C\")"`; 
		string $RToe04JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe04J?C\")"`; 
		string $LToe04J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "4" -command "RRP_select(\"_lToe04J1C\")"`; 
		string $LToe04J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe04J2C\")"`;
		string $LToe04J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe04J3C\")"`;
		string $LToe04JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe04J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe04J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe04J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe04J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe04J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe04J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe04J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe04JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe04JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
	
		-attachForm $LToe04J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe04J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe04J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe04J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe04J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe04J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe04JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe04JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}


	if ($toesTotal >= 5)
	{
		string $RToe05J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "5" -command "RRP_select(\"_rToe05J1C\")"`; 
		string $RToe05J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe05J2C\")"`;
		string $RToe05J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe05J3C\")"`; 
		string $RToe05JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe05J?C\")"`; 
		string $LToe05J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "5" -command "RRP_select(\"_lToe05J1C\")"`; 
		string $LToe05J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe05J2C\")"`;
		string $LToe05J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe05J3C\")"`;
		string $LToe05JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe05J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe05J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe05J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe05J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe05J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe05J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe05J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe05JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe05JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
	
		-attachForm $LToe05J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe05J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe05J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe05J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe05J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe05J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe05JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe05JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}


	if ($toesTotal >= 6)
	{
		string $RToe06J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "6" -command "RRP_select(\"_rToe06J1C\")"`; 
		string $RToe06J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe06J2C\")"`;
		string $RToe06J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe06J3C\")"`; 
		string $RToe06JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe06J?C\")"`; 
		string $LToe06J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "6" -command "RRP_select(\"_lToe06J1C\")"`; 
		string $LToe06J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe06J2C\")"`;
		string $LToe06J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe06J3C\")"`;
		string $LToe06JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe06J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe06J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe06J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe06J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe06J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe06J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe06J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe06JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe06JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		
		-attachForm $LToe06J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe06J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe06J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe06J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe06J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe06J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe06JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe06JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}


	if ($toesTotal >= 7)
	{
		string $RToe07J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "7" -command "RRP_select(\"_rToe07J1C\")"`; 
		string $RToe07J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe07J2C\")"`;
		string $RToe07J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe07J3C\")"`; 
		string $RToe07JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe07J?C\")"`; 
		string $LToe07J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "7" -command "RRP_select(\"_lToe07J1C\")"`; 
		string $LToe07J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe07J2C\")"`;
		string $LToe07J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe07J3C\")"`;
		string $LToe07JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe07J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe07J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe07J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe07J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe07J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe07J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe07J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe07JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe07JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		
		-attachForm $LToe07J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe07J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe07J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe07J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe07J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe07J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe07JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe07JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}

	if ($toesTotal >= 8)
	{
		string $RToe08J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "8" -command "RRP_select(\"_rToe08J1C\")"`; 
		string $RToe08J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe08J2C\")"`;
		string $RToe08J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe08J3C\")"`; 
		string $RToe08JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe08J?C\")"`; 
		string $LToe08J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "8" -command "RRP_select(\"_lToe08J1C\")"`; 
		string $LToe08J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe08J2C\")"`;
		string $LToe08J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe08J3C\")"`;
		string $LToe08JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe08J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe08J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe08J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe08J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe08J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe08J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe08J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe08JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe08JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		
		-attachForm $LToe08J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe08J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe08J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe08J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe08J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe08J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe08JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe08JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}


	if ($toesTotal >= 9)
	{
		string $RToe09J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "9" -command "RRP_select(\"_rToe09J1C\")"`; 
		string $RToe09J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe09J2C\")"`;
		string $RToe09J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe09J3C\")"`; 
		string $RToe09JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe09J?C\")"`; 
		string $LToe09J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "9" -command "RRP_select(\"_lToe09J1C\")"`; 
		string $LToe09J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe09J2C\")"`;
		string $LToe09J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe09J3C\")"`;
		string $LToe09JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe09J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);
		
		formLayout -edit
		-attachForm $RToe09J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe09J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe09J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe09J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $RToe09J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe09J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe09JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe09JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		
		-attachForm $LToe09J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe09J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe09J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe09J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
	
		-attachForm $LToe09J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe09J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe09JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe09JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
	
		$selectForm;
	}


	if ($toesTotal >= 10)
	{
		string $RToe10J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "10" -command "RRP_select(\"_rToe10J1C\")"`; 
		string $RToe10J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe10J2C\")"`;
		string $RToe10J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rToe10J3C\")"`; 
		string $RToe10JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_rToe10J?C\")"`; 
		string $LToe10J1C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label "10" -command "RRP_select(\"_lToe10J1C\")"`; 
		string $LToe10J2C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe10J2C\")"`;
		string $LToe10J3C = `button -bgc .33 .57 .35 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lToe10J3C\")"`;
		string $LToe10JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "^" -command "RRP_select(\"_lToe10J?C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap - $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap + $fingerToeGap);

		formLayout -edit
		-attachForm $RToe10J1C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe10J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToe10J2C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe10J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
    	
		-attachForm $RToe10J3C "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe10J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToe10JAC "left" ($RToeOffset + $horizontalShiftCenter)
		-attachForm $RToe10JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)

	
		-attachForm $LToe10J1C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe10J1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToe10J2C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe10J2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
    	
		-attachForm $LToe10J3C "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe10J3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToe10JAC "left" ($LToeOffset + $horizontalShiftCenter)
		-attachForm $LToe10JAC "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)

		$selectForm;
	}

	if ($toesTotal >= 2)
	{
		string $RToeAJ1C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rToe*J1C\")"`;
		string $RToeAJ2C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rToe*J2C\")"`;
		string $RToeAJ3C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rToe*J3C\")"`;
		string $RToeAll  = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "A" -command "RRP_select(\"_rToe*J*C\")"`;
		string $LToeAJ1C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lToe*J1C\")"`;
		string $LToeAJ2C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lToe*J2C\")"`;
		string $LToeAJ3C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lToe*J3C\")"`;
		string $LToeAll  = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "A" -command "RRP_select(\"_lToe*J*C\")"`;
		$RToeOffset = ($RToeOffset - 22 + $buttonGap + $fingerToeGap);
		$LToeOffset = ($LToeOffset + 22 - $buttonGap - $fingerToeGap);

		formLayout -edit

		-attachForm $RToeAJ1C "left" ($RToeOffset - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToeAJ1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $RToeAJ2C "left" ($RToeOffset - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToeAJ2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
    	
		-attachForm $RToeAJ3C "left" ($RToeOffset - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToeAJ3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $RToeAll "left" ($RToeOffset - $buttonGap + $fingerToeGap + $horizontalShiftCenter)
		-attachForm $RToeAll "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
    	
    	
		-attachForm $LToeAJ1C "left" ($LToeOffset + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToeAJ1C "top" ($HipStart + 120 - $buttonGap*5)
			
		-attachForm $LToeAJ2C "left" ($LToeOffset + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToeAJ2C "top" ($HipStart + 138 - $buttonGap*5 - $fingerToeGap)
    	
		-attachForm $LToeAJ3C "left" ($LToeOffset + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToeAJ3C "top" ($HipStart + 156 - $buttonGap*5 - $fingerToeGap*2)
		
		-attachForm $LToeAll "left" ($LToeOffset + $buttonGap - $fingerToeGap + $horizontalShiftCenter)
		-attachForm $LToeAll "top" ($HipStart + 178 - $buttonGap*6 - $fingerToeGap*2)
		
		$selectForm;
	}

	string $SelectAll   = `button -w (83 - $buttonWidth/2) -h $buttonHeight -label "Select All" -command "selectAllControlsCheckAdv"`;
	string $DeSelectAll = `button -w (83 - $buttonWidth/2) -h $buttonHeight -label "De-Select All" -command "deselectAllControls"`;
	
	formLayout -edit

  	-attachForm $SelectAll "left" (420 + $horizontalShiftLH*1.15)
  	-attachForm $SelectAll "top" (150 + $buttonOffset - $buttonGap*6)

  	-attachForm $DeSelectAll "left" (420 + $horizontalShiftLH*1.15)
  	-attachForm $DeSelectAll "top" (174 + $buttonOffset - $buttonGap*6)

  	$selectForm;

	//LEG CURVE CONTROLS
	if ($toonLegsQuery ==1)
	{
		//MACRO
		string $RLowerLegCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "LC"  -command "RRP_select(\"_rLowerLegCurveC\")"`;
		string $RKneeCurve     = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "KC"  -command "RRP_select(\"_rKneeCurveC\")"`;
		string $RUpperLegCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "UC"  -command "RRP_select(\"_rUpperLegCurveC\")"`;
		string $LLowerLegCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "LC"  -command "RRP_select(\"_lLowerLegCurveC\")"`;
		string $LKneeCurve     = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "KC"  -command "RRP_select(\"_lKneeCurveC\")"`;
		string $LUpperLegCurve = `button -bgc .84 .64 .47 -w ($buttonWidth + 2) -h $buttonHeight -label "UC"  -command "RRP_select(\"_lUpperLegCurveC\")"`; 
    	
		//MICRO
		string $RLowerLegCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">"  -command "RRP_select(\"_rLowerLegCurve?C\")"`;
		string $RLowerLegCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_rLowerLegCurve1C\")"`;
		string $RLowerLegCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_rLowerLegCurve2C\")"`;
		string $RLowerLegCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_rLowerLegCurve3C\")"`;
		string $RUpperLegCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">"  -command "RRP_select(\"_rUpperLegCurve?C\")"`;
		string $RUpperLegCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_rUpperLegCurve1C\")"`;
		string $RUpperLegCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_rUpperLegCurve2C\")"`;
		string $RUpperLegCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_rUpperLegCurve3C\")"`;
    	
		string $LLowerLegCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<"  -command "RRP_select(\"_lLowerLegCurve?C\")"`;
		string $LLowerLegCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_lLowerLegCurve1C\")"`;
		string $LLowerLegCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_lLowerLegCurve2C\")"`;
		string $LLowerLegCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_lLowerLegCurve3C\")"`;
		string $LUpperLegCurveA = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<"  -command "RRP_select(\"_lUpperLegCurve?C\")"`;
		string $LUpperLegCurve1 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C1" -command "RRP_select(\"_lUpperLegCurve1C\")"`;
		string $LUpperLegCurve2 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C2" -command "RRP_select(\"_lUpperLegCurve2C\")"`;
		string $LUpperLegCurve3 = `button -bgc .84 .64 .47 -w $buttonWidth -h $buttonHeight -label "C3" -command "RRP_select(\"_lUpperLegCurve3C\")"`;
    	
		formLayout -edit
    	
		-attachForm $RUpperLegCurve "left" (113 + $horizontalShiftCenter + $buttonGap*5 - $fingerToeGap)
		-attachForm $RUpperLegCurve "top" ($HipStart - $fingerToeGap*1)
    	
		-attachForm $RKneeCurve "left" (113 + $horizontalShiftCenter + $buttonGap*5 - $fingerToeGap)
		-attachForm $RKneeCurve "top" ($HipStart + 25 - $fingerToeGap*3)
    	
		-attachForm $RLowerLegCurve "left" (113 + $horizontalShiftCenter + $buttonGap*5 - $fingerToeGap)
		-attachForm $RLowerLegCurve "top" ($HipStart + 50 - $fingerToeGap*5)
    	
    	
		-attachForm $LUpperLegCurve "left" (379 + $horizontalShiftCenter - $buttonGap*5 + $fingerToeGap)
		-attachForm $LUpperLegCurve "top" ($HipStart - $fingerToeGap*1)
    	
		-attachForm $LKneeCurve "left" (379 + $horizontalShiftCenter - $buttonGap*5 + $fingerToeGap)
		-attachForm $LKneeCurve "top" ($HipStart + 25 - $fingerToeGap*3)
    	
		-attachForm $LLowerLegCurve "left" (379 + $horizontalShiftCenter - $buttonGap*5 + $fingerToeGap)
		-attachForm $LLowerLegCurve "top" ($HipStart + 50 - $fingerToeGap*5)
    	
		
		-attachForm $RUpperLegCurveA "left" (137 + $horizontalShiftCenter + $buttonGap*4)
		-attachForm $RUpperLegCurveA "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $RUpperLegCurve1 "left" (159 + $horizontalShiftCenter + $buttonGap*3)
		-attachForm $RUpperLegCurve1 "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $RUpperLegCurve2 "left" (181 + $horizontalShiftCenter + $buttonGap*2)
		-attachForm $RUpperLegCurve2 "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $RUpperLegCurve3 "left" (203 + $horizontalShiftCenter + $buttonGap)
		-attachForm $RUpperLegCurve3 "top" ($HipStart + 8 - $buttonGap)
    	
		
		-attachForm $RLowerLegCurveA "left" (137 + $horizontalShiftCenter + $buttonGap*4)
		-attachForm $RLowerLegCurveA "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $RLowerLegCurve1 "left" (159 + $horizontalShiftCenter + $buttonGap*3)
		-attachForm $RLowerLegCurve1 "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $RLowerLegCurve2 "left" (181 + $horizontalShiftCenter + $buttonGap*2)
		-attachForm $RLowerLegCurve2 "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $RLowerLegCurve3 "left" (203 + $horizontalShiftCenter + $buttonGap)
		-attachForm $RLowerLegCurve3 "top" ($HipStart + 46 - $buttonGap*2)
    	
		
		-attachForm $LUpperLegCurve3 "left" (291 + $horizontalShiftCenter - $buttonGap)
		-attachForm $LUpperLegCurve3 "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $LUpperLegCurve2 "left" (313 + $horizontalShiftCenter - $buttonGap*2)
		-attachForm $LUpperLegCurve2 "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $LUpperLegCurve1 "left" (335 + $horizontalShiftCenter - $buttonGap*3)
		-attachForm $LUpperLegCurve1 "top" ($HipStart + 8 - $buttonGap)
		
		-attachForm $LUpperLegCurveA "left" (357 + $horizontalShiftCenter - $buttonGap*4)
		-attachForm $LUpperLegCurveA "top" ($HipStart + 8 - $buttonGap)
		
		
		-attachForm $LLowerLegCurve3 "left" (291 + $horizontalShiftCenter - $buttonGap)
		-attachForm $LLowerLegCurve3 "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $LLowerLegCurve2 "left" (313 + $horizontalShiftCenter - $buttonGap*2)
		-attachForm $LLowerLegCurve2 "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $LLowerLegCurve1 "left" (335 + $horizontalShiftCenter - $buttonGap*3)
		-attachForm $LLowerLegCurve1 "top" ($HipStart + 46 - $buttonGap*2)
		
		-attachForm $LLowerLegCurveA "left" (357 + $horizontalShiftCenter - $buttonGap*4)
		-attachForm $LLowerLegCurveA "top" ($HipStart + 46 - $buttonGap*2)
		$selectForm;
	}
	setParent;
	
	//THUMBS
	if ($thumbsTotal == 1)
	{
		string $RThumbJ1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "T" -command "RRP_select(\"_rThumbJ1C\")"`;
		string $RThumbJ2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rThumbJ2C\")"`;
		string $RThumbJ3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rThumbJ3C\")"`;
		string $RThumbJAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_rThumbJ?C\")"`;
		string $LThumbJ1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "T" -command "RRP_select(\"_lThumbJ1C\")"`;
		string $LThumbJ2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lThumbJ2C\")"`;
		string $LThumbJ3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lThumbJ3C\")"`;
		string $LThumbJAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_lThumbJ?C\")"`;
		
		formLayout -edit
		-attachForm $RThumbJAC "left" (88 + $horizontalShiftRH)
		-attachForm $RThumbJAC "top" ($buttonOffset - 91 + $fingerToeGap*6)
			
		-attachForm $RThumbJ3C "left" (88 + $horizontalShiftRH)
		-attachForm $RThumbJ3C "top" ($buttonOffset - 69 + $fingerToeGap*4)
    	
		-attachForm $RThumbJ2C "left" (88 + $horizontalShiftRH)
		-attachForm $RThumbJ2C "top" ($buttonOffset - 51 + $fingerToeGap*3)
		
		-attachForm $RThumbJ1C "left" (88 + $horizontalShiftRH)
		-attachForm $RThumbJ1C "top" ($buttonOffset - 33 + $buttonGap*1 - $fingerToeGap)
    	
    	
		-attachForm $LThumbJAC "left" (405 + $horizontalShiftLH)
		-attachForm $LThumbJAC "top" ($buttonOffset - 91 + $fingerToeGap*6)
			
		-attachForm $LThumbJ3C "left" (405 + $horizontalShiftLH)
		-attachForm $LThumbJ3C "top" ($buttonOffset - 69 + $fingerToeGap*4)
    	
		-attachForm $LThumbJ2C "left" (405 + $horizontalShiftLH)
		-attachForm $LThumbJ2C "top" ($buttonOffset - 51 + $fingerToeGap*3)
		
		-attachForm $LThumbJ1C "left" (405 + $horizontalShiftLH)
		-attachForm $LThumbJ1C "top" ($buttonOffset - 33 + $buttonGap*1 - $fingerToeGap)
		
		$selectForm;
	}

	//FINGERS
	float $fingersTotalFraction = $fingersTotal;
	$buttonOffset = ($buttonOffset - (22 * (($fingersTotalFraction + 1)/2)));
	if ($buttonOffset < 40)
	{
		$buttonOffset = 40;
	}


	string $RFingerAllC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "A" -command "RRP_select(\"_rFinger*J*C\")"`;
	
	string $RFingerAJ1C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_rFinger*J1C\")"`;
	string $RFingerAJ2C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_rFinger*J2C\")"`;
	string $RFingerAJ3C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_rFinger*J3C\")"`;
	
	string $RFinger1J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "1" -command "RRP_select(\"_rFinger1J1C\")"`;
	string $RFinger1J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger1J2C\")"`;
	string $RFinger1J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger1J3C\")"`;
	string $RFinger1JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger1J?C\")"`;
	
	string $LFingerAllC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "A" -command "RRP_select(\"_lFinger*J*C\")"`;
	
	string $LFingerAJ1C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_lFinger*J1C\")"`;
	string $LFingerAJ2C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_lFinger*J2C\")"`;
	string $LFingerAJ3C = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "v" -command "RRP_select(\"_lFinger*J3C\")"`;
	
	string $LFinger1J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "1" -command "RRP_select(\"_lFinger1J1C\")"`;
	string $LFinger1J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger1J2C\")"`;
	string $LFinger1J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger1J3C\")"`;
	string $LFinger1JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger1J?C\")"`;
	formLayout -edit
	//ADD

	//RIGHT FINGER1////////////////////////////////////////////////////////////////
	-attachForm $RFingerAllC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
	-attachForm $RFingerAllC "top" ($buttonOffset + $buttonGap - $fingerToeGap)
		
	-attachForm $RFingerAJ3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
	-attachForm $RFingerAJ3C "top" ($buttonOffset + $buttonGap - $fingerToeGap)

	-attachForm $RFingerAJ2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
	-attachForm $RFingerAJ2C "top" ($buttonOffset + $buttonGap - $fingerToeGap)
	
	-attachForm $RFingerAJ1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
	-attachForm $RFingerAJ1C "top" ($buttonOffset + $buttonGap - $fingerToeGap)

	
	-attachForm $RFinger1JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
	-attachForm $RFinger1JAC "top" ($buttonOffset + 22)
		
	-attachForm $RFinger1J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
	-attachForm $RFinger1J3C "top" ($buttonOffset + 22)

	-attachForm $RFinger1J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
	-attachForm $RFinger1J2C "top" ($buttonOffset + 22)
	
	-attachForm $RFinger1J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
	-attachForm $RFinger1J1C "top" ($buttonOffset + 22)

	//LEFT FINGER1////////////////////////////////////////////////////////////////
	
	-attachForm $LFingerAllC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
	-attachForm $LFingerAllC "top" ($buttonOffset + $buttonGap - $fingerToeGap)

	-attachForm $LFingerAJ3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
	-attachForm $LFingerAJ3C "top" ($buttonOffset + $buttonGap - $fingerToeGap)

	-attachForm $LFingerAJ2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
	-attachForm $LFingerAJ2C "top" ($buttonOffset + $buttonGap - $fingerToeGap)
	
	-attachForm $LFingerAJ1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
	-attachForm $LFingerAJ1C "top" ($buttonOffset + $buttonGap - $fingerToeGap)

	
	-attachForm $LFinger1JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
	-attachForm $LFinger1JAC "top" ($buttonOffset + 22)
		
	-attachForm $LFinger1J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
	-attachForm $LFinger1J3C "top" ($buttonOffset + 22)

	-attachForm $LFinger1J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
	-attachForm $LFinger1J2C "top" ($buttonOffset + 22)
	
	-attachForm $LFinger1J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
	-attachForm $LFinger1J1C "top" ($buttonOffset + 22)
	
	$selectForm;
	
	if ($fingersTotal >= 2)
	{
		string $RFinger2J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "2" -command "RRP_select(\"_rFinger2J1C\")"`;
		string $RFinger2J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger2J2C\")"`;
		string $RFinger2J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger2J3C\")"`;
		string $RFinger2JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger2J?C\")"`;
		string $LFinger2J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "2" -command "RRP_select(\"_lFinger2J1C\")"`;
		string $LFinger2J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger2J2C\")"`;
		string $LFinger2J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger2J3C\")"`;
		string $LFinger2JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger2J?C\")"`;
		$buttonOffset = ($buttonOffset + 44 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger2JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger2JAC "top" $buttonOffset
			
		-attachForm $RFinger2J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger2J3C "top" $buttonOffset
	
		-attachForm $RFinger2J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger2J2C "top" $buttonOffset
		
		-attachForm $RFinger2J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger2J1C "top" $buttonOffset
	
	
		-attachForm $LFinger2JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger2JAC "top" $buttonOffset
			
		-attachForm $LFinger2J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger2J3C "top" $buttonOffset
	
		-attachForm $LFinger2J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger2J2C "top" $buttonOffset
		
		-attachForm $LFinger2J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger2J1C "top" $buttonOffset	
		$selectForm;
	}

	if ($fingersTotal >= 3)
	{
		string $RFinger3J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "3" -command "RRP_select(\"_rFinger3J1C\")"`;
		string $RFinger3J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger3J2C\")"`;
		string $RFinger3J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger3J3C\")"`;
		string $RFinger3JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger3J?C\")"`;
		string $LFinger3J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "3" -command "RRP_select(\"_lFinger3J1C\")"`;
		string $LFinger3J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger3J2C\")"`;
		string $LFinger3J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger3J3C\")"`;
		string $LFinger3JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger3J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger3JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger3JAC "top" $buttonOffset
			
		-attachForm $RFinger3J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger3J3C "top" $buttonOffset
	
		-attachForm $RFinger3J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger3J2C "top" $buttonOffset
		
		-attachForm $RFinger3J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger3J1C "top" $buttonOffset
		
	
		-attachForm $LFinger3JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger3JAC "top" $buttonOffset
			
		-attachForm $LFinger3J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger3J3C "top" $buttonOffset
	
		-attachForm $LFinger3J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger3J2C "top" $buttonOffset
		
		-attachForm $LFinger3J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger3J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 4)
	{
		string $RFinger4J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "4" -command "RRP_select(\"_rFinger4J1C\")"`;
		string $RFinger4J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger4J2C\")"`;
		string $RFinger4J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger4J3C\")"`;
		string $RFinger4JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger4J?C\")"`;
		string $LFinger4J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "4" -command "RRP_select(\"_lFinger4J1C\")"`;
		string $LFinger4J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger4J2C\")"`;
		string $LFinger4J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger4J3C\")"`;
		string $LFinger4JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger4J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger4JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger4JAC "top" $buttonOffset
			
		-attachForm $RFinger4J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger4J3C "top" $buttonOffset
	
		-attachForm $RFinger4J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger4J2C "top" $buttonOffset
		
		-attachForm $RFinger4J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger4J1C "top" $buttonOffset
		
	
		-attachForm $LFinger4JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger4JAC "top" $buttonOffset
			
		-attachForm $LFinger4J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger4J3C "top" $buttonOffset
	
		-attachForm $LFinger4J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger4J2C "top" $buttonOffset
		
		-attachForm $LFinger4J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger4J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 5)
	{
		string $RFinger5J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "5" -command "RRP_select(\"_rFinger5J1C\")"`;
		string $RFinger5J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger5J2C\")"`;
		string $RFinger5J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger5J3C\")"`;
		string $RFinger5JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger5J?C\")"`;
		string $LFinger5J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "5" -command "RRP_select(\"_lFinger5J1C\")"`;
		string $LFinger5J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger5J2C\")"`;
		string $LFinger5J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger5J3C\")"`;
		string $LFinger5JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger5J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger5JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger5JAC "top" $buttonOffset
			
		-attachForm $RFinger5J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger5J3C "top" $buttonOffset
    	
		-attachForm $RFinger5J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger5J2C "top" $buttonOffset
		
		-attachForm $RFinger5J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger5J1C "top" $buttonOffset
    	
    	
		-attachForm $LFinger5JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger5JAC "top" $buttonOffset
			
		-attachForm $LFinger5J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger5J3C "top" $buttonOffset
    	
		-attachForm $LFinger5J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger5J2C "top" $buttonOffset
		
		-attachForm $LFinger5J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger5J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 6)
	{
		string $RFinger6J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "6" -command "RRP_select(\"_rFinger6J1C\")"`;
		string $RFinger6J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger6J2C\")"`;
		string $RFinger6J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger6J3C\")"`;
		string $RFinger6JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger6J?C\")"`;
		string $LFinger6J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "6" -command "RRP_select(\"_lFinger6J1C\")"`;
		string $LFinger6J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger6J2C\")"`;
		string $LFinger6J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger6J3C\")"`;
		string $LFinger6JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger6J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger6JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger6JAC "top" $buttonOffset
			
		-attachForm $RFinger6J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger6J3C "top" $buttonOffset
    	
		-attachForm $RFinger6J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger6J2C "top" $buttonOffset
		
		-attachForm $RFinger6J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger6J1C "top" $buttonOffset
		
    	
		-attachForm $LFinger6JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger6JAC "top" $buttonOffset
			
		-attachForm $LFinger6J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger6J3C "top" $buttonOffset
    	
		-attachForm $LFinger6J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger6J2C "top" $buttonOffset
		
		-attachForm $LFinger6J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger6J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 7)
	{
		string $RFinger7J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "7" -command "RRP_select(\"_rFinger7J1C\")"`;
		string $RFinger7J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger7J2C\")"`;
		string $RFinger7J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger7J3C\")"`;
		string $RFinger7JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger7J?C\")"`;
		string $LFinger7J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "7" -command "RRP_select(\"_lFinger7J1C\")"`;
		string $LFinger7J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger7J2C\")"`;
		string $LFinger7J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger7J3C\")"`;
		string $LFinger7JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger7J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger7JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger7JAC "top" $buttonOffset
			
		-attachForm $RFinger7J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger7J3C "top" $buttonOffset
    	
		-attachForm $RFinger7J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger7J2C "top" $buttonOffset
		
		-attachForm $RFinger7J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger7J1C "top" $buttonOffset
    	
    	
		-attachForm $LFinger7JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger7JAC "top" $buttonOffset
			
		-attachForm $LFinger7J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger7J3C "top" $buttonOffset
    	
		-attachForm $LFinger7J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger7J2C "top" $buttonOffset
		
		-attachForm $LFinger7J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger7J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 8)
	{
		string $RFinger8J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "8" -command "RRP_select(\"_rFinger8J1C\")"`;
		string $RFinger8J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger8J2C\")"`;
		string $RFinger8J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger8J3C\")"`;
		string $RFinger8JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger8J?C\")"`;
		string $LFinger8J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "8" -command "RRP_select(\"_lFinger8J1C\")"`;
		string $LFinger8J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger8J2C\")"`;
		string $LFinger8J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger8J3C\")"`;
		string $LFinger8JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger8J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		formLayout -edit
		-attachForm $RFinger8JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger8JAC "top" $buttonOffset
			
		-attachForm $RFinger8J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger8J3C "top" $buttonOffset
    	
		-attachForm $RFinger8J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger8J2C "top" $buttonOffset
		
		-attachForm $RFinger8J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger8J1C "top" $buttonOffset
    	
    	
		-attachForm $LFinger8JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger8JAC "top" $buttonOffset
			
		-attachForm $LFinger8J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger8J3C "top" $buttonOffset
    	
		-attachForm $LFinger8J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger8J2C "top" $buttonOffset
		
		-attachForm $LFinger8J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger8J1C "top" $buttonOffset
		
		$selectForm;
	}

	if ($fingersTotal >= 9)
	{
		string $RFinger9J1C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label "9" -command "RRP_select(\"_rFinger9J1C\")"`;
		string $RFinger9J2C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger9J2C\")"`;
		string $RFinger9J3C = `button -bgc .75 .34 .34 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_rFinger9J3C\")"`;
		string $RFinger9JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label ">" -command "RRP_select(\"_rFinger9J?C\")"`;
		string $LFinger9J1C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label "9" -command "RRP_select(\"_lFinger9J1C\")"`;
		string $LFinger9J2C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger9J2C\")"`;
		string $LFinger9J3C = `button -bgc .40 .53 .74 -w $buttonWidth -h $buttonHeight -label " " -command "RRP_select(\"_lFinger9J3C\")"`;
		string $LFinger9JAC = `button -bgc .85 .85 .70 -w $buttonWidth -h $buttonHeight -label "<" -command "RRP_select(\"_lFinger9J?C\")"`;
		$buttonOffset = ($buttonOffset + 22 - $buttonGap + $fingerToeGap/2);
		//print $buttonOffset;
		formLayout -edit
		-attachForm $RFinger9JAC "left" (8 + $fingerToeGap*6 + $horizontalShiftRH)
		-attachForm $RFinger9JAC "top" $buttonOffset
			
		-attachForm $RFinger9J3C "left" (30 + $fingerToeGap*4 + $horizontalShiftRH)
		-attachForm $RFinger9J3C "top" $buttonOffset
    	
		-attachForm $RFinger9J2C "left" (48 + $fingerToeGap*3 + $horizontalShiftRH)
		-attachForm $RFinger9J2C "top" $buttonOffset
		
		-attachForm $RFinger9J1C "left" (66 + $buttonGap - $fingerToeGap + $horizontalShiftRH)
		-attachForm $RFinger9J1C "top" $buttonOffset
    	
    	
		-attachForm $LFinger9JAC "left" (485 -$fingerToeGap*6 + $horizontalShiftLH)
		-attachForm $LFinger9JAC "top" $buttonOffset
			
		-attachForm $LFinger9J3C "left" (463 - $fingerToeGap*4 + $horizontalShiftLH)
		-attachForm $LFinger9J3C "top" $buttonOffset
    	
		-attachForm $LFinger9J2C "left" (445 - $fingerToeGap*3 + $horizontalShiftLH)
		-attachForm $LFinger9J2C "top" $buttonOffset
		
		-attachForm $LFinger9J1C "left" (427 - $buttonGap + $fingerToeGap + $horizontalShiftLH)
		-attachForm $LFinger9J1C "top" $buttonOffset
		
		$selectForm;
	}

	//RESETS	
	string $ResetTransformsApplyTo = `checkBox -label "All Controls" resetTransformsAdvApplyTo`;	
	string $ResetExtrasApplyTo     = `checkBox -label "All Controls" resetExtrasAdvApplyTo`;
	//MIRROR
	string $ResetTransformsAdv     = `button -w (120 - $buttonGap)   -h $buttonHeight -label "Reset Transforms" -command "resetTransformsCheckAdv"`;
	string $ResetExtrasAdv         = `button -w (120 - $buttonGap*6) -h $buttonHeight -label "Reset Extras" -command "resetExtrasCheckAdv"`; 
	string $MirrorAdvApplyTo       = `checkBox -label "All Controls" mirrorAdvApplyTo`;
	string $RightToLeftAdv         = `button -w (161 - $buttonGap*4) -h $buttonHeight -label "Right To Left" -command "rightToLeftControlsCheckAdv"`;
	string $LeftToRightAdv         = `button -w (161 - $buttonGap*4) -h $buttonHeight -label "Left to Right" -command "leftToRightControlsCheckAdv"`;
	string $MirrorAdv              = `button -w (161 - $buttonGap*4) -h $buttonHeight -label "Mirror" -command "mirrorCheckAdv"`;
	string $UseFrame               = `checkBox -label "Use Destination Frame:" -cc tglCurrentFrameTxtFld toFrame`;	
	string $currentFrameTxtFld     = `textField -w 76 -enable 0 -tx "1" -enterCommand "setFocus toFrame" currentFrameTxtFld`;
	string $currentFrameButton     = `button -w (76 - $buttonGap) -h 24 -enable 0 -l "Load Frame" -c loadCurrentFrame loadCurrentFrameBtn`;
	//BATCH MIRROR
	string $BatchMirrorAdv         = `button -w (390 - $buttonGap*11.5) -h $buttonHeight -label "Batch Mirror" -command "batchMirrorCheckAdv"`;
	string $BatchMirrorAdvApplyTo  = `checkBox -label "All Controls" batchMirrorAdvApplyTo`;
	string $BatchMirrorRange       = `radioButtonGrp -label ("Mirror Range:" + $mirrorRangeGap) -nrb 2 -labelArray2 "Timeline" "Start/End:" -sl 1 -cc tglBatchMirrorTxtFld batchRange`;
	string $BatchMirrorStartField  = `textField -w (76 - $buttonGap*2)  -enable 0 -tx "1" -enterCommand "setFocus batchAdvApplyTo" batchMirrorStartTxtFld`;
	string $BatchMirrorEndField    = `textField -w (76 - $buttonGap*2)  -enable 0 -tx "10" -enterCommand "setFocus batchAdvApplyTo" batchMirrorEndTxtFld`;
	
	//SEPARATORS
	string $separator1 = `separator -width (484 + $horizontalShiftLH - $buttonGap*2) -style "out"`;
	string $separator2 = `separator -width (484 + $horizontalShiftLH - $buttonGap*2) -style "in"`;
	string $separator3 = `separator -width (484 + $horizontalShiftLH - $buttonGap*2) -style "in"`;
	
	
	if ($toesTotal != 1)
	{
		$HipStart = ($HipStart + 80 - $buttonGap*7 - $fingerToeGap*2);
	}
	else
	{
		$HipStart = ($HipStart - $buttonGap*5);
	}
	formLayout -edit                                                                                  
  	//RESETS  	
	-attachForm $separator1 "left" 8
	-attachForm $separator1 "top" ($HipStart + 124)

	-attachForm $ResetTransformsApplyTo "left" 8
	-attachForm $ResetTransformsApplyTo "top" ($HipStart + 132 - $buttonGap + $fingerToeGap)
    
	-attachForm $ResetTransformsAdv "left" 98
	-attachForm $ResetTransformsAdv "top"  ($HipStart + 132 - $buttonGap + $fingerToeGap)
		
	-attachForm $ResetExtrasApplyTo "left" (293 + $horizontalShiftLH + $buttonGap*2)
	-attachForm $ResetExtrasApplyTo "top" ($HipStart + 132 - $buttonGap + $fingerToeGap)
       
	-attachForm $ResetExtrasAdv "left" (383 + $horizontalShiftLH + $buttonGap*2)
	-attachForm $ResetExtrasAdv "top" ($HipStart + 132 - $buttonGap + $fingerToeGap)
	//MIRROR   	
	-attachForm $separator2 "left" 8
	-attachForm $separator2 "top" ($HipStart + 158 - $buttonGap*2)

	-attachForm $MirrorAdvApplyTo "left" 8
	-attachForm $MirrorAdvApplyTo "top" ($HipStart + 169 - $buttonGap*3)    
	
	-attachForm $UseFrame "left" (186 + $horizontalShiftLH*1.25)
	-attachForm $UseFrame "top" ($HipStart + 169 - $buttonGap*3)

	-attachForm $currentFrameTxtFld "left" (342 + $horizontalShiftLH*1.25)
	-attachForm $currentFrameTxtFld "top" ($HipStart + 167 - $buttonGap*3 + $fingerToeGap/2)

	-attachForm $currentFrameButton "left" (427 + $horizontalShiftLH*1.25 - $buttonGap/2)
	-attachForm $currentFrameButton "top" ($HipStart + 167 - $buttonGap*3 - $fingerToeGap/2)

	-attachForm $RightToLeftAdv "left" 8
	-attachForm $RightToLeftAdv "top" ($HipStart + 197 - $buttonGap*4)

	-attachForm $MirrorAdv "left" (175 + $horizontalShiftLH/2)
	-attachForm $MirrorAdv "top" ($HipStart + 197 - $buttonGap*4)
	
	-attachForm $LeftToRightAdv "left" (342 + $horizontalShiftLH)
	-attachForm $LeftToRightAdv "top" ($HipStart + 197 - $buttonGap*4)
	//BATCH MIRROR		
	-attachForm $separator3 "left" 8
	-attachForm $separator3 "top" ($HipStart + 222 - $buttonGap*5.5 + $fingerToeGap)

	-attachForm $BatchMirrorAdvApplyTo "left" 8
	-attachForm $BatchMirrorAdvApplyTo "top" ($HipStart + 252 - $buttonGap*6)

	-attachForm $BatchMirrorAdv "left" (113 + $horizontalShiftCenter + $buttonGap*4)
	-attachForm $BatchMirrorAdv "top" ($HipStart + 252 - $buttonGap*6)

	-attachForm $BatchMirrorRange "left" 200
	-attachForm $BatchMirrorRange "top" ($HipStart + 252 - $buttonGap*6)
	
	-attachForm $BatchMirrorRange "left" (0 + $horizontalShiftLH)
	-attachForm $BatchMirrorRange "top" ($HipStart + 230 - $buttonGap*6)

	-attachForm $BatchMirrorStartField "left" (342 + $horizontalShiftLH - $buttonGap*0)
	-attachForm $BatchMirrorStartField "top" ($HipStart + 230 - $buttonGap*6)
	
	-attachForm $BatchMirrorEndField "left" (427 + $horizontalShiftLH - $buttonGap*2)
	-attachForm $BatchMirrorEndField "top" ($HipStart + 230 - $buttonGap*6)		
	$selectForm;

	setParent ..;

	//TAB 2
	string $saveForm = `formLayout -numberOfDivisions 100`;
	string $saveNameCheckBox = `checkBox -label "Use Name:" -cc "TglTab2LoadRig" useNameSave`;
	string $saveNameTxtFld = `textField -w (300 + $horizontalShiftLH) -en 0 textFieldEntrySave`;
	string $saveRigLoadButton = `button -bgc .75 .34 .34 -w 76 -h 24 -l "Load Rig" -en 0 -c loadRigTab2 loadRigButtonSave`;

	formLayout -edit
	-attachForm $saveNameCheckBox "left" (16 - $buttonGap)
	-attachForm $saveNameCheckBox "top" 8

	-attachForm $saveNameTxtFld "left" (105 - $buttonGap)
	-attachForm $saveNameTxtFld "top" 8
	
	-attachForm $saveRigLoadButton "left" (418 + $horizontalShiftLH - $buttonGap)
	-attachForm $saveRigLoadButton "top" 8
	$saveForm;
	
	string $SavePose  = `button -w (486 + $horizontalShiftLH - $buttonGap*2)  -h $buttonHeight -label "Save Pose" -command "savePoseCheck"`;
	string $SaveMain = `checkBoxGrp -numberOfCheckBoxes 3 -label "Main Control: " -labelArray3 "Save Translate" "Save Rotate" "Save Scale" saveMainXforms`;
	string $LoadPose  = `button -w (486 + $horizontalShiftLH - $buttonGap*2) -h $buttonHeight -label "Load Pose" -command "loadPoseCheck"`;
	
	formLayout -edit
	-attachForm $SaveMain "left" (8 + $horizontalShiftLH)
	-attachForm $SaveMain "top" 40

	-attachForm $SavePose "left" 8
	-attachForm $SavePose "top" 70

	-attachForm $LoadPose "left" 8
	-attachForm $LoadPose "top" 110
	
	$saveForm;
	setParent ..;

	tabLayout -edit -tabLabel $selectForm "Select" -tabLabel $saveForm "Save and Load" $poserTabs;

	//CREATE ANIM UI////////////////////////////////////////////////////////////////////////////
	if ($toesTotal == 1)
	{
		showWindow RapidPoserUI;
		window -e -w (511 + $horizontalShiftLH - $buttonGap*3) -h ($HipStart + 200) -s 1 RapidPoserUI;
	}
	else
	{
		showWindow $fingerToeWindow;
		window -e -w (511 + $horizontalShiftLH - $buttonGap*3) -h ($HipStart + 80 + 200) -s 1 RapidPoserUI;
	}
	
	//dockControl -area "left"
	//-fl 1
	//-content $fingerToeWindow
	//-label "Rapid Poser 2"
	//-allowedArea "left"
	//-allowedArea "right"
	//-allowedArea "top"
	//-allowedArea "bottom"
	//rapidPoserDock;
}

//global proc createPoserUIAndClose()
//{
//	createPoserUI;
//	if (`window -exists createUIWindow`)
//	{
//		deleteUI createUIWindow;
//	}
//	if (`window -exists rapidPoserDock`)
//	{
//		deleteUI rapidPoserDock;
//	}
//}

global proc createPoserUIAndClose()
{
	createPoserUI;
	if (`window -exists createUIWindow`)
	{
		deleteUI createUIWindow;
	}
}

global proc RapidRig_Poser_V2()
{
	if (`window -exists createUIWindow`)
	{
		deleteUI createUIWindow;
	}
	//if (`window -exists rapidPoserDock`)
	//{
	//	deleteUI rapidPoserDock;
	//}

	//CUSTOMIZE UI
	window -title "Create Custom UI"
		-wh 316 166
		-s 0
		createUIWindow;
	
	frameLayout -label "Customize your Interface"
			-width 316
			RRP_CustomizeFrameLayout;
	
		columnLayout -cw 50 -cat "left" 5 RRP_CustomizeColumnLayout1;
		$thumbsChose = `checkBox
			-label "Thumbs"
			-value 1
			thumbsChosen`;
		$fingersChose = `intSliderGrp
			-min 1
			-max 9
			-label "Fingers"
			-field true
			-cal 1 left
			-cw 1 50
			-value 4
			fingersChosen`;
	
		$toesChose = `intSliderGrp
			-min 1
			-max 10
			-label "Toes"
			-field true
			-cal 1 left
			-cw 1 50
			-value 1
			toesChosen`;
	
		$spineChose = `intSliderGrp
			-min 2
			-max 10
			-label "Spine"
			-field true
			-cal 1 left
			-cw 1 50
			-value 4
			spineChosen`;
	
		$NeckChose = `intSliderGrp
			-min 1
			-max 9
			-label "Neck"
			-field true
			-cal 1 left
			-cw 1 50
			-value 3
			neckChosen`;
			
			rowColumnLayout -nc 2 RRP_CreateUIToonArmLegs;
		$toonArmsChose = `checkBox
			-label "Toon Arms"
			-value 0
			toonArmsChosen`;
		$toonLegsChose = `checkBox
			-label "Toon Legs"
			-value 0
			toonLegsChosen`;
		setParent RRP_CustomizeFrameLayout;
		
	frameLayout -label "UI Size"
		RRP_UISizeFrameLayout;
		//-width 316;
			columnLayout RRP_CreateUISizeColumnLayout;
		$UIsize = `radioButtonGrp
			-numberOfRadioButtons 2
			//-label "UI Style:"
			-labelArray2 "Large Buttons" "Small Buttons"
			-sl 1 RRP_UISize`;
		setParent RRP_CustomizeFrameLayout;
			
			
		rowColumnLayout -nc 3 -columnWidth 1 100 -columnWidth 2 100 -columnWidth 3 100 RRP_CreateUIColumnLayout;	
		$ConfirmFingersToes = `button
		-label "OK"
		-command "createPoserUIAndClose"`;
		$ApplyFingersToes = `button 
		-label "Apply"
		-command "createPoserUI"`;
		$CancelFingersToes = `button
		-label "Cancel"
		-command "cancelAnimUI"`;
		setParent RRP_CustomizeFrameLayout;
	
	showWindow createUIWindow;
	window -e -w 316 -h 190 createUIWindow;
}
RapidRig_Poser_V2;
