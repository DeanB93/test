//CopyRight Dustin Nelson 2010-2011. Please do not distribute
//http://www.creativecrash.com/maya/marketplace/scripts-plugins/character/c/-rapid-rig-advanced-auto-rig-for-maya--2/
//Script for BiPed Character Rigging.
//VERSION 2.0.8 BETA
//JANUARY 17, 2013
//FILE IS NOT INTENDED TO BE HARMFUL, HOWEVER USE AT YOUR OWN RISK
/*////////////////////////////////////////////////////////////////////////
//                                                                      //
//	INSTRUCTIONS:                                                       //
//	1. INSTALLATION                                                     //
//	ON A MAC:                                							//
//	Put the script RapidRig_Advanced_V2.mel in the following path:      //
//	Users/YourUser/Library/Preferences/Autodesk/maya/scripts/           //
//				                                                        //
//	ON A PC:                                                            //
//	Put the script RapidRig_Advanced_V2.mel in the following path:      //
//	C:/Users/YourUser/Documents/maya/scripts/                           //
//                                                                      //
//	2. START UP MAYA, ENTER THE FOLLOWING COMMAND INTO                  //
//	THE COMMAND LINE OR THE SCRIPT EDITOR:                              //
//                                                                      //
//	RapidRig_Advanced_V2                                                //
//                                                                      //
//	3. TO HAVE EASY ACCESS TO SCRIPT, CREATE A SHELF BUTTON             //
//	WITH ONLY THAT COMMAND. EVERY TIME YOU HIT THE BUTTON,              //
//	THE RAPID RIG INTERFACE WILL POP UP. HAPPY ANIMATING!               //
//                                                                      //
////////////////////////////////////////////////////////////////////////*/

global proc RRA_ProxyBase(string $proxyName)
{
	circle -n $proxyName -c 0 0 0 -nr 0 1 0 -sw 360 -r 0.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	duplicate -rr -n ($proxyName + "B");
	rotate 90 0 0 ($proxyName + "B");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($proxyName + "B");
	duplicate -rr -n  ($proxyName + "C");
	rotate 0 90 0 ;
	makeIdentity -apply true -t 1 -r 1 -s 1;
	spaceLocator -n ($proxyName + "Snap");
	setAttr ($proxyName + "SnapShape.localScaleZ") .25;
	setAttr ($proxyName + "SnapShape.localScaleX") .25;
	setAttr ($proxyName + "SnapShape.localScaleY") .25;
	parent -r -s ($proxyName + "BShape") ($proxyName + "CShape") ($proxyName + "SnapShape") $proxyName ;
	delete ($proxyName + "B") ($proxyName + "C") ($proxyName + "Snap");
	select $proxyName;
	makeIdentity -apply true -t 1 -r 1 -s 1 $proxyName;
	delete -ch $proxyName;
}

global proc RRA_ProxyAim(string $proxyName)
{
	RRA_ProxyBase($proxyName);
	curve -n ($proxyName + "Aim") -d 1 -p -0.25 0 0 -p -0.25 0 -1 -p -0.5 0 -1 -p 0 0 -1.5 -p 0.5 0 -1 -p 0.25 0 -1 -p 0.25 0 0-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;
	pickWalk -d down;
	rename ($proxyName + "AimShape");
	delete `pointConstraint $proxyName ($proxyName + "Aim")`;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($proxyName + "Aim");
	parent -r -s ($proxyName + "AimShape") $proxyName;
	delete ($proxyName + "Aim");
}
		
global proc RRA_ProxyUp(string $proxyName)
{
	RRA_ProxyBase($proxyName);
	scale -r 4 4 4 $proxyName;
	makeIdentity -apply true $proxyName;
	curve -n ($proxyName + "D") -d 1 -p 0 -1 0 -p 0 3 0 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($proxyName + "DShape");
	curve -n ($proxyName + "E") -d 1 -p 0 2.5 0.5 -p 0 3 0 -p 0 2.5 -0.5 -k 0 -k 1 -k 2 ;
	pickWalk -d down;
	rename ($proxyName + "EShape");
	curve -n ($proxyName + "F") -d 1 -p -0.5 2.5 0 -p 0 3 0 -p 0.5 2.5 0 -k 0 -k 1 -k 2 ;
	pickWalk -d down;
	rename ($proxyName + "FShape");
	circle -n ($proxyName + "G") -c 0 2.5 0 -nr 0 1 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;
	pickWalk -d down;
	rename ($proxyName + "GShape");
	
	parent -r -s ($proxyName + "DShape") ($proxyName + "EShape") ($proxyName + "FShape") ($proxyName + "GShape") $proxyName;
	delete ($proxyName + "D") ($proxyName + "E") ($proxyName + "F") ($proxyName + "G");
	scale -r 0.25 0.25 0.25 $proxyName;
	makeIdentity -apply true $proxyName;
}

global proc RRA_ProxyConnectors(string $node1, string $node2)
{
	$selection = `ls -sl`;
	$node1Loc = `xform -q -ws -rp $node1`;
	$node2Loc = `xform -q -ws -rp $node2`;
	
	
	//NEW
	curve -n ($node1 + "_" + $node2 + "Connector") -d 1 -p 0 0 0 -p 1 0 0 -k 0 -k 1 ;
	pickWalk -d down;
	rename  ($node1 + "_" + $node2 + "CShape");
	spaceLocator -n ($node1 + "_" + $node2 + "_AimLctr");
	spaceLocator -n ($node1 + "_" + $node2 + "_TargetLctr");
	parent ($node1 + "_" + $node2 + "_TargetLctr") ($node1 + "_" + $node2 + "_AimLctr");
	pointConstraint $node1 ($node1 + "_" + $node2 + "_AimLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" $node2 ($node1 + "_" + $node2 + "_AimLctr");
	pointConstraint $node2 ($node1 + "_" + $node2 + "_TargetLctr");
	connectAttr -f ($node1 + "_" + $node2 + "_AimLctr.translate") ($node1 + "_" + $node2 + "Connector.translate");
	connectAttr -f ($node1 + "_" + $node2 + "_AimLctr.rotate") ($node1 + "_" + $node2 + "Connector.rotate");
	connectAttr -f ($node1 + "_" + $node2 + "_TargetLctr.tx") ($node1 + "_" + $node2 + "Connector.sx");
	setAttr ($node1 + "_" + $node2 + "_AimLctr.v") 0;
	
	setAttr ($node1 + "_" + $node2 + "Connector.template") 1;

	
	if (!`objExists ("RRA_ConnectorG")`)
	{
		group -em -n "RRA_ConnectorG"; xform -os -piv 0 0 0;
		setAttr "RRA_ConnectorG.inheritsTransform" 0;
		parent "RRA_ConnectorG" "RRA_MAIN";
		
		//connectAttr -f  ("RRM_" + $prfx + $name + "_Parent.connectors") ("RRM_" + $prfx + $name + "_ConnectorG.v");
	}
	parent ($node1 + "_" + $node2 + "Connector") ($node1 + "_" + $node2 + "_AimLctr") ("RRA_ConnectorG");
	setAttr (($node1 + "_" + $node2 + "_AimLctr.scale"), 1,1,1);
	
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.tx");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.ty");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.tz");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.rx");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.ry");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.rz");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.sx");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.sy");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.sz");
	setAttr -lock true -keyable false -channelBox false ($node1 + "_" + $node2 + "Connector.v");	
	
	
	//modLockNodes;
	select $selection;
}

global proc RRA_GenerateProxies(int $thumbsOn, int $fingersNum, int $toesNum, int $spineNum, int $neckNum)
{
	string $fingersG;
	string $toesG;
	string $spineG;

	if (`objExists  RRA_MAIN`) 
	{
		error "PROXIES ALREADY EXIST IN THIS SCENE! NO ACTION TAKEN.\n";
	}	
	else
	{
		//SET UNITS TO CENTIMETERS
		string $currentUnit = `currentUnit -query -linear`;
		if ($currentUnit != "cm")
		{
			changeLinearUnit "centimeter";
		}
			
		//CHECK IF NODE EDITOR IS OPEN
		string $nodeEditor[] = `getPanel -scriptType nodeEditorPanel `;
		
		for ( $editor in $nodeEditor )
		{
			string $tokens[];
			string $control = `scriptedPanel -q -ctl $editor`;
		
			if ( $control != "" )
			{
				if ( 0 < `tokenize $control "|" $tokens` )
				{
					print ( "Window for Node Editor: " + $tokens[0] + "\n" );
				  
					string $NodeEditorUI = `confirmDialog
						-title "Close Node Editor Before Proceeding?"
						-message "The Node Editor is open.\nGenerating a rig with the node editor opened will cause the rig to take much longer to generate \n"
						-button "Close Node Editor"
						-button "Ignore"
						-defaultButton "Close Node Editor"
						-dismissString "Ignore"
						-cancelButton "Ignore"`;
						//-icon "critical"`;
						
					if ($NodeEditorUI == "Close Node Editor")
					{
						deleteUI -window nodeEditorPanel2Window;
					}
				}
		  	}
		}


		 //CREATE JOINT BASE
		circle -n RRA_MAIN -nr 0 1 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;
		
		RRA_ProxyBase("RRA_ROOT");
		scale -r 1.6 1.6 1.6 RRA_ROOT;
		move -r -os -wd 0 15.25 0 RRA_ROOT;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_ROOT;
		setAttr "RRA_ROOTSnapShape.localScaleX" 0.4;
		setAttr "RRA_ROOTSnapShape.localScaleY" 0.4;
		setAttr "RRA_ROOTSnapShape.localScaleZ" 0.4;
		
		RRA_ProxyBase("RRA_SpineTop");
		delete `pointConstraint RRA_ROOT RRA_SpineTop`;
		move -r -os -wd 0 6.6 0 RRA_SpineTop;
		scale -r 1.6 1.6 1.6 RRA_SpineTop;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_SpineTop;
		setAttr "RRA_SpineTopSnapShape.localScaleX" 0.4;
		setAttr "RRA_SpineTopSnapShape.localScaleY" 0.4;
		setAttr "RRA_SpineTopSnapShape.localScaleZ" 0.4;
		
		//SPINE JOINTS
		string $spineProxies[];
		
		$i1 = 1;
		$i2 = ($spineNum - 1);
		string $nPad = "0";
		string $nPadPrev = "0";
	
		while ($i1 < $spineNum)
		{
			if ($i1 >= 10)
			{$nPad = "";}
			if ($i1 >= 11)
			{$nPadPrev = "";}
	
			RRA_ProxyBase(("RRA_Spine" + $nPad + $i1));
			group -n ("RRA_Spine" + $nPad + $i1 + "G") ("RRA_Spine" + $nPad + $i1); xform -os -piv 0 0 0; 
			makeIdentity -apply false -t 1 -r 1 -s 1 ("RRA_Spine" + $nPad + $i1 + "G");

			pointConstraint RRA_ROOT RRA_SpineTop  ("RRA_Spine" + $nPad + $i1 + "G");
			setAttr ("RRA_Spine" + $nPad + $i1 + "G_pointConstraint1.RRA_ROOTW0") $i2;
			setAttr ("RRA_Spine" + $nPad + $i1 + "G_pointConstraint1.RRA_SpineTopW1") $i1;		

			select $spineProxies ("RRA_Spine" + $nPad + $i1);
			$spineProxies = `ls -sl`;
			
			//CONNECTORS
			if ($i1 == 1)
			{
				RRA_ProxyConnectors("RRA_ROOT", ("RRA_Spine" + $nPad + $i1));
			}
			else
			{
				RRA_ProxyConnectors(("RRA_Spine" + $nPad + $i1), ("RRA_Spine" + $nPad + ($i1 - 1)));
			}
				
			$i1++;
			$i2--;
		}
		
		RRA_ProxyConnectors(("RRA_Spine" + $nPad + ($i1 - 1)), "RRA_SpineTop");
		
		select $spineProxies;
		pickWalk -d up;
		$spineProxiesG = `ls -sl`;

		//NECK JOINTS
		RRA_ProxyBase("RRA_Head");
		delete `pointConstraint RRA_SpineTop RRA_Head`;
		move -r -os -wd 0 2.0 0 RRA_Head;
		scale -r 1.25 1.25 1.25 RRA_Head;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_Head;
		//RRA_ProxyConnectors("RRA_Neck", "RRA_Head");

		string $neckProxies[];
		
		$i1 = 1;
		$i2 = ($neckNum - 0);
		string $nPad = "0";
		string $nPadPrev = "0";
	
		while ($i1 <= $neckNum)
		{
			if ($i1 >= 10)
			{$nPad = "";}
			if ($i1 >= 11)
			{$nPadPrev = "";}
	
			RRA_ProxyBase(("RRA_Neck" + $nPad + $i1));
			scale -r 0.8 0.8 0.8 ("RRA_Neck" + $nPad + $i1);
			makeIdentity -apply true -s 1 ("RRA_Neck" + $nPad + $i1);
			group -n ("RRA_Neck" + $nPad + $i1 + "G") ("RRA_Neck" + $nPad + $i1); xform -os -piv 0 0 0; 
			makeIdentity -apply false -t 1 -r 1 -s 1 ("RRA_Neck" + $nPad + $i1 + "G");

			pointConstraint RRA_SpineTop RRA_Head  ("RRA_Neck" + $nPad + $i1 + "G");
			setAttr ("RRA_Neck" + $nPad + $i1 + "G_pointConstraint1.RRA_SpineTopW0") $i2;
			setAttr ("RRA_Neck" + $nPad + $i1 + "G_pointConstraint1.RRA_HeadW1") $i1;		

			select $neckProxies ("RRA_Neck" + $nPad + $i1);
			$neckProxies = `ls -sl`;
			
			//CONNECTORS
			if ($i1 == 1)
			{
				RRA_ProxyConnectors("RRA_SpineTop", ("RRA_Neck" + $nPad + $i1));
			}
			else
			{
				RRA_ProxyConnectors(("RRA_Neck" + $nPad + $i1), ("RRA_Neck" + $nPad + ($i1 - 1)));
			}
				
			$i1++;
			$i2--;
		}
		select $neckProxies;
		pickWalk -d up;
		$neckProxiesG = `ls -sl`;
			
		$neckTop = ("RRA_Neck" + $nPad + ($i1 - 1));
		
		RRA_ProxyConnectors($neckTop, "RRA_Head");
		
		
		RRA_ProxyBase("RRA_Jaw");
		delete `pointConstraint RRA_Head RRA_Jaw`;
		move -r -os -wd 0 0.83 0.38 RRA_Jaw;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_Jaw;
		RRA_ProxyConnectors("RRA_Head", "RRA_Jaw");
		
		RRA_ProxyBase("RRA_JawTip");
		delete `pointConstraint RRA_Jaw RRA_JawTip`;
		move -r -os -wd 0 -0.83 1.52 RRA_JawTip;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_JawTip;
		RRA_ProxyConnectors("RRA_Jaw", "RRA_JawTip");
		
		RRA_ProxyBase("RRA_HeadTip");
		delete `pointConstraint RRA_Head RRA_HeadTip`;
		move -r -os -wd 0 3.38 0 RRA_HeadTip;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_HeadTip;
		RRA_ProxyConnectors("RRA_Head", "RRA_HeadTip");
		
	
		//LEFT EYE
		RRA_ProxyBase("RRA_lEye");
		delete `pointConstraint RRA_Head RRA_lEye`;
		move -r -os -wd 0.57 1.53 1.64 RRA_lEye;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_lEye;
		RRA_ProxyConnectors("RRA_Head", "RRA_lEye");
		
		//RIGHT EYE
		RRA_ProxyBase("RRA_rEye");
		delete `pointConstraint RRA_Head RRA_rEye`;
		move -r -os -wd -0.57 1.53 1.64 RRA_rEye;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_rEye;
		RRA_ProxyConnectors("RRA_Head", "RRA_rEye");

		//ARMS
		int $loop = 1;
		$prfx = "_l";
		float $multiplier = 1;
		while ($loop <=2)
		{
			//ARM//////////////////////////////////
			RRA_ProxyBase("RRA" + $prfx + "Clavicle");
			delete `pointConstraint ("RRA_SpineTop") ("RRA" + $prfx + "Clavicle")`;
			move -r -os -wd ($multiplier * 1.25) 0.5 0 ("RRA" + $prfx + "Clavicle");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Clavicle");
			RRA_ProxyConnectors("RRA_SpineTop", ("RRA" + $prfx + "Clavicle"));
	
			RRA_ProxyBase("RRA" + $prfx + "Shoulder");
			delete `pointConstraint ("RRA" + $prfx + "Clavicle") ("RRA" + $prfx + "Shoulder")`;
			move -r -os -wd ($multiplier * 1.7) 0 0 ("RRA" + $prfx + "Shoulder");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Shoulder");
			RRA_ProxyConnectors(("RRA" + $prfx + "Clavicle"), ("RRA" + $prfx + "Shoulder"));
	
			RRA_ProxyAim("RRA" + $prfx + "Elbow");
			delete `pointConstraint ("RRA" + $prfx + "Shoulder") ("RRA" + $prfx + "Elbow")`;
			move -r -os -wd ($multiplier * 3.5) 0 0 ("RRA" + $prfx + "Elbow");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Elbow");
			RRA_ProxyConnectors(("RRA" + $prfx + "Shoulder"), ("RRA" + $prfx + "Elbow"));
			
			//HAND
			
			//WRIST
			RRA_ProxyUp("RRA" + $prfx + "Wrist");		
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Wrist");
			delete `pointConstraint ("RRA" + $prfx + "Elbow") ("RRA" + $prfx + "Wrist")`;
			move -r -os -wd ($multiplier * 3.5) 0 0 ("RRA" + $prfx + "Wrist");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Wrist");
			RRA_ProxyConnectors(("RRA" + $prfx + "Elbow"), ("RRA" + $prfx + "Wrist"));
			
			//PALM
			RRA_ProxyUp("RRA" + $prfx + "Palm");		
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Palm");
			delete `pointConstraint ("RRA" + $prfx + "Wrist") ("RRA" + $prfx + "Palm")`;
			move -r -os -wd ($multiplier * 0.7) 0 0 ("RRA" + $prfx + "Palm");
			scale 0.7 0.7 0.7 ("RRA" + $prfx + "Palm");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Palm");
			setAttr ("RRA" + $prfx + "PalmSnapShape.localScaleX") 0.175;
			setAttr ("RRA" + $prfx + "PalmSnapShape.localScaleY") 0.175;
			setAttr ("RRA" + $prfx + "PalmSnapShape.localScaleZ") 0.175;
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Palm");
			RRA_ProxyConnectors(("RRA" + $prfx + "Wrist"), ("RRA" + $prfx + "Palm"));
			parent ("RRA" + $prfx + "Palm") ("RRA" + $prfx + "Wrist");

			if ($thumbsOn == 1)
			{
				RRA_ProxyUp(("RRA" + $prfx + "ThumbJ1"));
				delete `pointConstraint ("RRA" + $prfx + "Wrist") ("RRA" + $prfx + "ThumbJ1")`;
				move -r -os -wd ($multiplier * 0.45) 0 0.51 ("RRA" + $prfx + "ThumbJ1");
				scale 0.75 0.75 0.75 ("RRA" + $prfx + "ThumbJ1");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "ThumbJ1");
				setAttr ("RRA" + $prfx + "ThumbJ1SnapShape.localScaleX") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ1SnapShape.localScaleY") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ1SnapShape.localScaleZ") 0.1875;

				RRA_ProxyUp("RRA" + $prfx + "ThumbJ2");
				delete `pointConstraint ("RRA" + $prfx + "ThumbJ1") ("RRA" + $prfx + "ThumbJ2")`;
				move -r -os -wd 0 0 0.75 ("RRA" + $prfx + "ThumbJ2");
				scale 0.75 0.75 0.75 ("RRA" + $prfx + "ThumbJ2");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "ThumbJ2");
				setAttr ("RRA" + $prfx + "ThumbJ2SnapShape.localScaleX") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ2SnapShape.localScaleY") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ2SnapShape.localScaleZ") 0.1875;

				RRA_ProxyUp("RRA" + $prfx + "ThumbJ3");
				delete `pointConstraint ("RRA" + $prfx + "ThumbJ2") ("RRA" + $prfx + "ThumbJ3")`;
				move -r -os -wd 0 0 0.75 ("RRA" + $prfx + "ThumbJ3");
				scale 0.75 0.75 0.75 ("RRA" + $prfx + "ThumbJ3");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "ThumbJ3");
				setAttr ("RRA" + $prfx + "ThumbJ3SnapShape.localScaleX") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ3SnapShape.localScaleY") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJ3SnapShape.localScaleZ") 0.1875;

				RRA_ProxyUp("RRA" + $prfx + "ThumbJTip");
				delete `pointConstraint ("RRA" + $prfx + "ThumbJ3") ("RRA" + $prfx + "ThumbJTip")`;
				move -r -os -wd 0 0 0.75 ("RRA" + $prfx + "ThumbJTip");
				scale 0.75 0.75 0.75 ("RRA" + $prfx + "ThumbJTip");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "ThumbJTip");
				setAttr ("RRA" + $prfx + "ThumbJTipSnapShape.localScaleX") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJTipSnapShape.localScaleY") 0.1875;
				setAttr ("RRA" + $prfx + "ThumbJTipSnapShape.localScaleZ") 0.1875;

				parent ("RRA" + $prfx + "ThumbJ1") ("RRA" + $prfx + "Wrist");
				parent ("RRA" + $prfx + "ThumbJ2") ("RRA" + $prfx + "ThumbJ1");
				parent ("RRA" + $prfx + "ThumbJ3") ("RRA" + $prfx + "ThumbJ2");
				parent ("RRA" + $prfx + "ThumbJTip") ("RRA" + $prfx + "ThumbJ3");
				
				RRA_ProxyConnectors(("RRA" + $prfx + "Wrist"), ("RRA" + $prfx + "ThumbJ1"));
				RRA_ProxyConnectors(("RRA" + $prfx + "ThumbJ1"), ("RRA" + $prfx + "ThumbJ2"));
				RRA_ProxyConnectors(("RRA" + $prfx + "ThumbJ2"), ("RRA" + $prfx + "ThumbJ3"));
				RRA_ProxyConnectors(("RRA" + $prfx + "ThumbJ3"), ("RRA" + $prfx + "ThumbJTip"));
			}
			
			//FINGERS
			$i = 1;
			while ($i <= $fingersNum)
			{
				if ($i == 1)
				{//CREATE FIRST FINGER JOINT
					RRA_ProxyUp(("RRA" + $prfx + "Finger" + $i + "J1"));		
					delete `pointConstraint ("RRA" + $prfx + "Wrist") ("RRA" + $prfx + "Finger" + $i + "J1")`;
					move -r -os -wd ($multiplier * 1.47) 0 0 ("RRA" + $prfx + "Finger" + $i + "J1");

					if ($fingersNum == 2)
					{
					   move -r 0 0 .25 ("RRA" + $prfx + "Finger" + $i + "J1");
					   makeIdentity -apply true -t 1 ("RRA" + $prfx + "Finger" + $i + "J1");
					}
					else if ($fingersNum >= 3)
					{
					   move -r 0 0 .5 ("RRA" + $prfx + "Finger" + $i + "J1");
					   makeIdentity -apply true -t 1 ("RRA" + $prfx + "Finger" + $i + "J1");
					}
				}
				else
				{//CREATE ANY OTHERS OFF OF PREVIOUS FINGER LOCATION
					RRA_ProxyUp(("RRA" + $prfx + "Finger" + $i + "J1"));		
					delete `pointConstraint ("RRA" + $prfx + "Finger" + ($i - 1) + "J1") ("RRA" + $prfx + "Finger" + $i + "J1")`;
					move -r -os -wd 0 0 -0.4 ("RRA" + $prfx + "Finger" + $i + "J1");
				}					
					
				scale 0.62 0.62 0.62 ("RRA" + $prfx + "Finger" + $i + "J1");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Finger" + $i + "J1");
				setAttr ("RRA" + $prfx + "Finger" + $i + "J1SnapShape.localScaleX") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J1SnapShape.localScaleY") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J1SnapShape.localScaleZ") 0.155;

				RRA_ProxyUp(("RRA" + $prfx + "Finger" + $i + "J2"));		
				delete `pointConstraint ("RRA" + $prfx + "Finger" + $i + "J1") ("RRA" + $prfx + "Finger" + $i + "J2")`;
				move -r -os -wd ($multiplier * 0.61) 0 0 ("RRA" + $prfx + "Finger" + $i + "J2");
				scale 0.62 0.62 0.62 ("RRA" + $prfx + "Finger" + $i + "J2");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Finger" + $i + "J2");
				setAttr ("RRA" + $prfx + "Finger" + $i + "J2SnapShape.localScaleX") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J2SnapShape.localScaleY") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J2SnapShape.localScaleZ") 0.155;

				RRA_ProxyUp(("RRA" + $prfx + "Finger" + $i + "J3"));		
				delete `pointConstraint ("RRA" + $prfx + "Finger" + $i + "J2") ("RRA" + $prfx + "Finger" + $i + "J3")`;
				move -r -os -wd ($multiplier * 0.61) 0 0 ("RRA" + $prfx + "Finger" + $i + "J3");
				scale 0.62 0.62 0.62 ("RRA" + $prfx + "Finger" + $i + "J3");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Finger" + $i + "J3");
				RRA_ProxyUp(("RRA" + $prfx + "Finger" + $i + "JTip"));		
				setAttr ("RRA" + $prfx + "Finger" + $i + "J3SnapShape.localScaleX") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J3SnapShape.localScaleY") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "J3SnapShape.localScaleZ") 0.155;

				delete `pointConstraint ("RRA" + $prfx + "Finger" + $i + "J3") ("RRA" + $prfx + "Finger" + $i + "JTip")`;
				move -r -os -wd ($multiplier * 0.61) 0 0 ("RRA" + $prfx + "Finger" + $i + "JTip");
				scale 0.62 0.62 0.62 ("RRA" + $prfx + "Finger" + $i + "JTip");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Finger" + $i + "JTip");
				setAttr ("RRA" + $prfx + "Finger" + $i + "JTipSnapShape.localScaleX") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "JTipSnapShape.localScaleY") 0.155;
				setAttr ("RRA" + $prfx + "Finger" + $i + "JTipSnapShape.localScaleZ") 0.155;

	        	
				parent ("RRA" + $prfx + "Finger" + $i + "J1") ("RRA" + $prfx + "Palm");
				parent ("RRA" + $prfx + "Finger" + $i + "J2") ("RRA" + $prfx + "Finger" + $i + "J1");
				parent ("RRA" + $prfx + "Finger" + $i + "J3") ("RRA" + $prfx + "Finger" + $i + "J2");
				parent ("RRA" + $prfx + "Finger" + $i + "JTip") ("RRA" + $prfx + "Finger" + $i + "J3");
				
				RRA_ProxyConnectors(("RRA" + $prfx + "Palm"), ("RRA" + $prfx + "Finger" + $i + "J1"));
				RRA_ProxyConnectors(("RRA" + $prfx + "Finger" + $i + "J1"), ("RRA" + $prfx + "Finger" + $i + "J2"));
				RRA_ProxyConnectors(("RRA" + $prfx + "Finger" + $i + "J2"), ("RRA" + $prfx + "Finger" + $i + "J3"));
				RRA_ProxyConnectors(("RRA" + $prfx + "Finger" + $i + "J3"), ("RRA" + $prfx + "Finger" + $i + "JTip"));
				
				$i++;
			}
		   
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Wrist");
			$loop++;
			$prfx = "_r";
			$multiplier = -1;
		}
		
		//LEG PROXIES
		$loop = 1;
		$prfx = "_l";
		float $multiplier = 1;
		
		while ($loop <= 2)
		{
			RRA_ProxyBase(("RRA" + $prfx + "Hip"));
			delete `pointConstraint "RRA_ROOT" ("RRA" + $prfx + "Hip")`;
			move -r -os -wd ($multiplier * 1.72) -0.8 0 ("RRA" + $prfx + "Hip");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Hip");
			RRA_ProxyConnectors("RRA_ROOT", ("RRA" + $prfx + "Hip"));

			RRA_ProxyAim(("RRA" + $prfx + "Knee"));
			delete `pointConstraint ("RRA" + $prfx + "Hip") ("RRA" + $prfx + "Knee")`;
			move -r -os -wd 0 -6.4 0 ("RRA" + $prfx + "Knee");
			rotate -r 0 180 90 ("RRA" + $prfx + "Knee");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Knee");
			RRA_ProxyConnectors(("RRA" + $prfx + "Hip"), ("RRA" + $prfx + "Knee"));

			RRA_ProxyBase(("RRA" + $prfx + "Ankle"));
			delete `pointConstraint ("RRA" + $prfx + "Knee") ("RRA" + $prfx + "Ankle")`;
			move -r -os -wd 0 -6.4 0 ("RRA" + $prfx + "Ankle");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Ankle");
			RRA_ProxyConnectors(("RRA" + $prfx + "Knee"), ("RRA" + $prfx + "Ankle"));

			RRA_ProxyBase(("RRA" + $prfx + "Ball"));
			delete `pointConstraint ("RRA" + $prfx + "Ankle") ("RRA" + $prfx + "Ball")`;
			move -r -os -wd 0 -1.65 2.26 ("RRA" + $prfx + "Ball");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Ball");
			RRA_ProxyConnectors(("RRA" + $prfx + "Ankle"), ("RRA" + $prfx + "Ball"));

			RRA_ProxyBase(("RRA" + $prfx + "Toe"));
			delete `pointConstraint ("RRA" + $prfx + "Ball") ("RRA" + $prfx + "Toe")`;
			move -r -os -wd 0 0 1.7 ("RRA" + $prfx + "Toe");
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Toe");
			if ($toesNum == 1)
			{
			RRA_ProxyConnectors(("RRA" + $prfx + "Ball"), ("RRA" + $prfx + "Toe"));
			}
			group -em -n ("RRA" + $prfx + "BallG");
			parent ("RRA" + $prfx + "BallG") ("RRA" + $prfx + "Ball");
			
			spaceLocator -n ("RRA" + $prfx + "KneeLctr");
			delete `pointConstraint ("RRA" + $prfx + "Knee") ("RRA" + $prfx + "KneeLctr")`;
			parent ("RRA" + $prfx + "KneeLctr") ("RRA" + $prfx + "Knee");
			move -r 0 0 1.5 ("RRA" + $prfx + "KneeLctr");
			setAttr ("RRA" + $prfx + "KneeLctr.v") 0;			

			//TOES
			int $toeCount = 2;
			string $toes[];
			$nPad = "0";
			$prePad = "0";
			float $offset = 0.25;
			
			while ($toeCount <= $toesNum)
			{
				if ($toeCount == 2)
				{
					setAttr ("RRA" + $prfx + "Toe.v") 0;
					
					RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1"));
					delete `pointConstraint ("RRA" + $prfx + "Toe") ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1")`;
					move -r -os -wd 0 0 -1.2 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1");
					scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1");
					RRA_ProxyConnectors(("RRA" + $prfx + "Ball"), ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1"));
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1SnapShape.localScaleX") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1SnapShape.localScaleY") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1SnapShape.localScaleZ") 0.1;
					
					RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2"));
					delete `pointConstraint ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1") ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2")`;
					move -r -os -wd 0 0 0.6 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2");					
					scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2");
					parent ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2") ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1");
					RRA_ProxyConnectors(("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1"), ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2"));
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2SnapShape.localScaleX") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2SnapShape.localScaleY") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2SnapShape.localScaleZ") 0.1;
					
					RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip"));
					delete `pointConstraint ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2") ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip")`;
					move -r -os -wd 0 0 0.6 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip");					
					scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip");
					parent ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip") ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2");
					RRA_ProxyConnectors(("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J2"), ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip"));
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTipSnapShape.localScaleX") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTipSnapShape.localScaleY") 0.1;
					setAttr ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTipSnapShape.localScaleZ") 0.1;
					
					pointConstraint -mo -skip x -skip y ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "JTip") ("RRA" + $prfx + "Toe");
					setAttr -l 1 ("RRA" + $prfx + "Toe.tx");
					setAttr -l 1 ("RRA" + $prfx + "Toe.ty");
					setAttr -l 1 ("RRA" + $prfx + "Toe.ry");
					setAttr -l 1 ("RRA" + $prfx + "Toe.sx");
					setAttr -l 1 ("RRA" + $prfx + "Toe.sy");
					setAttr -l 1 ("RRA" + $prfx + "Toe.sz");
					
					select $toes ("RRA" + $prfx + "Toe" + $nPad + ($toeCount -1) + "J1");
					$toes = `ls -sl`;
				}
				if ($toeCount >= 10)
				{
					$nPad = "";
				}
				RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1"));
				delete `pointConstraint ("RRA" + $prfx + "Toe") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1")`;
				move -r -os -wd ($multiplier * (0.25 * ((float)$toeCount - 1))) 0 -1.2 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1");
				scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1");
				RRA_ProxyConnectors(("RRA" + $prfx + "Ball"), ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1"));
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1SnapShape.localScaleX") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1SnapShape.localScaleY") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1SnapShape.localScaleZ") 0.1;
				
				RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2"));
				delete `pointConstraint ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2")`;
				move -r -os -wd 0 0 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2");					
				scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2");
				parent ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1");
				RRA_ProxyConnectors(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1"), ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2"));
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2SnapShape.localScaleX") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2SnapShape.localScaleY") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2SnapShape.localScaleZ") 0.1;
				
				RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3"));
				delete `pointConstraint ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3")`;
				move -r -os -wd 0 0 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3");					
				scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3");
				parent ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2");
				RRA_ProxyConnectors(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J2"), ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3"));
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3SnapShape.localScaleX") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3SnapShape.localScaleY") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3SnapShape.localScaleZ") 0.1;

				RRA_ProxyBase(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip"));
				delete `pointConstraint ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip")`;
				move -r -os -wd 0 0 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip");					
				scale 0.4 0.4 0.4 ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip");
				parent ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip") ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3");
				RRA_ProxyConnectors(("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J3"), ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip"));
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTipSnapShape.localScaleX") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTipSnapShape.localScaleY") 0.1;
				setAttr ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTipSnapShape.localScaleZ") 0.1;
				
				pointConstraint -mo -skip x -skip y ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "JTip") ("RRA" + $prfx + "Toe");

				select $toes ("RRA" + $prfx + "Toe" + $nPad + $toeCount + "J1");
				$toes = `ls -sl`;
				$toeCount++;
			}
			if ($toesNum > 1)
			{
				group -n ("RRA" + $prfx + "ToeG") $toes;
				delete `pointConstraint -skip y -skip z ("RRA" + $prfx + "Ball") ("RRA" + $prfx + "ToeG")`;
				ungroup ("RRA" + $prfx + "ToeG");
				parent $toes ("RRA" + $prfx + "BallG");
				makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "BallG");
			}
			
			makeIdentity -apply true -t 1 -r 1 -s 1 ("RRA" + $prfx + "Ball");
			
			select -cl;
			$toes = `ls -sl`;
			$loop++;
			$prfx = "_r";
			$multiplier = -1;
		}
		
		//PARENT CONTROLS
		parent RRA_ROOT $spineProxiesG RRA_SpineTop $neckProxiesG RRA_Head RRA_MAIN;
		parent RRA_lClavicle RRA_rClavicle RRA_SpineTop;
		//parent RRA_Head $neckTop;
		parent RRA_Jaw RRA_HeadTip RRA_lEye RRA_rEye RRA_Head;
		parent RRA_JawTip RRA_Jaw;
		
		parent RRA_lHip RRA_rHip RRA_ROOT;
		parent RRA_lShoulder RRA_lClavicle;
		
		//CONSTRAIN LEFT ELBOW BETWEEN SHOULDER AND WRIST
		group -em -n RRA_lElbowG;
		delete `pointConstraint RRA_lElbow RRA_lElbowG`;
		parent RRA_lElbow RRA_lElbowG;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_lElbowG;
		move -r 0 0 .001 RRA_lElbowG.scalePivot RRA_lElbowG.rotatePivot ;
		pointConstraint -mo RRA_lShoulder RRA_lWrist RRA_lElbowG;
		parent RRA_lElbowG RRA_lWrist RRA_MAIN;
		
		//CONSTRAIN LEFT KNEE BETWEEN HIP AND ANKLE
		group-em -n RRA_lKneeG;
		delete `pointConstraint RRA_lKnee RRA_lKneeG`;
		parent RRA_lKnee RRA_lKneeG;
		//move -r 0 0 -.001 RRA_lKneeG.scalePivot RRA_lKneeG.rotatePivot ;
		pointConstraint -mo RRA_lHip RRA_lAnkle RRA_lKneeG;
		parent RRA_lKneeG RRA_lAnkle RRA_MAIN;
		
		parent RRA_lToe RRA_lBallG;
		
		parent RRA_rShoulder RRA_rClavicle;
		
		//CONSTRAIN RIGHT ELBOW BETWEEN SHOULDER AND WRIST
		group -em -n RRA_rElbowG;
		delete `pointConstraint RRA_rElbow RRA_rElbowG`;
		parent RRA_rElbow RRA_rElbowG;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_rElbowG;
		move -r 0 0 .001 RRA_rElbowG.scalePivot RRA_rElbowG.rotatePivot ;
		pointConstraint -mo RRA_rShoulder RRA_rWrist RRA_rElbowG;
		parent RRA_rElbowG RRA_rWrist RRA_MAIN;

		//group -n RRA_rElbowG RRA_rElbow;
		//move -r 0 0 .001 RRA_rElbowG.scalePivot RRA_rElbowG.rotatePivot ;
		//pointConstraint -mo RRA_rShoulder RRA_rWrist RRA_rElbowG;
		//parent RRA_rElbowG RRA_rWrist RRA_MAIN;
		
		//CONSTRAIN RIGHT KNEE BETWEEN HIP AND ANKLE
		group -em -n RRA_rKneeG;
		delete `pointConstraint RRA_rKnee RRA_rKneeG`;
		parent RRA_rKnee RRA_rKneeG;
		//move -r 0 0 -.001 RRA_rKneeG.scalePivot RRA_rKneeG.rotatePivot ;
		pointConstraint -mo RRA_rHip RRA_rAnkle RRA_rKneeG;
		parent RRA_rKneeG RRA_rAnkle RRA_MAIN;
		
		parent RRA_rToe RRA_rBallG;
		
		//LEFT ELBOW INDICATOR
		spaceLocator -n RRA_lElbowParent;
		parent RRA_lElbowParent RRA_MAIN;
		spaceLocator -n RRA_lElbowAim;
		move -r 2 0 0 RRA_lElbowAim;
		parent RRA_lElbowAim RRA_lElbowParent;
		
		//LEFT SHOULDER PARENT UP LOCATOR
		spaceLocator -n RRA_lElbowParentUp -p 0 0 0;
		group -n RRA_lElbowParentUpG;
		pointConstraint -skip x -skip z RRA_lShoulder RRA_lElbowParentUpG;
		parent RRA_lElbowParentUpG RRA_MAIN;
		shadingNode -asUtility multiplyDivide-n RRA_lElbowParentUp_MD;
		setAttr RRA_lElbowParentUp_MD.operation 2;
		setAttr "RRA_lElbowParentUp_MD.input2X" -2;
		connectAttr -f RRA_lWrist.translateY RRA_lElbowParentUp_MD.input1X;
		connectAttr -f RRA_lElbowParentUp_MD.outputX RRA_lElbowParentUp.translateY;
		
		//LEFT ARM CONSTRAINTS
		pointConstraint RRA_lShoulder RRA_lElbowParent;
		pointConstraint RRA_lShoulder RRA_lWrist RRA_lElbowAim;
		
		connectAttr -f RRA_lElbowParent.rotate RRA_lElbowG.rotate;
		
		aimConstraint -aimVector 1 0 0 -upVector -1 0 0 -worldUpType "object"
		-worldUpObject RRA_lElbowParentUp RRA_lWrist RRA_lElbowParent;
		
		aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none"
		-skip y -skip z RRA_lElbowAim RRA_lElbow;
		
		//RIGHT ELBOW INDICATOR
		spaceLocator -n RRA_rElbowParent;
		parent RRA_rElbowParent RRA_MAIN;
		spaceLocator -n RRA_rElbowAim;
		move -r -2 0 0 RRA_rElbowAim;
		parent RRA_rElbowAim RRA_rElbowParent;
		
		//RIGHT SHOULDER PARENT UP LOCATOR
		spaceLocator -n RRA_rElbowParentUp -p 0 0 0;
		group -n RRA_rElbowParentUpG;
		pointConstraint -skip x -skip z RRA_rShoulder RRA_rElbowParentUpG;
		parent RRA_rElbowParentUpG RRA_MAIN;
		shadingNode -asUtility multiplyDivide-n RRA_rElbowParentUp_MD;
		setAttr RRA_rElbowParentUp_MD.operation 2;
		setAttr "RRA_rElbowParentUp_MD.input2X" -2;
		connectAttr -f RRA_rWrist.translateY RRA_rElbowParentUp_MD.input1X;
		connectAttr -f RRA_rElbowParentUp_MD.outputX RRA_rElbowParentUp.translateY;
		
		//RIGHT ARM CONSTRAINTS
		pointConstraint RRA_rShoulder RRA_rElbowParent;
		pointConstraint RRA_rShoulder RRA_rWrist RRA_rElbowAim;
		
		connectAttr -f RRA_rElbowParent.rotate RRA_rElbowG.rotate;
		
		aimConstraint -aimVector -1 0 0 -upVector 1 0 0 -worldUpType "object"
		-worldUpObject RRA_rElbowParentUp RRA_rWrist RRA_rElbowParent;
		
		aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none"
		-skip y -skip z RRA_rElbowAim RRA_rElbow;
		
		//LEFT KNEE INDICATOR
		spaceLocator -n RRA_lKneeParent;
		parent RRA_lKneeParent RRA_MAIN;
		spaceLocator -n RRA_lKneeAim;
		move -r 0 -2 0 RRA_lKneeAim;
		parent RRA_lKneeAim RRA_lKneeParent;
		
		//LEFT HIP PARENT UP LOCATOR
		spaceLocator -n RRA_lKneeParentUp -p 0 0 0;
		group -n RRA_lKneeParentUpG;
		pointConstraint -offset 0 2 0 RRA_lHip RRA_lKneeParentUpG;
		parent RRA_lKneeParentUpG RRA_MAIN;
		shadingNode -asUtility multiplyDivide-n RRA_lKneeParentUp_MD;
		setAttr RRA_lKneeParentUp_MD.operation 2;
		setAttr "RRA_lKneeParentUp_MD.input2X" -2;
		connectAttr -f RRA_lAnkle.translateX RRA_lKneeParentUp_MD.input1X;
		connectAttr -f RRA_lKneeParentUp_MD.outputX RRA_lKneeParentUp.translateX;
		
		//LEFT LEG CONSTRAINTS
		pointConstraint RRA_lHip RRA_lKneeParent;
		pointConstraint RRA_lHip RRA_lAnkle RRA_lKneeAim;
		
		connectAttr -f RRA_lKneeParent.rotate RRA_lKneeG.rotate;
		
		aimConstraint -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType "object"
		-worldUpObject RRA_lKneeParentUp RRA_lAnkle RRA_lKneeParent;
		
		aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0
		-worldUpObject RRA_lKneeAim -skip x -skip z RRA_lKneeAim RRA_lKnee;
		
		
		//RIGHT KNEE INDICATOR
		spaceLocator -n RRA_rKneeParent;
		parent RRA_rKneeParent RRA_MAIN;
		spaceLocator -n RRA_rKneeAim;
		move -r 0 -2 0 RRA_rKneeAim;
		parent RRA_rKneeAim RRA_rKneeParent;
		
		//LEFT HIP PARENT UP LOCATOR
		spaceLocator -n RRA_rKneeParentUp -p 0 0 0;
		group -n RRA_rKneeParentUpG;
		pointConstraint -offset 0 2 0 RRA_rHip RRA_rKneeParentUpG;
		parent RRA_rKneeParentUpG RRA_MAIN;
		shadingNode -asUtility multiplyDivide-n RRA_rKneeParentUp_MD;
		setAttr RRA_rKneeParentUp_MD.operation 2;
		setAttr "RRA_rKneeParentUp_MD.input2X" -2;
		connectAttr -f RRA_rAnkle.translateX RRA_rKneeParentUp_MD.input1X;
		connectAttr -f RRA_rKneeParentUp_MD.outputX RRA_rKneeParentUp.translateX;
		
		//LEFT LEG CONSTRAINTS
		pointConstraint RRA_rHip RRA_rKneeParent;
		pointConstraint RRA_rHip RRA_rAnkle RRA_rKneeAim;
		
		connectAttr -f RRA_rKneeParent.rotate RRA_rKneeG.rotate;
		
		aimConstraint -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType "object"
		-worldUpObject RRA_rKneeParentUp RRA_rAnkle RRA_rKneeParent;
		
		aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0
		-worldUpObject RRA_rKneeAim -skip x -skip z RRA_rKneeAim RRA_rKnee;
		
		
		//LOCATORS FOR FOOT TILT
		curve -n RRA_lFootInTilt -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_lFootInTiltShape;
		move 0.5 0 2.26 RRA_lFootInTilt;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_lFootInTilt;
		curve -n RRA_lFootOutTilt -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_lFootOutTiltShape;
		move 3 0 2.26 RRA_lFootOutTilt;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_lFootOutTilt;
		parent RRA_lFootOutTilt RRA_lFootInTilt RRA_lBallG;
		curve -n RRA_lFootHeelPivot -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_lFootHeelPivotShape;
		move 1.72 0 -1.079 RRA_lFootHeelPivot;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_lFootHeelPivot;
		
		curve -n RRA_rFootInTilt -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_rFootInTiltShape;
		move -0.5 0 2.26 RRA_rFootInTilt;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_rFootInTilt;
		curve -n RRA_rFootOutTilt -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_rFootOutTiltShape;
		move -3 0 2.26 RRA_rFootOutTilt;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_rFootOutTilt;
		parent RRA_rFootOutTilt RRA_rFootInTilt RRA_rBallG;
		curve -n RRA_rFootHeelPivot -d 1 -p 0 0 -1 -p 0 0 1 -p 0 0 0 -p 1 0 0 -p -1 0 0 -p 0 0 0 -p 0 1 0 -p 0 -1 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;;
		pickWalk -d down;
		rename RRA_rFootHeelPivotShape;
		move -1.72 0 -1.079 RRA_rFootHeelPivot;
		makeIdentity -apply true -t 1 -r 1 -s 1 RRA_rFootHeelPivot;
		
		group -n RRA_lFootG RRA_lBall RRA_lFootHeelPivot;
		parent RRA_lFootG RRA_MAIN;
		$lAnklePosition = `xform -q -ws -rp RRA_lAnkle`;
		move $lAnklePosition[0] 0 $lAnklePosition[2] RRA_lFootG.scalePivot RRA_lFootG.rotatePivot ;
		
		pointConstraint -mo -skip y RRA_lAnkle RRA_lFootG;
		orientConstraint -mo -skip x -skip z RRA_lAnkle RRA_lFootG;
		scaleConstraint -offset 1 1 1 -skip y RRA_lAnkle RRA_lFootG;
		
		group -n RRA_rFootG RRA_rBall RRA_rFootHeelPivot;
		parent RRA_rFootG RRA_MAIN;
		$rAnklePosition = `xform -q -ws -rp RRA_rAnkle`;
		move $rAnklePosition[0] 0 $rAnklePosition[2] RRA_rFootG.scalePivot RRA_rFootG.rotatePivot ;
		
		pointConstraint -mo -skip y RRA_rAnkle RRA_rFootG;
		orientConstraint -mo -skip x -skip z RRA_rAnkle RRA_rFootG;
		scaleConstraint -offset 1 1 1 -skip y RRA_rAnkle RRA_rFootG;
		
		//LIMITS & LOCKS
		select -hi RRA_MAIN;
		$nurbsCurvesShapes = `ls -sl -type "nurbsCurve"`;
		select $nurbsCurvesShapes;
		pickWalk -d up;
		$nurbsCurvesOnly = `ls -sl`;
		string $selectedProxy;
		for ($selectedProxy in $nurbsCurvesOnly)
		{
			transformLimits -sx 0.01 1 -esx 1 0   $selectedProxy;
			transformLimits -sy 0.01 1 -esy 1 0   $selectedProxy;
			transformLimits -sz 0.01 1 -esz 1 0   $selectedProxy;
		}
		
    	
		//LEFT FINGER LIMITS
		select "RRA_lFinger*J1";
		int $currentSelection = size(`ls -sl`);
		if ($currentSelection > 0)
		{
			select "RRA_lFinger*J1";
			$finger_J1 = `ls -sl`;
			for ($selectedProxy in $finger_J1)
			{
				transformLimits -tx -0.75 1 -etx 1 0 $selectedProxy;	
			}
    		
			select "RRA_lFinger*J2" "RRA_lFinger*J3" "RRA_lFinger*JTip";
			$finger_J1 = `ls -sl`;
			for ($selectedProxy in $finger_J1)
			{	
			transformLimits -tx -0.5 1 -etx 1 0  $selectedProxy;
			}
		}
    	
		//RIGHT FINGER LIMITS
		select "RRA_rFinger*J1";
		int $currentSelection = size(`ls -sl`);
		if ($currentSelection > 0)
		{
			$finger_J1 = `ls -sl`;
			for ($selectedProxy in $finger_J1)
			{
				transformLimits -tx 0 0.75 -etx 0 1 $selectedProxy;	
			}
		
			select "RRA_rFinger*J2" "RRA_rFinger*J3" "RRA_rFinger*JTip";
			$finger_J1 = `ls -sl`;
			for ($selectedProxy in $finger_J1)
			{	
			transformLimits -tx 0 0.5 -etx 0 1  $selectedProxy;
			}
		}
		
		//OTHERS
		
		//CONSTRAIN FOOT CONTROLS TO GROUND PLANE
		pointConstraint -mo -skip x -skip z RRA_MAIN RRA_lBallG;
		pointConstraint -mo -skip x -skip z RRA_MAIN RRA_rBallG;

		
		
		transformLimits -ty -12 1 -ety 1 0 RRA_ROOT;
		transformLimits -ty -17.5 1 -ety 1 0 RRA_SpineTop;
		//transformLimits -ty -0.75 1 -ety 1 0 RRA_Head;
		transformLimits -ty -3 1 -ety 1 0 RRA_HeadTip;
		transformLimits -ty -0.75 1 -ety 1 0 RRA_Jaw;
		transformLimits -tx -0.5 1 -etx 1 0 RRA_lEye;
		transformLimits -tx -1 0.5 -etx 0 1 RRA_rEye;
		
		transformLimits -tx -1 1 -etx 1 0 RRA_lClavicle;
		transformLimits -tx -1.5 1 -etx 1 0 RRA_lShoulder;
		transformLimits -tx -6.75 1 -etx 1 0 RRA_lWrist;
		transformLimits -tx -0.6 1 -etx 1 0 RRA_lPalm;
		transformLimits -tx -1.5 1 -etx 1 0 RRA_lHip;
		transformLimits -tx -1.5 1 -etx 1 0 RRA_lAnkle;
		
		transformLimits -tx 1 1 -etx 0 1 RRA_rClavicle;
		transformLimits -tx 1 1.5 -etx 0 1 RRA_rShoulder;
		transformLimits -tx 1 6.75 -etx 0 1 RRA_rWrist;		
		transformLimits -tx 0 0.6 -etx 0 1 RRA_rPalm;
		transformLimits -tx 1 1.5 -etx 0 1 RRA_rHip;
		transformLimits -tx 1 1.5 -etx 0 1 RRA_rAnkle;		

		//FORCE IK HANDLES TO ORIENT CORRECTLY
		transformLimits -tz -1 -.001 -etz 0 1 RRA_lElbow;
		transformLimits -tz -1 -.001 -etz 0 1 RRA_rElbow;
		transformLimits -tz .001 1 -etz 1 0 RRA_lKnee;
		transformLimits -tz .001 1 -etz 1 0 RRA_rKnee;
		
		//LEFT ANKLE CONTROLS
		setAttr -l 1 -k 0 -channelBox 0 RRA_lAnkle.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lAnkle.rz;
		transformLimits -ry -80 80 -ery 1 1 RRA_lAnkle;
		
		//RIGHT ANKLE CONTROLS
		setAttr -l 1 -k 0 -channelBox 0 RRA_rAnkle.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rAnkle.rz;
		transformLimits -ry -80 80 -ery 1 1 RRA_rAnkle;
		
		//MAIN CONTROL
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.tx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_MAIN.rz;
		
		//CENTER JOINTS
		string $currentProxy;
		select RRA_ROOT RRA_SpineTop RRA_Head RRA_Jaw RRA_JawTip RRA_HeadTip;
		$centerProxies = `ls -sl`;
		for ($currentProxy in $centerProxies)
		{
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ry");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rz");
		}
		
		select -cl;
		
		for ($currentProxy in $spineProxies)
		{
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ty");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ry");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sy");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sz");
		}
		for ($currentProxy in $spineProxiesG)
		{
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ty");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ry");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sy");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".v");
		}
		
		for ($currentProxy in $neckProxies)
		{
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ty");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ry");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sy");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sz");
		}
			
		
		for ($currentProxy in $neckProxiesG)
		{
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ty");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".tz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".ry");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".rz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sx");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sy");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".sz");
			setAttr -l 1 -k 0 -channelBox 0 ($currentProxy + ".v");
		}
		
		//ARM CONTROLS
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rShoulder.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lShoulder.sz;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rElbow.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lElbow.sz;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rPalm.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lPalm.sz;		
		
		//LEG CONTROLS
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rHip.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lHip.sz;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rKnee.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lKnee.sz;
		
		//FOOT CONTROLS
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBall.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBall.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBall.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rToe.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rToe.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBall.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBall.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lToe.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lToe.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lToe.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rToe.ty;
		transformLimits -ty 0 1 -ety 1 0 RRA_lBall;
		transformLimits -ty 0 1 -ety 1 0 RRA_rBall;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.tx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.tx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.sz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rBallG.v;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lBallG.v;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootInTilt.sz;
		transformLimits -tx -1.14 1 -etx 1 0 RRA_rFootInTilt;

		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootOutTilt.sz;
		transformLimits -tx -1 1.2 -etx 0 1 RRA_rFootOutTilt;

		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.tx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_rFootHeelPivot.sz;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootInTilt.sz;
		transformLimits -tx -1 1.14 -etx 0 1 RRA_lFootInTilt;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.tz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootOutTilt.sz;
		transformLimits -tx -1.2 1 -etx 1 0 RRA_lFootOutTilt;
		
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.tx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.ty;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.rx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.ry;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.rz;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.sx;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.sy;
		setAttr -l 1 -k 0 -channelBox 0 RRA_lFootHeelPivot.sz;
		
		setAttr RRA_lElbowParent.v 0;
		setAttr RRA_rKneeParentUpG.v 0;
		setAttr RRA_rKneeParent.v 0;
		setAttr RRA_lKneeParentUpG.v 0;
		setAttr RRA_lKneeParent.v 0;
		setAttr RRA_rElbowParentUpG.v 0;
		setAttr RRA_rElbowParent.v 0;
		setAttr RRA_lElbowParentUpG.v 0;

		//LOCK NODES SO PROXIES CANNOT BE DELETED
		select -hi RRA_MAIN;
		select -d RRA_MAIN;
		select -add RRA_rKneeParentUp_MD RRA_lElbowParentUp_MD
		RRA_rElbowParentUp_MD RRA_lKneeParentUp_MD ;
		$allProxies = `ls -sl`;
		string $selectedProxy;
		for ($selectedProxy in $allProxies)
		{
			lockNode $selectedProxy;
		}
		
		//CREATE LAYER
		select RRA_MAIN;
		if (!`objExists "ProxiesLayer"`)
		{
			createDisplayLayer -n "ProxiesLayer" -number 1 -nr;
		}
		else
		{
			editDisplayLayerMembers -noRecurse ProxiesLayer RRA_MAIN;
		}
		select -cl;
		
		if ($thumbsOn == 1)
		{
			print ("THIS RIG HAS THUMBS AND " + $fingersNum + " FINGER(S) ON EACH HAND AND " + $toesNum + " TOE(S) ON EACH FOOT" + "\n");
		}
		else
		{
			print ("THIS RIG HAS NO THUMBS AND " + $fingersNum + " FINGER(S) ON EACH HAND AND " + $toesNum + " TOE(S) ON EACH FOOT" + "\n");
		}
		
		if ($currentUnit != "cm")
		{
			changeLinearUnit "centimeter";
		}
			changeLinearUnit $currentUnit;
			//*/
	}
}
	
global proc RRA_LeftToRightProxies()
{
	if (`objExists RRA_MAIN`) 
	{
		string $currentUnit = `currentUnit -query -linear`;
		if ($currentUnit != "cm")
		{
			changeLinearUnit "centimeter";
		}
			
	$lEyeTranslate = `xform -q -t RRA_lEye`;
	$lEyeRotate = `xform -q -ro RRA_lEye`;
	$lEyeScale = `xform -q -r -s RRA_lEye`;
	setAttr ("RRA_rEye.translate", ($lEyeTranslate[0]*-1), $lEyeTranslate[1], $lEyeTranslate[2]);
	setAttr ("RRA_rEye.rotate", $lEyeRotate[0], ($lEyeRotate[1]*-1), ($lEyeRotate[2]*-1));
	setAttr ("RRA_rEye.scale", $lEyeScale[0], $lEyeScale[1], $lEyeScale[2]);
	
	$lClavicleTranslate = `xform -q -t RRA_lClavicle`;
	$lClavicleRotate = `xform -q -ro RRA_lClavicle`;
	$lClavicleScale = `xform -q -r -s RRA_lClavicle`;
	setAttr ("RRA_rClavicle.translate", ($lClavicleTranslate[0]*-1), $lClavicleTranslate[1], $lClavicleTranslate[2]);
	setAttr ("RRA_rClavicle.rotate", $lClavicleRotate[0], ($lClavicleRotate[1]*-1), ($lClavicleRotate[2]*-1));
	setAttr ("RRA_rClavicle.scale", $lClavicleScale[0], $lClavicleScale[1], $lClavicleScale[2]);
	
	$lShoulderTranslate = `xform -q -t RRA_lShoulder`;
	setAttr ("RRA_rShoulder.translate", ($lShoulderTranslate[0]*-1), $lShoulderTranslate[1], $lShoulderTranslate[2]);
	
	$lElbowTranslate = `xform -q -t RRA_lElbow`;
	setAttr ("RRA_rElbow.translate", ($lElbowTranslate[0]*-1), $lElbowTranslate[1], $lElbowTranslate[2]);
	
	
	$lWristTranslate = `xform -q -t RRA_lWrist`;
	$lWristRotate = `xform -q -ro RRA_lWrist`;
	$lWristScale = `xform -q -r -s RRA_lWrist`;
	setAttr ("RRA_rWrist.translate", ($lWristTranslate[0]*-1), $lWristTranslate[1], $lWristTranslate[2]);
	setAttr ("RRA_rWrist.rotate", $lWristRotate[0], ($lWristRotate[1]*-1), ($lWristRotate[2]*-1));
	setAttr ("RRA_rWrist.scale", $lWristScale[0], $lWristScale[1], $lWristScale[2]);
	
	$lPalmTranslate = `xform -q -t RRA_lPalm`;
	//$lPalmRotate = `xform -q -ro RRA_lPalm`;
	//$lPalmScale = `xform -q -r -s RRA_lPalm`;
	setAttr ("RRA_rPalm.translate", ($lPalmTranslate[0]*-1), $lPalmTranslate[1], $lPalmTranslate[2]);
	//setAttr ("RRA_rPalm.rotate", $lPalmRotate[0], ($lPalmRotate[1]*-1), ($lPalmRotate[2]*-1));
	//setAttr ("RRA_rPalm.scale", $lPalmScale[0], $lPalmScale[1], $lPalmScale[2]);
	
	/////////////////////////////FINGERS//////////////////////////////
	if( `objExists RRA_lThumbJ1` )
	{
		$lThumbJ1Translate = `xform -q -t RRA_lThumbJ1`;
		$lThumbJ1Rotate = `xform -q -ro RRA_lThumbJ1`;
		$lThumbJ1Scale = `xform -q -r -s RRA_lThumbJ1`;
		setAttr ("RRA_rThumbJ1.translate", ($lThumbJ1Translate[0]*-1), $lThumbJ1Translate[1], $lThumbJ1Translate[2]);
		setAttr ("RRA_rThumbJ1.rotate", $lThumbJ1Rotate[0], ($lThumbJ1Rotate[1]*-1), ($lThumbJ1Rotate[2]*-1));
		setAttr ("RRA_rThumbJ1.scale", $lThumbJ1Scale[0], $lThumbJ1Scale[1], $lThumbJ1Scale[2]);
		
		$lThumbJ2Translate = `xform -q -t RRA_lThumbJ2`;
		$lThumbJ2Rotate = `xform -q -ro RRA_lThumbJ2`;
		$lThumbJ2Scale = `xform -q -r -s RRA_lThumbJ2`;
		setAttr ("RRA_rThumbJ2.translate", ($lThumbJ2Translate[0]*-1), $lThumbJ2Translate[1], $lThumbJ2Translate[2]);
		setAttr ("RRA_rThumbJ2.rotate", $lThumbJ2Rotate[0], ($lThumbJ2Rotate[1]*-1), ($lThumbJ2Rotate[2]*-1));
		setAttr ("RRA_rThumbJ2.scale", $lThumbJ2Scale[0], $lThumbJ2Scale[1], $lThumbJ2Scale[2]);
		
		$lThumbJ3Translate = `xform -q -t RRA_lThumbJ3`;
		$lThumbJ3Rotate = `xform -q -ro RRA_lThumbJ3`;
		$lThumbJ3Scale = `xform -q -r -s RRA_lThumbJ3`;
		setAttr ("RRA_rThumbJ3.translate", ($lThumbJ3Translate[0]*-1), $lThumbJ3Translate[1], $lThumbJ3Translate[2]);
		setAttr ("RRA_rThumbJ3.rotate", $lThumbJ3Rotate[0], ($lThumbJ3Rotate[1]*-1), ($lThumbJ3Rotate[2]*-1));
		setAttr ("RRA_rThumbJ3.scale", $lThumbJ3Scale[0], $lThumbJ3Scale[1], $lThumbJ3Scale[2]);
		
		$lThumbJTipTranslate = `xform -q -t RRA_lThumbJTip`;
		$lThumbJTipRotate = `xform -q -ro RRA_lThumbJTip`;
		$lThumbJTipScale = `xform -q -r -s RRA_lThumbJTip`;
		setAttr ("RRA_rThumbJTip.translate", ($lThumbJTipTranslate[0]*-1), $lThumbJTipTranslate[1], $lThumbJTipTranslate[2]);
		setAttr ("RRA_rThumbJTip.rotate", $lThumbJTipRotate[0], ($lThumbJTipRotate[1]*-1), ($lThumbJTipRotate[2]*-1));
		setAttr ("RRA_rThumbJTip.scale", $lThumbJTipScale[0], $lThumbJTipScale[1], $lThumbJTipScale[2]);
	}
	
	$i = 1;
	while ($i < 11)
	{
		$i2 = 1;
		while ($i2 < 5)
		{
			if (`objExists ("RRA_lFinger" + $i + "J1")`)
			{
				string $is = $i2;
				if ($i2 == 4)
				{
					$is = "Tip";
				}
				$lFingerTranslate = `xform -q -t ("RRA_lFinger" + $i + "J" + $is)`;
				$lFingerRotate = `xform -q -ro ("RRA_lFinger" + $i + "J" + $is)`;
				$lFingerScale = `xform -q -r -s ("RRA_lFinger" + $i + "J" + $is)`;
				setAttr (("RRA_rFinger" + $i + "J" + $is + ".translate"), ($lFingerTranslate[0]*-1), $lFingerTranslate[1], $lFingerTranslate[2]);
				setAttr (("RRA_rFinger" + $i + "J" + $is + ".rotate"), $lFingerRotate[0], ($lFingerRotate[1]*-1), ($lFingerRotate[2]*-1));
				setAttr (("RRA_rFinger" + $i + "J" + $is + ".scale"),  $lFingerScale[0],   $lFingerScale[1], $lFingerScale[2]);
			}
			$i2++;
		}
		$i++;
	}
	////////////////////////////TOES///////////////////////////
	if( `objExists RRA_lToe01J1` )
	{
		$lToe01J1Translate = `xform -q -t RRA_lToe01J1`;
		$lToe01J1Rotate = `xform -q -ro RRA_lToe01J1`;
		$lToe01J1Scale = `xform -q -r -s RRA_lToe01J1`;
		setAttr ("RRA_rToe01J1.translate", ($lToe01J1Translate[0]*-1), $lToe01J1Translate[1], $lToe01J1Translate[2]);
		setAttr ("RRA_rToe01J1.rotate", $lToe01J1Rotate[0], ($lToe01J1Rotate[1]*-1), ($lToe01J1Rotate[2]*-1));
		setAttr ("RRA_rToe01J1.scale", $lToe01J1Scale[0], $lToe01J1Scale[1], $lToe01J1Scale[2]);
		
		$lToe01J2Translate = `xform -q -t RRA_lToe01J2`;
		$lToe01J2Rotate = `xform -q -ro RRA_lToe01J2`;
		$lToe01J2Scale = `xform -q -r -s RRA_lToe01J2`;
		setAttr ("RRA_rToe01J2.translate", ($lToe01J2Translate[0]*-1), $lToe01J2Translate[1], $lToe01J2Translate[2]);
		setAttr ("RRA_rToe01J2.rotate", $lToe01J2Rotate[0], ($lToe01J2Rotate[1]*-1), ($lToe01J2Rotate[2]*-1));
		setAttr ("RRA_rToe01J2.scale", $lToe01J2Scale[0], $lToe01J2Scale[1], $lToe01J2Scale[2]);
		
		$lToe01JTipTranslate = `xform -q -t RRA_lToe01JTip`;
		$lToe01JTipRotate = `xform -q -ro RRA_lToe01JTip`;
		$lToe01JTipScale = `xform -q -r -s RRA_lToe01JTip`;
		setAttr ("RRA_rToe01JTip.translate", ($lToe01JTipTranslate[0]*-1), $lToe01JTipTranslate[1], $lToe01JTipTranslate[2]);
		setAttr ("RRA_rToe01JTip.rotate", $lToe01JTipRotate[0], ($lToe01JTipRotate[1]*-1), ($lToe01JTipRotate[2]*-1));
		setAttr ("RRA_rToe01JTip.scale", $lToe01JTipScale[0], $lToe01JTipScale[1], $lToe01JTipScale[2]);
	}
	
	$i = 2;
	while ($i < 11)
	{
		string $is = ("0" + $i);
		if ($i >9)
		{
			$is = $i;
		}
		$i2 = 1;
		while ($i2 < 5)
		{
			if (`objExists ("RRA_lToe" + $is + "J1")`)
			{
				string $is2 = $i2;
				if ($i2 == 4)
				{
					$is2 = "Tip";
				}
				$lToeTranslate = `xform -q -t ("RRA_lToe" + $is + "J" + $is2)`;
				$lToeRotate = `xform -q -ro ("RRA_lToe" + $is + "J" + $is2)`;
				$lToeScale = `xform -q -r -s ("RRA_lToe" + $is + "J" + $is2)`;
				setAttr (("RRA_rToe" + $is + "J" + $is2 + ".translate"), ($lToeTranslate[0]*-1), $lToeTranslate[1], $lToeTranslate[2]);
				setAttr (("RRA_rToe" + $is + "J" + $is2 + ".rotate"), $lToeRotate[0], ($lToeRotate[1]*-1), ($lToeRotate[2]*-1));
				setAttr (("RRA_rToe" + $is + "J" + $is2 + ".scale"),  $lToeScale[0],   $lToeScale[1], $lToeScale[2]);
			}
			$i2++;
		}
		$i++;
	}

	if (!`objExists RRA_lToe01J1`)
	{
		$lToeTranslate = `xform -q -t RRA_lToe`;
		$lToeRotate = `xform -q -ro RRA_lToe`;
		$lToeScale = `xform -q -r -s RRA_lToe`;
		setAttr RRA_rToe.tx ($lToeTranslate[0]*-1);
		setAttr RRA_rToe.tz $lToeTranslate[2];
		setAttr RRA_rToe.ry ($lToeRotate[1]*-1);
		setAttr ("RRA_rToe.scale", $lToeScale[0], $lToeScale[1], $lToeScale[2]);
	}
	
	$lHipTranslate = `xform -q -t RRA_lHip`;
	$lHipRotate = `xform -q -ro RRA_lHip`;
	$lHipScale = `xform -q -r -s RRA_lHip`;
	setAttr  ("RRA_rHip.translate", ($lHipTranslate[0]*-1), $lHipTranslate[1], $lHipTranslate[2]);
	
	$lKneeTranslate = `xform -q -t RRA_lKnee`;
	$lKneeRotate = `xform -q -ro RRA_lKnee`;
	$lKneeScale = `xform -q -r -s RRA_lKnee`;
	setAttr ("RRA_rKnee.translate", ($lKneeTranslate[0]*-1), $lKneeTranslate[1], $lKneeTranslate[2]);
	
	
	$lAnkleTranslate = `xform -q -t RRA_lAnkle`;
	$lAnkleRotate = `xform -q -ro RRA_lAnkle`;
	$lAnkleScale = `xform -q -r -s RRA_lAnkle`;
	setAttr ("RRA_rAnkle.translate", ($lAnkleTranslate[0]*-1), $lAnkleTranslate[1], $lAnkleTranslate[2]);
	setAttr RRA_rAnkle.ry ($lAnkleRotate[1]*-1);
	setAttr ("RRA_rAnkle.scale", $lAnkleScale[0], $lAnkleScale[1], $lAnkleScale[2]);
	
	$lBallTranslate = `xform -q -t RRA_lBall`;
	$lBallRotate = `xform -q -ro RRA_lBall`;
	$lBallScale = `xform -q -r -s RRA_lBall`;
	setAttr ("RRA_rBall.translate", ($lBallTranslate[0]*-1), $lBallTranslate[1], $lBallTranslate[2]);
	setAttr RRA_rBall.ry ($lBallRotate[1]*-1);
	setAttr ("RRA_rBall.scale", $lBallScale[0], $lBallScale[1], $lBallScale[2]);

	//LOCATORS
	$lFootOutTilt = `xform -q -t RRA_lFootOutTilt`;                                                        
	setAttr  RRA_rFootOutTilt.tx ($lFootOutTilt[0]*-1);
	
	$lFootInTilt = `xform -q -t RRA_lFootInTilt`;
	setAttr  RRA_rFootInTilt.tx ($lFootInTilt[0]*-1);
	
	$lFootHeelPivot = `xform -q -t RRA_lFootHeelPivot`;
	setAttr  RRA_rFootHeelPivot.tz $lFootHeelPivot[2];
	
	changeLinearUnit $currentUnit;
	
	print "SUCCESS! MIRRORED CHARACTER'S LEFT SIDE TO RIGHT SIDE.\n";
	}
	else
	{
		error "NO PROXY RIG TO MIRROR!\n";
	}
}
	
global proc RRA_RightToLeftProxies()
{
	if (`objExists  RRA_MAIN`) 
		{
	string $currentUnit = `currentUnit -query -linear`;
	if ($currentUnit != "cm")
	{
		changeLinearUnit "centimeter";
	}
	
	$rEyeTranslate = `xform -q -t RRA_rEye`;
	$rEyeRotate = `xform -q -ro RRA_rEye`;
	$rEyeScale = `xform -q -r -s RRA_rEye`;
	setAttr ("RRA_lEye.translate", ($rEyeTranslate[0]*-1), $rEyeTranslate[1], $rEyeTranslate[2]);
	setAttr ("RRA_lEye.rotate", $rEyeRotate[0], ($rEyeRotate[1]*-1), ($rEyeRotate[2]*-1));
	setAttr ("RRA_lEye.scale", $rEyeScale[0], $rEyeScale[1], $rEyeScale[2]);
	
	$rClavicleTranslate = `xform -q -t RRA_rClavicle`;
	$rClavicleRotate = `xform -q -ro RRA_rClavicle`;
	$rClavicleScale = `xform -q -r -s RRA_rClavicle`;
	setAttr ("RRA_lClavicle.translate", ($rClavicleTranslate[0]*-1), $rClavicleTranslate[1], $rClavicleTranslate[2]);
	setAttr ("RRA_lClavicle.rotate", $rClavicleRotate[0], ($rClavicleRotate[1]*-1), ($rClavicleRotate[2]*-1));
	setAttr ("RRA_lClavicle.scale", $rClavicleScale[0], $rClavicleScale[1], $rClavicleScale[2]);
	
	$rShoulderTranslate = `xform -q -t RRA_rShoulder`;
	setAttr ("RRA_lShoulder.translate", ($rShoulderTranslate[0]*-1), $rShoulderTranslate[1], $rShoulderTranslate[2]);
	
	$rElbowTranslate = `xform -q -t RRA_rElbow`;
	setAttr ("RRA_lElbow.translate", ($rElbowTranslate[0]*-1), $rElbowTranslate[1], $rElbowTranslate[2]);
	
	
	$rWristTranslate = `xform -q -t RRA_rWrist`;
	$rWristRotate = `xform -q -ro RRA_rWrist`;
	$rWristScale = `xform -q -r -s RRA_rWrist`;
	setAttr ("RRA_lWrist.translate", ($rWristTranslate[0]*-1), $rWristTranslate[1], $rWristTranslate[2]);
	setAttr ("RRA_lWrist.rotate", $rWristRotate[0], ($rWristRotate[1]*-1), ($rWristRotate[2]*-1));
	setAttr ("RRA_lWrist.scale", $rWristScale[0], $rWristScale[1], $rWristScale[2]);
	
	$rPalmTranslate = `xform -q -t RRA_rPalm`;
	//$rPalmRotate = `xform -q -ro RRA_rPalm`;
	//$rPalmScale = `xform -q -r -s RRA_rPalm`;
	setAttr ("RRA_lPalm.translate", ($rPalmTranslate[0]*-1), $rPalmTranslate[1], $rPalmTranslate[2]);
	//setAttr ("RRA_lPalm.rotate", $rPalmRotate[0], ($rPalmRotate[1]*-1), ($rPalmRotate[2]*-1));
	//setAttr ("RRA_lPalm.scale", $rPalmScale[0], $rPalmScale[1], $rPalmScale[2]);
	
	
	/////////////////////////////FINGERS//////////////////////////////
	if( `objExists RRA_rThumbJ1` )
	{
		$rThumbJ1Translate = `xform -q -t RRA_rThumbJ1`;
		$rThumbJ1Rotate = `xform -q -ro RRA_rThumbJ1`;
		$rThumbJ1Scale = `xform -q -r -s RRA_rThumbJ1`;
		setAttr ("RRA_lThumbJ1.translate", ($rThumbJ1Translate[0]*-1), $rThumbJ1Translate[1], $rThumbJ1Translate[2]);
		setAttr ("RRA_lThumbJ1.rotate", $rThumbJ1Rotate[0], ($rThumbJ1Rotate[1]*-1), ($rThumbJ1Rotate[2]*-1));
		setAttr ("RRA_lThumbJ1.scale", $rThumbJ1Scale[0], $rThumbJ1Scale[1], $rThumbJ1Scale[2]);
		
		$rThumbJ2Translate = `xform -q -t RRA_rThumbJ2`;
		$rThumbJ2Rotate = `xform -q -ro RRA_rThumbJ2`;
		$rThumbJ2Scale = `xform -q -r -s RRA_rThumbJ2`;
		setAttr ("RRA_lThumbJ2.translate", ($rThumbJ2Translate[0]*-1), $rThumbJ2Translate[1], $rThumbJ2Translate[2]);
		setAttr ("RRA_lThumbJ2.rotate", $rThumbJ2Rotate[0], ($rThumbJ2Rotate[1]*-1), ($rThumbJ2Rotate[2]*-1));
		setAttr ("RRA_lThumbJ2.scale", $rThumbJ2Scale[0], $rThumbJ2Scale[1], $rThumbJ2Scale[2]);
		
		$rThumbJ3Translate = `xform -q -t RRA_rThumbJ3`;
		$rThumbJ3Rotate = `xform -q -ro RRA_rThumbJ3`;
		$rThumbJ3Scale = `xform -q -r -s RRA_rThumbJ3`;
		setAttr ("RRA_lThumbJ3.translate", ($rThumbJ3Translate[0]*-1), $rThumbJ3Translate[1], $rThumbJ3Translate[2]);
		setAttr ("RRA_lThumbJ3.rotate", $rThumbJ3Rotate[0], ($rThumbJ3Rotate[1]*-1), ($rThumbJ3Rotate[2]*-1));
		setAttr ("RRA_lThumbJ3.scale", $rThumbJ3Scale[0], $rThumbJ3Scale[1], $rThumbJ3Scale[2]);
		
		$rThumbJTipTranslate = `xform -q -t RRA_rThumbJTip`;
		$rThumbJTipRotate = `xform -q -ro RRA_rThumbJTip`;
		$rThumbJTipScale = `xform -q -r -s RRA_rThumbJTip`;
		setAttr ("RRA_lThumbJTip.translate", ($rThumbJTipTranslate[0]*-1), $rThumbJTipTranslate[1], $rThumbJTipTranslate[2]);
		setAttr ("RRA_lThumbJTip.rotate", $rThumbJTipRotate[0], ($rThumbJTipRotate[1]*-1), ($rThumbJTipRotate[2]*-1));
		setAttr ("RRA_lThumbJTip.scale", $rThumbJTipScale[0], $rThumbJTipScale[1], $rThumbJTipScale[2]);
	}
	
	$i = 1;
	while ($i < 11)
	{
		$i2 = 1;
		while ($i2 < 5)
		{
			if (`objExists ("RRA_lFinger" + $i + "J1")`)
			{
				string $is = $i2;
				if ($i2 == 4)
				{
					$is = "Tip";
				}
				$rFingerTranslate = `xform -q -t ("RRA_rFinger" + $i + "J" + $is)`;
				$rFingerRotate = `xform -q -ro ("RRA_rFinger" + $i + "J" + $is)`;
				$rFingerScale = `xform -q -r -s ("RRA_rFinger" + $i + "J" + $is)`;
				setAttr (("RRA_lFinger" + $i + "J" + $is + ".translate"), ($rFingerTranslate[0]*-1), $rFingerTranslate[1], $rFingerTranslate[2]);
				setAttr (("RRA_lFinger" + $i + "J" + $is + ".rotate"), $rFingerRotate[0], ($rFingerRotate[1]*-1), ($rFingerRotate[2]*-1));
				setAttr (("RRA_lFinger" + $i + "J" + $is + ".scale"),  $rFingerScale[0],   $rFingerScale[1], $rFingerScale[2]);
			}
			$i2++;
		}
		$i++;
	}

	////////////////////////////TOES///////////////////////////
	if( `objExists RRA_rToe01J1` )
	{
		$rToe01J1Translate = `xform -q -t RRA_rToe01J1`;
		$rToe01J1Rotate = `xform -q -ro RRA_rToe01J1`;
		$rToe01J1Scale = `xform -q -r -s RRA_rToe01J1`;
		setAttr ("RRA_lToe01J1.translate", ($rToe01J1Translate[0]*-1), $rToe01J1Translate[1], $rToe01J1Translate[2]);
		setAttr ("RRA_lToe01J1.rotate", $rToe01J1Rotate[0], ($rToe01J1Rotate[1]*-1), ($rToe01J1Rotate[2]*-1));
		setAttr ("RRA_lToe01J1.scale", $rToe01J1Scale[0], $rToe01J1Scale[1], $rToe01J1Scale[2]);
		
		$rToe01J2Translate = `xform -q -t RRA_rToe01J2`;
		$rToe01J2Rotate = `xform -q -ro RRA_rToe01J2`;
		$rToe01J2Scale = `xform -q -r -s RRA_rToe01J2`;
		setAttr ("RRA_lToe01J2.translate", ($rToe01J2Translate[0]*-1), $rToe01J2Translate[1], $rToe01J2Translate[2]);
		setAttr ("RRA_lToe01J2.rotate", $rToe01J2Rotate[0], ($rToe01J2Rotate[1]*-1), ($rToe01J2Rotate[2]*-1));
		setAttr ("RRA_lToe01J2.scale", $rToe01J2Scale[0], $rToe01J2Scale[1], $rToe01J2Scale[2]);
		
		$rToe01JTipTranslate = `xform -q -t RRA_rToe01JTip`;
		$rToe01JTipRotate = `xform -q -ro RRA_rToe01JTip`;
		$rToe01JTipScale = `xform -q -r -s RRA_rToe01JTip`;
		setAttr ("RRA_lToe01JTip.translate", ($rToe01JTipTranslate[0]*-1), $rToe01JTipTranslate[1], $rToe01JTipTranslate[2]);
		setAttr ("RRA_lToe01JTip.rotate", $rToe01JTipRotate[0], ($rToe01JTipRotate[1]*-1), ($rToe01JTipRotate[2]*-1));
		setAttr ("RRA_lToe01JTip.scale", $rToe01JTipScale[0], $rToe01JTipScale[1], $rToe01JTipScale[2]);
	}
	
	$i = 2;
	while ($i < 11)
	{
		string $is = ("0" + $i);
		if ($i >9)
		{
			$is = $i;
		}
		$i2 = 1;
		while ($i2 < 5)
		{
			if (`objExists ("RRA_lToe" + $is + "J1")`)
			{
				string $is2 = $i2;
				if ($i2 == 4)
				{
					$is2 = "Tip";
				}
				$rToeTranslate = `xform -q -t ("RRA_rToe" + $is + "J" + $is2)`;
				$rToeRotate = `xform -q -ro ("RRA_rToe" + $is + "J" + $is2)`;
				$rToeScale = `xform -q -r -s ("RRA_rToe" + $is + "J" + $is2)`;
				setAttr (("RRA_lToe" + $is + "J" + $is2 + ".translate"), ($rToeTranslate[0]*-1), $rToeTranslate[1], $rToeTranslate[2]);
				setAttr (("RRA_lToe" + $is + "J" + $is2 + ".rotate"), $rToeRotate[0], ($rToeRotate[1]*-1), ($rToeRotate[2]*-1));
				setAttr (("RRA_lToe" + $is + "J" + $is2 + ".scale"),  $rToeScale[0],   $rToeScale[1], $rToeScale[2]);
			}
			$i2++;
		}
		$i++;
	}
	
	
	if (!`objExists RRA_lToe01J1`)
	{
		$rToeTranslate = `xform -q -t RRA_rToe`;
		$rToeRotate = `xform -q -ro RRA_rToe`;
		$rToeScale = `xform -q -r -s RRA_rToe`;
		setAttr RRA_lToe.tx ($rToeTranslate[0]*-1);
		setAttr RRA_lToe.tz $rToeTranslate[2];
		setAttr RRA_lToe.ry ($rToeRotate[1]*-1);
		setAttr ("RRA_lToe.scale", $rToeScale[0], $rToeScale[1], $rToeScale[2]);
	}

	$rHipTranslate = `xform -q -t RRA_rHip`;
	$rHipRotate = `xform -q -ro RRA_rHip`;
	$rHipScale = `xform -q -r -s RRA_rHip`;
	setAttr  ("RRA_lHip.translate", ($rHipTranslate[0]*-1), $rHipTranslate[1], $rHipTranslate[2]);
	
	$rKneeTranslate = `xform -q -t RRA_rKnee`;
	$rKneeRotate = `xform -q -ro RRA_rKnee`;
	$rKneeScale = `xform -q -r -s RRA_rKnee`;
	setAttr ("RRA_lKnee.translate", ($rKneeTranslate[0]*-1), $rKneeTranslate[1], $rKneeTranslate[2]);
	
	
	$rAnkleTranslate = `xform -q -t RRA_rAnkle`;
	$rAnkleRotate = `xform -q -ro RRA_rAnkle`;
	$rAnkleScale = `xform -q -r -s RRA_rAnkle`;
	setAttr ("RRA_lAnkle.translate", ($rAnkleTranslate[0]*-1), $rAnkleTranslate[1], $rAnkleTranslate[2]);
	setAttr RRA_lAnkle.ry ($rAnkleRotate[1]*-1);
	setAttr ("RRA_lAnkle.scale", $rAnkleScale[0], $rAnkleScale[1], $rAnkleScale[2]);
	
	$rBallTranslate = `xform -q -t RRA_rBall`;
	$rBallRotate = `xform -q -ro RRA_rBall`;
	$rBallScale = `xform -q -r -s RRA_rBall`;
	setAttr ("RRA_lBall.translate", ($rBallTranslate[0]*-1), $rBallTranslate[1], $rBallTranslate[2]);
	setAttr RRA_lBall.ry ($rBallRotate[1]*-1);
	setAttr ("RRA_lBall.scale", $rBallScale[0], $rBallScale[1], $rBallScale[2]);

	
	//LOCATORS
	$rFootOutTilt = `xform -q -t RRA_rFootOutTilt`;
	setAttr  RRA_lFootOutTilt.tx ($rFootOutTilt[0]*-1);
	
	$rFootInTilt = `xform -q -t RRA_rFootInTilt`;
	setAttr  RRA_lFootInTilt.tx ($rFootInTilt[0]*-1);
	
	$rFootHeelPivot = `xform -q -t RRA_rFootHeelPivot`;
	setAttr  RRA_lFootHeelPivot.tz $rFootHeelPivot[2];
	
	changeLinearUnit $currentUnit;
	
	print "SUCCESS! MIRRORED CHARACTER'S RIGHT SIDE TO LEFT SIDE\n";
	}
	else
	{
		error "NO PROXY RIG TO MIRROR!\n";
	}
}
	
global proc RRA_ResetProxies()
{
	if (`objExists  RRA_MAIN`) 
	{
		string $currentUnit = `currentUnit -query -linear`;
		if ($currentUnit != "cm")
		{
			changeLinearUnit "centimeter";
		}

		select -hi RRA_MAIN;
		$proxyShapes = `ls -sl -type "nurbsCurve"`;
		select $proxyShapes;
		pickWalk -d up;
		$proxies = `ls -sl`;
		string $each;
		for ($each in $proxies)
		{
			$Lock[0] = `getAttr -lock ($each + ".tx")`;
			$Lock[1] = `getAttr -lock ($each + ".ty")`;
			$Lock[2] = `getAttr -lock ($each + ".tz")`;
			$Lock[3] = `getAttr -lock ($each + ".rx")`;
			$Lock[4] = `getAttr -lock ($each + ".ry")`;
			$Lock[5] = `getAttr -lock ($each + ".rz")`;
			$Lock[6] = `getAttr -lock ($each + ".sx")`;
			$Lock[7] = `getAttr -lock ($each + ".sy")`;
			$Lock[8] = `getAttr -lock ($each + ".sz")`;
			
			$Chan[0] = ".tx";
			$Chan[1] = ".ty";
			$Chan[2] = ".tz";
			$Chan[3] = ".rx";
			$Chan[4] = ".ry";
			$Chan[5] = ".rz";
			$Chan[6] = ".sx";
			$Chan[7] = ".sy";
			$Chan[8] = ".sz";
			
			$i = 0;
			while ($i <=8)
			{
				//CREATE VALUE FOR SCALE VS T/R
				$val = 0;
				if ($i > 5)
				{
					$val = 1;
				}
				if ($Lock[$i] == 0)
				{
					setAttr ($each + $Chan[$i]) $val;
				}
			$i++;
			}
		}
		select -cl;
		
		changeLinearUnit $currentUnit;
		
		print "SUCCESS! CHARACTER RESET TO DEFAULT PROPORTIONS\n";
	}
	else
	{
		error "NO PROXY RIG TO RESET!\n";
	}
}

//SAVE/LOAD PROXIES///////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

global proc RRA_WritePathProx()
{
	string $mayaFolder;

	fileBrowserDialog -mode 1
    -fileCommand ( "RRA_SaveProx \"" + $mayaFolder + "\"" )
    -actionName "Save";
}


global proc RRA_SaveProx(string $mayaFolder, string $result, string $type)
{

		print ("\nSAVING TO: "+ $result + "\n");
		$fileID = `fopen $result "w"`;
    	
//		fprint $fileID ("//This proxy file is called " + $file + "\n");
		
		//CENTER PROXIES
		$Main_S = `getAttr RRA_MAIN.scale`;
		fprint $fileID ("scale -a "+$Main_S[0]+" "+$Main_S[1]+" "+$Main_S[2]+" RRA_MAIN;"+"\n");

		$ROOT_T = `getAttr RRA_ROOT.translate`;
		$ROOT_R = `getAttr RRA_ROOT.rotate`;
		$ROOT_S = `getAttr RRA_ROOT.scale`;
		fprint $fileID ("setAttr RRA_ROOT.ty "+ $ROOT_T[1]+";\n");
		fprint $fileID ("setAttr RRA_ROOT.tz "+ $ROOT_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_ROOT.rx "+ $ROOT_R[0]+";\n");

		fprint $fileID ("setAttr RRA_ROOT.sx "+ $ROOT_S[0]+";\n");
		fprint $fileID ("setAttr RRA_ROOT.sy "+ $ROOT_S[1]+";\n");
		fprint $fileID ("setAttr RRA_ROOT.sz "+ $ROOT_S[2]+";\n");
		
		int $i = 1;
		while ($i < 10)
		{
			if (`objExists ("RRA_Spine0" + $i)`)
			{
				$Spine_T = `getAttr ("RRA_Spine0" + $i + ".translate")`;
				fprint $fileID ("if (`objExists " + ("RRA_Spine0" + $i)+ "`) {setAttr RRA_Spine0" + $i+ ".tz "+ $Spine_T[2]+";}\n");
			}
			$i++;
		}

		$SpineTop_T = `getAttr RRA_SpineTop.translate`;
		$SpineTop_R = `getAttr RRA_SpineTop.rotate`;
		$SpineTop_S = `getAttr RRA_SpineTop.scale`;
		fprint $fileID ("setAttr RRA_SpineTop.ty "+ $SpineTop_T[1]+";\n");
		fprint $fileID ("setAttr RRA_SpineTop.tz "+ $SpineTop_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_SpineTop.rx "+ $SpineTop_R[0]+";\n");

		fprint $fileID ("setAttr RRA_SpineTop.sx "+ $SpineTop_S[0]+";\n");
		fprint $fileID ("setAttr RRA_SpineTop.sy "+ $SpineTop_S[1]+";\n");
		fprint $fileID ("setAttr RRA_SpineTop.sz "+ $SpineTop_S[2]+";\n");

		$i = 1;
		while ($i < 10)
		{
			if (`objExists ("RRA_Neck0" + $i)`)
			{
				$Neck_T = `getAttr ("RRA_Neck0" + $i + ".translate")`;
				fprint $fileID ("if (`objExists " + ("RRA_Neck0" + $i)+ "`) {setAttr RRA_Neck0" + $i+ ".tz "+ $Neck_T[2]+";}\n");
			}
			$i++;
		}
		
		$Head_T = `getAttr RRA_Head.translate`;
		$Head_R = `getAttr RRA_Head.rotate`;
		$Head_S = `getAttr RRA_Head.scale`;
		fprint $fileID ("setAttr RRA_Head.ty "+ $Head_T[1]+";\n");
		fprint $fileID ("setAttr RRA_Head.tz "+ $Head_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_Head.rx "+ $Head_R[0]+";\n");

		fprint $fileID ("setAttr RRA_Head.sx "+ $Head_S[0]+";\n");
		fprint $fileID ("setAttr RRA_Head.sy "+ $Head_S[1]+";\n");
		fprint $fileID ("setAttr RRA_Head.sz "+ $Head_S[2]+";\n");
		
		$HeadTip_T = `getAttr RRA_HeadTip.translate`;
		$HeadTip_R = `getAttr RRA_HeadTip.rotate`;
		$HeadTip_S = `getAttr RRA_HeadTip.scale`;
		fprint $fileID ("setAttr RRA_HeadTip.ty "+ $HeadTip_T[1]+";\n");
		fprint $fileID ("setAttr RRA_HeadTip.tz "+ $HeadTip_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_HeadTip.rx "+ $HeadTip_R[0]+";\n");

		fprint $fileID ("setAttr RRA_HeadTip.sx "+ $HeadTip_S[0]+";\n");
		fprint $fileID ("setAttr RRA_HeadTip.sy "+ $HeadTip_S[1]+";\n");
		fprint $fileID ("setAttr RRA_HeadTip.sz "+ $HeadTip_S[2]+";\n");
		
		$Jaw_T = `getAttr RRA_Jaw.translate`;
		$Jaw_R = `getAttr RRA_Jaw.rotate`;
		$Jaw_S = `getAttr RRA_Jaw.scale`;
		fprint $fileID ("setAttr RRA_Jaw.ty "+ $Jaw_T[1]+";\n");
		fprint $fileID ("setAttr RRA_Jaw.tz "+ $Jaw_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_Jaw.rx "+ $Jaw_R[0]+";\n");

		fprint $fileID ("setAttr RRA_Jaw.sx "+ $Jaw_S[1]+";\n");
		fprint $fileID ("setAttr RRA_Jaw.sy "+ $Jaw_S[2]+";\n");
		fprint $fileID ("setAttr RRA_Jaw.sz "+ $Jaw_S[2]+";\n");
		
		$JawTip_T = `getAttr RRA_JawTip.translate`;
		$JawTip_R = `getAttr RRA_JawTip.rotate`;
		$JawTip_S = `getAttr RRA_JawTip.scale`;
		fprint $fileID ("setAttr RRA_JawTip.ty "+ $JawTip_T[1]+";\n");
		fprint $fileID ("setAttr RRA_JawTip.tz "+ $JawTip_T[2]+";\n");
		
		fprint $fileID ("setAttr RRA_JawTip.rx "+ $JawTip_R[0]+";\n");

		fprint $fileID ("setAttr RRA_JawTip.sx "+ $JawTip_S[0]+";\n");
		fprint $fileID ("setAttr RRA_JawTip.sy "+ $JawTip_S[1]+";\n");
		fprint $fileID ("setAttr RRA_JawTip.sz "+ $JawTip_S[2]+";\n");

		
		//EYES
		$lEye_T = `getAttr RRA_lEye.translate`;
		$lEye_R = `getAttr RRA_lEye.rotate`;
		$lEye_S = `getAttr RRA_lEye.scale`;		

		fprint $fileID ("setAttr RRA_lEye.tx "+ $lEye_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lEye.ty "+ $lEye_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lEye.tz "+ $lEye_T[2]+";\n");

		fprint $fileID ("setAttr RRA_lEye.rx "+ $lEye_R[0]+";\n");
		fprint $fileID ("setAttr RRA_lEye.ry "+ $lEye_R[1]+";\n");
		fprint $fileID ("setAttr RRA_lEye.rz "+ $lEye_R[2]+";\n");

		fprint $fileID ("setAttr RRA_lEye.sx "+ $lEye_S[0]+";\n");
		fprint $fileID ("setAttr RRA_lEye.sy "+ $lEye_S[1]+";\n");
		fprint $fileID ("setAttr RRA_lEye.sz "+ $lEye_S[2]+";\n");
		
		$rEye_T = `getAttr RRA_rEye.translate`;
		$rEye_R = `getAttr RRA_rEye.rotate`;
		$rEye_S = `getAttr RRA_rEye.scale`;		

		fprint $fileID ("setAttr RRA_rEye.tx "+ $rEye_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rEye.ty "+ $rEye_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rEye.tz "+ $rEye_T[2]+";\n");

		fprint $fileID ("setAttr RRA_rEye.rx "+ $rEye_R[0]+";\n");
		fprint $fileID ("setAttr RRA_rEye.ry "+ $rEye_R[1]+";\n");
		fprint $fileID ("setAttr RRA_rEye.rz "+ $rEye_R[2]+";\n");

		fprint $fileID ("setAttr RRA_rEye.sx "+ $rEye_S[0]+";\n");
		fprint $fileID ("setAttr RRA_rEye.sy "+ $rEye_S[1]+";\n");
		fprint $fileID ("setAttr RRA_rEye.sz "+ $rEye_S[2]+";\n");
		
		////////////////////////////////////////////////////////////////////////////////////////
		//LEFT SIDE//////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////
		//LEFT ARM		
		$lClavicle_T = `getAttr RRA_lClavicle.translate`;
		$lClavicle_R = `getAttr RRA_lClavicle.rotate`;
		$lClavicle_S = `getAttr RRA_lClavicle.scale`;		

		fprint $fileID ("setAttr RRA_lClavicle.tx "+ $lClavicle_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.ty "+ $lClavicle_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.tz "+ $lClavicle_T[2]+";\n");

		fprint $fileID ("setAttr RRA_lClavicle.rx "+ $lClavicle_R[0]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.ry "+ $lClavicle_R[1]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.rz "+ $lClavicle_R[2]+";\n");

		fprint $fileID ("setAttr RRA_lClavicle.sx "+ $lClavicle_S[0]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.sy "+ $lClavicle_S[1]+";\n");
		fprint $fileID ("setAttr RRA_lClavicle.sz "+ $lClavicle_S[2]+";\n");
		

		$lShoulder_T = `getAttr RRA_lShoulder.translate`;		

		fprint $fileID ("setAttr RRA_lShoulder.tx "+ $lShoulder_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lShoulder.ty "+ $lShoulder_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lShoulder.tz "+ $lShoulder_T[2]+";\n");
	
		$lElbow_T = `getAttr RRA_lElbow.translate`;		

		fprint $fileID ("setAttr RRA_lElbow.tx "+ $lElbow_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lElbow.ty "+ $lElbow_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lElbow.tz "+ $lElbow_T[2]+";\n");
		
		$lWrist_T = `getAttr RRA_lWrist.translate`;
		$lWrist_R = `getAttr RRA_lWrist.rotate`;
		$lWrist_S = `getAttr RRA_lWrist.scale`;		

		fprint $fileID ("setAttr RRA_lWrist.tx "+ $lWrist_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.ty "+ $lWrist_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.tz "+ $lWrist_T[2]+";\n");

		fprint $fileID ("setAttr RRA_lWrist.rx "+ $lWrist_R[0]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.ry "+ $lWrist_R[1]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.rz "+ $lWrist_R[2]+";\n");

		fprint $fileID ("setAttr RRA_lWrist.sx "+ $lWrist_S[0]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.sy "+ $lWrist_S[1]+";\n");
		fprint $fileID ("setAttr RRA_lWrist.sz "+ $lWrist_S[2]+";\n");

		if (`objExists "RRA_lPalm"`)
		{
			$lPalm_T = `getAttr RRA_lPalm.translate`;
			//$lPalm_R = `getAttr RRA_lPalm.rotate`;
			//$lPalm_S = `getAttr RRA_lPalm.scale`;
        	
			fprint $fileID ("setAttr RRA_lPalm.tx "+ $lPalm_T[0]+";\n");
			fprint $fileID ("setAttr RRA_lPalm.ty "+ $lPalm_T[1]+";\n");
			fprint $fileID ("setAttr RRA_lPalm.tz "+ $lPalm_T[2]+";\n");
        	
			//fprint $fileID ("setAttr RRA_lPalm.rx "+ $lPalm_R[0]+";\n");
			//fprint $fileID ("setAttr RRA_lPalm.ry "+ $lPalm_R[1]+";\n");
			//fprint $fileID ("setAttr RRA_lPalm.rz "+ $lPalm_R[2]+";\n");
        	
			//fprint $fileID ("setAttr RRA_lPalm.sx "+ $lPalm_S[0]+";\n");
			//fprint $fileID ("setAttr RRA_lPalm.sy "+ $lPalm_S[1]+";\n");
			//fprint $fileID ("setAttr RRA_lPalm.sz "+ $lPalm_S[2]+";\n");
		}
		
		
		//LEFT LEG//////////////////////////////////////////////////////////////////////
		$lHip_T = `getAttr RRA_lHip.translate`;
		fprint $fileID ("setAttr RRA_lHip.tx "+ $lHip_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lHip.ty "+ $lHip_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lHip.tz "+ $lHip_T[2]+";\n");

		$lKnee_T = `getAttr RRA_lKnee.translate`;
		fprint $fileID ("setAttr RRA_lKnee.tx "+ $lKnee_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lKnee.ty "+ $lKnee_T[1]+";\n");		
		fprint $fileID ("setAttr RRA_lKnee.tz "+ $lKnee_T[2]+";\n");		

		$lAnkle_T = `getAttr RRA_lAnkle.translate`;
		$lAnkle_R = `getAttr RRA_lAnkle.rotate`;
		$lAnkle_S = `getAttr RRA_lAnkle.scale`;		

		fprint $fileID ("setAttr RRA_lAnkle.tx "+ $lAnkle_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lAnkle.ty "+ $lAnkle_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lAnkle.tz "+ $lAnkle_T[2]+";\n");

		fprint $fileID ("setAttr RRA_lAnkle.ry "+ $lAnkle_R[1]+";\n");

		fprint $fileID ("setAttr RRA_lAnkle.sx "+ $lAnkle_S[0]+";\n");
		fprint $fileID ("setAttr RRA_lAnkle.sy "+ $lAnkle_S[1]+";\n");
		fprint $fileID ("setAttr RRA_lAnkle.sz "+ $lAnkle_S[2]+";\n");
		
		$lBall_T = `getAttr RRA_lBall.translate`;
		$lBall_R = `getAttr RRA_lBall.rotate`;
		$lBall_S = `getAttr RRA_lBall.scale`;		

		fprint $fileID ("setAttr RRA_lBall.tx "+ $lBall_T[0]+";\n");
		fprint $fileID ("setAttr RRA_lBall.ty "+ $lBall_T[1]+";\n");
		fprint $fileID ("setAttr RRA_lBall.tz "+ $lBall_T[2]+";\n");

		fprint $fileID ("setAttr RRA_lBall.ry "+ $lBall_R[1]+";\n");

		fprint $fileID ("setAttr RRA_lBall.sx "+ $lBall_S[0]+";\n");
		fprint $fileID ("setAttr RRA_lBall.sy "+ $lBall_S[1]+";\n");
		fprint $fileID ("setAttr RRA_lBall.sz "+ $lBall_S[2]+";\n");
		
		
        if (!`objExists RRA_lToe01J1`)
        {
			$lToe_T = `getAttr RRA_lToe.translate`;
			$lToe_R = `getAttr RRA_lToe.rotate`;
			$lToe_S = `getAttr RRA_lToe.scale`;	

			fprint $fileID ("setAttr RRA_lToe.tx "+ $lToe_T[0]+";\n");
			//fprint $fileID ("setAttr RRA_lToe.ty "+ $lToe_T[1]+";\n");
			fprint $fileID ("setAttr RRA_lToe.tz "+ $lToe_T[2]+";\n");
			
			//fprint $fileID ("setAttr RRA_lToe.ry "+ $lToe_R[1]+";\n");
			
			fprint $fileID ("setAttr RRA_lToe.sx "+ $lToe_S[0]+";\n");
			fprint $fileID ("setAttr RRA_lToe.sy "+ $lToe_S[1]+";\n");
			fprint $fileID ("setAttr RRA_lToe.sz "+ $lToe_S[2]+";\n");
		}

		//LEFT FOOT LOCATORS
		$lFootOutTilt_T = `getAttr RRA_lFootOutTilt.translate`;
		fprint $fileID ("setAttr RRA_lFootOutTilt.tx "+ $lFootOutTilt_T[0]+";\n");		

		$lFootInTilt_T = `getAttr RRA_lFootInTilt.translate`;
		fprint $fileID ("setAttr RRA_lFootInTilt.tx "+ $lFootInTilt_T[0]+";\n");		

		$lFootHeelPivot_T = `getAttr RRA_lFootHeelPivot.translate`;
		fprint $fileID ("setAttr RRA_lFootHeelPivot.tz "+ $lFootHeelPivot_T[2]+";\n");

		////////////////////////////////////////////////////////////////////////////////////////
		//RIGHT SIDE//////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////
		//RIGHT ARM		
		$rClavicle_T = `getAttr RRA_rClavicle.translate`;
		$rClavicle_R = `getAttr RRA_rClavicle.rotate`;
		$rClavicle_S = `getAttr RRA_rClavicle.scale`;		

		fprint $fileID ("setAttr RRA_rClavicle.tx "+ $rClavicle_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.ty "+ $rClavicle_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.tz "+ $rClavicle_T[2]+";\n");

		fprint $fileID ("setAttr RRA_rClavicle.rx "+ $rClavicle_R[0]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.ry "+ $rClavicle_R[1]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.rz "+ $rClavicle_R[2]+";\n");

		fprint $fileID ("setAttr RRA_rClavicle.sx "+ $rClavicle_S[0]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.sy "+ $rClavicle_S[1]+";\n");
		fprint $fileID ("setAttr RRA_rClavicle.sz "+ $rClavicle_S[2]+";\n");
		

		$rShoulder_T = `getAttr RRA_rShoulder.translate`;		

		fprint $fileID ("setAttr RRA_rShoulder.tx "+ $rShoulder_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rShoulder.ty "+ $rShoulder_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rShoulder.tz "+ $rShoulder_T[2]+";\n");
	
		$rElbow_T = `getAttr RRA_rElbow.translate`;		

		fprint $fileID ("setAttr RRA_rElbow.tx "+ $rElbow_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rElbow.ty "+ $rElbow_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rElbow.tz "+ $rElbow_T[2]+";\n");
		
		$rWrist_T = `getAttr RRA_rWrist.translate`;
		$rWrist_R = `getAttr RRA_rWrist.rotate`;
		$rWrist_S = `getAttr RRA_rWrist.scale`;		

		fprint $fileID ("setAttr RRA_rWrist.tx "+ $rWrist_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.ty "+ $rWrist_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.tz "+ $rWrist_T[2]+";\n");

		fprint $fileID ("setAttr RRA_rWrist.rx "+ $rWrist_R[0]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.ry "+ $rWrist_R[1]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.rz "+ $rWrist_R[2]+";\n");

		fprint $fileID ("setAttr RRA_rWrist.sx "+ $rWrist_S[0]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.sy "+ $rWrist_S[1]+";\n");
		fprint $fileID ("setAttr RRA_rWrist.sz "+ $rWrist_S[2]+";\n");
		
		if (`objExists "RRA_lPalm"`)
		{
			$rPalm_T = `getAttr RRA_rPalm.translate`;
			//$rPalm_R = `getAttr RRA_rPalm.rotate`;
			//$rPalm_S = `getAttr RRA_rPalm.scale`;		
        	
			fprint $fileID ("setAttr RRA_rPalm.tx "+ $rPalm_T[0]+";\n");
			fprint $fileID ("setAttr RRA_rPalm.ty "+ $rPalm_T[1]+";\n");
			fprint $fileID ("setAttr RRA_rPalm.tz "+ $rPalm_T[2]+";\n");
        	
			//fprint $fileID ("setAttr RRA_rPalm.rx "+ $rPalm_R[0]+";\n");
			//fprint $fileID ("setAttr RRA_rPalm.ry "+ $rPalm_R[1]+";\n");
			//fprint $fileID ("setAttr RRA_rPalm.rz "+ $rPalm_R[2]+";\n");
        	
			//fprint $fileID ("setAttr RRA_rPalm.sx "+ $rPalm_S[0]+";\n");
			//fprint $fileID ("setAttr RRA_rPalm.sy "+ $rPalm_S[1]+";\n");
			//fprint $fileID ("setAttr RRA_rPalm.sz "+ $rPalm_S[2]+";\n");
		}

		
		//RIGHT LEG//////////////////////////////////////////////////////////////////////
		$rHip_T = `getAttr RRA_rHip.translate`;
		fprint $fileID ("setAttr RRA_rHip.tx "+ $rHip_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rHip.ty "+ $rHip_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rHip.tz "+ $rHip_T[2]+";\n");

		$rKnee_T = `getAttr RRA_rKnee.translate`;
		fprint $fileID ("setAttr RRA_rKnee.tx "+ $rKnee_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rKnee.ty "+ $rKnee_T[1]+";\n");		
		fprint $fileID ("setAttr RRA_rKnee.tz "+ $rKnee_T[2]+";\n");		

		$rAnkle_T = `getAttr RRA_rAnkle.translate`;
		$rAnkle_R = `getAttr RRA_rAnkle.rotate`;
		$rAnkle_S = `getAttr RRA_rAnkle.scale`;		

		fprint $fileID ("setAttr RRA_rAnkle.tx "+ $rAnkle_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rAnkle.ty "+ $rAnkle_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rAnkle.tz "+ $rAnkle_T[2]+";\n");

		fprint $fileID ("setAttr RRA_rAnkle.ry "+ $rAnkle_R[1]+";\n");

		fprint $fileID ("setAttr RRA_rAnkle.sx "+ $rAnkle_S[0]+";\n");
		fprint $fileID ("setAttr RRA_rAnkle.sy "+ $rAnkle_S[1]+";\n");
		fprint $fileID ("setAttr RRA_rAnkle.sz "+ $rAnkle_S[2]+";\n");
		
		$rBall_T = `getAttr RRA_rBall.translate`;
		$rBall_R = `getAttr RRA_rBall.rotate`;
		$rBall_S = `getAttr RRA_rBall.scale`;		

		fprint $fileID ("setAttr RRA_rBall.tx "+ $rBall_T[0]+";\n");
		fprint $fileID ("setAttr RRA_rBall.ty "+ $rBall_T[1]+";\n");
		fprint $fileID ("setAttr RRA_rBall.tz "+ $rBall_T[2]+";\n");

		fprint $fileID ("setAttr RRA_rBall.ry "+ $rBall_R[1]+";\n");

		fprint $fileID ("setAttr RRA_rBall.sx "+ $rBall_S[0]+";\n");
		fprint $fileID ("setAttr RRA_rBall.sy "+ $rBall_S[1]+";\n");
		fprint $fileID ("setAttr RRA_rBall.sz "+ $rBall_S[2]+";\n");
		
        if (!`objExists RRA_rToe01J1`)
        {
			$rToe_T = `getAttr RRA_rToe.translate`;
			$rToe_R = `getAttr RRA_rToe.rotate`;
			$rToe_S = `getAttr RRA_rToe.scale`;	

			fprint $fileID ("setAttr RRA_rToe.tx "+ $rToe_T[0]+";\n");
			//fprint $fileID ("setAttr RRA_rToe.ty "+ $rToe_T[1]+";\n");
			fprint $fileID ("setAttr RRA_rToe.tz "+ $rToe_T[2]+";\n");
			
			//fprint $fileID ("setAttr RRA_rToe.ry "+ $rToe_R[1]+";\n");
			
			fprint $fileID ("setAttr RRA_rToe.sx "+ $rToe_S[0]+";\n");
			fprint $fileID ("setAttr RRA_rToe.sy "+ $rToe_S[1]+";\n");
			fprint $fileID ("setAttr RRA_rToe.sz "+ $rToe_S[2]+";\n");
		}
		
		//RIGHT FOOT LOCATORS
		$rFootOutTilt_T = `getAttr RRA_rFootOutTilt.translate`;
		fprint $fileID ("setAttr RRA_rFootOutTilt.tx "+ $rFootOutTilt_T[0]+";\n");		

		$rFootInTilt_T = `getAttr RRA_rFootInTilt.translate`;
		fprint $fileID ("setAttr RRA_rFootInTilt.tx "+ $rFootInTilt_T[0]+";\n");		

		$rFootHeelPivot_T = `getAttr RRA_rFootHeelPivot.translate`;
		fprint $fileID ("setAttr RRA_rFootHeelPivot.tz "+ $rFootHeelPivot_T[2]+";\n");

		////////////////////////////////////////////////////////////////////////////////
		//FINGERS///////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////
		if (`objExists RRA_lThumbJ1`)
		{
		$lThumbJ1_T = `getAttr RRA_lThumbJ1.translate`;
		$lThumbJ1_R = `getAttr RRA_lThumbJ1.rotate`;
		$lThumbJ1_S = `getAttr RRA_lThumbJ1.scale`;		

		fprint $fileID ("if (`objExists RRA_lThumbJ1`) {");
		fprint $fileID ("setAttr RRA_lThumbJ1.translate "+ $lThumbJ1_T[0]+ " " + $lThumbJ1_T[1] + " " + $lThumbJ1_T[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ1.rotate "  + $lThumbJ1_R[0]+ " " + $lThumbJ1_R[1] + " " + $lThumbJ1_R[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ1.scale "   + $lThumbJ1_S[0]+ " " + $lThumbJ1_S[1] + " " + $lThumbJ1_S[2] + ";");

		$lThumbJ2_T = `getAttr RRA_lThumbJ2.translate`;
		$lThumbJ2_R = `getAttr RRA_lThumbJ2.rotate`;
		$lThumbJ2_S = `getAttr RRA_lThumbJ2.scale`;		

		fprint $fileID ("setAttr RRA_lThumbJ2.translate "+ $lThumbJ2_T[0]+ " " + $lThumbJ2_T[1] + " " + $lThumbJ2_T[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ2.rotate "  + $lThumbJ2_R[0]+ " " + $lThumbJ2_R[1] + " " + $lThumbJ2_R[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ2.scale "   + $lThumbJ2_S[0]+ " " + $lThumbJ2_S[1] + " " + $lThumbJ2_S[2] + ";");
		
		$lThumbJ3_T = `getAttr RRA_lThumbJ3.translate`;
		$lThumbJ3_R = `getAttr RRA_lThumbJ3.rotate`;
		$lThumbJ3_S = `getAttr RRA_lThumbJ3.scale`;		

		fprint $fileID ("setAttr RRA_lThumbJ3.translate "+ $lThumbJ3_T[0]+ " " + $lThumbJ3_T[1] + " " + $lThumbJ3_T[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ3.rotate "  + $lThumbJ3_R[0]+ " " + $lThumbJ3_R[1] + " " + $lThumbJ3_R[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJ3.scale "   + $lThumbJ3_S[0]+ " " + $lThumbJ3_S[1] + " " + $lThumbJ3_S[2] + ";");
		
		$lThumbJTip_T = `getAttr RRA_lThumbJTip.translate`;
		$lThumbJTip_R = `getAttr RRA_lThumbJTip.rotate`;
		$lThumbJTip_S = `getAttr RRA_lThumbJTip.scale`;		

		fprint $fileID ("setAttr RRA_lThumbJTip.translate "+ $lThumbJTip_T[0]+ " " + $lThumbJTip_T[1] + " " + $lThumbJTip_T[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJTip.rotate "  + $lThumbJTip_R[0]+ " " + $lThumbJTip_R[1] + " " + $lThumbJTip_R[2] + ";");
		fprint $fileID ("setAttr RRA_lThumbJTip.scale "   + $lThumbJTip_S[0]+ " " + $lThumbJTip_S[1] + " " + $lThumbJTip_S[2] + ";");

		
		$rThumbJ1_T = `getAttr RRA_rThumbJ1.translate`;
		$rThumbJ1_R = `getAttr RRA_rThumbJ1.rotate`;
		$rThumbJ1_S = `getAttr RRA_rThumbJ1.scale`;		

		fprint $fileID ("setAttr RRA_rThumbJ1.translate "+ $rThumbJ1_T[0]+ " " + $rThumbJ1_T[1] + " " + $rThumbJ1_T[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ1.rotate "  + $rThumbJ1_R[0]+ " " + $rThumbJ1_R[1] + " " + $rThumbJ1_R[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ1.scale "   + $rThumbJ1_S[0]+ " " + $rThumbJ1_S[1] + " " + $rThumbJ1_S[2] + ";");

		$rThumbJ2_T = `getAttr RRA_rThumbJ2.translate`;
		$rThumbJ2_R = `getAttr RRA_rThumbJ2.rotate`;
		$rThumbJ2_S = `getAttr RRA_rThumbJ2.scale`;		

		fprint $fileID ("setAttr RRA_rThumbJ2.translate "+ $rThumbJ2_T[0]+ " " + $rThumbJ2_T[1] + " " + $rThumbJ2_T[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ2.rotate "  + $rThumbJ2_R[0]+ " " + $rThumbJ2_R[1] + " " + $rThumbJ2_R[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ2.scale "   + $rThumbJ2_S[0]+ " " + $rThumbJ2_S[1] + " " + $rThumbJ2_S[2] + ";");
		
		$rThumbJ3_T = `getAttr RRA_rThumbJ3.translate`;
		$rThumbJ3_R = `getAttr RRA_rThumbJ3.rotate`;
		$rThumbJ3_S = `getAttr RRA_rThumbJ3.scale`;		

		fprint $fileID ("setAttr RRA_rThumbJ3.translate "+ $rThumbJ3_T[0]+ " " + $rThumbJ3_T[1] + " " + $rThumbJ3_T[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ3.rotate "  + $rThumbJ3_R[0]+ " " + $rThumbJ3_R[1] + " " + $rThumbJ3_R[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJ3.scale "   + $rThumbJ3_S[0]+ " " + $rThumbJ3_S[1] + " " + $rThumbJ3_S[2] + ";");
		
		$rThumbJTip_T = `getAttr RRA_rThumbJTip.translate`;
		$rThumbJTip_R = `getAttr RRA_rThumbJTip.rotate`;
		$rThumbJTip_S = `getAttr RRA_rThumbJTip.scale`;		

		fprint $fileID ("setAttr RRA_rThumbJTip.translate "+ $rThumbJTip_T[0]+ " " + $rThumbJTip_T[1] + " " + $rThumbJTip_T[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJTip.rotate "  + $rThumbJTip_R[0]+ " " + $rThumbJTip_R[1] + " " + $rThumbJTip_R[2] + ";");
		fprint $fileID ("setAttr RRA_rThumbJTip.scale "   + $rThumbJTip_S[0]+ " " + $rThumbJTip_S[1] + " " + $rThumbJTip_S[2] + ";");
		fprint $fileID ("}\n");
		}

		int $fingerNum = 1;
		int $fingerEnd = 2;
		while ($fingerNum != $fingerEnd)
		{
			string $fingerSpace = "";
			if ($fingerNum > 9)
			{
				string $fingerSpace = "";
			}

			if (`objExists ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1")`)
			{
				$lFingerJ1_T = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.translate")`;
				$lFingerJ1_R = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.rotate")`;
				$lFingerJ1_S = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.scale")`;		
				
				fprint $fileID ("if (`objExists RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1`) {");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.translate " + $lFingerJ1_T[0]+ " " + $lFingerJ1_T[1] + " " + $lFingerJ1_T[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.rotate "  + $lFingerJ1_R[0]+ " " + $lFingerJ1_R[1] + " " + $lFingerJ1_R[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "1.scale "   + $lFingerJ1_S[0]+ " " + $lFingerJ1_S[1] + " " + $lFingerJ1_S[2] + ";");
				
				$lFingerJ2_T = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.translate")`;
				$lFingerJ2_R = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.rotate")`;
				$lFingerJ2_S = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.scale")`;		
				
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.translate "+ $lFingerJ2_T[0]+ " " + $lFingerJ2_T[1] + " " + $lFingerJ2_T[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.rotate "  + $lFingerJ2_R[0]+ " " + $lFingerJ2_R[1] + " " + $lFingerJ2_R[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "2.scale "   + $lFingerJ2_S[0]+ " " + $lFingerJ2_S[1] + " " + $lFingerJ2_S[2] + ";");
				
				
				$lFingerJ3_T = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.translate")`;
				$lFingerJ3_R = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.rotate")`;
				$lFingerJ3_S = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.scale")`;		
				
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.translate "+ $lFingerJ3_T[0]+ " " + $lFingerJ3_T[1] + " " + $lFingerJ3_T[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.rotate "  + $lFingerJ3_R[0]+ " " + $lFingerJ3_R[1] + " " + $lFingerJ3_R[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "3.scale "   + $lFingerJ3_S[0]+ " " + $lFingerJ3_S[1] + " " + $lFingerJ3_S[2] + ";");
				
				
				$lFingerJTip_T = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.translate")`;
				$lFingerJTip_R = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.rotate")`;
				$lFingerJTip_S = `getAttr ("RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.scale")`;		
				
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.translate "+ $lFingerJTip_T[0]+ " " + $lFingerJTip_T[1] + " " + $lFingerJTip_T[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.rotate "  + $lFingerJTip_R[0]+ " " + $lFingerJTip_R[1] + " " + $lFingerJTip_R[2] + ";");
				fprint $fileID ("setAttr RRA_lFinger" + $fingerSpace + $fingerNum + "J" + "Tip.scale "   + $lFingerJTip_S[0]+ " " + $lFingerJTip_S[1] + " " + $lFingerJTip_S[2] + ";");
				
				$rFingerJ1_T = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.translate")`;
				$rFingerJ1_R = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.rotate")`;
				$rFingerJ1_S = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.scale")`;		
				
				fprint $fileID ("}\n");
				
				fprint $fileID ("if (`objExists RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1`) {");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.translate " + $rFingerJ1_T[0]+ " " + $rFingerJ1_T[1] + " " + $rFingerJ1_T[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.rotate "  + $rFingerJ1_R[0]+ " " + $rFingerJ1_R[1] + " " + $rFingerJ1_R[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "1.scale "   + $rFingerJ1_S[0]+ " " + $rFingerJ1_S[1] + " " + $rFingerJ1_S[2] + ";");
				
				$rFingerJ2_T = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.translate")`;
				$rFingerJ2_R = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.rotate")`;
				$rFingerJ2_S = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.scale")`;		
				
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.translate "+ $rFingerJ2_T[0]+ " " + $rFingerJ2_T[1] + " " + $rFingerJ2_T[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.rotate "  + $rFingerJ2_R[0]+ " " + $rFingerJ2_R[1] + " " + $rFingerJ2_R[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "2.scale "   + $rFingerJ2_S[0]+ " " + $rFingerJ2_S[1] + " " + $rFingerJ2_S[2] + ";");
								
				
				$rFingerJ3_T = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.translate")`;
				$rFingerJ3_R = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.rotate")`;
				$rFingerJ3_S = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.scale")`;		
				
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.translate "+ $rFingerJ3_T[0]+ " " + $rFingerJ3_T[1] + " " + $rFingerJ3_T[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.rotate "  + $rFingerJ3_R[0]+ " " + $rFingerJ3_R[1] + " " + $rFingerJ3_R[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "3.scale "   + $rFingerJ3_S[0]+ " " + $rFingerJ3_S[1] + " " + $rFingerJ3_S[2] + ";");
				

				$rFingerJTip_T = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.translate")`;
				$rFingerJTip_R = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.rotate")`;
				$rFingerJTip_S = `getAttr ("RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.scale")`;		
				
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.translate "+ $rFingerJTip_T[0]+ " " + $rFingerJTip_T[1] + " " + $rFingerJTip_T[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.rotate "  + $rFingerJTip_R[0]+ " " + $rFingerJTip_R[1] + " " + $rFingerJTip_R[2] + ";");
				fprint $fileID ("setAttr RRA_rFinger" + $fingerSpace + $fingerNum + "J" + "Tip.scale "   + $rFingerJTip_S[0]+ " " + $rFingerJTip_S[1] + " " + $rFingerJTip_S[2] + ";");
					
				fprint $fileID ("}\n");
				
				$fingerEnd++;
			}
			$fingerNum++;
		}

		//////////////////////////////////////////////////////////////////////////////
		//TOES////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////

		
		int $toeNum = 1;
		int $toeEnd = 2;
		while ($toeNum != $toeEnd)
		{
			string $toeSpace = "0";
			if ($toeNum > 9)
			{
				string $toeSpace = "";
			}

			if (`objExists ("RRA_lToe" + $toeSpace + $toeNum + "J" + "1")`)
			{
				$lToeJ1_T = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "1.translate")`;
				$lToeJ1_R = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "1.rotate")`;
				$lToeJ1_S = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "1.scale")`;		
				
				fprint $fileID ("if (`objExists RRA_lToe" + $toeSpace + $toeNum + "J" + "1`) {");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "1.translate " + $lToeJ1_T[0]+ " " + $lToeJ1_T[1] + " " + $lToeJ1_T[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "1.rotate "  + $lToeJ1_R[0]+ " " + $lToeJ1_R[1] + " " + $lToeJ1_R[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "1.scale "   + $lToeJ1_S[0]+ " " + $lToeJ1_S[1] + " " + $lToeJ1_S[2] + ";");
				
				$lToeJ2_T = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "2.translate")`;
				$lToeJ2_R = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "2.rotate")`;
				$lToeJ2_S = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "2.scale")`;		
				
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "2.translate "+ $lToeJ2_T[0]+ " " + $lToeJ2_T[1] + " " + $lToeJ2_T[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "2.rotate "  + $lToeJ2_R[0]+ " " + $lToeJ2_R[1] + " " + $lToeJ2_R[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "2.scale "   + $lToeJ2_S[0]+ " " + $lToeJ2_S[1] + " " + $lToeJ2_S[2] + ";");
				
				
				$lToeJTip_T = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.translate")`;
				$lToeJTip_R = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.rotate")`;
				$lToeJTip_S = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.scale")`;		
				
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.translate "+ $lToeJTip_T[0]+ " " + $lToeJTip_T[1] + " " + $lToeJTip_T[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.rotate "  + $lToeJTip_R[0]+ " " + $lToeJTip_R[1] + " " + $lToeJTip_R[2] + ";");
				fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "Tip.scale "   + $lToeJTip_S[0]+ " " + $lToeJTip_S[1] + " " + $lToeJTip_S[2] + ";");
				
				$rToeJ1_T = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "1.translate")`;
				$rToeJ1_R = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "1.rotate")`;
				$rToeJ1_S = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "1.scale")`;		
				
				fprint $fileID ("}\n");
				
				fprint $fileID ("if (`objExists RRA_rToe" + $toeSpace + $toeNum + "J" + "1`) {");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "1.translate " + $rToeJ1_T[0]+ " " + $rToeJ1_T[1] + " " + $rToeJ1_T[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "1.rotate "  + $rToeJ1_R[0]+ " " + $rToeJ1_R[1] + " " + $rToeJ1_R[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "1.scale "   + $rToeJ1_S[0]+ " " + $rToeJ1_S[1] + " " + $rToeJ1_S[2] + ";");
				
				$rToeJ2_T = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "2.translate")`;
				$rToeJ2_R = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "2.rotate")`;
				$rToeJ2_S = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "2.scale")`;		
				
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "2.translate "+ $rToeJ2_T[0]+ " " + $rToeJ2_T[1] + " " + $rToeJ2_T[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "2.rotate "  + $rToeJ2_R[0]+ " " + $rToeJ2_R[1] + " " + $rToeJ2_R[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "2.scale "   + $rToeJ2_S[0]+ " " + $rToeJ2_S[1] + " " + $rToeJ2_S[2] + ";");
				
				
				$rToeJTip_T = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.translate")`;
				$rToeJTip_R = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.rotate")`;
				$rToeJTip_S = `getAttr ("RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.scale")`;		
				
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.translate "+ $rToeJTip_T[0]+ " " + $rToeJTip_T[1] + " " + $rToeJTip_T[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.rotate "  + $rToeJTip_R[0]+ " " + $rToeJTip_R[1] + " " + $rToeJTip_R[2] + ";");
				fprint $fileID ("setAttr RRA_rToe" + $toeSpace + $toeNum + "J" + "Tip.scale "   + $rToeJTip_S[0]+ " " + $rToeJTip_S[1] + " " + $rToeJTip_S[2] + ";");
				
				if (`objExists ("RRA_lToe" + $toeSpace + $toeNum + "J" + "3")`)
				{
					$lToeJ1_T = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "3.translate")`;
					$lToeJ1_R = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "3.rotate")`;
					$lToeJ1_S = `getAttr ("RRA_lToe" + $toeSpace + $toeNum + "J" + "3.scale")`;		
					
					fprint $fileID ("if (`objExists RRA_lToe" + $toeSpace + $toeNum + "J" + "3`) {");
					fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "3.translate " + $lToeJ1_T[0]+ " " + $lToeJ1_T[1] + " " + $lToeJ1_T[2] + ";");
					fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "3.rotate "  + $lToeJ1_R[0]+ " " + $lToeJ1_R[1] + " " + $lToeJ1_R[2] + ";");
					fprint $fileID ("setAttr RRA_lToe" + $toeSpace + $toeNum + "J" + "3.scale "   + $lToeJ1_S[0]+ " " + $lToeJ1_S[1] + " " + $lToeJ1_S[2] + ";");
					fprint $fileID ("}");
				}
					
				fprint $fileID ("}\n");
				
				$toeEnd++;
			}
			$toeNum++;
		}
		fclose $fileID;
}


global proc RRA_ReadPathProx()
{
	string $mayaFolder2;

	fileBrowserDialog -mode 0
    -fileCommand ( "RRA_LoadProx \"" + $mayaFolder2 + "\"" )
    -actionName "Load";
}

global proc RRA_LoadProx(string $mayaFolder2, string $result2, string $type2)
{
	//FILE PATH
	print ("LOADING POSE FROM "+$result2+"...\n");
	//OPEN FILE FOR READING
	$fileID = `fopen $result2 "r"`;
	print ($fileID+" is FileID"+"\n");
	//GET FIRST LINE
	string $nextLine = `fgetline $fileID`;
	print ($nextLine+" is nextLine"+"\n");
	//LOOP
	while (size($nextLine) > 0)
	{
		eval ($nextLine);
		print ($nextLine);
		$nextLine = `fgetline $fileID`;
	}
	//RETURN ARRAY
	fclose $fileID;
}

global proc RRA_SingleHierarchy()
{
	//CENTER JOINTS
	string $name = `textField -q -text RRA_CharName`;
	
	joint -n ($name + "_SH_ROOTJ");
	parentConstraint ($name + "_ROOTJ") ($name + "_SH_ROOTJ");
	scaleConstraint -mo -skip y ($name + "_ROOTJ") ($name + "_SH_ROOTJ");
	$JointOrient = `getAttr ($name + "_ROOTJ.jointOrient")`;
	setAttr (($name + "_SH_ROOTJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	$i = 1;
	while ($i < 10)
	{
		if (`objExists ($name + "_Spine0" + $i + "J")`)
		{
			joint -n ($name + "_SH_Spine0" + $i + "J");
			parentConstraint ($name + "_Spine0" + $i + "J") ($name + "_SH_Spine0" + $i + "J");
			scaleConstraint -mo -skip y ($name + "_Spine0" + $i + "J") ($name + "_SH_Spine0" + $i + "J");
			$JointOrient = `getAttr ($name + "_Spine0" + $i + "J.jointOrient")`;
			setAttr (($name + "_SH_Spine0" + $i + "J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		}
		$i++;
	}

	joint -n ($name + "_SH_SpineTopJ");
	parentConstraint ($name + "_SpineTopJ") ($name + "_SH_SpineTopJ");
	//scaleConstraint -mo -skip y ($name + "_SpineTopJ") ($name + "_SH_SpineTopJ");
	$JointOrient = `getAttr ($name + "_SpineTopJ.jointOrient")`;
	setAttr (($name + "_SH_SpineTopJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	$i = 1;
	while ($i < 10)
	{
		if (`objExists ($name + "_Neck0" + $i + "J")`)
		{
			joint -n ($name + "_SH_Neck0" + $i + "J");
			parentConstraint ($name + "_Neck0" + $i + "J") ($name + "_SH_Neck0" + $i + "J");
			scaleConstraint -mo -skip y ($name + "_Neck0" + $i + "J") ($name + "_SH_Neck0" + $i + "J");
			$JointOrient = `getAttr ($name + "_Neck0" + $i + "J.jointOrient")`;
			setAttr (($name + "_SH_Neck0" + $i + "J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		}
		$i++;
	}
	
	joint -n ($name + "_SH_HeadJ");
	parentConstraint ($name + "_HeadJ") ($name + "_SH_HeadJ");
	//scaleConstraint -mo -skip x ($name + "_HeadJ") ($name + "_SH_HeadJ");
	$JointOrient = `getAttr ($name + "_HeadJ.jointOrient")`;
	setAttr (($name + "_SH_HeadJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	joint -n ($name + "_SH_HeadTipJ");
	parentConstraint ($name + "_HeadTipJ") ($name + "_SH_HeadTipJ");
	scaleConstraint -mo -skip x ($name + "_HeadTipJ") ($name + "_SH_HeadTipJ");
	$JointOrient = `getAttr ($name + "_SH_HeadTipJ.jointOrient")`;
	setAttr (($name + "_SH_HeadTipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	select ($name + "_SH_HeadJ");
	joint -n ($name + "_SH_JawJ");
	parentConstraint ($name + "_JawJ") ($name + "_SH_JawJ");
	scaleConstraint -mo -skip x ($name + "_JawJ") ($name + "_SH_JawJ");
	$JointOrient = `getAttr ($name + "_JawJ.jointOrient")`;
	setAttr (($name + "_SH_JawJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	joint -n ($name + "_SH_JawTipJ");
	parentConstraint ($name + "_JawTipJ") ($name + "_SH_JawTipJ");
	scaleConstraint -mo -skip x ($name + "_JawTipJ") ($name + "_SH_JawTipJ");
	$JointOrient = `getAttr ($name + "_JawTipJ.jointOrient")`;
	setAttr (($name + "_SH_JawTipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	select ($name + "_SH_HeadJ");	
	joint -n ($name + "_SH_lEyeJ");
	parentConstraint ($name + "_lEyeJ") ($name + "_SH_lEyeJ");
	scaleConstraint -mo -skip x ($name + "_lEyeJ") ($name + "_SH_lEyeJ");
	$JointOrient = `getAttr ($name + "_lEyeJ.jointOrient")`;
	setAttr (($name + "_SH_lEyeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	select ($name + "_SH_HeadJ");	
	joint -n ($name + "_SH_rEyeJ");
	parentConstraint ($name + "_rEyeJ") ($name + "_SH_rEyeJ");
	scaleConstraint -mo -skip x ($name + "_rEyeJ") ($name + "_SH_rEyeJ");
	$JointOrient = `getAttr ($name + "_rEyeJ.jointOrient")`;
	setAttr (($name + "_SH_rEyeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	
	//LEFT ARM	
	select ($name + "_SH_SpineTopJ");	
	joint -n ($name + "_SH_lClavicleJ");
	parentConstraint ($name + "_lClavicleJ") ($name + "_SH_lClavicleJ");
	scaleConstraint -mo -skip x ($name + "_lClavicleJ") ($name + "_SH_lClavicleJ");
	$JointOrient = `getAttr ($name + "_lClavicleJ.jointOrient")`;
	setAttr (($name + "_SH_lClavicleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	
	if (`objExists ($name + "_lUpperArmCurveJ1")`)
	{
		joint -n ($name + "_SH_lShoulderCurveJ");
		parentConstraint ($name + "_lShoulderCurveJ") ($name + "_SH_lShoulderCurveJ");
		scaleConstraint -mo -skip x ($name + "_lShoulderCurveJ") ($name + "_SH_lShoulderCurveJ");
		$JointOrient = `getAttr ($name + "_lShoulderCurveJ.jointOrient")`;
		setAttr (($name + "_SH_lShoulderCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_lUpperArmCurveJ1");
		parentConstraint ($name + "_lUpperArmCurveJ1") ($name + "_SH_lUpperArmCurveJ1");
		scaleConstraint -mo -skip x ($name + "_lUpperArmCurveJ1") ($name + "_SH_lUpperArmCurveJ1");
		$JointOrient = `getAttr ($name + "_lUpperArmCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_lUpperArmCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lUpperArmCurveJ2");
		parentConstraint ($name + "_lUpperArmCurveJ2") ($name + "_SH_lUpperArmCurveJ2");
		scaleConstraint -mo -skip x ($name + "_lUpperArmCurveJ2") ($name + "_SH_lUpperArmCurveJ2");
		$JointOrient = `getAttr ($name + "_lUpperArmCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_lUpperArmCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lUpperArmCurveJ3");
		parentConstraint ($name + "_lUpperArmCurveJ3") ($name + "_SH_lUpperArmCurveJ3");
		scaleConstraint -mo -skip x ($name + "_lUpperArmCurveJ3") ($name + "_SH_lUpperArmCurveJ3");
		$JointOrient = `getAttr ($name + "_lUpperArmCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_lUpperArmCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_lElbowCurveJ");
		parentConstraint ($name + "_lElbowCurveJ") ($name + "_SH_lElbowCurveJ");
		scaleConstraint -mo -skip x ($name + "_lElbowCurveJ") ($name + "_SH_lElbowCurveJ");
		$JointOrient = `getAttr ($name + "_lElbowCurveJ.jointOrient")`;
		setAttr (($name + "_SH_lElbowCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_lLowerArmCurveJ1");
		parentConstraint ($name + "_lLowerArmCurveJ1") ($name + "_SH_lLowerArmCurveJ1");
		scaleConstraint -mo -skip x ($name + "_lLowerArmCurveJ1") ($name + "_SH_lLowerArmCurveJ1");
		$JointOrient = `getAttr ($name + "_lLowerArmCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_lLowerArmCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lLowerArmCurveJ2");
		parentConstraint ($name + "_lLowerArmCurveJ2") ($name + "_SH_lLowerArmCurveJ2");
		scaleConstraint -mo -skip x ($name + "_lLowerArmCurveJ2") ($name + "_SH_lLowerArmCurveJ2");
		$JointOrient = `getAttr ($name + "_lLowerArmCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_lLowerArmCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lLowerArmCurveJ3");
		parentConstraint ($name + "_lLowerArmCurveJ3") ($name + "_SH_lLowerArmCurveJ3");
		scaleConstraint -mo -skip x ($name + "_lLowerArmCurveJ3") ($name + "_SH_lLowerArmCurveJ3");
		$JointOrient = `getAttr ($name + "_lLowerArmCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_lLowerArmCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}
	else
	{
		joint -n ($name + "_SH_lShoulderJ");
		parentConstraint ($name + "_lShoulderJ") ($name + "_SH_lShoulderJ");
		scaleConstraint -mo -skip x ($name + "_lShoulderJ") ($name + "_SH_lShoulderJ");
		$JointOrient = `getAttr ($name + "_lShoulderJ.jointOrient")`;
		setAttr (($name + "_SH_lShoulderJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_lElbowJ");
		parentConstraint ($name + "_lElbowJ") ($name + "_SH_lElbowJ");
		scaleConstraint -mo -skip x ($name + "_lElbowJ") ($name + "_SH_lElbowJ");
		$JointOrient = `getAttr ($name + "_lElbowJ.jointOrient")`;
		setAttr (($name + "_SH_lElbowJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_lForearmJ");
		parentConstraint ($name + "_lForearmJ") ($name + "_SH_lForearmJ");
		scaleConstraint -mo -skip x ($name + "_lForearmJ") ($name + "_SH_lForearmJ");
		$JointOrient = `getAttr ($name + "_lForearmJ.jointOrient")`;
		setAttr (($name + "_SH_lForearmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		select ($name + "_SH_lElbowJ");
	}
	
	joint -n ($name + "_SH_lWristJ");
	parentConstraint ($name + "_lWristJ") ($name + "_SH_lWristJ");
	//scaleConstraint -mo -skip x ($name + "_lWristJ") ($name + "_SH_lWristJ");
	$JointOrient = `getAttr ($name + "_lWristJ.jointOrient")`;
	setAttr (($name + "_SH_lWristJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	joint -n ($name + "_SH_lPalmJ");
	parentConstraint ($name + "_lPalmJ") ($name + "_SH_lPalmJ");
	scaleConstraint -mo -skip x ($name + "_lPalmJ") ($name + "_SH_lPalmJ");
	$JointOrient = `getAttr ($name + "_lPalmJ.jointOrient")`;
	setAttr (($name + "_SH_lPalmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	$i = 1;

	while ($i < 10)
	{
		if (`objExists ($name + "_lFinger" + $i + "J1")`)
		{
			select ($name + "_SH_lPalmJ");
			joint -n ($name + "_SH_lFinger" + $i + "J1");
			parentConstraint ($name + "_lFinger" + $i + "J1") ($name + "_SH_lFinger" + $i + "J1");
			scaleConstraint -mo -skip x ($name + "_lFinger" + $i + "J1") ($name + "_SH_lFinger" + $i + "J1");
			$JointOrient = `getAttr ($name + "_lFinger" + $i + "J1.jointOrient")`;
			setAttr (($name + "_SH_lFinger" + $i + "J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
			joint -n ($name + "_SH_lFinger" + $i + "J2");
			parentConstraint ($name + "_lFinger" + $i + "J2") ($name + "_SH_lFinger" + $i + "J2");
			scaleConstraint -mo -skip x ($name + "_lFinger" + $i + "J2") ($name + "_SH_lFinger" + $i + "J2");
			$JointOrient = `getAttr ($name + "_lFinger" + $i + "J2.jointOrient")`;
			setAttr (($name + "_SH_lFinger" + $i + "J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
			
			joint -n ($name + "_SH_lFinger" + $i + "J3");
			parentConstraint ($name + "_lFinger" + $i + "J3") ($name + "_SH_lFinger" + $i + "J3");
			scaleConstraint -mo -skip x ($name + "_lFinger" + $i + "J3") ($name + "_SH_lFinger" + $i + "J3");
			$JointOrient = `getAttr ($name + "_lFinger" + $i + "J3.jointOrient")`;
			setAttr (($name + "_SH_lFinger" + $i + "J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
			
			joint -n ($name + "_SH_lFinger" + $i + "JTip");
			parentConstraint ($name + "_lFinger" + $i + "JTip") ($name + "_SH_lFinger" + $i + "JTip");
			scaleConstraint -mo -skip x ($name + "_lFinger" + $i + "JTip") ($name + "_SH_lFinger" + $i + "JTip");
			$JointOrient = `getAttr ($name + "_lFinger" + $i + "JTip.jointOrient")`;
			setAttr (($name + "_SH_lFinger" + $i + "JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		}
		$i++;
	}

	if (`objExists ($name + "_lThumbJ1")`)
	{
		select ($name + "_SH_lWristJ");
		joint -n ($name + "_SH_lThumbJ1");
		parentConstraint ($name + "_lThumbJ1") ($name + "_SH_lThumbJ1");
		scaleConstraint -mo -skip x ($name + "_lThumbJ1") ($name + "_SH_lThumbJ1");
 		$JointOrient = `getAttr ($name + "_lThumbJ1.jointOrient")`;
		setAttr (($name + "_SH_lThumbJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
   	
		joint -n ($name + "_SH_lThumbJ2");
		parentConstraint ($name + "_lThumbJ2") ($name + "_SH_lThumbJ2");
		scaleConstraint -mo -skip x ($name + "_lThumbJ2") ($name + "_SH_lThumbJ2");
 		$JointOrient = `getAttr ($name + "_lThumbJ2.jointOrient")`;
		setAttr (($name + "_SH_lThumbJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lThumbJ3");
		parentConstraint ($name + "_lThumbJ3") ($name + "_SH_lThumbJ3");
		scaleConstraint -mo -skip x ($name + "_lThumbJ3") ($name + "_SH_lThumbJ3");
 		$JointOrient = `getAttr ($name + "_lThumbJ3.jointOrient")`;
		setAttr (($name + "_SH_lThumbJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lThumbJTip");
		parentConstraint ($name + "_lThumbJTip") ($name + "_SH_lThumbJTip");
		scaleConstraint -mo -skip x ($name + "_lThumbJTip") ($name + "_SH_lThumbJTip");
 		$JointOrient = `getAttr ($name + "_lThumbJTip.jointOrient")`;
		setAttr (($name + "_SH_lThumbJTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}
	
	//RIGHT ARM	
	select ($name + "_SH_SpineTopJ");	
	joint -n ($name + "_SH_rClavicleJ");
	parentConstraint ($name + "_rClavicleJ") ($name + "_SH_rClavicleJ");
	scaleConstraint -mo -skip x ($name + "_rClavicleJ") ($name + "_SH_rClavicleJ");
	$JointOrient = `getAttr ($name + "_rClavicleJ.jointOrient")`;
	setAttr (($name + "_SH_rClavicleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	
	if (`objExists ($name + "_rUpperArmCurveJ1")`)
	{
		joint -n ($name + "_SH_rShoulderCurveJ");
		parentConstraint ($name + "_rShoulderCurveJ") ($name + "_SH_rShoulderCurveJ");
		scaleConstraint -mo -skip x ($name + "_rShoulderCurveJ") ($name + "_SH_rShoulderCurveJ");
		$JointOrient = `getAttr ($name + "_rShoulderCurveJ.jointOrient")`;
		setAttr (($name + "_SH_rShoulderCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_rUpperArmCurveJ1");
		parentConstraint ($name + "_rUpperArmCurveJ1") ($name + "_SH_rUpperArmCurveJ1");
		scaleConstraint -mo -skip x ($name + "_rUpperArmCurveJ1") ($name + "_SH_rUpperArmCurveJ1");
		$JointOrient = `getAttr ($name + "_rUpperArmCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_rUpperArmCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rUpperArmCurveJ2");
		parentConstraint ($name + "_rUpperArmCurveJ2") ($name + "_SH_rUpperArmCurveJ2");
		scaleConstraint -mo -skip x ($name + "_rUpperArmCurveJ2") ($name + "_SH_rUpperArmCurveJ2");
		$JointOrient = `getAttr ($name + "_rUpperArmCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_rUpperArmCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rUpperArmCurveJ3");
		parentConstraint ($name + "_rUpperArmCurveJ3") ($name + "_SH_rUpperArmCurveJ3");
		scaleConstraint -mo -skip x ($name + "_rUpperArmCurveJ3") ($name + "_SH_rUpperArmCurveJ3");
		$JointOrient = `getAttr ($name + "_rUpperArmCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_rUpperArmCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_rElbowCurveJ");
		parentConstraint ($name + "_rElbowCurveJ") ($name + "_SH_rElbowCurveJ");
		scaleConstraint -mo -skip x ($name + "_rElbowCurveJ") ($name + "_SH_rElbowCurveJ");
		$JointOrient = `getAttr ($name + "_rElbowCurveJ.jointOrient")`;
		setAttr (($name + "_SH_rElbowCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_rLowerArmCurveJ1");
		parentConstraint ($name + "_rLowerArmCurveJ1") ($name + "_SH_rLowerArmCurveJ1");
		scaleConstraint -mo -skip x ($name + "_rLowerArmCurveJ1") ($name + "_SH_rLowerArmCurveJ1");
		$JointOrient = `getAttr ($name + "_rLowerArmCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_rLowerArmCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rLowerArmCurveJ2");
		parentConstraint ($name + "_rLowerArmCurveJ2") ($name + "_SH_rLowerArmCurveJ2");
		scaleConstraint -mo -skip x ($name + "_rLowerArmCurveJ2") ($name + "_SH_rLowerArmCurveJ2");
		$JointOrient = `getAttr ($name + "_rLowerArmCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_rLowerArmCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rLowerArmCurveJ3");
		parentConstraint ($name + "_rLowerArmCurveJ3") ($name + "_SH_rLowerArmCurveJ3");
		scaleConstraint -mo -skip x ($name + "_rLowerArmCurveJ3") ($name + "_SH_rLowerArmCurveJ3");
		$JointOrient = `getAttr ($name + "_rLowerArmCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_rLowerArmCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}

	else
	{
		joint -n ($name + "_SH_rShoulderJ");
		parentConstraint ($name + "_rShoulderJ") ($name + "_SH_rShoulderJ");
		scaleConstraint -mo -skip x ($name + "_rShoulderJ") ($name + "_SH_rShoulderJ");
		$JointOrient = `getAttr ($name + "_rShoulderJ.jointOrient")`;
		setAttr (($name + "_SH_rShoulderJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_rElbowJ");
		parentConstraint ($name + "_rElbowJ") ($name + "_SH_rElbowJ");
		scaleConstraint -mo -skip x ($name + "_rElbowJ") ($name + "_SH_rElbowJ");
		$JointOrient = `getAttr ($name + "_rElbowJ.jointOrient")`;
		setAttr (($name + "_SH_rElbowJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
		joint -n ($name + "_SH_rForearmJ");
		parentConstraint ($name + "_rForearmJ") ($name + "_SH_rForearmJ");
		scaleConstraint -mo -skip x ($name + "_rForearmJ") ($name + "_SH_rForearmJ");
		$JointOrient = `getAttr ($name + "_rForearmJ.jointOrient")`;
		setAttr (($name + "_SH_rForearmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		select ($name + "_SH_rElbowJ");
	}
	
	joint -n ($name + "_SH_rWristJ");
	parentConstraint ($name + "_rWristJ") ($name + "_SH_rWristJ");
	//scaleConstraint -mo -skip x ($name + "_rWristJ") ($name + "_SH_rWristJ");
	$JointOrient = `getAttr ($name + "_rWristJ.jointOrient")`;
	setAttr (($name + "_SH_rWristJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	joint -n ($name + "_SH_rPalmJ");
	parentConstraint ($name + "_rPalmJ") ($name + "_SH_rPalmJ");
	scaleConstraint -mo -skip x ($name + "_rPalmJ") ($name + "_SH_rPalmJ");
	$JointOrient = `getAttr ($name + "_rPalmJ.jointOrient")`;
	setAttr (($name + "_SH_rPalmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	$i = 1;

	while ($i < 10)
	{
		if (`objExists ($name + "_rFinger" + $i + "J1")`)
		{
			select ($name + "_SH_rPalmJ");
			joint -n ($name + "_SH_rFinger" + $i + "J1");
			parentConstraint ($name + "_rFinger" + $i + "J1") ($name + "_SH_rFinger" + $i + "J1");
			scaleConstraint -mo -skip x ($name + "_rFinger" + $i + "J1") ($name + "_SH_rFinger" + $i + "J1");
			$JointOrient = `getAttr ($name + "_rFinger" + $i + "J1.jointOrient")`;
			setAttr (($name + "_SH_rFinger" + $i + "J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
			joint -n ($name + "_SH_rFinger" + $i + "J2");
			parentConstraint ($name + "_rFinger" + $i + "J2") ($name + "_SH_rFinger" + $i + "J2");
			scaleConstraint -mo -skip x ($name + "_rFinger" + $i + "J2") ($name + "_SH_rFinger" + $i + "J2");
			$JointOrient = `getAttr ($name + "_rFinger" + $i + "J2.jointOrient")`;
			setAttr (($name + "_SH_rFinger" + $i + "J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
			
			joint -n ($name + "_SH_rFinger" + $i + "J3");
			parentConstraint ($name + "_rFinger" + $i + "J3") ($name + "_SH_rFinger" + $i + "J3");
			scaleConstraint -mo -skip x ($name + "_rFinger" + $i + "J3") ($name + "_SH_rFinger" + $i + "J3");
			$JointOrient = `getAttr ($name + "_rFinger" + $i + "J3.jointOrient")`;
			setAttr (($name + "_SH_rFinger" + $i + "J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
			
			joint -n ($name + "_SH_rFinger" + $i + "JTip");
			parentConstraint ($name + "_rFinger" + $i + "JTip") ($name + "_SH_rFinger" + $i + "JTip");
			scaleConstraint -mo -skip x ($name + "_rFinger" + $i + "JTip") ($name + "_SH_rFinger" + $i + "JTip");
			$JointOrient = `getAttr ($name + "_rFinger" + $i + "JTip.jointOrient")`;
			setAttr (($name + "_SH_rFinger" + $i + "JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		}
		$i++;
	}

	if (`objExists ($name + "_rThumbJ1")`)
	{
		select ($name + "_SH_rWristJ");
		joint -n ($name + "_SH_rThumbJ1");
		parentConstraint ($name + "_rThumbJ1") ($name + "_SH_rThumbJ1");
		scaleConstraint -mo -skip x ($name + "_rThumbJ1") ($name + "_SH_rThumbJ1");
		$JointOrient = `getAttr ($name + "_rThumbJ1.jointOrient")`;
		setAttr (($name + "_SH_rThumbJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
    	
		joint -n ($name + "_SH_rThumbJ2");
		parentConstraint ($name + "_rThumbJ2") ($name + "_SH_rThumbJ2");
		scaleConstraint -mo -skip x ($name + "_rThumbJ2") ($name + "_SH_rThumbJ2");
		$JointOrient = `getAttr ($name + "_rThumbJ2.jointOrient")`;
		setAttr (($name + "_SH_rThumbJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
 		
		joint -n ($name + "_SH_rThumbJ3");
		parentConstraint ($name + "_rThumbJ3") ($name + "_SH_rThumbJ3");
		scaleConstraint -mo -skip x ($name + "_rThumbJ3") ($name + "_SH_rThumbJ3");
		$JointOrient = `getAttr ($name + "_rThumbJ3.jointOrient")`;
		setAttr (($name + "_SH_rThumbJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
 		
		joint -n ($name + "_SH_rThumbJTip");
		parentConstraint ($name + "_rThumbJTip") ($name + "_SH_rThumbJTip");
		scaleConstraint -mo -skip x ($name + "_rThumbJTip") ($name + "_SH_rThumbJTip");
		$JointOrient = `getAttr ($name + "_rThumbJTip.jointOrient")`;
		setAttr (($name + "_SH_rThumbJTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
 	}
	
	////////////////////////////
	//LEFT LEG	
	select ($name + "_SH_ROOTJ");	
	
	if (`objExists ($name + "_lHipCurveJ")`)
	{
		joint -n ($name + "_SH_lHipCurveJ");
		parentConstraint ($name + "_lHipCurveJ") ($name + "_SH_lHipCurveJ");
		scaleConstraint -mo -skip x ($name + "_lHipCurveJ") ($name + "_SH_lHipCurveJ");
		$JointOrient = `getAttr ($name + "_lHipCurveJ.jointOrient")`;
		setAttr (($name + "_SH_lHipCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
    	
		joint -n ($name + "_SH_lUpperLegCurveJ1");
		parentConstraint ($name + "_lUpperLegCurveJ1") ($name + "_SH_lUpperLegCurveJ1");
		scaleConstraint -mo -skip x ($name + "_lUpperLegCurveJ1") ($name + "_SH_lUpperLegCurveJ1");
		$JointOrient = `getAttr ($name + "_lUpperLegCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_lUpperLegCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lUpperLegCurveJ2");
		parentConstraint ($name + "_lUpperLegCurveJ2") ($name + "_SH_lUpperLegCurveJ2");
		scaleConstraint -mo -skip x ($name + "_lUpperLegCurveJ2") ($name + "_SH_lUpperLegCurveJ2");
		$JointOrient = `getAttr ($name + "_lUpperLegCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_lUpperLegCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_lUpperLegCurveJ3");
		parentConstraint ($name + "_lUpperLegCurveJ3") ($name + "_SH_lUpperLegCurveJ3");
		scaleConstraint -mo -skip x ($name + "_lUpperLegCurveJ3") ($name + "_SH_lUpperLegCurveJ3");
		$JointOrient = `getAttr ($name + "_lUpperLegCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_lUpperLegCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_lKneeCurveJ");
		parentConstraint ($name + "_lKneeCurveJ") ($name + "_SH_lKneeCurveJ");
		scaleConstraint -mo -skip x ($name + "_lKneeCurveJ") ($name + "_SH_lKneeCurveJ");
		$JointOrient = `getAttr ($name + "_lKneeCurveJ.jointOrient")`;
		setAttr (($name + "_SH_lKneeCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_lLowerLegCurveJ1");
		parentConstraint ($name + "_lLowerLegCurveJ1") ($name + "_SH_lLowerLegCurveJ1");
		scaleConstraint -mo -skip x ($name + "_lLowerLegCurveJ1") ($name + "_SH_lLowerLegCurveJ1");
		$JointOrient = `getAttr ($name + "_lLowerLegCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_lLowerLegCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_lLowerLegCurveJ2");
		parentConstraint ($name + "_lLowerLegCurveJ2") ($name + "_SH_lLowerLegCurveJ2");
		scaleConstraint -mo -skip x ($name + "_lLowerLegCurveJ2") ($name + "_SH_lLowerLegCurveJ2");
		$JointOrient = `getAttr ($name + "_lLowerLegCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_lLowerLegCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_lLowerLegCurveJ3");
		parentConstraint ($name + "_lLowerLegCurveJ3") ($name + "_SH_lLowerLegCurveJ3");
		scaleConstraint -mo -skip x ($name + "_lLowerLegCurveJ3") ($name + "_SH_lLowerLegCurveJ3");
		$JointOrient = `getAttr ($name + "_lLowerLegCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_lLowerLegCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}

	else
	{
		joint -n ($name + "_SH_lHipJ");
		parentConstraint ($name + "_lHipJ") ($name + "_SH_lHipJ");
		scaleConstraint -mo -skip x ($name + "_lHipJ") ($name + "_SH_lHipJ");
		$JointOrient = `getAttr ($name + "_lHipJ.jointOrient")`;
		setAttr (($name + "_SH_lHipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
    	
		joint -n ($name + "_SH_lKneeJ");
		parentConstraint ($name + "_lKneeJ") ($name + "_SH_lKneeJ");
		scaleConstraint -mo -skip x ($name + "_lKneeJ") ($name + "_SH_lKneeJ");
		$JointOrient = `getAttr ($name + "_lKneeJ.jointOrient")`;
		setAttr (($name + "_SH_lKneeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}
	
	joint -n ($name + "_SH_lAnkleJ");
	parentConstraint ($name + "_lAnkleJ") ($name + "_SH_lAnkleJ");
	scaleConstraint -mo -skip x ($name + "_lAnkleJ") ($name + "_SH_lAnkleJ");
	$JointOrient = `getAttr ($name + "_lAnkleJ.jointOrient")`;
	setAttr (($name + "_SH_lAnkleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	joint -n ($name + "_SH_lBallJ");
	parentConstraint ($name + "_lBallJ") ($name + "_SH_lBallJ");
	scaleConstraint -mo -skip x ($name + "_lBallJ") ($name + "_SH_lBallJ");
	$JointOrient = `getAttr ($name + "_lBallJ.jointOrient")`;
	setAttr (($name + "_SH_lBallJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	
	//LEFT TOES
	if (`objExists ($name + "_lToe01J1")`)
	{
		joint -n ($name + "_SH_lToe01J1");
		parentConstraint ($name + "_lToe01J1") ($name + "_SH_lToe01J1");
		scaleConstraint -mo -skip x ($name + "_lToe01J1") ($name + "_SH_lToe01J1");
    	
		joint -n ($name + "_SH_lToe01J2");
		parentConstraint ($name + "_lToe01J2") ($name + "_SH_lToe01J2");
		scaleConstraint -mo -skip x ($name + "_lToe01J2") ($name + "_SH_lToe01J2");
	
		
		joint -n ($name + "_SH_lToe01JTip");
		parentConstraint ($name + "_lToe01JTip") ($name + "_SH_lToe01JTip");
		scaleConstraint -mo -skip x ($name + "_lToe01JTip") ($name + "_SH_lToe01JTip");

		$JointOrient = `getAttr ($name + "_lToe01J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe01J1.radius")`;
		setAttr (($name + "_SH_lToe01J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe01J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe01J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe01J2.radius")`;
		setAttr (($name + "_SH_lToe01J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe01J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe01JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe01JTip.radius")`;
		setAttr (($name + "_SH_lToe01JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe01JTip.radius") $JointRadius;
	}
	
	else
	{
		joint -n ($name + "_SH_lToeJ");
		parentConstraint ($name + "_lToeJ") ($name + "_SH_lToeJ");
		scaleConstraint -mo -skip x ($name + "_lToeJ") ($name + "_SH_lToeJ");
	}
	
	if (`objExists ($name + "_lToe02J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe02J1");
		parentConstraint ($name + "_lToe02J1") ($name + "_SH_lToe02J1");
		scaleConstraint -mo -skip x ($name + "_lToe02J1") ($name + "_SH_lToe02J1");
    	
		joint -n ($name + "_SH_lToe02J2");
		parentConstraint ($name + "_lToe02J2") ($name + "_SH_lToe02J2");
		scaleConstraint -mo -skip x ($name + "_lToe02J2") ($name + "_SH_lToe02J2");
	
		joint -n ($name + "_SH_lToe02J3");
		parentConstraint ($name + "_lToe02J3") ($name + "_SH_lToe02J3");
		scaleConstraint -mo -skip x ($name + "_lToe02J3") ($name + "_SH_lToe02J3");
		
		joint -n ($name + "_SH_lToe02JTip");
		parentConstraint ($name + "_lToe02JTip") ($name + "_SH_lToe02JTip");
		scaleConstraint -mo -skip x ($name + "_lToe02JTip") ($name + "_SH_lToe02JTip");

		
		$JointOrient = `getAttr ($name + "_lToe02J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe02J1.radius")`;
		setAttr (($name + "_SH_lToe02J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe02J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe02J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe02J2.radius")`;
		setAttr (($name + "_SH_lToe02J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe02J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe02J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe02J3.radius")`;
		setAttr (($name + "_SH_lToe02J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe02J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe02JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe02JTip.radius")`;
		setAttr (($name + "_SH_lToe02JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe02JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe03J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe03J1");
		parentConstraint ($name + "_lToe03J1") ($name + "_SH_lToe03J1");
		scaleConstraint -mo -skip x ($name + "_lToe03J1") ($name + "_SH_lToe03J1");
    	
		joint -n ($name + "_SH_lToe03J2");
		parentConstraint ($name + "_lToe03J2") ($name + "_SH_lToe03J2");
		scaleConstraint -mo -skip x ($name + "_lToe03J2") ($name + "_SH_lToe03J2");
	
		joint -n ($name + "_SH_lToe03J3");
		parentConstraint ($name + "_lToe03J3") ($name + "_SH_lToe03J3");
		scaleConstraint -mo -skip x ($name + "_lToe03J3") ($name + "_SH_lToe03J3");
		
		joint -n ($name + "_SH_lToe03JTip");
		parentConstraint ($name + "_lToe03JTip") ($name + "_SH_lToe03JTip");
		scaleConstraint -mo -skip x ($name + "_lToe03JTip") ($name + "_SH_lToe03JTip");

		
		$JointOrient = `getAttr ($name + "_lToe03J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe03J1.radius")`;
		setAttr (($name + "_SH_lToe03J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe03J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe03J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe03J2.radius")`;
		setAttr (($name + "_SH_lToe03J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe03J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe03J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe03J3.radius")`;
		setAttr (($name + "_SH_lToe03J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe03J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe03JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe03JTip.radius")`;
		setAttr (($name + "_SH_lToe03JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe03JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe04J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe04J1");
		parentConstraint ($name + "_lToe04J1") ($name + "_SH_lToe04J1");
		scaleConstraint -mo -skip x ($name + "_lToe04J1") ($name + "_SH_lToe04J1");
    	
		joint -n ($name + "_SH_lToe04J2");
		parentConstraint ($name + "_lToe04J2") ($name + "_SH_lToe04J2");
		scaleConstraint -mo -skip x ($name + "_lToe04J2") ($name + "_SH_lToe04J2");
	
		joint -n ($name + "_SH_lToe04J3");
		parentConstraint ($name + "_lToe04J3") ($name + "_SH_lToe04J3");
		scaleConstraint -mo -skip x ($name + "_lToe04J3") ($name + "_SH_lToe04J3");
		
		joint -n ($name + "_SH_lToe04JTip");
		parentConstraint ($name + "_lToe04JTip") ($name + "_SH_lToe04JTip");
		scaleConstraint -mo -skip x ($name + "_lToe04JTip") ($name + "_SH_lToe04JTip");

		
		$JointOrient = `getAttr ($name + "_lToe04J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe04J1.radius")`;
		setAttr (($name + "_SH_lToe04J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe04J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe04J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe04J2.radius")`;
		setAttr (($name + "_SH_lToe04J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe04J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe04J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe04J3.radius")`;
		setAttr (($name + "_SH_lToe04J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe04J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe04JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe04JTip.radius")`;
		setAttr (($name + "_SH_lToe04JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe04JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe05J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe05J1");
		parentConstraint ($name + "_lToe05J1") ($name + "_SH_lToe05J1");
		scaleConstraint -mo -skip x ($name + "_lToe05J1") ($name + "_SH_lToe05J1");
    	
		joint -n ($name + "_SH_lToe05J2");
		parentConstraint ($name + "_lToe05J2") ($name + "_SH_lToe05J2");
		scaleConstraint -mo -skip x ($name + "_lToe05J2") ($name + "_SH_lToe05J2");
	
		joint -n ($name + "_SH_lToe05J3");
		parentConstraint ($name + "_lToe05J3") ($name + "_SH_lToe05J3");
		scaleConstraint -mo -skip x ($name + "_lToe05J3") ($name + "_SH_lToe05J3");
		
		joint -n ($name + "_SH_lToe05JTip");
		parentConstraint ($name + "_lToe05JTip") ($name + "_SH_lToe05JTip");
		scaleConstraint -mo -skip x ($name + "_lToe05JTip") ($name + "_SH_lToe05JTip");

		
		$JointOrient = `getAttr ($name + "_lToe05J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe05J1.radius")`;
		setAttr (($name + "_SH_lToe05J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe05J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe05J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe05J2.radius")`;
		setAttr (($name + "_SH_lToe05J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe05J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe05J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe05J3.radius")`;
		setAttr (($name + "_SH_lToe05J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe05J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe05JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe05JTip.radius")`;
		setAttr (($name + "_SH_lToe05JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe05JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe06J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe06J1");
		parentConstraint ($name + "_lToe06J1") ($name + "_SH_lToe06J1");
		scaleConstraint -mo -skip x ($name + "_lToe06J1") ($name + "_SH_lToe06J1");
    	
		joint -n ($name + "_SH_lToe06J2");
		parentConstraint ($name + "_lToe06J2") ($name + "_SH_lToe06J2");
		scaleConstraint -mo -skip x ($name + "_lToe06J2") ($name + "_SH_lToe06J2");
	
		joint -n ($name + "_SH_lToe06J3");
		parentConstraint ($name + "_lToe06J3") ($name + "_SH_lToe06J3");
		scaleConstraint -mo -skip x ($name + "_lToe06J3") ($name + "_SH_lToe06J3");
		
		joint -n ($name + "_SH_lToe06JTip");
		parentConstraint ($name + "_lToe06JTip") ($name + "_SH_lToe06JTip");
		scaleConstraint -mo -skip x ($name + "_lToe06JTip") ($name + "_SH_lToe06JTip");

		
		$JointOrient = `getAttr ($name + "_lToe06J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe06J1.radius")`;
		setAttr (($name + "_SH_lToe06J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe06J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe06J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe06J2.radius")`;
		setAttr (($name + "_SH_lToe06J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe06J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe06J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe06J3.radius")`;
		setAttr (($name + "_SH_lToe06J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe06J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe06JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe06JTip.radius")`;
		setAttr (($name + "_SH_lToe06JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe06JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe07J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe07J1");
		parentConstraint ($name + "_lToe07J1") ($name + "_SH_lToe07J1");
		scaleConstraint -mo -skip x ($name + "_lToe07J1") ($name + "_SH_lToe07J1");
    	
		joint -n ($name + "_SH_lToe07J2");
		parentConstraint ($name + "_lToe07J2") ($name + "_SH_lToe07J2");
		scaleConstraint -mo -skip x ($name + "_lToe07J2") ($name + "_SH_lToe07J2");
	
		joint -n ($name + "_SH_lToe07J3");
		parentConstraint ($name + "_lToe07J3") ($name + "_SH_lToe07J3");
		scaleConstraint -mo -skip x ($name + "_lToe07J3") ($name + "_SH_lToe07J3");
		
		joint -n ($name + "_SH_lToe07JTip");
		parentConstraint ($name + "_lToe07JTip") ($name + "_SH_lToe07JTip");
		scaleConstraint -mo -skip x ($name + "_lToe07JTip") ($name + "_SH_lToe07JTip");

		
		$JointOrient = `getAttr ($name + "_lToe07J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe07J1.radius")`;
		setAttr (($name + "_SH_lToe07J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe07J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe07J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe07J2.radius")`;
		setAttr (($name + "_SH_lToe07J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe07J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe07J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe07J3.radius")`;
		setAttr (($name + "_SH_lToe07J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe07J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe07JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe07JTip.radius")`;
		setAttr (($name + "_SH_lToe07JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe07JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe08J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe08J1");
		parentConstraint ($name + "_lToe08J1") ($name + "_SH_lToe08J1");
		scaleConstraint -mo -skip x ($name + "_lToe08J1") ($name + "_SH_lToe08J1");
    	
		joint -n ($name + "_SH_lToe08J2");
		parentConstraint ($name + "_lToe08J2") ($name + "_SH_lToe08J2");
		scaleConstraint -mo -skip x ($name + "_lToe08J2") ($name + "_SH_lToe08J2");
	
		joint -n ($name + "_SH_lToe08J3");
		parentConstraint ($name + "_lToe08J3") ($name + "_SH_lToe08J3");
		scaleConstraint -mo -skip x ($name + "_lToe08J3") ($name + "_SH_lToe08J3");
		
		joint -n ($name + "_SH_lToe08JTip");
		parentConstraint ($name + "_lToe08JTip") ($name + "_SH_lToe08JTip");
		scaleConstraint -mo -skip x ($name + "_lToe08JTip") ($name + "_SH_lToe08JTip");


		
		$JointOrient = `getAttr ($name + "_lToe08J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe08J1.radius")`;
		setAttr (($name + "_SH_lToe08J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe08J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe08J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe08J2.radius")`;
		setAttr (($name + "_SH_lToe08J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe08J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe08J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe08J3.radius")`;
		setAttr (($name + "_SH_lToe08J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe08J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe08JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe08JTip.radius")`;
		setAttr (($name + "_SH_lToe08JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe08JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe09J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe09J1");
		parentConstraint ($name + "_lToe09J1") ($name + "_SH_lToe09J1");
		scaleConstraint -mo -skip x ($name + "_lToe09J1") ($name + "_SH_lToe09J1");
    	
		joint -n ($name + "_SH_lToe09J2");
		parentConstraint ($name + "_lToe09J2") ($name + "_SH_lToe09J2");
		scaleConstraint -mo -skip x ($name + "_lToe09J2") ($name + "_SH_lToe09J2");
	
		joint -n ($name + "_SH_lToe09J3");
		parentConstraint ($name + "_lToe09J3") ($name + "_SH_lToe09J3");
		scaleConstraint -mo -skip x ($name + "_lToe09J3") ($name + "_SH_lToe09J3");
		
		joint -n ($name + "_SH_lToe09JTip");
		parentConstraint ($name + "_lToe09JTip") ($name + "_SH_lToe09JTip");
		scaleConstraint -mo -skip x ($name + "_lToe09JTip") ($name + "_SH_lToe09JTip");

		
		$JointOrient = `getAttr ($name + "_lToe09J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe09J1.radius")`;
		setAttr (($name + "_SH_lToe09J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe09J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe09J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe09J2.radius")`;
		setAttr (($name + "_SH_lToe09J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe09J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe09J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe09J3.radius")`;
		setAttr (($name + "_SH_lToe09J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe09J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe09JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe09JTip.radius")`;
		setAttr (($name + "_SH_lToe09JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe09JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_lToe10J1")`)
	{
		select ($name + "_SH_lBallJ");
		joint -n ($name + "_SH_lToe10J1");
		parentConstraint ($name + "_lToe10J1") ($name + "_SH_lToe10J1");
		scaleConstraint -mo -skip x ($name + "_lToe10J1") ($name + "_SH_lToe10J1");
    	
		joint -n ($name + "_SH_lToe10J2");
		parentConstraint ($name + "_lToe10J2") ($name + "_SH_lToe10J2");
		scaleConstraint -mo -skip x ($name + "_lToe10J2") ($name + "_SH_lToe10J2");
	
		joint -n ($name + "_SH_lToe10J3");
		parentConstraint ($name + "_lToe10J3") ($name + "_SH_lToe10J3");
		scaleConstraint -mo -skip x ($name + "_lToe10J3") ($name + "_SH_lToe10J3");
		
		joint -n ($name + "_SH_lToe10JTip");
		parentConstraint ($name + "_lToe10JTip") ($name + "_SH_lToe10JTip");
		scaleConstraint -mo -skip x ($name + "_lToe10JTip") ($name + "_SH_lToe10JTip");

		
		$JointOrient = `getAttr ($name + "_lToe10J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe10J1.radius")`;
		setAttr (($name + "_SH_lToe10J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe10J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe10J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe10J2.radius")`;
		setAttr (($name + "_SH_lToe10J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe10J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_lToe10J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe10J3.radius")`;
		setAttr (($name + "_SH_lToe10J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe10J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_lToe10JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToe10JTip.radius")`;
		setAttr (($name + "_SH_lToe10JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToe10JTip.radius") $JointRadius;
	}

	
	////////////////////////////
	////////////////////////////
	//RIGHT LEG	
	select ($name + "_SH_ROOTJ");	
	
	if (`objExists ($name + "_rHipCurveJ")`)
	{
		joint -n ($name + "_SH_rHipCurveJ");
		parentConstraint ($name + "_rHipCurveJ") ($name + "_SH_rHipCurveJ");
		scaleConstraint -mo -skip x ($name + "_rHipCurveJ") ($name + "_SH_rHipCurveJ");
		$JointOrient = `getAttr ($name + "_rHipCurveJ.jointOrient")`;
		setAttr (($name + "_SH_rHipCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
    	
		joint -n ($name + "_SH_rUpperLegCurveJ1");
		parentConstraint ($name + "_rUpperLegCurveJ1") ($name + "_SH_rUpperLegCurveJ1");
		scaleConstraint -mo -skip x ($name + "_rUpperLegCurveJ1") ($name + "_SH_rUpperLegCurveJ1");
		$JointOrient = `getAttr ($name + "_rUpperLegCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_rUpperLegCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rUpperLegCurveJ2");
		parentConstraint ($name + "_rUpperLegCurveJ2") ($name + "_SH_rUpperLegCurveJ2");
		scaleConstraint -mo -skip x ($name + "_rUpperLegCurveJ2") ($name + "_SH_rUpperLegCurveJ2");
		$JointOrient = `getAttr ($name + "_rUpperLegCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_rUpperLegCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		
		joint -n ($name + "_SH_rUpperLegCurveJ3");
		parentConstraint ($name + "_rUpperLegCurveJ3") ($name + "_SH_rUpperLegCurveJ3");
		scaleConstraint -mo -skip x ($name + "_rUpperLegCurveJ3") ($name + "_SH_rUpperLegCurveJ3");
		$JointOrient = `getAttr ($name + "_rUpperLegCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_rUpperLegCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_rKneeCurveJ");
		parentConstraint ($name + "_rKneeCurveJ") ($name + "_SH_rKneeCurveJ");
		scaleConstraint -mo -skip x ($name + "_rKneeCurveJ") ($name + "_SH_rKneeCurveJ");
		$JointOrient = `getAttr ($name + "_rKneeCurveJ.jointOrient")`;
		setAttr (($name + "_SH_rKneeCurveJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_rLowerLegCurveJ1");
		parentConstraint ($name + "_rLowerLegCurveJ1") ($name + "_SH_rLowerLegCurveJ1");
		scaleConstraint -mo -skip x ($name + "_rLowerLegCurveJ1") ($name + "_SH_rLowerLegCurveJ1");
		$JointOrient = `getAttr ($name + "_rLowerLegCurveJ1.jointOrient")`;
		setAttr (($name + "_SH_rLowerLegCurveJ1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_rLowerLegCurveJ2");
		parentConstraint ($name + "_rLowerLegCurveJ2") ($name + "_SH_rLowerLegCurveJ2");
		scaleConstraint -mo -skip x ($name + "_rLowerLegCurveJ2") ($name + "_SH_rLowerLegCurveJ2");
		$JointOrient = `getAttr ($name + "_rLowerLegCurveJ2.jointOrient")`;
		setAttr (($name + "_SH_rLowerLegCurveJ2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

		joint -n ($name + "_SH_rLowerLegCurveJ3");
		parentConstraint ($name + "_rLowerLegCurveJ3") ($name + "_SH_rLowerLegCurveJ3");
		scaleConstraint -mo -skip x ($name + "_rLowerLegCurveJ3") ($name + "_SH_rLowerLegCurveJ3");
		$JointOrient = `getAttr ($name + "_rLowerLegCurveJ3.jointOrient")`;
		setAttr (($name + "_SH_rLowerLegCurveJ3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}

	else
	{
		joint -n ($name + "_SH_rHipJ");
		parentConstraint ($name + "_rHipJ") ($name + "_SH_rHipJ");
		scaleConstraint -mo -skip x ($name + "_rHipJ") ($name + "_SH_rHipJ");
		$JointOrient = `getAttr ($name + "_rHipJ.jointOrient")`;
		setAttr (($name + "_SH_rHipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
    	
		joint -n ($name + "_SH_rKneeJ");
		parentConstraint ($name + "_rKneeJ") ($name + "_SH_rKneeJ");
		scaleConstraint -mo -skip x ($name + "_rKneeJ") ($name + "_SH_rKneeJ");
		$JointOrient = `getAttr ($name + "_rKneeJ.jointOrient")`;
		setAttr (($name + "_SH_rKneeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	}
	
	joint -n ($name + "_SH_rAnkleJ");
	parentConstraint ($name + "_rAnkleJ") ($name + "_SH_rAnkleJ");
	scaleConstraint -mo -skip x ($name + "_rAnkleJ") ($name + "_SH_rAnkleJ");
	$JointOrient = `getAttr ($name + "_rAnkleJ.jointOrient")`;
	setAttr (($name + "_SH_rAnkleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	joint -n ($name + "_SH_rBallJ");
	parentConstraint ($name + "_rBallJ") ($name + "_SH_rBallJ");
	scaleConstraint -mo -skip x ($name + "_rBallJ") ($name + "_SH_rBallJ");
	$JointOrient = `getAttr ($name + "_rBallJ.jointOrient")`;
	setAttr (($name + "_SH_rBallJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);

	
	//RIGHT TOES
	if (`objExists ($name + "_rToe01J1")`)
	{
		joint -n ($name + "_SH_rToe01J1");
		parentConstraint ($name + "_rToe01J1") ($name + "_SH_rToe01J1");
		scaleConstraint -mo -skip x ($name + "_rToe01J1") ($name + "_SH_rToe01J1");
    	
		joint -n ($name + "_SH_rToe01J2");
		parentConstraint ($name + "_rToe01J2") ($name + "_SH_rToe01J2");
		scaleConstraint -mo -skip x ($name + "_rToe01J2") ($name + "_SH_rToe01J2");
	
		
		joint -n ($name + "_SH_rToe01JTip");
		parentConstraint ($name + "_rToe01JTip") ($name + "_SH_rToe01JTip");
		scaleConstraint -mo -skip x ($name + "_rToe01JTip") ($name + "_SH_rToe01JTip");

		$JointOrient = `getAttr ($name + "_rToe01J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe01J1.radius")`;
		setAttr (($name + "_SH_rToe01J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe01J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe01J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe01J2.radius")`;
		setAttr (($name + "_SH_rToe01J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe01J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe01JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe01JTip.radius")`;
		setAttr (($name + "_SH_rToe01JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe01JTip.radius") $JointRadius;
	}
	
	else
	{
		joint -n ($name + "_SH_rToeJ");
		parentConstraint ($name + "_rToeJ") ($name + "_SH_rToeJ");
		scaleConstraint -mo -skip x ($name + "_rToeJ") ($name + "_SH_rToeJ");
	}
	
	if (`objExists ($name + "_rToe02J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe02J1");
		parentConstraint ($name + "_rToe02J1") ($name + "_SH_rToe02J1");
		scaleConstraint -mo -skip x ($name + "_rToe02J1") ($name + "_SH_rToe02J1");
    	
		joint -n ($name + "_SH_rToe02J2");
		parentConstraint ($name + "_rToe02J2") ($name + "_SH_rToe02J2");
		scaleConstraint -mo -skip x ($name + "_rToe02J2") ($name + "_SH_rToe02J2");
	
		joint -n ($name + "_SH_rToe02J3");
		parentConstraint ($name + "_rToe02J3") ($name + "_SH_rToe02J3");
		scaleConstraint -mo -skip x ($name + "_rToe02J3") ($name + "_SH_rToe02J3");
		
		joint -n ($name + "_SH_rToe02JTip");
		parentConstraint ($name + "_rToe02JTip") ($name + "_SH_rToe02JTip");
		scaleConstraint -mo -skip x ($name + "_rToe02JTip") ($name + "_SH_rToe02JTip");

		
		$JointOrient = `getAttr ($name + "_rToe02J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe02J1.radius")`;
		setAttr (($name + "_SH_rToe02J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe02J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe02J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe02J2.radius")`;
		setAttr (($name + "_SH_rToe02J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe02J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe02J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe02J3.radius")`;
		setAttr (($name + "_SH_rToe02J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe02J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe02JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe02JTip.radius")`;
		setAttr (($name + "_SH_rToe02JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe02JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe03J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe03J1");
		parentConstraint ($name + "_rToe03J1") ($name + "_SH_rToe03J1");
		scaleConstraint -mo -skip x ($name + "_rToe03J1") ($name + "_SH_rToe03J1");
    	
		joint -n ($name + "_SH_rToe03J2");
		parentConstraint ($name + "_rToe03J2") ($name + "_SH_rToe03J2");
		scaleConstraint -mo -skip x ($name + "_rToe03J2") ($name + "_SH_rToe03J2");
	
		joint -n ($name + "_SH_rToe03J3");
		parentConstraint ($name + "_rToe03J3") ($name + "_SH_rToe03J3");
		scaleConstraint -mo -skip x ($name + "_rToe03J3") ($name + "_SH_rToe03J3");
		
		joint -n ($name + "_SH_rToe03JTip");
		parentConstraint ($name + "_rToe03JTip") ($name + "_SH_rToe03JTip");
		scaleConstraint -mo -skip x ($name + "_rToe03JTip") ($name + "_SH_rToe03JTip");

		
		$JointOrient = `getAttr ($name + "_rToe03J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe03J1.radius")`;
		setAttr (($name + "_SH_rToe03J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe03J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe03J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe03J2.radius")`;
		setAttr (($name + "_SH_rToe03J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe03J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe03J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe03J3.radius")`;
		setAttr (($name + "_SH_rToe03J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe03J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe03JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe03JTip.radius")`;
		setAttr (($name + "_SH_rToe03JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe03JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe04J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe04J1");
		parentConstraint ($name + "_rToe04J1") ($name + "_SH_rToe04J1");
		scaleConstraint -mo -skip x ($name + "_rToe04J1") ($name + "_SH_rToe04J1");
    	
		joint -n ($name + "_SH_rToe04J2");
		parentConstraint ($name + "_rToe04J2") ($name + "_SH_rToe04J2");
		scaleConstraint -mo -skip x ($name + "_rToe04J2") ($name + "_SH_rToe04J2");
	
		joint -n ($name + "_SH_rToe04J3");
		parentConstraint ($name + "_rToe04J3") ($name + "_SH_rToe04J3");
		scaleConstraint -mo -skip x ($name + "_rToe04J3") ($name + "_SH_rToe04J3");
		
		joint -n ($name + "_SH_rToe04JTip");
		parentConstraint ($name + "_rToe04JTip") ($name + "_SH_rToe04JTip");
		scaleConstraint -mo -skip x ($name + "_rToe04JTip") ($name + "_SH_rToe04JTip");

		
		$JointOrient = `getAttr ($name + "_rToe04J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe04J1.radius")`;
		setAttr (($name + "_SH_rToe04J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe04J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe04J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe04J2.radius")`;
		setAttr (($name + "_SH_rToe04J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe04J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe04J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe04J3.radius")`;
		setAttr (($name + "_SH_rToe04J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe04J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe04JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe04JTip.radius")`;
		setAttr (($name + "_SH_rToe04JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe04JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe05J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe05J1");
		parentConstraint ($name + "_rToe05J1") ($name + "_SH_rToe05J1");
		scaleConstraint -mo -skip x ($name + "_rToe05J1") ($name + "_SH_rToe05J1");
    	
		joint -n ($name + "_SH_rToe05J2");
		parentConstraint ($name + "_rToe05J2") ($name + "_SH_rToe05J2");
		scaleConstraint -mo -skip x ($name + "_rToe05J2") ($name + "_SH_rToe05J2");
	
		joint -n ($name + "_SH_rToe05J3");
		parentConstraint ($name + "_rToe05J3") ($name + "_SH_rToe05J3");
		scaleConstraint -mo -skip x ($name + "_rToe05J3") ($name + "_SH_rToe05J3");
		
		joint -n ($name + "_SH_rToe05JTip");
		parentConstraint ($name + "_rToe05JTip") ($name + "_SH_rToe05JTip");
		scaleConstraint -mo -skip x ($name + "_rToe05JTip") ($name + "_SH_rToe05JTip");

		
		$JointOrient = `getAttr ($name + "_rToe05J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe05J1.radius")`;
		setAttr (($name + "_SH_rToe05J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe05J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe05J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe05J2.radius")`;
		setAttr (($name + "_SH_rToe05J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe05J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe05J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe05J3.radius")`;
		setAttr (($name + "_SH_rToe05J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe05J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe05JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe05JTip.radius")`;
		setAttr (($name + "_SH_rToe05JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe05JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe06J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe06J1");
		parentConstraint ($name + "_rToe06J1") ($name + "_SH_rToe06J1");
		scaleConstraint -mo -skip x ($name + "_rToe06J1") ($name + "_SH_rToe06J1");
    	
		joint -n ($name + "_SH_rToe06J2");
		parentConstraint ($name + "_rToe06J2") ($name + "_SH_rToe06J2");
		scaleConstraint -mo -skip x ($name + "_rToe06J2") ($name + "_SH_rToe06J2");
	
		joint -n ($name + "_SH_rToe06J3");
		parentConstraint ($name + "_rToe06J3") ($name + "_SH_rToe06J3");
		scaleConstraint -mo -skip x ($name + "_rToe06J3") ($name + "_SH_rToe06J3");
		
		joint -n ($name + "_SH_rToe06JTip");
		parentConstraint ($name + "_rToe06JTip") ($name + "_SH_rToe06JTip");
		scaleConstraint -mo -skip x ($name + "_rToe06JTip") ($name + "_SH_rToe06JTip");

		
		$JointOrient = `getAttr ($name + "_rToe06J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe06J1.radius")`;
		setAttr (($name + "_SH_rToe06J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe06J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe06J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe06J2.radius")`;
		setAttr (($name + "_SH_rToe06J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe06J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe06J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe06J3.radius")`;
		setAttr (($name + "_SH_rToe06J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe06J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe06JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe06JTip.radius")`;
		setAttr (($name + "_SH_rToe06JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe06JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe07J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe07J1");
		parentConstraint ($name + "_rToe07J1") ($name + "_SH_rToe07J1");
		scaleConstraint -mo -skip x ($name + "_rToe07J1") ($name + "_SH_rToe07J1");
    	
		joint -n ($name + "_SH_rToe07J2");
		parentConstraint ($name + "_rToe07J2") ($name + "_SH_rToe07J2");
		scaleConstraint -mo -skip x ($name + "_rToe07J2") ($name + "_SH_rToe07J2");
	
		joint -n ($name + "_SH_rToe07J3");
		parentConstraint ($name + "_rToe07J3") ($name + "_SH_rToe07J3");
		scaleConstraint -mo -skip x ($name + "_rToe07J3") ($name + "_SH_rToe07J3");
		
		joint -n ($name + "_SH_rToe07JTip");
		parentConstraint ($name + "_rToe07JTip") ($name + "_SH_rToe07JTip");
		scaleConstraint -mo -skip x ($name + "_rToe07JTip") ($name + "_SH_rToe07JTip");

		
		$JointOrient = `getAttr ($name + "_rToe07J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe07J1.radius")`;
		setAttr (($name + "_SH_rToe07J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe07J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe07J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe07J2.radius")`;
		setAttr (($name + "_SH_rToe07J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe07J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe07J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe07J3.radius")`;
		setAttr (($name + "_SH_rToe07J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe07J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe07JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe07JTip.radius")`;
		setAttr (($name + "_SH_rToe07JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe07JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe08J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe08J1");
		parentConstraint ($name + "_rToe08J1") ($name + "_SH_rToe08J1");
		scaleConstraint -mo -skip x ($name + "_rToe08J1") ($name + "_SH_rToe08J1");
    	
		joint -n ($name + "_SH_rToe08J2");
		parentConstraint ($name + "_rToe08J2") ($name + "_SH_rToe08J2");
		scaleConstraint -mo -skip x ($name + "_rToe08J2") ($name + "_SH_rToe08J2");
	
		joint -n ($name + "_SH_rToe08J3");
		parentConstraint ($name + "_rToe08J3") ($name + "_SH_rToe08J3");
		scaleConstraint -mo -skip x ($name + "_rToe08J3") ($name + "_SH_rToe08J3");
		
		joint -n ($name + "_SH_rToe08JTip");
		parentConstraint ($name + "_rToe08JTip") ($name + "_SH_rToe08JTip");
		scaleConstraint -mo -skip x ($name + "_rToe08JTip") ($name + "_SH_rToe08JTip");

		
		$JointOrient = `getAttr ($name + "_rToe08J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe08J1.radius")`;
		setAttr (($name + "_SH_rToe08J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe08J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe08J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe08J2.radius")`;
		setAttr (($name + "_SH_rToe08J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe08J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe08J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe08J3.radius")`;
		setAttr (($name + "_SH_rToe08J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe08J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe08JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe08JTip.radius")`;
		setAttr (($name + "_SH_rToe08JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe08JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe09J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe09J1");
		parentConstraint ($name + "_rToe09J1") ($name + "_SH_rToe09J1");
		scaleConstraint -mo -skip x ($name + "_rToe09J1") ($name + "_SH_rToe09J1");
    	
		joint -n ($name + "_SH_rToe09J2");
		parentConstraint ($name + "_rToe09J2") ($name + "_SH_rToe09J2");
		scaleConstraint -mo -skip x ($name + "_rToe09J2") ($name + "_SH_rToe09J2");
	
		joint -n ($name + "_SH_rToe09J3");
		parentConstraint ($name + "_rToe09J3") ($name + "_SH_rToe09J3");
		scaleConstraint -mo -skip x ($name + "_rToe09J3") ($name + "_SH_rToe09J3");
		
		joint -n ($name + "_SH_rToe09JTip");
		parentConstraint ($name + "_rToe09JTip") ($name + "_SH_rToe09JTip");
		scaleConstraint -mo -skip x ($name + "_rToe09JTip") ($name + "_SH_rToe09JTip");

		
		$JointOrient = `getAttr ($name + "_rToe09J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe09J1.radius")`;
		setAttr (($name + "_SH_rToe09J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe09J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe09J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe09J2.radius")`;
		setAttr (($name + "_SH_rToe09J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe09J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe09J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe09J3.radius")`;
		setAttr (($name + "_SH_rToe09J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe09J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe09JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe09JTip.radius")`;
		setAttr (($name + "_SH_rToe09JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe09JTip.radius") $JointRadius;
	}

	if (`objExists ($name + "_rToe10J1")`)
	{
		select ($name + "_SH_rBallJ");
		joint -n ($name + "_SH_rToe10J1");
		parentConstraint ($name + "_rToe10J1") ($name + "_SH_rToe10J1");
		scaleConstraint -mo -skip x ($name + "_rToe10J1") ($name + "_SH_rToe10J1");
    	
		joint -n ($name + "_SH_rToe10J2");
		parentConstraint ($name + "_rToe10J2") ($name + "_SH_rToe10J2");
		scaleConstraint -mo -skip x ($name + "_rToe10J2") ($name + "_SH_rToe10J2");
	
		joint -n ($name + "_SH_rToe10J3");
		parentConstraint ($name + "_rToe10J3") ($name + "_SH_rToe10J3");
		scaleConstraint -mo -skip x ($name + "_rToe10J3") ($name + "_SH_rToe10J3");
		
		joint -n ($name + "_SH_rToe10JTip");
		parentConstraint ($name + "_rToe10JTip") ($name + "_SH_rToe10JTip");
		scaleConstraint -mo -skip x ($name + "_rToe10JTip") ($name + "_SH_rToe10JTip");

		
		$JointOrient = `getAttr ($name + "_rToe10J1.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe10J1.radius")`;
		setAttr (($name + "_SH_rToe10J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe10J1.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe10J2.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe10J2.radius")`;
		setAttr (($name + "_SH_rToe10J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe10J2.radius") $JointRadius;
		
		$JointOrient = `getAttr ($name + "_rToe10J3.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe10J3.radius")`;
		setAttr (($name + "_SH_rToe10J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe10J3.radius") $JointRadius;

		$JointOrient = `getAttr ($name + "_rToe10JTip.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToe10JTip.radius")`;
		setAttr (($name + "_SH_rToe10JTip.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToe10JTip.radius") $JointRadius;
	}
	
	
	//ORIENTS AND RADIUS
	$JointOrient = `getAttr ($name + "_ROOTJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_ROOTJ.radius")`;
	setAttr (($name + "_SH_ROOTJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_ROOTJ.radius") $JointRadius;
	
	select ($name + "_Spine??J");
	$spineJoints = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $spineJoints)
	{
		$JointOrient = `getAttr ($name + "_Spine0" + $i + "J.jointOrient")`;
		$JointRadius = `getAttr ($name + "_Spine0" + $i + "J.radius")`;
		setAttr (($name + "_SH_Spine0" + $i + "J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_Spine0" + $i + "J.radius") $JointRadius;
	}

	if (`objExists ($name + "_Spine10J")`)
	{
		$JointOrient = `getAttr ($name + "_Spine10J.jointOrient")`;
		$JointRadius = `getAttr ($name + "_Spine10J.radius")`;
		setAttr (($name + "_SH_Spine10J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_Spine10J.radius") $JointRadius;
	}

	$JointOrient = `getAttr ($name + "_SpineTopJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_SpineTopJ.radius")`;
	setAttr (($name + "_SH_SpineTopJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_SpineTopJ.radius") $JointRadius;

	select ($name + "_Neck??J");
	$neckJoints = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $neckJoints)
	{
		$JointOrient = `getAttr ($name + "_Neck0" + $i + "J.jointOrient")`;
		$JointRadius = `getAttr ($name + "_Neck0" + $i + "J.radius")`;
		setAttr (($name + "_SH_Neck0" + $i + "J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_Neck0" + $i + "J.radius") $JointRadius;
	}
	
	if (`objExists ($name + "_Neck10J")`)
	{
		$JointOrient = `getAttr ($name + "_Neck10J.jointOrient")`;
		$JointRadius = `getAttr ($name + "_Neck10J.radius")`;
		setAttr (($name + "_SH_Neck10J.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_Neck10J.radius") $JointRadius;
	}
	
	$JointOrient = `getAttr ($name + "_HeadJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_HeadJ.radius")`;
	setAttr (($name + "_SH_HeadJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_HeadJ.radius") $JointRadius;

	$JointOrient = `getAttr ($name + "_HeadTipJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_HeadTipJ.radius")`;
	setAttr (($name + "_SH_HeadTipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_HeadTipJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_JawJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_JawJ.radius")`;
	setAttr (($name + "_SH_JawJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_JawJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_JawTipJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_JawTipJ.radius")`;
	setAttr (($name + "_SH_JawTipJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_JawTipJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lEyeJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lEyeJ.radius")`;
	setAttr (($name + "_SH_lEyeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lEyeJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rEyeJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rEyeJ.radius")`;
	setAttr (($name + "_SH_rEyeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rEyeJ.radius") $JointRadius;

	//LEFT ARM	
	$JointOrient = `getAttr ($name + "_lClavicleJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lClavicleJ.radius")`;
	setAttr (($name + "_SH_lClavicleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lClavicleJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lWristJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lWristJ.radius")`;
	setAttr (($name + "_SH_lWristJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lWristJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lPalmJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lPalmJ.radius")`;
	setAttr (($name + "_SH_lPalmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lPalmJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lFinger1J1.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lFinger1J1.radius")`;
	setAttr (($name + "_SH_lFinger1J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lFinger1J1.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lFinger1J2.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lFinger1J2.radius")`;
	setAttr (($name + "_SH_lFinger1J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lFinger1J2.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lFinger1J3.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lFinger1J3.radius")`;
	setAttr (($name + "_SH_lFinger1J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lFinger1J3.radius") $JointRadius;
	
	//LEFT FOOT
	$JointOrient = `getAttr ($name + "_lAnkleJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lAnkleJ.radius")`;
	setAttr (($name + "_SH_lAnkleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lAnkleJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_lBallJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_lBallJ.radius")`;
	setAttr (($name + "_SH_lBallJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_lBallJ.radius") $JointRadius;
	
	if (!`objExists ($name + "_lToe01J1")`)
	{
		$JointOrient = `getAttr ($name + "_lToeJ.jointOrient")`;
		$JointRadius = `getAttr ($name + "_lToeJ.radius")`;
		setAttr (($name + "_SH_lToeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_lToeJ.radius") $JointRadius;
	}
	
	//RIGHT ARM	
	$JointOrient = `getAttr ($name + "_rClavicleJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rClavicleJ.radius")`;
	setAttr (($name + "_SH_rClavicleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rClavicleJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rWristJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rWristJ.radius")`;
	setAttr (($name + "_SH_rWristJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rWristJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rPalmJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rPalmJ.radius")`;
	setAttr (($name + "_SH_rPalmJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rPalmJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rFinger1J1.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rFinger1J1.radius")`;
	setAttr (($name + "_SH_rFinger1J1.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rFinger1J1.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rFinger1J2.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rFinger1J2.radius")`;
	setAttr (($name + "_SH_rFinger1J2.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rFinger1J2.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rFinger1J3.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rFinger1J3.radius")`;
	setAttr (($name + "_SH_rFinger1J3.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rFinger1J3.radius") $JointRadius;
	

	$JointOrient = `getAttr ($name + "_ROOTJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_ROOTJ.radius")`;
	setAttr (($name + "_SH_ROOTJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_ROOTJ.radius") $JointRadius;


	//RIGHT FOOT
	$JointOrient = `getAttr ($name + "_rAnkleJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rAnkleJ.radius")`;
	setAttr (($name + "_SH_rAnkleJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rAnkleJ.radius") $JointRadius;
	
	$JointOrient = `getAttr ($name + "_rBallJ.jointOrient")`;
	$JointRadius = `getAttr ($name + "_rBallJ.radius")`;
	setAttr (($name + "_SH_rBallJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
	setAttr ($name + "_SH_rBallJ.radius") $JointRadius;
	
	if (!`objExists ($name + "_rToe01J1")`)
	{	
		$JointOrient = `getAttr ($name + "_rToeJ.jointOrient")`;
		$JointRadius = `getAttr ($name + "_rToeJ.radius")`;
		setAttr (($name + "_SH_rToeJ.jointOrient"), $JointOrient[0], $JointOrient[1], $JointOrient[2]);
		setAttr ($name + "_SH_rToeJ.radius") $JointRadius;
	}

	parent ($name + "_SH_ROOTJ") ($name + "_MainC");
		
	//SET PARENT CONSTRAINTS TO SHORTEST
	select  "*_SH_*_parentConstraint1";
	string $SH_Constraints[] = `ls -sl`;
	string $currentConstraint;
	for ($currentConstraint in $SH_Constraints)
	{
		setAttr ($currentConstraint + ".interpType") 2;
	}
	
	//ORIENTS
	select -hi ($name + "_SH_ROOTJ");
	$singleHiJ = `ls -sl -type "joint"`;
	string $each;
	for ($each in $singleHiJ)
	{
		setAttr (($each + ".jointOrient"), 0,0,0); 
		$jointOrient = `getAttr ($each + ".rotate")`;
		setAttr (($each + ".jointOrient"), $jointOrient[0], $jointOrient[1], $jointOrient[2]);
	}
	
	
	//LAYER
	select ($name + "_SH_ROOTJ");
	createDisplayLayer -n ($name + "_Joints_SH_Layer") -number 1 -nr;	
	select -cl;
}

global proc RRA_SingleHierarchyInterface()
{
	//CHARACTER NAME
	string $name = `textField -q -text RRA_CharName`;


	string $returnVal_SH_Generate = `confirmDialog
	-title "Do you wish to Generate a Single Hierarchy Joint Set?"
		-message "A single hierarchy is only recommended for use in a game environment.\n-Head and hand scale do not work properly.\n-Joints do not stretch, but will maintain volume. "
		-button "No"
		-button "Yes"
		-defaultButton "No"`;
	
	if ($returnVal_SH_Generate == "Yes") 
	{
		print ("\nBUILDING \"" + $name + "\" SINGLE HIERARCHY...\n");
		RRA_SingleHierarchy;
		print ("\nSINGLE HIERARCHY COMPLETED!\n");

	}
}



//////////////////////////////////////////////////////////////////////////////
///////////////////////////////    TOON ARM    ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
global proc RRA_CreateToonArms()
{
	string $name = `textField -q -text RRA_CharName`;

	string $currentUnit = `currentUnit -query -linear`;
	if ($currentUnit != "cm")
	{
		changeLinearUnit "centimeter";
	}
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////LEFT ARM////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	//CREATE LEFT CURVES
	$lWristLoc = `xform -q -ws -rp ($name + "_lWristJ")`;
	$lElbowLoc = `xform -q -ws -rp ($name + "_lElbowJ")`;
	$lShoulderLoc = `xform -q -ws -rp ($name + "_lShoulderJ")`;
	
	curve -n ($name + "_lLowerArmCurve") -d 1 -p $lElbowLoc[0] $lElbowLoc[1] $lElbowLoc[2]
	-p $lWristLoc[0] $lWristLoc[1] $lWristLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lLowerArmCurveShape");
	
	curve -n ($name + "_lUpperArmCurve") -d 1 -p $lShoulderLoc[0] $lShoulderLoc[1] $lShoulderLoc[2]
	-p $lElbowLoc[0] $lElbowLoc[1] $lElbowLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "__lUpperArmCurveShape");
	
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_lLowerArmCurve");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_lUpperArmCurve");
	
	curve -n ($name + "_lLowerArmCurveGuide") -d 1 -p $lElbowLoc[0] $lElbowLoc[1] $lElbowLoc[2]
	-p $lWristLoc[0] $lWristLoc[1] $lWristLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lLowerArmCurveGuideShape");
	
	curve -n ($name + "_lUpperArmCurveGuide") -d 1 -p $lShoulderLoc[0] $lShoulderLoc[1] $lShoulderLoc[2]
	-p $lElbowLoc[0] $lElbowLoc[1] $lElbowLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lUpperArmCurveGuideShape");
	
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_lLowerArmCurveGuide");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_lUpperArmCurveGuide");
	delete -ch ($name + "_lLowerArmCurve") ($name + "_lUpperArmCurve") ($name + "_lLowerArmCurveGuide") ($name + "_lUpperArmCurveGuide");
	
	//CREATE LEFT LOCATOR FOR UP AXIS
	spaceLocator -n ($name + "_lArmUpLctr");
	group -n ($name + "_lArmUpLctrG") ($name + "_lArmUpLctr");
	delete `parentConstraint ($name + "_lElbowIKtoFKAimLctr") ($name + "_lArmUpLctrG")`;
	delete `orientConstraint ($name + "_lElbowFKC") ($name + "_lArmUpLctrG")`;

	parent ($name + "_lArmUpLctrG") ($name + "_MainC");
	parentConstraint -mo ($name + "_lShoulderJ") ($name + "_lArmUpLctrG");
	orientConstraint -mo -skip x -skip z ($name + "_lElbowJ") ($name + "_lShoulderJ") ($name + "_lArmUpLctr");
	pointConstraint -mo ($name + "_lWristJ") ($name + "_lShoulderJ") ($name + "_lArmUpLctr");
	setAttr ($name + "_lArmUpLctr_orientConstraint1.interpType") 2;
	
	////////////////////////////////////LOWER ARM////////////////////////////////////
	//LEFT LOWER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_lElbowCurveLctr");
	parentConstraint ($name + "_lWristFKC") ($name + "_lElbowCurveLctr");
	delete ($name + "_lElbowCurveLctr_parentConstraint1");
	parent ($name + "_lElbowCurveLctr") ($name + "_lWristFKC");                                
	$lLowerArmLength = `getAttr ($name + "_lWristJProxy.tx")`;
	move -r -os ($lLowerArmLength *-1) 0 0 ($name + "_lElbowCurveLctr");
	parent -w ($name + "_lElbowCurveLctr");
	parentConstraint -mo ($name + "_lWristJ") ($name + "_lElbowCurveLctr");
	
	//LEFT LOWER CURVE CLUSTERS
	select ($name + "_lLowerArmCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerArmTopClstr");
	group -em -n ($name + "_lLowerArmTopClstrG");
	pointConstraint ($name + "_lElbowJ") ($name + "_lLowerArmTopClstrG");
	parent ($name + "_lLowerArmTopClstrG") ($name + "_lElbowJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerArmTopClstrG");
	parent -w ($name + "_lLowerArmTopClstrG");
	parent ($name + "_lLowerArmTopClstr") ($name + "_lLowerArmTopClstrG");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lArmUpLctr") ($name + "_lLowerArmTopClstrG");
	
	select ($name + "_lLowerArmCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerArmBtmClstr");
	group -em -n ($name + "_lLowerArmBtmClstrG");
	pointConstraint ($name + "_lWristJ") ($name + "_lLowerArmBtmClstrG");
	parent ($name + "_lLowerArmBtmClstrG") ($name + "_lElbowJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerArmBtmClstrG");
	parent ($name + "_lLowerArmBtmClstr") ($name + "_lLowerArmBtmClstrG");
	parent -w ($name + "_lLowerArmBtmClstrG");
	aimConstraint -aimVector -1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowCurveLctr") ($name + "_lElbowCurveLctr") ($name + "_lLowerArmBtmClstrG");
	
	select ($name + "_lLowerArmCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerArmMidClstr");
	
	//LEFT LOWER GUIDE CURVE CLUSTERS
	select ($name + "_lLowerArmCurveGuide.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerArmTopGuideClstr");
	group -em -n ($name + "_lLowerArmTopGuideClstrG");
	pointConstraint ($name + "_lElbowJ") ($name + "_lLowerArmTopGuideClstrG");
	parent ($name + "_lLowerArmTopGuideClstrG") ($name + "_lElbowJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerArmTopGuideClstrG");
	parent -w ($name + "_lLowerArmTopGuideClstrG");
	parent ($name + "_lLowerArmTopGuideClstr") ($name + "_lLowerArmTopGuideClstrG");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lArmUpLctr") ($name + "_lLowerArmTopGuideClstrG"); 
	
	select ($name + "_lLowerArmCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerArmBtmGuideClstr");
	group -em -n ($name + "_lLowerArmBtmGuideClstrG");
	pointConstraint ($name + "_lWristJ") ($name + "_lLowerArmBtmGuideClstrG");
	parent ($name + "_lLowerArmBtmGuideClstrG") ($name + "_lElbowJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerArmBtmGuideClstrG");
	parent ($name + "_lLowerArmBtmGuideClstr") ($name + "_lLowerArmBtmGuideClstrG");
	parent -w ($name + "_lLowerArmBtmGuideClstrG");
	aimConstraint -aimVector -1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowCurveLctr") ($name + "_lElbowCurveLctr") ($name + "_lLowerArmBtmGuideClstrG");
	
	////////////////////////////////////UPPER ARM////////////////////////////////////
	//LEFT UPPER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_lShoulderCurveLctr");
	parentConstraint ($name + "_lElbowFKC") ($name + "_lShoulderCurveLctr");
	delete ($name + "_lShoulderCurveLctr_parentConstraint1");
	parent ($name + "_lShoulderCurveLctr") ($name + "_lElbowFKC");
	$lUpperArmLength = `getAttr ($name + "_lElbowJ.tx")`;
	move -r -os ($lUpperArmLength *-1) 0 0 ($name + "_lShoulderCurveLctr");
	parent -w ($name + "_lShoulderCurveLctr");
	parentConstraint -mo ($name + "_lElbowJ") ($name + "_lShoulderCurveLctr");
	
	spaceLocator -n ($name + "_lElbowTopCurveLctr");
	parentConstraint ($name + "_lClavicleC") ($name + "_lElbowTopCurveLctr");
	delete ($name + "_lElbowTopCurveLctr_parentConstraint1");
	parent ($name + "_lElbowTopCurveLctr") ($name + "_lClavicleC");
	pointConstraint ($name + "_lShoulderFKC") ($name + "_lElbowTopCurveLctr");
	delete ($name + "_lElbowTopCurveLctr_pointConstraint1");
	move -r -os $lUpperArmLength 0 0 ($name + "_lElbowTopCurveLctr");
	parent -w ($name + "_lElbowTopCurveLctr");
	parentConstraint -mo ($name + "_lClavicleC") ($name + "_lElbowTopCurveLctr");
	
	//LEFT UPPER CURVE CLUSTERS
	select ($name + "_lUpperArmCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperArmTopClstr");
	group -em -n ($name + "_lUpperArmTopClstrG");
	pointConstraint ($name + "_lShoulderJ") ($name + "_lUpperArmTopClstrG");
	parent ($name + "_lUpperArmTopClstrG") ($name + "_lShoulderJ");
	makeIdentity -apply false -r 1 ($name + "_lUpperArmTopClstrG");
	parent -w ($name + "_lUpperArmTopClstrG");
	parent ($name + "_lUpperArmTopClstr") ($name + "_lUpperArmTopClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderCurveLctr") ($name + "_lElbowTopCurveLctr") ($name + "_lUpperArmTopClstrG");
	
	select ($name + "_lUpperArmCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperArmBtmClstr");
	group -em -n ($name + "_lUpperArmBtmClstrG");
	pointConstraint ($name + "_lElbowJ") ($name + "_lUpperArmBtmClstrG");
	delete `orientConstraint ($name + "_lShoulderFKC") ($name + "_lUpperArmBtmClstrG")`;
	parent ($name + "_lUpperArmBtmClstr") ($name + "_lUpperArmBtmClstrG");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lArmUpLctr") ($name + "_lArmUpLctr") ($name + "_lUpperArmBtmClstrG"); 
	
	select ($name + "_lUpperArmCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperArmMidClstr");
	
	//LEFT UPPER GUIDE CURVE CLUSTERS
	select ($name + "_lUpperArmCurveGuide.cv[0:1]") ;                            
	newCluster " -envelope 1";
	rename ($name + "_lUpperArmTopGuideClstr");
	group -em -n ($name + "_lUpperArmTopGuideClstrG");
	pointConstraint ($name + "_lShoulderJ") ($name + "_lUpperArmTopGuideClstrG");
	parent ($name + "_lUpperArmTopGuideClstrG") ($name + "_lShoulderJ");
	makeIdentity -apply false -r 1 ($name + "_lUpperArmTopGuideClstrG");
	parent -w ($name + "_lUpperArmTopGuideClstrG");
	parent ($name + "_lUpperArmTopGuideClstr") ($name + "_lUpperArmTopGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderCurveLctr") ($name + "_lElbowTopCurveLctr") ($name + "_lUpperArmTopGuideClstrG");
	
	select ($name + "_lUpperArmCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperArmBtmGuideClstr");
	group -em -n ($name + "_lUpperArmBtmGuideClstrG");
	pointConstraint ($name + "_lElbowJ") ($name + "_lUpperArmBtmGuideClstrG");
	delete `orientConstraint ($name + "_lShoulderFKC") ($name + "_lUpperArmBtmGuideClstrG")`;
	parent ($name + "_lUpperArmBtmGuideClstr") ($name + "_lUpperArmBtmGuideClstrG");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lArmUpLctr") ($name + "_lArmUpLctr") ($name + "_lUpperArmBtmGuideClstrG"); 
	
	////////////////////////////////////////////////////////////////////////////////
	///////////////////////////CREATE LEFT CURVE CONTROLS///////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	
	nurbsSquare -n ($name + "_lLowerArmCurveC") -c 0 0 0 -nr 0 1 0 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 1 ;
	setAttr ($name + "_lLowerArmCurveC.rotateOrder") 1;
	rename ("right" + $name +  "_lLowerArmCurveC") ($name + "_right" + "_lLowerArmCurveC");
	rename ("left" + $name +  "_lLowerArmCurveC") ($name + "_left" + "_lLowerArmCurveC");
	rename ("top" + $name +  "_lLowerArmCurveC") ($name + "_top" + "_lLowerArmCurveC");
	rename ("bottom" + $name +  "_lLowerArmCurveC") ($name + "_bottom" + "_lLowerArmCurveC");
	
	parent -r -s ($name + "_right" + "_lLowerArmCurveCShape") ($name + "_bottom" + "_lLowerArmCurveCShape") ($name + "_left" + "_lLowerArmCurveCShape") ($name + "_top" + "_lLowerArmCurveCShape") ($name + "_lLowerArmCurveC");
	delete ($name + "_top" + "_lLowerArmCurveC") ($name + "_left" + "_lLowerArmCurveC") ($name + "_bottom" + "_lLowerArmCurveC") ($name + "_right" + "_lLowerArmCurveC");
	delete -ch ($name + "_lLowerArmCurveC");
	
	//SET COLOUR
	setAttr ($name + "_right" + "_lLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_bottom" + "_lLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_left" + "_lLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_top" + "_lLowerArmCurveCShape.overrideEnabled") 1;
	
	setAttr ($name + "_right" + "_lLowerArmCurveCShape.overrideColor")  18;
	setAttr ($name + "_bottom" + "_lLowerArmCurveCShape.overrideColor") 18;
	setAttr ($name + "_left" + "_lLowerArmCurveCShape.overrideColor")   18;
	setAttr ($name + "_top" + "_lLowerArmCurveCShape.overrideColor")    18;
	
	$lElbowLength = `getAttr ($name + "_lElbowJ.tx")`;
	$lWristLength = `getAttr ($name + "_lWristJProxy.tx")`;
	$lArmLength = (($lElbowLength + $lWristLength) *.4);
	
	setAttr (($name + "_lLowerArmCurveC.scale"), $lArmLength, $lArmLength, $lArmLength);
	rotate -r 0 0 90 ($name + "_lLowerArmCurveC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lLowerArmCurveC");
	
	duplicate -n ($name + "_lElbowCurveC") ($name + "_lLowerArmCurveC");
	setAttr ($name + "_lElbowCurveC.rotateOrder") 1;
	duplicate -n ($name + "_lUpperArmCurveC") ($name + "_lLowerArmCurveC");
	setAttr ($name + "_lUpperArmCurveC.rotateOrder") 1;
	
	group -n ($name + "_lElbowCurveCG") ($name + "_lElbowCurveC");
	pointConstraint ($name + "_lElbowJ") ($name + "_lElbowCurveCG");
	orientConstraint ($name + "_lArmUpLctr") ($name + "_lElbowCurveCG");
	
	//CONSTRAIN CENTER CLUSTERS TO MID CONTROL
	delete ($name + "_lLowerArmTopClstrG_pointConstraint1") ($name + "_lLowerArmTopClstrG_aimConstraint1")
	($name + "_lLowerArmTopGuideClstrG_pointConstraint1") ($name + "_lLowerArmTopGuideClstrG_aimConstraint1")
	($name + "_lUpperArmBtmClstrG_pointConstraint1") ($name + "_lUpperArmBtmClstrG_aimConstraint1")
	($name + "_lUpperArmBtmGuideClstrG_pointConstraint1") ($name + "_lUpperArmBtmGuideClstrG_aimConstraint1");
	
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lLowerArmTopClstrG");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lLowerArmTopGuideClstrG");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lUpperArmBtmClstrG");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lUpperArmBtmGuideClstrG");
	
	//CREATE LEFT LOCATORS FOR WRIST TWIST
	spaceLocator -n ($name + "_lElbowTwistLctr");
	spaceLocator -n ($name + "_lWristAimLctr");
	spaceLocator -n ($name + "_lWristTwistLctr");
	spaceLocator -n ($name + "_lElbowTwist75Lctr");
	spaceLocator -n ($name + "_lElbowTwist50Lctr");
	spaceLocator -n ($name + "_lElbowTwist25Lctr");
	parent ($name + "_lWristTwistLctr") ($name + "_lWristAimLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowCurveC") ($name + "_lWristJ") ($name + "_lElbowTwistLctr");
	pointConstraint ($name + "_lElbowCurveC") ($name + "_lElbowTwistLctr");
	parentConstraint ($name + "_lElbowJ") ($name + "_lWristAimLctr");
	delete `parentConstraint ($name + "_lWristFKC") ($name + "_lWristTwistLctr")`;
	parentConstraint -mo ($name + "_lWristJ") ($name + "_lWristTwistLctr");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lElbowJ") ($name + "_lElbowTwist75Lctr");
	setAttr ($name + "_lElbowTwist75Lctr_parentConstraint1." + $name + "_lElbowCurveCW0") 3;
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lElbowJ") ($name + "_lElbowTwist50Lctr");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lElbowJ") ($name + "_lElbowTwist25Lctr");
	setAttr ($name + "_lElbowTwist25Lctr_parentConstraint1." + $name + "_lElbowJW1") 3;
	
	//CREATE MULTIPLY DIVIDES FOR LEFT TWIST
	shadingNode -n ($name + "_lWristTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_lWristTwistLctr.rotateX") ($name + "_lWristTwist_MD.input1X");
	connectAttr -force ($name + "_lWristTwistLctr.rotateX") ($name + "_lWristTwist_MD.input1Y");
	connectAttr -force ($name + "_lWristTwistLctr.rotateX") ($name + "_lWristTwist_MD.input1Z");
	setAttr ($name + "_lWristTwist_MD.input2X") 0.25;
	setAttr ($name + "_lWristTwist_MD.input2Y") 0.5;
	setAttr ($name + "_lWristTwist_MD.input2Z") 0.75;
	
	shadingNode -n ($name + "_lElbowTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_lElbowCurveC.rotateX") ($name + "_lElbowTwist_MD.input1X");
	connectAttr -force ($name + "_lElbowCurveC.rotateX") ($name + "_lElbowTwist_MD.input1Y");
	connectAttr -force ($name + "_lElbowCurveC.rotateX") ($name + "_lElbowTwist_MD.input1Z");
	setAttr ($name + "_lElbowTwist_MD.input2X") 0.25;
	setAttr ($name + "_lElbowTwist_MD.input2Y") 0.5;
	setAttr ($name + "_lElbowTwist_MD.input2Z") 0.75;
	
	//LEFT MOTION PATHS FOR CONTROLS
	group -n ($name + "_lLowerArmCurveCG") ($name + "_lLowerArmCurveC");
	setAttr ($name + "_lLowerArmCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_lLowerArmGuide_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowTwist50Lctr") ($name + "_lLowerArmCurveCG") ($name + "_lLowerArmCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerArmGuide_MP");
	setAttr ($name + "_lLowerArmGuide_MP.uValue") .5;
	parentConstraint ($name + "_lLowerArmCurveC") ($name + "_lLowerArmMidClstr");
	connectAttr -force ($name + "_lWristTwist_MD.outputY") ($name + "_lLowerArmGuide_MP.frontTwist");
	
	group -n ($name + "_lUpperArmCurveCG") ($name + "_lUpperArmCurveC");
	setAttr ($name + "_lUpperArmCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_lUpperArmGuide_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lUpperArmCurveCG") ($name + "_lUpperArmCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperArmGuide_MP");
	setAttr ($name + "_lUpperArmGuide_MP.uValue") .5;
	parentConstraint ($name + "_lUpperArmCurveC") ($name + "_lUpperArmMidClstr");
	connectAttr -force ($name + "_lElbowTwist_MD.outputY") ($name + "_lUpperArmGuide_MP.frontTwist");
	
	//LEFT INDIVIDUAL JOINT CONTROLS
	circle -n ($name + "_CurveArm1b") -c 0 0 2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	circle -n ($name + "_CurveArm1c") -c 0 0 -2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	curve -n ($name + "_CurveArm1") -d 1 -p 0 0 -2 -p 0 0 2 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_CurveArm1Shape");
	
	parent -r -s ($name + "_CurveArm1bShape") ($name + "_CurveArm1cShape") ($name + "_CurveArm1");
	delete ($name + "_CurveArm1b") ($name + "_CurveArm1c");
	
	setAttr ($name + "_CurveArm1.rotateOrder") 1;
	
	setAttr ($name + "_CurveArm1Shape.overrideEnabled") 1;
	setAttr ($name + "_CurveArm1bShape.overrideEnabled") 1;
	setAttr ($name + "_CurveArm1cShape.overrideEnabled") 1;
	

	//SET COLOURS
	setAttr ($name +  "_CurveArm1Shape.overrideColor") 18;
	setAttr ($name + "_CurveArm1bShape.overrideColor") 18;
	setAttr ($name + "_CurveArm1cShape.overrideColor") 18;
	
	duplicate -n ($name + "_lLowerArmCurve1C") ($name + "_CurveArm1");
	duplicate -n ($name + "_lLowerArmCurve2C") ($name + "_CurveArm1");
	duplicate -n ($name + "_lLowerArmCurve3C") ($name + "_CurveArm1");
	duplicate -n ($name + "_lUpperArmCurve1C") ($name + "_CurveArm1");
	duplicate -n ($name + "_lUpperArmCurve2C") ($name + "_CurveArm1");
	duplicate -n ($name + "_lUpperArmCurve3C") ($name + "_CurveArm1");
	scale -r ($lLowerArmLength/6) ($lLowerArmLength/6) ($lLowerArmLength/6) ($name + "_lLowerArmCurve1C") ($name + "_lLowerArmCurve2C") ($name + "_lLowerArmCurve3C");
	$lUpperArmLength = `getAttr ($name + "_lElbowJ.tx")`;
	scale -r ($lUpperArmLength/6) ($lUpperArmLength/6) ($lUpperArmLength/6) ($name + "_lUpperArmCurve1C") ($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurve3C");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lLowerArmCurve1C") ($name + "_lLowerArmCurve2C") ($name + "_lLowerArmCurve3C") ($name + "_lUpperArmCurve1C") ($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurve3C");
	
	//LEFT MOTION PATHS FOR INDIVIDUAL JOINT CONTROLS
	group -n ($name + "_lLowerArmCurve1CG") ($name + "_lLowerArmCurve1C");
	setAttr ($name + "_lLowerArmCurve1CG.rotateOrder") 1;
	group -n ($name + "_lLowerArmCurve2CG") ($name + "_lLowerArmCurve2C");
	setAttr ($name + "_lLowerArmCurve2CG.rotateOrder") 1;
	group -n ($name + "_lLowerArmCurve3CG") ($name + "_lLowerArmCurve3C");
	setAttr ($name + "_lLowerArmCurve3CG.rotateOrder") 1;
	group -n ($name + "_lUpperArmCurve1CG") ($name + "_lUpperArmCurve1C");
	setAttr ($name + "_lUpperArmCurve1CG.rotateOrder") 1;
	group -n ($name + "_lUpperArmCurve2CG") ($name + "_lUpperArmCurve2C");
	setAttr ($name + "_lUpperArmCurve2CG.rotateOrder") 1;
	group -n ($name + "_lUpperArmCurve3CG") ($name + "_lUpperArmCurve3C");
	setAttr ($name + "_lUpperArmCurve3CG.rotateOrder") 1;
	
	pathAnimation -n ($name + "_lLowerArm1_MP") -fractionMode true -followAxis x -upAxis y-worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowTwist75Lctr") ($name + "_lLowerArmCurve1CG") ($name + "_lLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerArm1_MP");
	setAttr ($name + "_lLowerArm1_MP.uValue") .25;
	connectAttr -force ($name + "_lWristTwist_MD.outputX") ($name + "_lLowerArm1_MP.frontTwist");
	
	pathAnimation -n ($name + "_lLowerArm2_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowTwist50Lctr") ($name + "_lLowerArmCurve2CG") ($name + "_lLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerArm2_MP");
	setAttr ($name + "_lLowerArm2_MP.uValue") .5;
	connectAttr -force ($name + "_lWristTwist_MD.outputY") ($name + "_lLowerArm2_MP.frontTwist");
	
	pathAnimation -n ($name + "_lLowerArm3_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lElbowTwist25Lctr") ($name + "_lLowerArmCurve3CG") ($name + "_lLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerArm3_MP");
	setAttr ($name + "_lLowerArm3_MP.uValue") .75;
	connectAttr -force ($name + "_lWristTwist_MD.outputZ") ($name + "_lLowerArm3_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperArm1_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lUpperArmCurve1CG") ($name + "_lUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperArm1_MP");
	setAttr ($name + "_lUpperArm1_MP.uValue") .25;
	connectAttr -force ($name + "_lElbowTwist_MD.outputX") ($name + "_lUpperArm1_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperArm2_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lUpperArmCurve2CG") ($name + "_lUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperArm2_MP");
	setAttr ($name + "_lUpperArm2_MP.uValue") .5;
	connectAttr -force ($name + "_lElbowTwist_MD.outputY") ($name + "_lUpperArm2_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperArm3_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lShoulderJ") ($name + "_lUpperArmCurve3CG") ($name + "_lUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperArm3_MP");
	setAttr ($name + "_lUpperArm3_MP.uValue") .75;
	connectAttr -force ($name + "_lElbowTwist_MD.outputZ") ($name + "_lUpperArm3_MP.frontTwist");
	
	
	//LEFT CURVE ARM JOINTS
	select -cl;
	joint -n ($name + "_lLowerArmCurveJ1");
	parentConstraint ($name + "_lLowerArmCurve1C") ($name + "_lLowerArmCurveJ1");
	select -cl;
	joint -n ($name + "_lLowerArmCurveJ2");
	parentConstraint ($name + "_lLowerArmCurve2C") ($name + "_lLowerArmCurveJ2");
	select -cl;
	joint -n ($name + "_lLowerArmCurveJ3");
	parentConstraint ($name + "_lLowerArmCurve3C") ($name + "_lLowerArmCurveJ3");
	select -cl;
	joint -n ($name + "_lElbowCurveJ");
	parentConstraint ($name + "_lElbowCurveC") ($name + "_lElbowCurveJ");
	select -cl;
	joint -n ($name + "_lUpperArmCurveJ1");
	parentConstraint ($name + "_lUpperArmCurve1C") ($name + "_lUpperArmCurveJ1");
	select -cl;
	joint -n ($name + "_lUpperArmCurveJ2");
	parentConstraint ($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurveJ2");
	select -cl;
	joint -n ($name + "_lUpperArmCurveJ3");
	parentConstraint ($name + "_lUpperArmCurve3C") ($name + "_lUpperArmCurveJ3");
	select -cl;
	
	joint -n ($name + "_lShoulderCurveJ");
	pointConstraint ($name + "_lShoulderJ") ($name + "_lShoulderCurveJ");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lUpperArmCurve1C") ($name + "_lUpperArmCurveJ1") ($name + "_lShoulderCurveJ"); 
	
	//ADD LEFT CURVE ATTRIBUTE TO IK FK SWITCH
	shadingNode -asUtility multiplyDivide -n ($name + "_lArmCurve_MD1");
	connectAttr -force ($name + "_lArmSwitchC.curve") ($name + "_lArmCurve_MD1.input1X");
	setAttr ($name + "_lArmCurve_MD1.input2X") 2;
	shadingNode -asUtility multiplyDivide -n ($name + "_lArmCurve_MD2");
	connectAttr -force ($name + "_lArmCurve_MD1.outputX") ($name + "_lArmCurve_MD2.input1X");
	connectAttr -force ($name + "_lShoulderFKC.scaleX") ($name + "_lArmCurve_MD2.input2X");
	
	//UPPER ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperArmCurve_MD");
	connectAttr -force ($name + "_lArmSwitchC.upperCurve") ($name + "_lUpperArmCurve_MD.input1X");
	connectAttr -force ($name + "_lArmCurve_MD2.outputX") ($name + "_lUpperArmCurve_MD.input2X");
	connectAttr -force ($name + "_lUpperArmCurve_MD.outputX") ($name + "_lUpperArmTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_lUpperArmCurve_MD.outputX") ($name + "_lUpperArmTopClstrG.scaleX");

	//MID ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lMidArmCurve_MD");
	connectAttr -force ($name + "_lArmSwitchC.midCurve") ($name + "_lMidArmCurve_MD.input1X");
	connectAttr -force ($name + "_lArmCurve_MD2.outputX") ($name + "_lMidArmCurve_MD.input2X");
	connectAttr -force ($name + "_lMidArmCurve_MD.outputX") ($name + "_lLowerArmTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_lMidArmCurve_MD.outputX") ($name + "_lLowerArmTopClstrG.scaleX");
	connectAttr -force ($name + "_lMidArmCurve_MD.outputX") ($name + "_lUpperArmBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_lMidArmCurve_MD.outputX") ($name + "_lUpperArmBtmClstrG.scaleX");

	//LOWER ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerArmCurve_MD");
	connectAttr -force ($name + "_lArmSwitchC.lowerCurve") ($name + "_lLowerArmCurve_MD.input1X");
	connectAttr -force ($name + "_lArmCurve_MD2.outputX") ($name + "_lLowerArmCurve_MD.input2X");
	connectAttr -force ($name + "_lLowerArmCurve_MD.outputX") ($name + "_lLowerArmBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_lLowerArmCurve_MD.outputX") ($name + "_lLowerArmBtmClstrG.scaleX");
	
	//ADD ATTRIBUTE TO MAIN CONTROL FOR LEFT ARM CURVE
	addAttr -ln "armCurveMacro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.armCurveMacro");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_lLowerArmCurveC.v");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_lElbowCurveC.v");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_lUpperArmCurveC.v");
	
	addAttr -ln "armCurveMicro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.armCurveMicro");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lLowerArmCurve1C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lLowerArmCurve2C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lLowerArmCurve3C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lUpperArmCurve1C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lUpperArmCurve2C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_lUpperArmCurve3C.v");
	
	//CONNECT LEFT SCALE
	shadingNode -asUtility blendColors -n ($name + "_lUpperArmCurve1_Blend");
	setAttr ($name + "_lUpperArmCurve1_Blend.blender") 0.9;
	connectAttr -force ($name + "_lShoulderJ.scale") ($name + "_lUpperArmCurve1_Blend.color1");
	connectAttr -force ($name + "_lElbowJ.scale") ($name + "_lUpperArmCurve1_Blend.color2");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperArmCurve1_Scale_MD");
	connectAttr -force ($name + "_lUpperArmCurve1C.scale") ($name + "_lUpperArmCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperArmCurve1_Blend.output") ($name + "_lUpperArmCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperArmCurve1_Scale_MD.output") ($name + "_lUpperArmCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_lUpperArmCurve2_Blend") ($name + "_lUpperArmCurve1_Blend");
	setAttr ($name + "_lUpperArmCurve2_Blend.blender") 0.75;
	connectAttr -force ($name + "_lUpperArmCurve2_Blend.output") ($name + "_lUpperArmCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperArmCurve2_Scale_MD");
	connectAttr -force ($name + "_lUpperArmCurve2C.scale") ($name + "_lUpperArmCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperArmCurve2_Blend.output") ($name + "_lUpperArmCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperArmCurve2_Scale_MD.output") ($name + "_lUpperArmCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_lUpperArmCurve3_Blend") ($name + "_lUpperArmCurve1_Blend");
	setAttr ($name + "_lUpperArmCurve3_Blend.blender") 0.6;
	connectAttr -force ($name + "_lUpperArmCurve3_Blend.output") ($name + "_lUpperArmCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperArmCurve3_Scale_MD");
	connectAttr -force ($name + "_lUpperArmCurve3C.scale") ($name + "_lUpperArmCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperArmCurve3_Blend.output") ($name + "_lUpperArmCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperArmCurve3_Scale_MD.output") ($name + "_lUpperArmCurveJ3.scale");
	
	duplicate -rr -ic -n ($name + "_lElbowCurve_Blend") ($name + "_lUpperArmCurve1_Blend");
	setAttr ($name + "_lElbowCurve_Blend.blender") 0.5;
	connectAttr -force ($name + "_lElbowCurve_Blend.output") ($name + "_lElbowCurveJ.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lElbowCurve_Scale_MD");
	connectAttr -force ($name + "_lElbowCurveC.scale") ($name + "_lElbowCurve_Scale_MD.input1");
	connectAttr -force ($name + "_lElbowCurve_Blend.output") ($name + "_lElbowCurve_Scale_MD.input2");
	connectAttr -force ($name + "_lElbowCurve_Scale_MD.output") ($name + "_lElbowCurveJ.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerArmCurve1_Blend") ($name + "_lUpperArmCurve1_Blend");
	setAttr ($name + "_lLowerArmCurve1_Blend.blender") 0.4;
	connectAttr -force ($name + "_lLowerArmCurve1_Blend.output") ($name + "_lLowerArmCurveJ1.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerArmCurve1_Scale_MD");
	connectAttr -force ($name + "_lLowerArmCurve1C.scale") ($name + "_lLowerArmCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerArmCurve1_Blend.output") ($name + "_lLowerArmCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerArmCurve1_Scale_MD.output") ($name + "_lLowerArmCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerArmCurve2_Blend") ($name + "_lLowerArmCurve1_Blend");
	setAttr ($name + "_lLowerArmCurve2_Blend.blender") 0.25;
	connectAttr -force ($name + "_lLowerArmCurve2_Blend.output") ($name + "_lLowerArmCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerArmCurve2_Scale_MD");
	connectAttr -force ($name + "_lLowerArmCurve2C.scale") ($name + "_lLowerArmCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerArmCurve2_Blend.output") ($name + "_lLowerArmCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerArmCurve2_Scale_MD.output") ($name + "_lLowerArmCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerArmCurve3_Blend") ($name + "_lLowerArmCurve1_Blend");
	setAttr ($name + "_lLowerArmCurve3_Blend.blender") 0.1;
	connectAttr -force ($name + "_lLowerArmCurve3_Blend.output") ($name + "_lLowerArmCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerArmCurve3_Scale_MD");
	connectAttr -force ($name + "_lLowerArmCurve3C.scale") ($name + "_lLowerArmCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerArmCurve3_Blend.output") ($name + "_lLowerArmCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerArmCurve3_Scale_MD.output") ($name + "_lLowerArmCurveJ3.scale");	
	
	//LEFT CLEAN UP
	group -em -n ($name + "_curveNodesG");
	parent ($name + "_curveNodesG") ($name + "_MainC");
	group -em -n ($name + "_extraCurveNodesG");
	parent ($name + "_extraCurveNodesG") ($name + "_ExtraNodes");
	
	parent ($name + "_lElbowCurveLctr") ($name + "_lLowerArmTopClstrG") ($name + "_lLowerArmBtmClstrG")
	($name + "_lLowerArmTopGuideClstrG") ($name + "_lLowerArmBtmGuideClstrG") ($name + "_lShoulderCurveLctr")
	($name + "_lElbowTopCurveLctr") ($name + "_lUpperArmTopClstrG") ($name + "_lUpperArmBtmClstrG") ($name + "_lUpperArmTopGuideClstrG")
	($name + "_lUpperArmBtmGuideClstrG") ($name + "_lElbowCurveCG") ($name + "_lLowerArmCurveJ1") ($name + "_lLowerArmCurveJ2")
	($name + "_lLowerArmCurveJ3") ($name + "_lElbowCurveJ") ($name + "_lUpperArmCurveJ1") ($name + "_lUpperArmCurveJ2") ($name + "_lUpperArmCurveJ3")
	($name + "_lShoulderCurveJ") ($name + "_curveNodesG");
	
	parent ($name + "_lLowerArmCurve") ($name + "_lUpperArmCurve") ($name + "_lLowerArmCurveGuide") ($name + "_lUpperArmCurveGuide")
	($name + "_lLowerArmMidClstr") ($name + "_lUpperArmMidClstr") ($name + "_lLowerArmCurveCG") ($name + "_lUpperArmCurveCG")
	($name + "_lLowerArmCurve1CG") ($name + "_lLowerArmCurve2CG") ($name + "_lLowerArmCurve3CG") ($name + "_lUpperArmCurve1CG")
	($name + "_lUpperArmCurve2CG") ($name + "_lUpperArmCurve3CG") ($name + "_extraCurveNodesG");
	
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerArmCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerArmCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerArmCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerArmCurve3CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperArmCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperArmCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperArmCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperArmCurve3CG.scale");
	
	setAttr ($name + "_lWristFKtoIKLctr.v") 0;
	setAttr ($name + "_lWristIKtoFKLctr.v") 0;
	setAttr ($name + "_lElbowTopCurveLctr.v") 0;
	setAttr ($name + "_lElbowCurveLctr.v") 0;
	setAttr ($name + "_lShoulderCurveLctr.v") 0;
	setAttr ($name + "_lElbowTwist25Lctr.v") 0;
	setAttr ($name + "_lElbowTwistLctr.v") 0;
	setAttr ($name + "_lWristAimLctr.v") 0;
	setAttr ($name + "_lElbowTwist75Lctr.v") 0;
	setAttr ($name + "_lElbowTwist50Lctr.v") 0;
	
	setAttr ($name + "_lUpperArmBtmGuideClstr.v") 0;
	setAttr ($name + "_lLowerArmMidClstr.v") 0;
	setAttr ($name + "_lUpperArmMidClstr.v") 0;
	setAttr ($name + "_lLowerArmTopClstr.v") 0;
	setAttr ($name + "_lLowerArmBtmClstr.v") 0;
	setAttr ($name + "_lLowerArmTopGuideClstr.v") 0;
	setAttr ($name + "_lLowerArmBtmGuideClstr.v") 0;
	setAttr ($name + "_lUpperArmTopClstr.v") 0;
	setAttr ($name + "_lUpperArmBtmClstr.v") 0;
	setAttr ($name + "_lUpperArmTopGuideClstr.v") 0;
	setAttr ($name + "_lArmUpLctr.v") 0;
	
	setAttr ($name + "_lShoulderJ.overrideEnabled") 1;
	setAttr ($name + "_lShoulderJ.overrideLevelOfDetail") 1;
	
	setAttr ($name + "_lUpperArmCurveGuide.v") 0;
	setAttr ($name + "_lLowerArmCurveGuide.v") 0;
	setAttr ($name + "_lUpperArmCurve.template") 1;
	setAttr ($name + "_lLowerArmCurve.template") 1;
	
	editDisplayLayerMembers -noRecurse ($name + "_JointsLayer") ($name + "_lWristJ") ($name + "_lWristJFK") ($name + "_lLowerArmCurveJ1")
	($name + "_lLowerArmCurveJ2") ($name + "_lLowerArmCurveJ3") ($name + "_lElbowCurveJ") ($name + "_lUpperArmCurveJ1") ($name + "_lUpperArmCurveJ2")
	($name + "_lUpperArmCurveJ3") ($name + "_lShoulderCurveJ");
	
	editDisplayLayerMembers -noRecurse ($name + "_ControlsLayer") ($name + "_lUpperArmCurve3C")
	($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurveC") ($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurve1C") ($name + "_lElbowCurveC")
	($name + "_lLowerArmCurveC") ($name + "_lLowerArmCurve3C") ($name + "_lLowerArmCurve2C") ($name + "_lLowerArmCurve1C") ($name + "_lLowerArmCurve")
	($name + "_lUpperArmCurve") ($name + "_lLowerArmCurveGuide") ($name + "_lUpperArmCurveGuide") ;
	
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////RIGHT ARM////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	//CREATE RIGHT CURVES
	$rWristLoc = `xform -q -ws -rp ($name + "_rWristJ")`;
	$rElbowLoc = `xform -q -ws -rp ($name + "_rElbowJ")`;
	$rShoulderLoc = `xform -q -ws -rp ($name + "_rShoulderJ")`;
	
	curve -n ($name + "_rLowerArmCurve") -d 1 -p $rElbowLoc[0] $rElbowLoc[1] $rElbowLoc[2]
	-p $rWristLoc[0] $rWristLoc[1] $rWristLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rLowerArmCurveShape");
	
	curve -n ($name + "_rUpperArmCurve") -d 1 -p $rShoulderLoc[0] $rShoulderLoc[1] $rShoulderLoc[2]
	-p $rElbowLoc[0] $rElbowLoc[1] $rElbowLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rUpperArmCurveShape");
	
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_rLowerArmCurve");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_rUpperArmCurve");
	
	curve -n ($name + "_rLowerArmCurveGuide") -d 1 -p $rElbowLoc[0] $rElbowLoc[1] $rElbowLoc[2]
	-p $rWristLoc[0] $rWristLoc[1] $rWristLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rLowerArmCurveGuideShape");

	curve -n ($name + "_rUpperArmCurveGuide") -d 1 -p $rShoulderLoc[0] $rShoulderLoc[1] $rShoulderLoc[2]
	-p $rElbowLoc[0] $rElbowLoc[1] $rElbowLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rUpperArmCurveGuideShape");

	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_rLowerArmCurveGuide");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_rUpperArmCurveGuide");
	delete -ch ($name + "_rLowerArmCurve") ($name + "_rUpperArmCurve") ($name + "_rLowerArmCurveGuide") ($name + "_rUpperArmCurveGuide");
	
	//CREATE RIGHT LOCATOR FOR UP AXIS
	spaceLocator -n ($name + "_rArmUpLctr");
	setAttr ($name + "_rArmUpLctr.rotateOrder") 1;
	group -n ($name + "_rArmUpLctrG") ($name + "_rArmUpLctr");
	delete `parentConstraint ($name + "_rElbowIKtoFKAimLctr") ($name + "_rArmUpLctrG")`;
	delete `orientConstraint ($name + "_rElbowFKC") ($name + "_rArmUpLctrG")`;
	
	parent ($name + "_rArmUpLctrG") ($name + "_MainC");
	parentConstraint -mo ($name + "_rShoulderJ") ($name + "_rArmUpLctrG");
	orientConstraint -mo -skip x -skip z ($name + "_rElbowJ") ($name + "_rShoulderJ") ($name + "_rArmUpLctr");
	pointConstraint -mo ($name + "_rWristJ") ($name + "_rShoulderJ") ($name + "_rArmUpLctr");
	setAttr ($name + "_rArmUpLctr_orientConstraint1.interpType") 2;
	//rotate -r 180 0 0 ($name + "_rArmUpLctr");
	
	////////////////////////////////////LOWER ARM////////////////////////////////////
	//RIGHT LOWER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_rElbowCurveLctr");
	parentConstraint ($name + "_rWristFKC") ($name + "_rElbowCurveLctr");
	delete ($name + "_rElbowCurveLctr_parentConstraint1");
	parent ($name + "_rElbowCurveLctr") ($name + "_rWristFKC");                                
	$rLowerArmLength = `getAttr ($name + "_rWristJProxy.tx")`;
	move -r -os ($rLowerArmLength *-1) 0 0 ($name + "_rElbowCurveLctr");
	parent -w ($name + "_rElbowCurveLctr");
	parentConstraint -mo ($name + "_rWristJ") ($name + "_rElbowCurveLctr");
	
	//RIGHT LOWER CURVE CLUSTERS
	select ($name + "_rLowerArmCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerArmTopClstr");
	group -em -n ($name + "_rLowerArmTopClstrG");
	pointConstraint ($name + "_rElbowJ") ($name + "_rLowerArmTopClstrG");
	parent ($name + "_rLowerArmTopClstrG") ($name + "_rElbowFKC");
	makeIdentity -apply false -r 1 ($name + "_rLowerArmTopClstrG");
	parent -w ($name + "_rLowerArmTopClstrG");
	parent ($name + "_rLowerArmTopClstr") ($name + "_rLowerArmTopClstrG");
	aimConstraint -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "objectrotation"
	-worldUpVector 0 -1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rArmUpLctr") ($name + "_rLowerArmTopClstrG");
	
	select ($name + "_rLowerArmCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerArmBtmClstr");
	group -em -n ($name + "_rLowerArmBtmClstrG");
	pointConstraint ($name + "_rWristJ") ($name + "_rLowerArmBtmClstrG");
	parent ($name + "_rLowerArmBtmClstrG") ($name + "_rElbowJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerArmBtmClstrG");
	parent ($name + "_rLowerArmBtmClstr") ($name + "_rLowerArmBtmClstrG");
	parent -w ($name + "_rLowerArmBtmClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowCurveLctr") ($name + "_rElbowCurveLctr") ($name + "_rLowerArmBtmClstrG");
	
	select ($name + "_rLowerArmCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerArmMidClstr");
	
	//RIGHT LOWER GUIDE CURVE CLUSTERS
	select ($name + "_rLowerArmCurveGuide.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerArmTopGuideClstr");
	group -em -n ($name + "_rLowerArmTopGuideClstrG");
	pointConstraint ($name + "_rElbowJ") ($name + "_rLowerArmTopGuideClstrG");
	parent ($name + "_rLowerArmTopGuideClstrG") ($name + "_rElbowFKC");
	makeIdentity -apply false -r 1 ($name + "_rLowerArmTopGuideClstrG");
	parent -w ($name + "_rLowerArmTopGuideClstrG");
	parent ($name + "_rLowerArmTopGuideClstr") ($name + "_rLowerArmTopGuideClstrG");
	aimConstraint -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "objectrotation"
	-worldUpVector 0 -1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rArmUpLctr") ($name + "_rLowerArmTopGuideClstrG");
	
	select ($name + "_rLowerArmCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerArmBtmGuideClstr");
	group -em -n ($name + "_rLowerArmBtmGuideClstrG");
	pointConstraint ($name + "_rWristJ") ($name + "_rLowerArmBtmGuideClstrG");
	parent ($name + "_rLowerArmBtmGuideClstrG") ($name + "_rElbowJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerArmBtmGuideClstrG");
	parent ($name + "_rLowerArmBtmGuideClstr") ($name + "_rLowerArmBtmGuideClstrG");
	parent -w ($name + "_rLowerArmBtmGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowCurveLctr") ($name + "_rElbowCurveLctr") ($name + "_rLowerArmBtmGuideClstrG");
	
	////////////////////////////////////UPPER ARM////////////////////////////////////
	//RIGHT UPPER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_rShoulderCurveLctr");
	parentConstraint ($name + "_rElbowFKC") ($name + "_rShoulderCurveLctr");
	delete ($name + "_rShoulderCurveLctr_parentConstraint1");
	parent ($name + "_rShoulderCurveLctr") ($name + "_rElbowFKC");
	$rUpperArmLength = `getAttr ($name + "_rElbowJ.tx")`;
	move -r -os ($rUpperArmLength *-1) 0 0 ($name + "_rShoulderCurveLctr");
	parent -w ($name + "_rShoulderCurveLctr");
	parentConstraint -mo ($name + "_rElbowJ") ($name + "_rShoulderCurveLctr");
	
	spaceLocator -n ($name + "_rElbowTopCurveLctr");
	parentConstraint ($name + "_rClavicleC") ($name + "_rElbowTopCurveLctr");
	delete ($name + "_rElbowTopCurveLctr_parentConstraint1");
	parent ($name + "_rElbowTopCurveLctr") ($name + "_rClavicleC");
	pointConstraint ($name + "_rShoulderFKC") ($name + "_rElbowTopCurveLctr");
	delete ($name + "_rElbowTopCurveLctr_pointConstraint1");
	move -r -os ($rUpperArmLength* -1) 0 0 ($name + "_rElbowTopCurveLctr");
	parent -w ($name + "_rElbowTopCurveLctr");
	parentConstraint -mo ($name + "_rClavicleC") ($name + "_rElbowTopCurveLctr");
	
	//RIGHT UPPER CURVE CLUSTERS
	select ($name + "_rUpperArmCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperArmTopClstr");
	group -em -n ($name + "_rUpperArmTopClstrG");
	pointConstraint ($name + "_rShoulderJ") ($name + "_rUpperArmTopClstrG");
	parent ($name + "_rUpperArmTopClstrG") ($name + "_rShoulderJ");
	makeIdentity -apply false -r 1 ($name + "_rUpperArmTopClstrG");
	parent -w ($name + "_rUpperArmTopClstrG");
	parent ($name + "_rUpperArmTopClstr") ($name + "_rUpperArmTopClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rShoulderCurveLctr") ($name + "_rElbowTopCurveLctr") ($name + "_rUpperArmTopClstrG");
	
	select ($name + "_rUpperArmCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperArmBtmClstr");
	group -em -n ($name + "_rUpperArmBtmClstrG");
	pointConstraint ($name + "_rElbowFKC") ($name + "_rUpperArmBtmClstrG");
	delete `orientConstraint ($name + "_rShoulderFKC") ($name + "_rUpperArmBtmClstrG")`;
	parent ($name + "_rUpperArmBtmClstr") ($name + "_rUpperArmBtmClstrG");
	aimConstraint -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "objectrotation"
	-worldUpVector 0 -1 0 -worldUpObject ($name + "_rArmUpLctr") ($name + "_rArmUpLctr") ($name + "_rUpperArmBtmClstrG");
	
	select ($name + "_rUpperArmCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperArmMidClstr");
	
	//RIGHT UPPER GUIDE CURVE CLUSTERS
	select ($name + "_rUpperArmCurveGuide.cv[0:1]") ;                            
	newCluster " -envelope 1";
	rename ($name + "_rUpperArmTopGuideClstr");
	group -em -n ($name + "_rUpperArmTopGuideClstrG");
	pointConstraint ($name + "_rShoulderJ") ($name + "_rUpperArmTopGuideClstrG");
	parent ($name + "_rUpperArmTopGuideClstrG") ($name + "_rShoulderJ");
	makeIdentity -apply false -r 1 ($name + "_rUpperArmTopGuideClstrG");
	parent -w ($name + "_rUpperArmTopGuideClstrG");
	parent ($name + "_rUpperArmTopGuideClstr") ($name + "_rUpperArmTopGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rShoulderCurveLctr") ($name + "_rElbowTopCurveLctr") ($name + "_rUpperArmTopGuideClstrG");
	
	select ($name + "_rUpperArmCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperArmBtmGuideClstr");
	group -em -n ($name + "_rUpperArmBtmGuideClstrG");
	pointConstraint ($name + "_rElbowFKC") ($name + "_rUpperArmBtmGuideClstrG");
	delete `orientConstraint ($name + "_rShoulderFKC") ($name + "_rUpperArmBtmGuideClstrG")`;
	parent ($name + "_rUpperArmBtmGuideClstr") ($name + "_rUpperArmBtmGuideClstrG");
	aimConstraint -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType "objectrotation"
	-worldUpVector 0 -1 0 -worldUpObject ($name + "_rArmUpLctr") ($name + "_rArmUpLctr") ($name + "_rUpperArmBtmGuideClstrG");
	
	////////////////////////////////////////////////////////////////////////////////
	///////////////////////////CREATE RIGHT CURVE CONTROLS///////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	
	nurbsSquare -n ($name + "_rLowerArmCurveC") -c 0 0 0 -nr 0 1 0 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 1 ;
	setAttr ($name + "_rLowerArmCurveC.rotateOrder") 1;

	rename ("right" + $name +  "_rLowerArmCurveC") ($name + "_right" + "_rLowerArmCurveC");
	rename ("left" + $name +  "_rLowerArmCurveC") ($name + "_left" + "_rLowerArmCurveC");
	rename ("top" + $name +  "_rLowerArmCurveC") ($name + "_top" + "_rLowerArmCurveC");
	rename ("bottom" + $name +  "_rLowerArmCurveC") ($name + "_bottom" + "_rLowerArmCurveC");

	parent -r -s ($name + "_right" + "_rLowerArmCurveCShape") ($name + "_bottom" + "_rLowerArmCurveCShape") ($name + "_left" + "_rLowerArmCurveCShape") ($name + "_top" + "_rLowerArmCurveCShape") ($name + "_rLowerArmCurveC");
	delete ($name + "_top" + "_rLowerArmCurveC") ($name + "_left" + "_rLowerArmCurveC") ($name + "_bottom" + "_rLowerArmCurveC") ($name + "_right" + "_rLowerArmCurveC");
	delete -ch ($name + "_rLowerArmCurveC");
	
	//SET COLOUR
	setAttr ($name + "_right" + "_rLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_bottom" + "_rLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_left" + "_rLowerArmCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_top" + "_rLowerArmCurveCShape.overrideEnabled") 1;
	
	setAttr ($name + "_right" + "_rLowerArmCurveCShape.overrideColor")  21;
	setAttr ($name + "_bottom" + "_rLowerArmCurveCShape.overrideColor") 21;
	setAttr ($name + "_left" + "_rLowerArmCurveCShape.overrideColor")   21;
	setAttr ($name + "_top" + "_rLowerArmCurveCShape.overrideColor")    21;

	$rElbowLength = `getAttr ($name + "_rElbowJ.tx")`;
	$rWristLength = `getAttr ($name + "_rWristJProxy.tx")`;
	$rArmLength = (($rElbowLength + $rWristLength) *.4);
	
	
	setAttr (($name + "_rLowerArmCurveC.scale"), $rArmLength, $rArmLength, $rArmLength);
	rotate -r 0 0 90 ($name + "_rLowerArmCurveC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLowerArmCurveC");
	
	
	duplicate -n ($name + "_rElbowCurveC") ($name + "_rLowerArmCurveC");
	setAttr ($name + "_rElbowCurveC.rotateOrder") 1;
	duplicate -n ($name + "_rUpperArmCurveC") ($name + "_rLowerArmCurveC");
	setAttr ($name + "_rUpperArmCurveC.rotateOrder") 1;
	
	group -n ($name + "_rElbowCurveCG") ($name + "_rElbowCurveC");
	pointConstraint ($name + "_rElbowJ") ($name + "_rElbowCurveCG");
	orientConstraint ($name + "_rArmUpLctr") ($name + "_rElbowCurveCG");
	
	//CONSTRAIN CENTER CLUSTERS TO MID CONTROL
	delete ($name + "_rLowerArmTopClstrG_pointConstraint1") ($name + "_rLowerArmTopClstrG_aimConstraint1")
	($name + "_rLowerArmTopGuideClstrG_pointConstraint1") ($name + "_rLowerArmTopGuideClstrG_aimConstraint1")
	($name + "_rUpperArmBtmClstrG_pointConstraint1") ($name + "_rUpperArmBtmClstrG_aimConstraint1")
	($name + "_rUpperArmBtmGuideClstrG_pointConstraint1") ($name + "_rUpperArmBtmGuideClstrG_aimConstraint1");
	
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rLowerArmTopClstrG");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rLowerArmTopGuideClstrG");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rUpperArmBtmClstrG");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rUpperArmBtmGuideClstrG");
	
	//CREATE RIGHT LOCATORS FOR ELBOW TWIST
	spaceLocator -n ($name + "_rElbowTwistLctr");
	group -n ($name + "_rForearmTwistLctrG") ($name + "_rElbowTwistLctr");
	parentConstraint ($name + "_rElbowJ") ($name + "_rForearmTwistLctrG");
	duplicate -n ($name + "_rWristAimLctr") ($name + "_rElbowTwistLctr");
	duplicate -n ($name + "_rWristTwistLctr") ($name + "_rElbowTwistLctr");
	duplicate -n ($name + "_rElbowTwist75Lctr") ($name + "_rElbowTwistLctr");
	duplicate -n ($name + "_rElbowTwist50Lctr") ($name + "_rElbowTwistLctr");
	duplicate -n ($name + "_rElbowTwist25Lctr") ($name + "_rElbowTwistLctr");
	parent ($name + "_rWristTwistLctr") ($name + "_rWristAimLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowCurveC") ($name + "_rWristJ") ($name + "_rElbowTwistLctr");
	pointConstraint ($name + "_rElbowCurveC") ($name + "_rElbowTwistLctr");
	parentConstraint ($name + "_rElbowJ") ($name + "_rWristAimLctr");
	parentConstraint ($name + "_rWristFKC") ($name + "_rWristTwistLctr");
	delete ($name + "_rWristTwistLctr_parentConstraint1");
	parentConstraint -mo ($name + "_rWristJ") ($name + "_rWristTwistLctr");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rElbowJ") ($name + "_rElbowTwist75Lctr");
	setAttr ($name + "_rElbowTwist75Lctr_parentConstraint1." + $name + "_rElbowCurveCW0") 3;
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rElbowJ") ($name + "_rElbowTwist50Lctr");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rElbowJ") ($name + "_rElbowTwist25Lctr");
	setAttr ($name + "_rElbowTwist25Lctr_parentConstraint1." + $name + "_rElbowJW1") 3;
	
	//CREATE MULTIPLY DIVIDES FOR RIGHT TWIST
	shadingNode -n ($name + "_rWristTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_rWristTwistLctr.rotateX") ($name + "_rWristTwist_MD.input1X");
	connectAttr -force ($name + "_rWristTwistLctr.rotateX") ($name + "_rWristTwist_MD.input1Y");
	connectAttr -force ($name + "_rWristTwistLctr.rotateX") ($name + "_rWristTwist_MD.input1Z");
	setAttr ($name + "_rWristTwist_MD.input2X") 0.25;
	setAttr ($name + "_rWristTwist_MD.input2Y") 0.5;
	setAttr ($name + "_rWristTwist_MD.input2Z") 0.75;
	
	shadingNode -n ($name + "_rElbowTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_rElbowCurveC.rotateX") ($name + "_rElbowTwist_MD.input1X");
	connectAttr -force ($name + "_rElbowCurveC.rotateX") ($name + "_rElbowTwist_MD.input1Y");
	connectAttr -force ($name + "_rElbowCurveC.rotateX") ($name + "_rElbowTwist_MD.input1Z");
	setAttr ($name + "_rElbowTwist_MD.input2X") 0.25;
	setAttr ($name + "_rElbowTwist_MD.input2Y") 0.5;
	setAttr ($name + "_rElbowTwist_MD.input2Z") 0.75;
	
	//RIGHT MOTION PATHS FOR CONTROLS
	group -n ($name + "_rLowerArmCurveCG") ($name + "_rLowerArmCurveC");
	setAttr ($name + "_rLowerArmCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_rLowerArmGuide_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowTwist50Lctr") ($name + "_rLowerArmCurveCG") ($name + "_rLowerArmCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerArmGuide_MP");
	setAttr ($name + "_rLowerArmGuide_MP.uValue") .5;
	parentConstraint ($name + "_rLowerArmCurveC") ($name + "_rLowerArmMidClstr");
	connectAttr -force ($name + "_rWristTwist_MD.outputY") ($name + "_rLowerArmGuide_MP.frontTwist");
	
	group -n ($name + "_rUpperArmCurveCG") ($name + "_rUpperArmCurveC");
	setAttr ($name + "_rUpperArmCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_rUpperArmGuide_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rUpperArmCurveCG") ($name + "_rUpperArmCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperArmGuide_MP");
	setAttr ($name + "_rUpperArmGuide_MP.uValue") .5;
	parentConstraint ($name + "_rUpperArmCurveC") ($name + "_rUpperArmMidClstr");
	connectAttr -force ($name + "_rElbowTwist_MD.outputY") ($name + "_rUpperArmGuide_MP.frontTwist");
	
	//SET COLOURS
	setAttr ($name +  "_CurveArm1Shape.overrideColor") 21;
	setAttr ($name + "_CurveArm1bShape.overrideColor") 21;
	setAttr ($name + "_CurveArm1cShape.overrideColor") 21;

	//RIGHT INDIVIDUAL JOINT CONTROLS
	duplicate -n ($name + "_rLowerArmCurve1C") ($name + "_CurveArm1");
	duplicate -n ($name + "_rLowerArmCurve2C") ($name + "_CurveArm1");
	duplicate -n ($name + "_rLowerArmCurve3C") ($name + "_CurveArm1");
	duplicate -n ($name + "_rUpperArmCurve1C") ($name + "_CurveArm1");
	duplicate -n ($name + "_rUpperArmCurve2C") ($name + "_CurveArm1");
	duplicate -n ($name + "_rUpperArmCurve3C") ($name + "_CurveArm1");
	scale -r ($rLowerArmLength/6) ($rLowerArmLength/6) ($rLowerArmLength/6) ($name + "_rLowerArmCurve1C") ($name + "_rLowerArmCurve2C") ($name + "_rLowerArmCurve3C");
	$rUpperArmLength = `getAttr ($name + "_rElbowJ.tx")`;
	scale -r ($rUpperArmLength/6) ($rUpperArmLength/6) ($rUpperArmLength/6) ($name + "_rUpperArmCurve1C") ($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurve3C");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLowerArmCurve1C") ($name + "_rLowerArmCurve2C") ($name + "_rLowerArmCurve3C") ($name + "_rUpperArmCurve1C") ($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurve3C");
	
	//RIGHT MOTION PATHS FOR INDIVIDUAL JOINT CONTROLS
	group -n ($name + "_rLowerArmCurve1CG") ($name + "_rLowerArmCurve1C");
	setAttr ($name + "_rLowerArmCurve1CG.rotateOrder") 1;
	group -n ($name + "_rLowerArmCurve2CG") ($name + "_rLowerArmCurve2C");
	setAttr ($name + "_rLowerArmCurve2CG.rotateOrder") 1;
	group -n ($name + "_rLowerArmCurve3CG") ($name + "_rLowerArmCurve3C");
	setAttr ($name + "_rLowerArmCurve3CG.rotateOrder") 1;
	group -n ($name + "_rUpperArmCurve1CG") ($name + "_rUpperArmCurve1C");
	setAttr ($name + "_rUpperArmCurve1CG.rotateOrder") 1;
	group -n ($name + "_rUpperArmCurve2CG") ($name + "_rUpperArmCurve2C");
	setAttr ($name + "_rUpperArmCurve2CG.rotateOrder") 1;
	group -n ($name + "_rUpperArmCurve3CG") ($name + "_rUpperArmCurve3C");
	setAttr ($name + "_rUpperArmCurve3CG.rotateOrder") 1;
	
	pathAnimation -n ($name + "_rLowerArm1_MP") -fractionMode true -followAxis x -upAxis y-worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowTwist75Lctr") ($name + "_rLowerArmCurve1CG") ($name + "_rLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerArm1_MP");
	setAttr ($name + "_rLowerArm1_MP.uValue") .25;
	connectAttr -force ($name + "_rWristTwist_MD.outputX") ($name + "_rLowerArm1_MP.frontTwist");
	
	pathAnimation -n ($name + "_rLowerArm2_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowTwist50Lctr") ($name + "_rLowerArmCurve2CG") ($name + "_rLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerArm2_MP");
	setAttr ($name + "_rLowerArm2_MP.uValue") .5;
	connectAttr -force ($name + "_rWristTwist_MD.outputY") ($name + "_rLowerArm2_MP.frontTwist");
	
	pathAnimation -n ($name + "_rLowerArm3_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rElbowTwist25Lctr") ($name + "_rLowerArmCurve3CG") ($name + "_rLowerArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerArm3_MP");
	setAttr ($name + "_rLowerArm3_MP.uValue") .75;
	connectAttr -force ($name + "_rWristTwist_MD.outputZ") ($name + "_rLowerArm3_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperArm1_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rUpperArmCurve1CG") ($name + "_rUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperArm1_MP");
	setAttr ($name + "_rUpperArm1_MP.uValue") .25;
	connectAttr -force ($name + "_rElbowTwist_MD.outputX") ($name + "_rUpperArm1_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperArm2_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rUpperArmCurve2CG") ($name + "_rUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperArm2_MP");
	setAttr ($name + "_rUpperArm2_MP.uValue") .5;
	connectAttr -force ($name + "_rElbowTwist_MD.outputY") ($name + "_rUpperArm2_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperArm3_MP") -fractionMode true -followAxis x -upAxis y -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rShoulderJ") ($name + "_rUpperArmCurve3CG") ($name + "_rUpperArmCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperArm3_MP");
	setAttr ($name + "_rUpperArm3_MP.uValue") .75;
	connectAttr -force ($name + "_rElbowTwist_MD.outputZ") ($name + "_rUpperArm3_MP.frontTwist");
	
	
	//RIGHT CURVE ARM JOINTS
	select -cl;
	joint -n ($name + "_rLowerArmCurveJ1");
	parentConstraint ($name + "_rLowerArmCurve1C") ($name + "_rLowerArmCurveJ1");
	select -cl;
	joint -n ($name + "_rLowerArmCurveJ2");
	parentConstraint ($name + "_rLowerArmCurve2C") ($name + "_rLowerArmCurveJ2");
	select -cl;
	joint -n ($name + "_rLowerArmCurveJ3");
	parentConstraint ($name + "_rLowerArmCurve3C") ($name + "_rLowerArmCurveJ3");
	select -cl;
	joint -n ($name + "_rElbowCurveJ");
	parentConstraint ($name + "_rElbowCurveC") ($name + "_rElbowCurveJ");
	select -cl;
	joint -n ($name + "_rUpperArmCurveJ1");
	parentConstraint ($name + "_rUpperArmCurve1C") ($name + "_rUpperArmCurveJ1");
	select -cl;
	joint -n ($name + "_rUpperArmCurveJ2");
	parentConstraint ($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurveJ2");
	select -cl;
	joint -n ($name + "_rUpperArmCurveJ3");
	parentConstraint ($name + "_rUpperArmCurve3C") ($name + "_rUpperArmCurveJ3");
	select -cl;
	
	joint -n ($name + "_rShoulderCurveJ");
	pointConstraint ($name + "_rShoulderJ") ($name + "_rShoulderCurveJ");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rUpperArmCurve1C") ($name + "_rUpperArmCurveJ1") ($name + "_rShoulderCurveJ"); 
	
	//ADD RIGHT CURVE ATTRIBUTE TO IK FK SWITCH
	shadingNode -asUtility multiplyDivide -n ($name + "_rArmCurve_MD1");
	connectAttr -force ($name + "_rArmSwitchC.curve") ($name + "_rArmCurve_MD1.input1X");
	setAttr ($name + "_rArmCurve_MD1.input2X") 2;
	shadingNode -asUtility multiplyDivide -n ($name + "_rArmCurve_MD2");
	connectAttr -force ($name + "_rArmCurve_MD1.outputX") ($name + "_rArmCurve_MD2.input1X");
	connectAttr -force ($name + "_rShoulderFKC.scaleX") ($name + "_rArmCurve_MD2.input2X");
	
	//UPPER ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperArmCurve_MD");
	connectAttr -force ($name + "_rArmSwitchC.upperCurve") ($name + "_rUpperArmCurve_MD.input1X");
	connectAttr -force ($name + "_rArmCurve_MD2.outputX") ($name + "_rUpperArmCurve_MD.input2X");
	connectAttr -force ($name + "_rUpperArmCurve_MD.outputX") ($name + "_rUpperArmTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_rUpperArmCurve_MD.outputX") ($name + "_rUpperArmTopClstrG.scaleX");

	//MID ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rMidArmCurve_MD");
	connectAttr -force ($name + "_rArmSwitchC.midCurve") ($name + "_rMidArmCurve_MD.input1X");
	connectAttr -force ($name + "_rArmCurve_MD2.outputX") ($name + "_rMidArmCurve_MD.input2X");
	connectAttr -force ($name + "_rMidArmCurve_MD.outputX") ($name + "_rLowerArmTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_rMidArmCurve_MD.outputX") ($name + "_rLowerArmTopClstrG.scaleX");
	connectAttr -force ($name + "_rMidArmCurve_MD.outputX") ($name + "_rUpperArmBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_rMidArmCurve_MD.outputX") ($name + "_rUpperArmBtmClstrG.scaleX");

	//LOWER ARM CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerArmCurve_MD");
	connectAttr -force ($name + "_rArmSwitchC.lowerCurve") ($name + "_rLowerArmCurve_MD.input1X");
	connectAttr -force ($name + "_rArmCurve_MD2.outputX") ($name + "_rLowerArmCurve_MD.input2X");
	connectAttr -force ($name + "_rLowerArmCurve_MD.outputX") ($name + "_rLowerArmBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_rLowerArmCurve_MD.outputX") ($name + "_rLowerArmBtmClstrG.scaleX");
	
	//ADD ATTRIBUTE TO MAIN CONTROL FOR RIGHT ARM CURVE
	addAttr -ln "regCurveMacro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.armCurveMacro");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_rLowerArmCurveC.v");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_rElbowCurveC.v");
	connectAttr -f ($name + "_MainC.armCurveMacro") ($name + "_rUpperArmCurveC.v");
	
	addAttr -ln "regCurveMicro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.armCurveMicro");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rLowerArmCurve1C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rLowerArmCurve2C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rLowerArmCurve3C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rUpperArmCurve1C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rUpperArmCurve2C.v");
	connectAttr -f ($name + "_MainC.armCurveMicro") ($name + "_rUpperArmCurve3C.v");
	
	//CONNECT RIGHT SCALE
	shadingNode -asUtility blendColors -n ($name + "_rUpperArmCurve1_Blend");
	setAttr ($name + "_rUpperArmCurve1_Blend.blender") 0.9;
	connectAttr -force ($name + "_rShoulderJ.scale") ($name + "_rUpperArmCurve1_Blend.color1");
	connectAttr -force ($name + "_rElbowJ.scale") ($name + "_rUpperArmCurve1_Blend.color2");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperArmCurve1_Scale_MD");
	connectAttr -force ($name + "_rUpperArmCurve1C.scale") ($name + "_rUpperArmCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperArmCurve1_Blend.output") ($name + "_rUpperArmCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperArmCurve1_Scale_MD.output") ($name + "_rUpperArmCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_rUpperArmCurve2_Blend") ($name + "_rUpperArmCurve1_Blend");
	setAttr ($name + "_rUpperArmCurve2_Blend.blender") 0.75;
	connectAttr -force ($name + "_rUpperArmCurve2_Blend.output") ($name + "_rUpperArmCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperArmCurve2_Scale_MD");
	connectAttr -force ($name + "_rUpperArmCurve2C.scale") ($name + "_rUpperArmCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperArmCurve2_Blend.output") ($name + "_rUpperArmCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperArmCurve2_Scale_MD.output") ($name + "_rUpperArmCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_rUpperArmCurve3_Blend") ($name + "_rUpperArmCurve1_Blend");
	setAttr ($name + "_rUpperArmCurve3_Blend.blender") 0.6;
	connectAttr -force ($name + "_rUpperArmCurve3_Blend.output") ($name + "_rUpperArmCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperArmCurve3_Scale_MD");
	connectAttr -force ($name + "_rUpperArmCurve3C.scale") ($name + "_rUpperArmCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperArmCurve3_Blend.output") ($name + "_rUpperArmCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperArmCurve3_Scale_MD.output") ($name + "_rUpperArmCurveJ3.scale");
	
	duplicate -rr -ic -n ($name + "_rElbowCurve_Blend") ($name + "_rUpperArmCurve1_Blend");
	setAttr ($name + "_lElbowCurve_Blend.blender") 0.5;
	connectAttr -force ($name + "_lElbowCurve_Blend.output") ($name + "_rElbowCurveJ.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rElbowCurve_Scale_MD");
	connectAttr -force ($name + "_rElbowCurveC.scale") ($name + "_rElbowCurve_Scale_MD.input1");
	connectAttr -force ($name + "_rElbowCurve_Blend.output") ($name + "_rElbowCurve_Scale_MD.input2");
	connectAttr -force ($name + "_rElbowCurve_Scale_MD.output") ($name + "_rElbowCurveJ.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerArmCurve1_Blend") ($name + "_rUpperArmCurve1_Blend");
	setAttr ($name + "_rLowerArmCurve1_Blend.blender") 0.4;
	connectAttr -force ($name + "_rLowerArmCurve1_Blend.output") ($name + "_rLowerArmCurveJ1.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerArmCurve1_Scale_MD");
	connectAttr -force ($name + "_rLowerArmCurve1C.scale") ($name + "_rLowerArmCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerArmCurve1_Blend.output") ($name + "_rLowerArmCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerArmCurve1_Scale_MD.output") ($name + "_rLowerArmCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerArmCurve2_Blend") ($name + "_rLowerArmCurve1_Blend");
	setAttr ($name + "_rLowerArmCurve2_Blend.blender") 0.25;
	connectAttr -force ($name + "_rLowerArmCurve2_Blend.output") ($name + "_rLowerArmCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerArmCurve2_Scale_MD");
	connectAttr -force ($name + "_rLowerArmCurve2C.scale") ($name + "_rLowerArmCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerArmCurve2_Blend.output") ($name + "_rLowerArmCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerArmCurve2_Scale_MD.output") ($name + "_rLowerArmCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerArmCurve3_Blend") ($name + "_rLowerArmCurve1_Blend");
	setAttr ($name + "_rLowerArmCurve3_Blend.blender") 0.1;
	connectAttr -force ($name + "_rLowerArmCurve3_Blend.output") ($name + "_rLowerArmCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerArmCurve3_Scale_MD");
	connectAttr -force ($name + "_rLowerArmCurve3C.scale") ($name + "_rLowerArmCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerArmCurve3_Blend.output") ($name + "_rLowerArmCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerArmCurve3_Scale_MD.output") ($name + "_rLowerArmCurveJ3.scale");	
	
	//RIGHT CLEAN UP
	parent ($name + "_rElbowCurveLctr") ($name + "_rLowerArmTopClstrG") ($name + "_rLowerArmBtmClstrG")
	($name + "_rLowerArmTopGuideClstrG") ($name + "_rLowerArmBtmGuideClstrG") ($name + "_rShoulderCurveLctr")
	($name + "_rElbowTopCurveLctr") ($name + "_rUpperArmTopClstrG") ($name + "_rUpperArmBtmClstrG") ($name + "_rUpperArmTopGuideClstrG")
	($name + "_rUpperArmBtmGuideClstrG") ($name + "_rElbowCurveCG") ($name + "_rLowerArmCurveJ1") ($name + "_rLowerArmCurveJ2")
	($name + "_rLowerArmCurveJ3") ($name + "_rElbowCurveJ") ($name + "_rUpperArmCurveJ1") ($name + "_rUpperArmCurveJ2") ($name + "_rUpperArmCurveJ3")
	($name + "_rShoulderCurveJ") ($name + "_curveNodesG");
	
	parent ($name + "_rLowerArmCurve") ($name + "_rUpperArmCurve") ($name + "_rLowerArmCurveGuide") ($name + "_rUpperArmCurveGuide")
	($name + "_rLowerArmMidClstr") ($name + "_rUpperArmMidClstr") ($name + "_rLowerArmCurveCG") ($name + "_rUpperArmCurveCG")
	($name + "_rLowerArmCurve1CG") ($name + "_rLowerArmCurve2CG") ($name + "_rLowerArmCurve3CG") ($name + "_rUpperArmCurve1CG")
	($name + "_rUpperArmCurve2CG") ($name + "_rUpperArmCurve3CG") ($name + "_extraCurveNodesG");
	
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerArmCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerArmCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerArmCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerArmCurve3CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperArmCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperArmCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperArmCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperArmCurve3CG.scale");
	
	setAttr ($name + "_rWristFKtoIKLctr.v") 0;
	setAttr ($name + "_rWristIKtoFKLctr.v") 0;
	setAttr ($name + "_rElbowTopCurveLctr.v") 0;
	setAttr ($name + "_rElbowCurveLctr.v") 0;
	setAttr ($name + "_rShoulderCurveLctr.v") 0;
	setAttr ($name + "_rElbowTwist25Lctr.v") 0;
	setAttr ($name + "_rElbowTwistLctr.v") 0;
	setAttr ($name + "_rWristAimLctr.v") 0;
	setAttr ($name + "_rElbowTwist75Lctr.v") 0;
	setAttr ($name + "_rElbowTwist50Lctr.v") 0;
	
	setAttr ($name + "_rUpperArmBtmGuideClstr.v") 0;
	setAttr ($name + "_rLowerArmMidClstr.v") 0;
	setAttr ($name + "_rUpperArmMidClstr.v") 0;
	setAttr ($name + "_rLowerArmTopClstr.v") 0;
	setAttr ($name + "_rLowerArmBtmClstr.v") 0;
	setAttr ($name + "_rLowerArmTopGuideClstr.v") 0;
	setAttr ($name + "_rLowerArmBtmGuideClstr.v") 0;
	setAttr ($name + "_rUpperArmTopClstr.v") 0;
	setAttr ($name + "_rUpperArmBtmClstr.v") 0;
	setAttr ($name + "_rUpperArmTopGuideClstr.v") 0;
	setAttr ($name + "_rArmUpLctr.v") 0;
	
	setAttr ($name + "_rShoulderJ.overrideEnabled") 1;
	setAttr ($name + "_rShoulderJ.overrideLevelOfDetail") 1;
	
	setAttr ($name + "_rUpperArmCurveGuide.v") 0;
	setAttr ($name + "_rLowerArmCurveGuide.v") 0;
	setAttr ($name + "_rUpperArmCurve.template") 1;
	setAttr ($name + "_rLowerArmCurve.template") 1;
	
	editDisplayLayerMembers -noRecurse ($name + "_JointsLayer") ($name + "_rWristJ") ($name + "_rWristJFK") ($name + "_rLowerArmCurveJ1")
	($name + "_rLowerArmCurveJ2") ($name + "_rLowerArmCurveJ3") ($name + "_rElbowCurveJ") ($name + "_rUpperArmCurveJ1") ($name + "_rUpperArmCurveJ2")
	($name + "_rUpperArmCurveJ3") ($name + "_rShoulderCurveJ");
	
	editDisplayLayerMembers -noRecurse ($name + "_ControlsLayer") ($name + "_rUpperArmCurve3C")
	($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurveC") ($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurve1C") ($name + "_rElbowCurveC")
	($name + "_rLowerArmCurveC") ($name + "_rLowerArmCurve3C") ($name + "_rLowerArmCurve2C") ($name + "_rLowerArmCurve1C") ($name + "_rLowerArmCurve")
	($name + "_rUpperArmCurve") ($name + "_rLowerArmCurveGuide") ($name + "_rUpperArmCurveGuide") ;
	
	//LOCK AND HIDE CURVE CONTROLS
	select ($name + "_lElbowCurveC")($name + "_lLowerArmCurve1C") ($name + "_lLowerArmCurve2C") ($name + "_lLowerArmCurve3C")
	($name + "_lUpperArmCurve1C") ($name + "_lUpperArmCurve2C") ($name + "_lUpperArmCurve3C")
	($name + "_rElbowCurveC") ($name + "_rLowerArmCurve1C") ($name + "_rLowerArmCurve2C") ($name + "_rLowerArmCurve3C")
	($name + "_rUpperArmCurve1C") ($name + "_rUpperArmCurve2C") ($name + "_rUpperArmCurve3C") ;
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		//setAttr -l false -k true ($currentCurveControl + ".sx");
		//setAttr -l false -k true ($currentCurveControl + ".sy");
		//setAttr -l false -k true ($currentCurveControl + ".sz");
		setAttr -l true -k false ($currentCurveControl + ".v");
	}
	
	select ($name + "_lUpperArmCurveC") ($name + "_rUpperArmCurveC") ($name + "_rLowerArmCurveC") ($name + "_lLowerArmCurveC") ;
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		setAttr -l false -k true ($currentCurveControl + ".rx");
		setAttr -l false -k true ($currentCurveControl + ".ry");
		setAttr -l false -k true ($currentCurveControl + ".rz");
	}
	
	delete ($name + "_CurveArm1");
	
	//LOCK CHANNELS
	select ($name + "_lLowerArmCurveC") ($name + "_lUpperArmCurveC")
	($name + "_rUpperArmCurveC") ($name + "_rLowerArmCurveC");
	
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		setAttr -l 1 -k 0 ($currentCurveControl + ".sx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sy");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".v");
	}
	
	select ($name + "_lLowerArmCurveCG") ($name + "_lUpperArmCurveCG") ($name + "_lLowerArmCurve1CG")
	($name + "_lLowerArmCurve2CG") ($name + "_lLowerArmCurve3CG") ($name + "_lUpperArmCurve1CG")
	($name + "_lUpperArmCurve2CG") ($name + "_lUpperArmCurve3CG") ($name + "_rLowerArmCurveCG")
	($name + "_rUpperArmCurveCG") ($name + "_rLowerArmCurve1CG") ($name + "_rLowerArmCurve2CG")
	($name + "_rLowerArmCurve3CG") ($name + "_rUpperArmCurve1CG") ($name + "_rUpperArmCurve2CG")
	($name + "_rUpperArmCurve3CG")
	($name + "_lElbowCurveCG") ($name + "_rElbowCurveCG") ($name + "_curveNodesG") ($name + "_extraCurveNodesG");
	
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		setAttr -l 1 -k 0 ($currentCurveControl + ".tx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".ty");
		setAttr -l 1 -k 0 ($currentCurveControl + ".tz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".rx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".ry");
		setAttr -l 1 -k 0 ($currentCurveControl + ".rz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sy");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".v");
	}
	
	parent ($name + "_lElbowTwistLctr") ($name + "_lWristAimLctr") ($name + "_lElbowTwist75Lctr") ($name + "_lElbowTwist50Lctr")
	($name + "_lElbowTwist25Lctr") ($name +" _rForearmTwistLctrG") ($name + "_extraCurveNodesG");
	//*/
	changeLinearUnit $currentUnit;
}

global proc RRA_CreateToonLegs()
{
	string $name = `textField -q -text RRA_CharName`;
	
	string $currentUnit = `currentUnit -query -linear`;
	if ($currentUnit != "cm")
	{
		changeLinearUnit "centimeter";
	}
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////LEFT LEG////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	//CREATE LEFT CURVES
	$rAnkleLoc = `xform -q -ws -rp ($name + "_lAnkleJ")`;
	$rKneeLoc = `xform -q -ws -rp ($name + "_lKneeJ")`;
	$rHipLoc = `xform -q -ws -rp ($name + "_lHipJ")`;
	
	curve -n ($name + "_lLowerLegCurve") -d 1 -p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2]
	-p $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lLowerLegCurveShape");
	
	curve -n ($name + "_lUpperLegCurve") -d 1 -p $rHipLoc[0] $rHipLoc[1] $rHipLoc[2]
	-p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lUpperLegCurveShape");
	
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_lLowerLegCurve");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_lUpperLegCurve");
	
	curve -n ($name + "_lLowerLegCurveGuide") -d 1 -p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2]
	-p $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lLowerLegCurveGuideShape");
	
	curve -n ($name + "_lUpperLegCurveGuide") -d 1 -p $rHipLoc[0] $rHipLoc[1] $rHipLoc[2]
	-p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lUpperLegCurveGuideShape");

	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_lLowerLegCurveGuide");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_lUpperLegCurveGuide");
	delete -ch ($name + "_lLowerLegCurve") ($name + "_lUpperLegCurve") ($name + "_lLowerLegCurveGuide") ($name + "_lUpperLegCurveGuide");
	
	//CREATE LEFT LOCATOR FOR UP AXIS
	spaceLocator -n ($name + "_lLegUpLctr");
	delete `parentConstraint ($name + "_lKneeJ") ($name + "_lLegUpLctr")`;
	parent ($name + "_lLegUpLctr") ($name + "_lHipJ");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lLegUp_MD");
	connectAttr -force ($name + "_lKneeJ.rotateZ") ($name + "_lLegUp_MD.input1X");
	setAttr ($name + "_lLegUp_MD.operation") 2;
	setAttr ($name + "_lLegUp_MD.input2X") 2;
	connectAttr -force ($name + "_lLegUp_MD.outputX") ($name + "_lLegUpLctr.rotateZ");
	
	////////////////////////////////////LOWER LEG////////////////////////////////////
	//LEFT LOWER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_lKneeCurveLctr");
	parentConstraint ($name + "_lAnkleFKC") ($name + "_lKneeCurveLctr");
	delete ($name + "_lKneeCurveLctr_parentConstraint1");
	parent ($name + "_lKneeCurveLctr") ($name + "_lAnkleFKC");                                
	$lLowerLegLength = `getAttr ($name + "_lAnkleJ.tx")`;
	move -r -os ($lLowerLegLength *-1) 0 0 ($name + "_lKneeCurveLctr");
	parent -w ($name + "_lKneeCurveLctr");
	parentConstraint -mo ($name + "_lAnkleJ") ($name + "_lKneeCurveLctr");
	
	//LEFT LOWER CURVE CLUSTERS
	select ($name + "_lLowerLegCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerLegTopClstr");
	group -em -n ($name + "_lLowerLegTopClstrG");
	pointConstraint ($name + "_lKneeJ") ($name + "_lLowerLegTopClstrG");
	parent ($name + "_lLowerLegTopClstrG") ($name + "_lKneeJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerLegTopClstrG");
	parent -w ($name + "_lLowerLegTopClstrG");
	parent ($name + "_lLowerLegTopClstr") ($name + "_lLowerLegTopClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_lHipJ") ($name + "_lLegUpLctr") ($name + "_lLowerLegTopClstrG");
	
	select ($name + "_lLowerLegCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerLegBtmClstr");
	group -em -n ($name + "_lLowerLegBtmClstrG");
	pointConstraint ($name + "_lAnkleJ") ($name + "_lLowerLegBtmClstrG");
	parent ($name + "_lLowerLegBtmClstrG") ($name + "_lKneeJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerLegBtmClstrG");
	parent ($name + "_lLowerLegBtmClstr") ($name + "_lLowerLegBtmClstrG");
	parent -w ($name + "_lLowerLegBtmClstrG");
	aimConstraint -aimVector -1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lKneeCurveLctr") ($name + "_lKneeCurveLctr") ($name + "_lLowerLegBtmClstrG");
	
	select ($name + "_lLowerLegCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerLegMidClstr");
	
	//LEFT LOWER GUIDE CURVE CLUSTERS
	select ($name + "_lLowerLegCurveGuide.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerLegTopGuideClstr");
	group -em -n ($name + "_lLowerLegTopGuideClstrG");
	pointConstraint ($name + "_lKneeJ") ($name + "_lLowerLegTopGuideClstrG");
	parent ($name + "_lLowerLegTopGuideClstrG") ($name + "_lKneeJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerLegTopGuideClstrG");
	parent -w ($name + "_lLowerLegTopGuideClstrG");
	parent ($name + "_lLowerLegTopGuideClstr") ($name + "_lLowerLegTopGuideClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_lHipJ") ($name + "_lLegUpLctr") ($name + "_lLowerLegTopGuideClstrG"); 
	
	select ($name + "_lLowerLegCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lLowerLegBtmGuideClstr");
	group -em -n ($name + "_lLowerLegBtmGuideClstrG");
	pointConstraint ($name + "_lAnkleJ") ($name + "_lLowerLegBtmGuideClstrG");
	parent ($name + "_lLowerLegBtmGuideClstrG") ($name + "_lKneeJ");
	makeIdentity -apply false -r 1 ($name + "_lLowerLegBtmGuideClstrG");
	parent ($name + "_lLowerLegBtmGuideClstr") ($name + "_lLowerLegBtmGuideClstrG");
	parent -w ($name + "_lLowerLegBtmGuideClstrG");
	aimConstraint -aimVector -1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lKneeCurveLctr") ($name + "_lKneeCurveLctr") ($name + "_lLowerLegBtmGuideClstrG");
	
	////////////////////////////////////UPPER LEG////////////////////////////////////
	//LEFT UPPER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_lHipCurveLctr");
	parentConstraint ($name + "_lKneeFKC") ($name + "_lHipCurveLctr");
	delete ($name + "_lHipCurveLctr_parentConstraint1");
	parent ($name + "_lHipCurveLctr") ($name + "_lKneeFKC");
	$lUpperLegLength = `getAttr ($name + "_lKneeJ.tx")`;
	move -r -os ($lUpperLegLength *-1) 0 0 ($name + "_lHipCurveLctr");
	parent -w ($name + "_lHipCurveLctr");
	parentConstraint -mo ($name + "_lKneeJ") ($name + "_lHipCurveLctr");
	
	spaceLocator -n ($name + "_lKneeTopCurveLctr");
	parentConstraint ($name + "_MainHipC") ($name + "_lKneeTopCurveLctr");
	delete ($name + "_lKneeTopCurveLctr_parentConstraint1");
	parent ($name + "_lKneeTopCurveLctr") ($name + "_MainHipC");
	pointConstraint ($name + "_lHipFKC") ($name + "_lKneeTopCurveLctr");
	delete ($name + "_lKneeTopCurveLctr_pointConstraint1");
	move -r -os 0 ($lUpperLegLength* -1) 0 ($name + "_lKneeTopCurveLctr");
	parent -w ($name + "_lKneeTopCurveLctr");
	parentConstraint -mo ($name + "_MainHipC") ($name + "_lKneeTopCurveLctr");
	
	//LEFT UPPER CURVE CLUSTERS
	select ($name + "_lUpperLegCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperLegTopClstr");
	group -em -n ($name + "_lUpperLegTopClstrG");
	pointConstraint ($name + "_lHipJ") ($name + "_lUpperLegTopClstrG");
	parent ($name + "_lUpperLegTopClstrG") ($name + "_lHipJ");
	makeIdentity -apply false -r 1 ($name + "_lUpperLegTopClstrG");
	parent -w ($name + "_lUpperLegTopClstrG");
	parent ($name + "_lUpperLegTopClstr") ($name + "_lUpperLegTopClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lHipCurveLctr") ($name + "_lKneeTopCurveLctr") ($name + "_lUpperLegTopClstrG");
	
	select ($name + "_lUpperLegCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperLegBtmClstr");
	group -em -n ($name + "_lUpperLegBtmClstrG");
	pointConstraint ($name + "_lKneeJ") ($name + "_lUpperLegBtmClstrG");
	delete `orientConstraint ($name + "_lHipFKC") ($name + "_lUpperLegBtmClstrG")`;
	parent ($name + "_lUpperLegBtmClstr") ($name + "_lUpperLegBtmClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_lLegUpLctr") ($name + "_lLegUpLctr") ($name + "_lUpperLegBtmClstrG"); 
	
	select ($name + "_lUpperLegCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperLegMidClstr");
	
	//LEFT UPPER GUIDE CURVE CLUSTERS
	select ($name + "_lUpperLegCurveGuide.cv[0:1]") ;                            
	newCluster " -envelope 1";
	rename ($name + "_lUpperLegTopGuideClstr");
	group -em -n ($name + "_lUpperLegTopGuideClstrG");
	pointConstraint ($name + "_lHipJ") ($name + "_lUpperLegTopGuideClstrG");
	parent ($name + "_lUpperLegTopGuideClstrG") ($name + "_lHipJ");
	makeIdentity -apply false -r 1 ($name + "_lUpperLegTopGuideClstrG");
	parent -w ($name + "_lUpperLegTopGuideClstrG");
	parent ($name + "_lUpperLegTopGuideClstr") ($name + "_lUpperLegTopGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_lHipCurveLctr") ($name + "_lKneeTopCurveLctr") ($name + "_lUpperLegTopGuideClstrG");
	
	select ($name + "_lUpperLegCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lUpperLegBtmGuideClstr");
	group -em -n ($name + "_lUpperLegBtmGuideClstrG");
	pointConstraint ($name + "_lKneeJ") ($name + "_lUpperLegBtmGuideClstrG");
	delete `orientConstraint ($name + "_lHipFKC") ($name + "_lUpperLegBtmGuideClstrG")`;
	parent ($name + "_lUpperLegBtmGuideClstr") ($name + "_lUpperLegBtmGuideClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_lLegUpLctr") ($name + "_lLegUpLctr") ($name + "_lUpperLegBtmGuideClstrG"); 
	
	////////////////////////////////////////////////////////////////////////////////
	///////////////////////////CREATE LEFT CURVE CONTROLS///////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	
	nurbsSquare -n ($name + "_lLowerLegCurveC") -c 0 0 0 -nr 0 1 0 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 1 ;
	setAttr ($name + "_lLowerLegCurveC.rotateOrder") 1;
	
	rename ("right" + $name +  "_lLowerLegCurveC") ($name + "_right" + "_lLowerLegCurveC");
	rename ("left" + $name +  "_lLowerLegCurveC") ($name + "_left" + "_lLowerLegCurveC");
	rename ("top" + $name +  "_lLowerLegCurveC") ($name + "_top" + "_lLowerLegCurveC");
	rename ("bottom" + $name +  "_lLowerLegCurveC") ($name + "_bottom" + "_lLowerLegCurveC");
	
	parent -r -s ($name + "_right" + "_lLowerLegCurveCShape") ($name + "_bottom" + "_lLowerLegCurveCShape") ($name + "_left" + "_lLowerLegCurveCShape") ($name + "_top" + "_lLowerLegCurveCShape") ($name + "_lLowerLegCurveC");
	delete ($name + "_top" + "_lLowerLegCurveC") ($name + "_left" + "_lLowerLegCurveC") ($name + "_bottom" + "_lLowerLegCurveC") ($name + "_right" + "_lLowerLegCurveC");
	delete -ch ($name + "_lLowerLegCurveC");
	
	//SET COLOUR
	setAttr ($name + "_right" + "_lLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_bottom" + "_lLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_left" + "_lLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_top" + "_lLowerLegCurveCShape.overrideEnabled") 1;
	
	setAttr ($name + "_right" + "_lLowerLegCurveCShape.overrideColor")  18;
	setAttr ($name + "_bottom" + "_lLowerLegCurveCShape.overrideColor") 18;
	setAttr ($name + "_left" + "_lLowerLegCurveCShape.overrideColor")   18;
	setAttr ($name + "_top" + "_lLowerLegCurveCShape.overrideColor")    18;


	$rKneeLength = `getAttr ($name + "_lKneeJ.tx")`;
	$rAnkleLength = `getAttr ($name + "_lAnkleJ.tx")`;
	$rLegLength = (($rKneeLength + $rAnkleLength) /2);
	
	
	setAttr (($name + "_lLowerLegCurveC.scale"), ($rLegLength/2), ($rLegLength/2), ($rLegLength/2));
	rotate -r 0 0 90 ($name + "_lLowerLegCurveC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lLowerLegCurveC");
	
	
	duplicate -n ($name + "_lKneeCurveC") ($name + "_lLowerLegCurveC");
	setAttr ($name + "_lKneeCurveC.rotateOrder") 1;
	duplicate -n ($name + "_lUpperLegCurveC") ($name + "_lLowerLegCurveC");
	setAttr ($name + "_lUpperLegCurveC.rotateOrder") 1;
	
	group -n ($name + "_lKneeCurveCG") ($name + "_lKneeCurveC");
	pointConstraint ($name + "_lKneeJ") ($name + "_lKneeCurveCG");
	orientConstraint ($name + "_lLegUpLctr") ($name + "_lKneeCurveCG");
	
	//CONSTRAIN CENTER CLUSTERS TO MID CONTROL
	delete ($name + "_lLowerLegTopClstrG_pointConstraint1") ($name + "_lLowerLegTopClstrG_aimConstraint1")
	($name + "_lLowerLegTopGuideClstrG_pointConstraint1") ($name + "_lLowerLegTopGuideClstrG_aimConstraint1")
	($name + "_lUpperLegBtmClstrG_pointConstraint1") ($name + "_lUpperLegBtmClstrG_aimConstraint1")
	($name + "_lUpperLegBtmGuideClstrG_pointConstraint1") ($name + "_lUpperLegBtmGuideClstrG_aimConstraint1");
	
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lLowerLegTopClstrG");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lLowerLegTopGuideClstrG");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lUpperLegBtmClstrG");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lUpperLegBtmGuideClstrG");
	
	//CREATE LEFT LOCATORS FOR ANKLE TWIST
	spaceLocator -n ($name + "_lKneeTwistLctr");
	duplicate -n ($name + "_lAnkleAimLctr") ($name + "_lKneeTwistLctr");
	duplicate -n ($name + "_lAnkleTwistLctr") ($name + "_lKneeTwistLctr");
	duplicate -n ($name + "_lKneeTwist75Lctr") ($name + "_lKneeTwistLctr");
	duplicate -n ($name + "_lKneeTwist50Lctr") ($name + "_lKneeTwistLctr");
	duplicate -n ($name + "_lKneeTwist25Lctr") ($name + "_lKneeTwistLctr");
	parent ($name + "_lAnkleTwistLctr") ($name + "_lAnkleAimLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lKneeCurveC") ($name + "_lAnkleJ") ($name + "_lKneeTwistLctr");
	pointConstraint ($name + "_lKneeCurveC") ($name + "_lKneeTwistLctr");
	parentConstraint ($name + "_lKneeJ") ($name + "_lAnkleAimLctr");
	parentConstraint ($name + "_lAnkleFKC") ($name + "_lAnkleTwistLctr");
	delete ($name + "_lAnkleTwistLctr_parentConstraint1");
	parentConstraint -mo ($name + "_lAnkleJ") ($name + "_lAnkleTwistLctr");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lKneeJ") ($name + "_lKneeTwist75Lctr");
	setAttr ($name + "_lKneeTwist75Lctr_parentConstraint1." + $name + "_lKneeCurveCW0") 3;
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lKneeJ") ($name + "_lKneeTwist50Lctr");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lKneeJ") ($name + "_lKneeTwist25Lctr");
	setAttr ($name + "_lKneeTwist25Lctr_parentConstraint1." + $name + "_lKneeJW1") 3;
	
	//CREATE MULTIPLY DIVIDES FOR LEFT TWIST
	shadingNode -n ($name + "_lAnkleTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_lAnkleTwistLctr.rotateX") ($name + "_lAnkleTwist_MD.input1X");
	connectAttr -force ($name + "_lAnkleTwistLctr.rotateX") ($name + "_lAnkleTwist_MD.input1Y");
	connectAttr -force ($name + "_lAnkleTwistLctr.rotateX") ($name + "_lAnkleTwist_MD.input1Z");
	setAttr ($name + "_lAnkleTwist_MD.input2X") 0.25;
	setAttr ($name + "_lAnkleTwist_MD.input2Y") 0.5;
	setAttr ($name + "_lAnkleTwist_MD.input2Z") 0.75;
	
	shadingNode -n ($name + "_lKNeeTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_lKneeCurveC.rotateX") ($name + "_lKNeeTwist_MD.input1X");
	connectAttr -force ($name + "_lKneeCurveC.rotateX") ($name + "_lKNeeTwist_MD.input1Y");
	connectAttr -force ($name + "_lKneeCurveC.rotateX") ($name + "_lKNeeTwist_MD.input1Z");
	setAttr ($name + "_lKNeeTwist_MD.input2X") 0.25;
	setAttr ($name + "_lKNeeTwist_MD.input2Y") 0.5;
	setAttr ($name + "_lKNeeTwist_MD.input2Z") 0.75;
	
	//LEFT MOTION PATHS FOR CONTROLS
	group -n ($name + "_lLowerLegCurveCG") ($name + "_lLowerLegCurveC");
	setAttr ($name + "_lLowerLegCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_lLowerLegGuide_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lKneeTwist50Lctr") ($name + "_lLowerLegCurveCG") ($name + "_lLowerLegCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerLegGuide_MP");
	setAttr ($name + "_lLowerLegGuide_MP.uValue") .5;
	parentConstraint ($name + "_lLowerLegCurveC") ($name + "_lLowerLegMidClstr");
	connectAttr -force ($name + "_lAnkleTwist_MD.outputY") ($name + "_lLowerLegGuide_MP.frontTwist");
	
	group -n ($name + "_lUpperLegCurveCG") ($name + "_lUpperLegCurveC");
	setAttr ($name + "_lUpperLegCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_lUpperLegGuide_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lHipJ") ($name + "_lUpperLegCurveCG") ($name + "_lUpperLegCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperLegGuide_MP");
	setAttr ($name + "_lUpperLegGuide_MP.uValue") .5;
	parentConstraint ($name + "_lUpperLegCurveC") ($name + "_lUpperLegMidClstr");
	connectAttr -force ($name + "_lKNeeTwist_MD.outputY") ($name + "_lUpperLegGuide_MP.frontTwist");
	
	//LEFT INDIVIDUAL JOINT CONTROLS
	circle -n ($name + "_CurveLeg1b") -c 0 0 2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	circle -n ($name + "_CurveLeg1c") -c 0 0 -2.5 -nr 1 0 0 -sw 360 -r 0.5 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	curve -n ($name + "_CurveLeg1") -d 1 -p 0 0 -2 -p 0 0 2 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_CurveLeg1Shape");
	
	parent -r -s ($name + "_CurveLeg1bShape") ($name + "_CurveLeg1cShape") ($name + "_CurveLeg1");
	delete ($name + "_CurveLeg1b") ($name + "_CurveLeg1c");
	
	setAttr ($name + "_CurveLeg1.rotateOrder") 1;
	
	setAttr ($name +  "_CurveLeg1Shape.overrideEnabled") 1;
	setAttr ($name + "_CurveLeg1bShape.overrideEnabled") 1;
	setAttr ($name + "_CurveLeg1cShape.overrideEnabled") 1;

	//SET COLOURS
	setAttr ($name +  "_CurveLeg1Shape.overrideColor") 18;
	setAttr ($name + "_CurveLeg1bShape.overrideColor") 18;
	setAttr ($name + "_CurveLeg1cShape.overrideColor") 18;

	duplicate -n ($name + "_lLowerLegCurve1C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_lLowerLegCurve2C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_lLowerLegCurve3C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_lUpperLegCurve1C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_lUpperLegCurve2C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_lUpperLegCurve3C") ($name + "_CurveLeg1");
	scale -r ($lLowerLegLength/10) ($lLowerLegLength/10) ($lLowerLegLength/10) ($name + "_lLowerLegCurve1C") ($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurve3C");
	$lUpperLegLength = `getAttr ($name + "_lKneeJ.tx")`;
	scale -r ($lUpperLegLength/10) ($lUpperLegLength/10) ($lUpperLegLength/10) ($name + "_lUpperLegCurve1C") ($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurve3C");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lLowerLegCurve1C") ($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurve3C") ($name + "_lUpperLegCurve1C") ($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurve3C");
	
	//LEFT MOTION PATHS FOR INDIVIDUAL JOINT CONTROLS
	group -n ($name + "_lLowerLegCurve1CG") ($name + "_lLowerLegCurve1C");
	setAttr ($name + "_lLowerLegCurve1CG.rotateOrder") 1;
	group -n ($name + "_lLowerLegCurve2CG") ($name + "_lLowerLegCurve2C");
	setAttr ($name + "_lLowerLegCurve2CG.rotateOrder") 1;
	group -n ($name + "_lLowerLegCurve3CG") ($name + "_lLowerLegCurve3C");
	setAttr ($name + "_lLowerLegCurve3CG.rotateOrder") 1;
	group -n ($name + "_lUpperLegCurve1CG") ($name + "_lUpperLegCurve1C");
	setAttr ($name + "_lUpperLegCurve1CG.rotateOrder") 1;
	group -n ($name + "_lUpperLegCurve2CG") ($name + "_lUpperLegCurve2C");
	setAttr ($name + "_lUpperLegCurve2CG.rotateOrder") 1;
	group -n ($name + "_lUpperLegCurve3CG") ($name + "_lUpperLegCurve3C");
	setAttr ($name + "_lUpperLegCurve3CG.rotateOrder") 1;
	
	pathAnimation -n ($name + "_lLowerLeg1_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lKneeTwist75Lctr") ($name + "_lLowerLegCurve1CG") ($name + "_lLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerLeg1_MP");
	setAttr ($name + "_lLowerLeg1_MP.uValue") .25;
	connectAttr -force ($name + "_lAnkleTwist_MD.outputX") ($name + "_lLowerLeg1_MP.frontTwist");
	
	pathAnimation -n ($name + "_lLowerLeg2_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lKneeTwist50Lctr") ($name + "_lLowerLegCurve2CG") ($name + "_lLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerLeg2_MP");
	setAttr ($name + "_lLowerLeg2_MP.uValue") .5;
	connectAttr -force ($name + "_lAnkleTwist_MD.outputY") ($name + "_lLowerLeg2_MP.frontTwist");
	
	pathAnimation -n ($name + "_lLowerLeg3_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lKneeTwist25Lctr") ($name + "_lLowerLegCurve3CG") ($name + "_lLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lLowerLeg3_MP");
	setAttr ($name + "_lLowerLeg3_MP.uValue") .75;
	connectAttr -force ($name + "_lAnkleTwist_MD.outputZ") ($name + "_lLowerLeg3_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperLeg1_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lHipJ") ($name + "_lUpperLegCurve1CG") ($name + "_lUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperLeg1_MP");
	setAttr ($name + "_lUpperLeg1_MP.uValue") .25;
	connectAttr -force ($name + "_lKNeeTwist_MD.outputX") ($name + "_lUpperLeg1_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperLeg2_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lHipJ") ($name + "_lUpperLegCurve2CG") ($name + "_lUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperLeg2_MP");
	setAttr ($name + "_lUpperLeg2_MP.uValue") .5;
	connectAttr -force ($name + "_lKNeeTwist_MD.outputY") ($name + "_lUpperLeg2_MP.frontTwist");
	
	pathAnimation -n ($name + "_lUpperLeg3_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation"
	-worldUpVector 0 0 1 -worldUpObject ($name + "_lHipJ") ($name + "_lUpperLegCurve3CG") ($name + "_lUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_lUpperLeg3_MP");
	setAttr ($name + "_lUpperLeg3_MP.uValue") .75;
	connectAttr -force ($name + "_lKNeeTwist_MD.outputZ") ($name + "_lUpperLeg3_MP.frontTwist");
	
	
	//LEFT CURVE LEG JOINTS
	select -cl;
	joint -n ($name + "_lLowerLegCurveJ1");
	parentConstraint ($name + "_lLowerLegCurve1C") ($name + "_lLowerLegCurveJ1");
	select -cl;
	joint -n ($name + "_lLowerLegCurveJ2");
	parentConstraint ($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurveJ2");
	select -cl;
	joint -n ($name + "_lLowerLegCurveJ3");
	parentConstraint ($name + "_lLowerLegCurve3C") ($name + "_lLowerLegCurveJ3");
	select -cl;
	joint -n ($name + "_lKneeCurveJ");
	parentConstraint ($name + "_lKneeCurveC") ($name + "_lKneeCurveJ");
	select -cl;
	joint -n ($name + "_lUpperLegCurveJ1");
	parentConstraint ($name + "_lUpperLegCurve1C") ($name + "_lUpperLegCurveJ1");
	select -cl;
	joint -n ($name + "_lUpperLegCurveJ2");
	parentConstraint ($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurveJ2");
	select -cl;
	joint -n ($name + "_lUpperLegCurveJ3");
	parentConstraint ($name + "_lUpperLegCurve3C") ($name + "_lUpperLegCurveJ3");
	select -cl;
	
	joint -n ($name + "_lHipCurveJ");
	pointConstraint ($name + "_lHipJ") ($name + "_lHipCurveJ");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_lHipJ") ($name + "_lUpperLegCurveJ1") ($name + "_lHipCurveJ"); 

	//ADD LEFT CURVE ATTRIBUTE TO IK FK SWITCH
	shadingNode -asUtility multiplyDivide -n ($name + "_lLegCurve_MD1");
	connectAttr -force ($name + "_lLegSwitchC.curve") ($name + "_lLegCurve_MD1.input1X");
	setAttr ($name + "_lLegCurve_MD1.input2X") 2;
	shadingNode -asUtility multiplyDivide -n ($name + "_lLegCurve_MD2");
	connectAttr -force ($name + "_lLegCurve_MD1.outputX") ($name + "_lLegCurve_MD2.input1X");
	connectAttr -force ($name + "_lShoulderFKC.scaleX") ($name + "_lLegCurve_MD2.input2X");
	
	//UPPER LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperLegCurve_MD");
	connectAttr -force ($name + "_lLegSwitchC.upperCurve") ($name + "_lUpperLegCurve_MD.input1X");
	connectAttr -force ($name + "_lLegCurve_MD2.outputX") ($name + "_lUpperLegCurve_MD.input2X");
	connectAttr -force ($name + "_lUpperLegCurve_MD.outputX") ($name + "_lUpperLegTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_lUpperLegCurve_MD.outputX") ($name + "_lUpperLegTopClstrG.scaleX");

	//MID LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lMidLegCurve_MD");
	connectAttr -force ($name + "_lLegSwitchC.midCurve") ($name + "_lMidLegCurve_MD.input1X");
	connectAttr -force ($name + "_lLegCurve_MD2.outputX") ($name + "_lMidLegCurve_MD.input2X");
	connectAttr -force ($name + "_lMidLegCurve_MD.outputX") ($name + "_lLowerLegTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_lMidLegCurve_MD.outputX") ($name + "_lLowerLegTopClstrG.scaleX");
	connectAttr -force ($name + "_lMidLegCurve_MD.outputX") ($name + "_lUpperLegBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_lMidLegCurve_MD.outputX") ($name + "_lUpperLegBtmClstrG.scaleX");

	//LOWER LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerLegCurve_MD");
	connectAttr -force ($name + "_lLegSwitchC.lowerCurve") ($name + "_lLowerLegCurve_MD.input1X");
	connectAttr -force ($name + "_lLegCurve_MD2.outputX") ($name + "_lLowerLegCurve_MD.input2X");
	connectAttr -force ($name + "_lLowerLegCurve_MD.outputX") ($name + "_lLowerLegBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_lLowerLegCurve_MD.outputX") ($name + "_lLowerLegBtmClstrG.scaleX");
	
	//ADD ATTRIBUTE TO MAIN CONTROL FOR LEFT LEG CURVE
	addAttr -ln "legCurveMacro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.legCurveMacro");
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_lLowerLegCurveC.v");
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_lKneeCurveC.v");
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_lUpperLegCurveC.v");
	
	addAttr -ln "legCurveMicro"  -at bool  -min 0 ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.legCurveMicro");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lLowerLegCurve1C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lLowerLegCurve2C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lLowerLegCurve3C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lUpperLegCurve1C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lUpperLegCurve2C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_lUpperLegCurve3C.v");
	
	//CONNECT LEFT SCALE
	shadingNode -asUtility blendColors -n ($name + "_lUpperLegCurve1_Blend");
	setAttr ($name + "_lUpperLegCurve1_Blend.blender") 0.9;
	connectAttr -force ($name + "_lHipJ.scale") ($name + "_lUpperLegCurve1_Blend.color1");
	connectAttr -force ($name + "_lKneeJ.scale") ($name + "_lUpperLegCurve1_Blend.color2");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperLegCurve1_Scale_MD");
	connectAttr -force ($name + "_lUpperLegCurve1C.scale") ($name + "_lUpperLegCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperLegCurve1_Blend.output") ($name + "_lUpperLegCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperLegCurve1_Scale_MD.output") ($name + "_lUpperLegCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_lUpperLegCurve2_Blend") ($name + "_lUpperLegCurve1_Blend");
	setAttr ($name + "_lUpperLegCurve2_Blend.blender") 0.75;
	connectAttr -force ($name + "_lUpperLegCurve2_Blend.output") ($name + "_lUpperLegCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperLegCurve2_Scale_MD");
	connectAttr -force ($name + "_lUpperLegCurve2C.scale") ($name + "_lUpperLegCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperLegCurve2_Blend.output") ($name + "_lUpperLegCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperLegCurve2_Scale_MD.output") ($name + "_lUpperLegCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_lUpperLegCurve3_Blend") ($name + "_lUpperLegCurve1_Blend");
	setAttr ($name + "_lUpperLegCurve3_Blend.blender") 0.6;
	connectAttr -force ($name + "_lUpperLegCurve3_Blend.output") ($name + "_lUpperLegCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lUpperLegCurve3_Scale_MD");
	connectAttr -force ($name + "_lUpperLegCurve3C.scale") ($name + "_lUpperLegCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_lUpperLegCurve3_Blend.output") ($name + "_lUpperLegCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_lUpperLegCurve3_Scale_MD.output") ($name + "_lUpperLegCurveJ3.scale");
	
	duplicate -rr -ic -n ($name + "_lKneeCurve_Blend") ($name + "_lUpperLegCurve1_Blend");
	setAttr ($name + "_lKneeCurve_Blend.blender") 0.5;
	connectAttr -force ($name + "_lKneeCurve_Blend.output") ($name + "_lKneeCurveJ.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lKneeCurve_Scale_MD");
	connectAttr -force ($name + "_lKneeCurveC.scale") ($name + "_lKneeCurve_Scale_MD.input1");
	connectAttr -force ($name + "_lKneeCurve_Blend.output") ($name + "_lKneeCurve_Scale_MD.input2");
	connectAttr -force ($name + "_lKneeCurve_Scale_MD.output") ($name + "_lKneeCurveJ.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerLegCurve1_Blend") ($name + "_lUpperLegCurve1_Blend");
	setAttr ($name + "_lLowerLegCurve1_Blend.blender") 0.4;
	connectAttr -force ($name + "_lLowerLegCurve1_Blend.output") ($name + "_lLowerLegCurveJ1.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerLegCurve1_Scale_MD");
	connectAttr -force ($name + "_lLowerLegCurve1C.scale") ($name + "_lLowerLegCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerLegCurve1_Blend.output") ($name + "_lLowerLegCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerLegCurve1_Scale_MD.output") ($name + "_lLowerLegCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerLegCurve2_Blend") ($name + "_lLowerLegCurve1_Blend");
	setAttr ($name + "_lLowerLegCurve2_Blend.blender") 0.25;
	connectAttr -force ($name + "_lLowerLegCurve2_Blend.output") ($name + "_lLowerLegCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerLegCurve2_Scale_MD");
	connectAttr -force ($name + "_lLowerLegCurve2C.scale") ($name + "_lLowerLegCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerLegCurve2_Blend.output") ($name + "_lLowerLegCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerLegCurve2_Scale_MD.output") ($name + "_lLowerLegCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_lLowerLegCurve3_Blend") ($name + "_lLowerLegCurve1_Blend");
	setAttr ($name + "_lLowerLegCurve3_Blend.blender") 0.1;
	connectAttr -force ($name + "_lLowerLegCurve3_Blend.output") ($name + "_lLowerLegCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_lLowerLegCurve3_Scale_MD");
	connectAttr -force ($name + "_lLowerLegCurve3C.scale") ($name + "_lLowerLegCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_lLowerLegCurve3_Blend.output") ($name + "_lLowerLegCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_lLowerLegCurve3_Scale_MD.output") ($name + "_lLowerLegCurveJ3.scale");	
	
	//LEFT CLEAN UP
	if (`objExists ($name + "_curveNodesG")`)
	{	}
	else
	{
		group -em -n ($name + "_curveNodesG");
		parent ($name + "_curveNodesG") ($name + "_MainC");
		group -em -n ($name + "_extraCurveNodesG");
	}
	parent ($name + "_lKneeCurveLctr") ($name + "_lLowerLegTopClstrG") ($name + "_lLowerLegBtmClstrG")
	($name + "_lLowerLegTopGuideClstrG") ($name + "_lLowerLegBtmGuideClstrG") ($name + "_lHipCurveLctr")
	($name + "_lKneeTopCurveLctr") ($name + "_lUpperLegTopClstrG") ($name + "_lUpperLegBtmClstrG") ($name + "_lUpperLegTopGuideClstrG")
	($name + "_lUpperLegBtmGuideClstrG") ($name + "_lKneeCurveCG") ($name + "_lLowerLegCurveJ1") ($name + "_lLowerLegCurveJ2")
	($name + "_lLowerLegCurveJ3") ($name + "_lKneeCurveJ") ($name + "_lUpperLegCurveJ1") ($name + "_lUpperLegCurveJ2") ($name + "_lUpperLegCurveJ3")
	($name + "_lHipCurveJ") ($name + "_curveNodesG");
	
	parent ($name + "_lLowerLegCurve") ($name + "_lUpperLegCurve") ($name + "_lLowerLegCurveGuide") ($name + "_lUpperLegCurveGuide")
	($name + "_lLowerLegMidClstr") ($name + "_lUpperLegMidClstr") ($name + "_lLowerLegCurveCG") ($name + "_lUpperLegCurveCG")
	($name + "_lLowerLegCurve1CG") ($name + "_lLowerLegCurve2CG") ($name + "_lLowerLegCurve3CG") ($name + "_lUpperLegCurve1CG")
	($name + "_lUpperLegCurve2CG") ($name + "_lUpperLegCurve3CG") ($name + "_extraCurveNodesG");
	
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerLegCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerLegCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerLegCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lLowerLegCurve3CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperLegCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperLegCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperLegCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_lUpperLegCurve3CG.scale");
	
	setAttr ($name + "_lAnkleFKtoIKLctr.v") 0;
	setAttr ($name + "_lAnkleIKtoFKLctr.v") 0;
	setAttr ($name + "_lKneeTopCurveLctr.v") 0;
	setAttr ($name + "_lKneeCurveLctr.v") 0;
	setAttr ($name + "_lHipCurveLctr.v") 0;
	setAttr ($name + "_lKneeTwist25Lctr.v") 0;
	setAttr ($name + "_lKneeTwistLctr.v") 0;
	setAttr ($name + "_lAnkleAimLctr.v") 0;
	setAttr ($name + "_lKneeTwist75Lctr.v") 0;
	setAttr ($name + "_lKneeTwist50Lctr.v") 0;
	
	setAttr ($name + "_lUpperLegBtmGuideClstr.v") 0;
	setAttr ($name + "_lLowerLegMidClstr.v") 0;
	setAttr ($name + "_lUpperLegMidClstr.v") 0;
	setAttr ($name + "_lLowerLegTopClstr.v") 0;
	setAttr ($name + "_lLowerLegBtmClstr.v") 0;
	setAttr ($name + "_lLowerLegTopGuideClstr.v") 0;
	setAttr ($name + "_lLowerLegBtmGuideClstr.v") 0;
	setAttr ($name + "_lUpperLegTopClstr.v") 0;
	setAttr ($name + "_lUpperLegBtmClstr.v") 0;
	setAttr ($name + "_lUpperLegTopGuideClstr.v") 0;
	setAttr ($name + "_lLegUpLctr.v") 0;
	
	setAttr ($name + "_lHipJ.overrideEnabled") 1;
	setAttr ($name + "_lHipJ.overrideLevelOfDetail") 1;
	setAttr ($name + "_lAnkleJ.overrideEnabled") 1;
	
	setAttr ($name + "_lUpperLegCurveGuide.v") 0;
	setAttr ($name + "_lLowerLegCurveGuide.v") 0;
	setAttr ($name + "_lUpperLegCurve.template") 1;
	setAttr ($name + "_lLowerLegCurve.template") 1;
	
	editDisplayLayerMembers -noRecurse ($name + "_JointsLayer") ($name + "_lAnkleJFK") ($name + "_lLowerLegCurveJ1")
	($name + "_lLowerLegCurveJ2") ($name + "_lLowerLegCurveJ3") ($name + "_lKneeCurveJ") ($name + "_lUpperLegCurveJ1") ($name + "_lUpperLegCurveJ2")
	($name + "_lUpperLegCurveJ3") ($name + "_lHipCurveJ");
	
	editDisplayLayerMembers -noRecurse ($name + "_ControlsLayer") ($name + "_lUpperLegCurve3C")
	($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurveC") ($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurve1C") ($name + "_lKneeCurveC")
	($name + "_lLowerLegCurveC") ($name + "_lLowerLegCurve3C") ($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurve1C") ($name + "_lLowerLegCurve")
	($name + "_lUpperLegCurve") ($name + "_lLowerLegCurveGuide") ($name + "_lUpperLegCurveGuide") ;
	
	////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////RIGHT LEG////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	//CREATE RIGHT CURVES
	$rAnkleLoc = `xform -q -ws -rp ($name + "_rAnkleJ")`;
	$rKneeLoc = `xform -q -ws -rp ($name + "_rKneeJ")`;
	$rHipLoc = `xform -q -ws -rp ($name + "_rHipJ")`;
	
	curve -n ($name + "_rLowerLegCurve") -d 1 -p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2]
	-p $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rLowerLegCurveShape");
	
	curve -n ($name + "_rUpperLegCurve") -d 1 -p $rHipLoc[0] $rHipLoc[1] $rHipLoc[2]
	-p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rUpperLegCurveShape");
	
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_rLowerLegCurve");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 2 -d 3 -tol 0.01 ($name + "_rUpperLegCurve");
	
	curve -n ($name + "_rLowerLegCurveGuide") -d 1 -p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2]
	-p $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rLowerLegCurveGuideShape");
	
	curve -n ($name + "_rUpperLegCurveGuide") -d 1 -p $rHipLoc[0] $rHipLoc[1] $rHipLoc[2]
	-p $rKneeLoc[0] $rKneeLoc[1] $rKneeLoc[2] -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rUpperLegCurveGuideShape");

	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_rLowerLegCurveGuide");
	rebuildCurve -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s 1 -d 3 -tol 0.01 ($name + "_rUpperLegCurveGuide");
	delete -ch ($name + "_rLowerLegCurve") ($name + "_rUpperLegCurve") ($name + "_rLowerLegCurveGuide") ($name + "_rUpperLegCurveGuide");
	
	//CREATE RIGHT LOCATOR FOR UP AXIS
	spaceLocator -n ($name + "_rLegUpLctr");
	delete `parentConstraint ($name + "_rKneeJ") ($name + "_rLegUpLctr")`;
	parent ($name + "_rLegUpLctr") ($name + "_rHipJ");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rLegUp_MD");
	connectAttr -force ($name + "_rKneeJ.rotateZ") ($name + "_rLegUp_MD.input1X");
	setAttr ($name + "_rLegUp_MD.operation") 2;
	setAttr ($name + "_rLegUp_MD.input2X") 2;
	connectAttr -force ($name + "_rLegUp_MD.outputX") ($name + "_rLegUpLctr.rotateZ");
	
	////////////////////////////////////LOWER LEG////////////////////////////////////
	//RIGHT LOWER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_rKneeCurveLctr");
	parentConstraint ($name + "_rAnkleFKC") ($name + "_rKneeCurveLctr");
	delete ($name + "_rKneeCurveLctr_parentConstraint1");
	parent ($name + "_rKneeCurveLctr") ($name + "_rAnkleFKC");                                
	$rLowerLegLength = `getAttr ($name + "_rAnkleJ.tx")`;
	move -r -os ($rLowerLegLength *-1) 0 0 ($name + "_rKneeCurveLctr");
	parent -w ($name + "_rKneeCurveLctr");
	parentConstraint -mo ($name + "_rAnkleJ") ($name + "_rKneeCurveLctr");
	
	//RIGHT LOWER CURVE CLUSTERS
	select ($name + "_rLowerLegCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerLegTopClstr");
	group -em -n ($name + "_rLowerLegTopClstrG");
	pointConstraint ($name + "_rKneeJ") ($name + "_rLowerLegTopClstrG");
	parent ($name + "_rLowerLegTopClstrG") ($name + "_rKneeJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerLegTopClstrG");
	parent -w ($name + "_rLowerLegTopClstrG");
	parent ($name + "_rLowerLegTopClstr") ($name + "_rLowerLegTopClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rHipJ") ($name + "_rLegUpLctr") ($name + "_rLowerLegTopClstrG");
	
	select ($name + "_rLowerLegCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerLegBtmClstr");
	group -em -n ($name + "_rLowerLegBtmClstrG");
	pointConstraint ($name + "_rAnkleJ") ($name + "_rLowerLegBtmClstrG");
	parent ($name + "_rLowerLegBtmClstrG") ($name + "_rKneeJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerLegBtmClstrG");
	parent ($name + "_rLowerLegBtmClstr") ($name + "_rLowerLegBtmClstrG");
	parent -w ($name + "_rLowerLegBtmClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rKneeCurveLctr") ($name + "_rKneeCurveLctr") ($name + "_rLowerLegBtmClstrG");
	
	select ($name + "_rLowerLegCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerLegMidClstr");
	
	//RIGHT LOWER GUIDE CURVE CLUSTERS
	select ($name + "_rLowerLegCurveGuide.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerLegTopGuideClstr");
	group -em -n ($name + "_rLowerLegTopGuideClstrG");
	pointConstraint ($name + "_rKneeJ") ($name + "_rLowerLegTopGuideClstrG");
	parent ($name + "_rLowerLegTopGuideClstrG") ($name + "_rKneeJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerLegTopGuideClstrG");
	parent -w ($name + "_rLowerLegTopGuideClstrG");
	parent ($name + "_rLowerLegTopGuideClstr") ($name + "_rLowerLegTopGuideClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rHipJ") ($name + "_rLegUpLctr") ($name + "_rLowerLegTopGuideClstrG"); 
	
	select ($name + "_rLowerLegCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_rLowerLegBtmGuideClstr");
	group -em -n ($name + "_rLowerLegBtmGuideClstrG");
	pointConstraint ($name + "_rAnkleJ") ($name + "_rLowerLegBtmGuideClstrG");
	parent ($name + "_rLowerLegBtmGuideClstrG") ($name + "_rKneeJ");
	makeIdentity -apply false -r 1 ($name + "_rLowerLegBtmGuideClstrG");
	parent ($name + "_rLowerLegBtmGuideClstr") ($name + "_rLowerLegBtmGuideClstrG");
	parent -w ($name + "_rLowerLegBtmGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rKneeCurveLctr") ($name + "_rKneeCurveLctr") ($name + "_rLowerLegBtmGuideClstrG");
	
	////////////////////////////////////UPPER LEG////////////////////////////////////
	//RIGHT UPPER LOCATOR FOR AIMING CLUSTERS
	spaceLocator -n ($name + "_rHipCurveLctr");
	parentConstraint ($name + "_rKneeFKC") ($name + "_rHipCurveLctr");
	delete ($name + "_rHipCurveLctr_parentConstraint1");
	parent ($name + "_rHipCurveLctr") ($name + "_rKneeFKC");
	$rUpperLegLength = `getAttr ($name + "_rKneeJ.tx")`;
	move -r -os ($rUpperLegLength *-1) 0 0 ($name + "_rHipCurveLctr");
	parent -w ($name + "_rHipCurveLctr");
	parentConstraint -mo ($name + "_rKneeJ") ($name + "_rHipCurveLctr");
	
	spaceLocator -n ($name + "_rKneeTopCurveLctr");
	parentConstraint ($name + "_MainHipC") ($name + "_rKneeTopCurveLctr");
	delete ($name + "_rKneeTopCurveLctr_parentConstraint1");
	parent ($name + "_rKneeTopCurveLctr") ($name + "_MainHipC");
	pointConstraint ($name + "_rHipFKC") ($name + "_rKneeTopCurveLctr");
	delete ($name + "_rKneeTopCurveLctr_pointConstraint1");
	move -r -os 0 ($rUpperLegLength* -1) 0 ($name + "_rKneeTopCurveLctr");
	parent -w ($name + "_rKneeTopCurveLctr");
	parentConstraint -mo ($name + "_MainHipC") ($name + "_rKneeTopCurveLctr");
	
	//RIGHT UPPER CURVE CLUSTERS
	select ($name + "_rUpperLegCurve.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperLegTopClstr");
	group -em -n ($name + "_rUpperLegTopClstrG");
	pointConstraint ($name + "_rHipJ") ($name + "_rUpperLegTopClstrG");
	parent ($name + "_rUpperLegTopClstrG") ($name + "_rHipJ");
	makeIdentity -apply false -r 1 ($name + "_rUpperLegTopClstrG");
	parent -w ($name + "_rUpperLegTopClstrG");
	parent ($name + "_rUpperLegTopClstr") ($name + "_rUpperLegTopClstrG");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rHipCurveLctr") ($name + "_rKneeTopCurveLctr") ($name + "_rUpperLegTopClstrG");
	
	select ($name + "_rUpperLegCurve.cv[3:4]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperLegBtmClstr");
	group -em -n ($name + "_rUpperLegBtmClstrG");
	pointConstraint ($name + "_rKneeJ") ($name + "_rUpperLegBtmClstrG");
	delete `orientConstraint ($name + "_rHipFKC") ($name + "_rUpperLegBtmClstrG")`;
	parent ($name + "_rUpperLegBtmClstr") ($name + "_rUpperLegBtmClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rLegUpLctr") ($name + "_rLegUpLctr") ($name + "_rUpperLegBtmClstrG"); 
	
	select ($name + "_rUpperLegCurve.cv[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperLegMidClstr");
	
	//RIGHT UPPER GUIDE CURVE CLUSTERS
	select ($name + "_rUpperLegCurveGuide.cv[0:1]") ;                            
	newCluster " -envelope 1";
	rename ($name + "_rUpperLegTopGuideClstr");
	group -em -n ($name + "_rUpperLegTopGuideClstrG");
	pointConstraint ($name + "_rHipJ") ($name + "_rUpperLegTopGuideClstrG");
	parent ($name + "_rUpperLegTopGuideClstrG") ($name + "_rHipJ");
	makeIdentity -apply false -r 1 ($name + "_rUpperLegTopGuideClstrG");
	parent -w ($name + "_rUpperLegTopGuideClstrG");
	parent ($name + "_rUpperLegTopGuideClstr") ($name + "_rUpperLegTopGuideClstrG");
	aimConstraint -aimVector 1 0 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rHipCurveLctr") ($name + "_rKneeTopCurveLctr") ($name + "_rUpperLegTopGuideClstrG");
	
	select ($name + "_rUpperLegCurveGuide.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_rUpperLegBtmGuideClstr");
	group -em -n ($name + "_rUpperLegBtmGuideClstrG");
	pointConstraint ($name + "_rKneeJ") ($name + "_rUpperLegBtmGuideClstrG");
	delete `orientConstraint ($name + "_rHipFKC") ($name + "_rUpperLegBtmGuideClstrG")`;
	parent ($name + "_rUpperLegBtmGuideClstr") ($name + "_rUpperLegBtmGuideClstrG");
	aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "objectrotation"
	-worldUpVector -1 0 0 -worldUpObject ($name + "_rLegUpLctr") ($name + "_rLegUpLctr") ($name + "_rUpperLegBtmGuideClstrG"); 
	
	////////////////////////////////////////////////////////////////////////////////
	///////////////////////////CREATE RIGHT CURVE CONTROLS///////////////////////////
	////////////////////////////////////////////////////////////////////////////////
	
	nurbsSquare -n ($name + "_rLowerLegCurveC") -c 0 0 0 -nr 0 1 0 -sl1 1 -sl2 1 -sps 1 -d 3 -ch 1 ;
	setAttr ($name + "_rLowerLegCurveC.rotateOrder") 1;

	rename ("right" + $name +  "_rLowerLegCurveC") ($name + "_right" + "_rLowerLegCurveC");
	rename ("left" + $name +  "_rLowerLegCurveC") ($name + "_left" + "_rLowerLegCurveC");
	rename ("top" + $name +  "_rLowerLegCurveC") ($name + "_top" + "_rLowerLegCurveC");
	rename ("bottom" + $name +  "_rLowerLegCurveC") ($name + "_bottom" + "_rLowerLegCurveC");

	parent -r -s ($name + "_right" + "_rLowerLegCurveCShape") ($name + "_bottom" + "_rLowerLegCurveCShape") ($name + "_left" + "_rLowerLegCurveCShape") ($name + "_top" + "_rLowerLegCurveCShape") ($name + "_rLowerLegCurveC");
	delete ($name + "_top" + "_rLowerLegCurveC") ($name + "_left" + "_rLowerLegCurveC") ($name + "_bottom" + "_rLowerLegCurveC") ($name + "_right" + "_rLowerLegCurveC");
	delete -ch ($name + "_rLowerLegCurveC");
	
	setAttr ($name + "_right" + "_rLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_bottom" + "_rLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_left" + "_rLowerLegCurveCShape.overrideEnabled") 1;
	setAttr ($name + "_top" + "_rLowerLegCurveCShape.overrideEnabled") 1;
	
	setAttr ($name + "_right" + "_rLowerLegCurveCShape.overrideColor")  21;
	setAttr ($name + "_bottom" + "_rLowerLegCurveCShape.overrideColor") 21;
	setAttr ($name + "_left" + "_rLowerLegCurveCShape.overrideColor")   21;
	setAttr ($name + "_top" + "_rLowerLegCurveCShape.overrideColor")    21;

	$rKneeLength = `getAttr ($name + "_rKneeJ.tx")`;
	$rAnkleLength = `getAttr ($name + "_rAnkleJ.tx")`;
	$rLegLength = (($rKneeLength + $rAnkleLength) /2);
	
	
	setAttr (($name + "_rLowerLegCurveC.scale"), ($rLegLength/2), ($rLegLength/2), ($rLegLength/2));
	rotate -r 0 0 90 ($name + "_rLowerLegCurveC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLowerLegCurveC");
	
	
	duplicate -n ($name + "_rKneeCurveC") ($name + "_rLowerLegCurveC");
	setAttr ($name + "_rKneeCurveC.rotateOrder") 1;
	duplicate -n ($name + "_rUpperLegCurveC") ($name + "_rLowerLegCurveC");
	setAttr ($name + "_rUpperLegCurveC.rotateOrder") 1;
	
	group -n ($name + "_rKneeCurveCG") ($name + "_rKneeCurveC");
	pointConstraint ($name + "_rKneeJ") ($name + "_rKneeCurveCG");
	orientConstraint ($name + "_rLegUpLctr") ($name + "_rKneeCurveCG");
	
	//CONSTRAIN CENTER CLUSTERS TO MID CONTROL
	delete ($name + "_rLowerLegTopClstrG_pointConstraint1") ($name + "_rLowerLegTopClstrG_aimConstraint1")
	($name + "_rLowerLegTopGuideClstrG_pointConstraint1") ($name + "_rLowerLegTopGuideClstrG_aimConstraint1")
	($name + "_rUpperLegBtmClstrG_pointConstraint1") ($name + "_rUpperLegBtmClstrG_aimConstraint1")
	($name + "_rUpperLegBtmGuideClstrG_pointConstraint1") ($name + "_rUpperLegBtmGuideClstrG_aimConstraint1");
	
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rLowerLegTopClstrG");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rLowerLegTopGuideClstrG");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rUpperLegBtmClstrG");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rUpperLegBtmGuideClstrG");
	
	//CREATE RIGHT LOCATORS FOR ANKLE TWIST
	spaceLocator -n ($name + "_rKneeTwistLctr");
	duplicate -n ($name + "_rAnkleAimLctr") ($name + "_rKneeTwistLctr");
	duplicate -n ($name + "_rAnkleTwistLctr") ($name + "_rKneeTwistLctr");
	duplicate -n ($name + "_rKneeTwist75Lctr") ($name + "_rKneeTwistLctr");
	duplicate -n ($name + "_rKneeTwist50Lctr") ($name + "_rKneeTwistLctr");
	duplicate -n ($name + "_rKneeTwist25Lctr") ($name + "_rKneeTwistLctr");
	parent ($name + "_rAnkleTwistLctr") ($name + "_rAnkleAimLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rKneeCurveC") ($name + "_rAnkleJ") ($name + "_rKneeTwistLctr");
	pointConstraint ($name + "_rKneeCurveC") ($name + "_rKneeTwistLctr");
	parentConstraint ($name + "_rKneeJ") ($name + "_rAnkleAimLctr");
	parentConstraint ($name + "_rAnkleFKC") ($name + "_rAnkleTwistLctr");
	delete ($name + "_rAnkleTwistLctr_parentConstraint1");
	parentConstraint -mo ($name + "_rAnkleJ") ($name + "_rAnkleTwistLctr");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rKneeJ") ($name + "_rKneeTwist75Lctr");
	setAttr ($name + "_rKneeTwist75Lctr_parentConstraint1." + $name + "_rKneeCurveCW0") 3;
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rKneeJ") ($name + "_rKneeTwist50Lctr");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rKneeJ") ($name + "_rKneeTwist25Lctr");
	setAttr ($name + "_rKneeTwist25Lctr_parentConstraint1." + $name + "_rKneeJW1") 3;
	
	//CREATE MULTIPLY DIVIDES FOR RIGHT TWIST
	shadingNode -n ($name + "_rAnkleTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_rAnkleTwistLctr.rotateX") ($name + "_rAnkleTwist_MD.input1X");
	connectAttr -force ($name + "_rAnkleTwistLctr.rotateX") ($name + "_rAnkleTwist_MD.input1Y");
	connectAttr -force ($name + "_rAnkleTwistLctr.rotateX") ($name + "_rAnkleTwist_MD.input1Z");
	setAttr ($name + "_rAnkleTwist_MD.input2X") 0.25;
	setAttr ($name + "_rAnkleTwist_MD.input2Y") 0.5;
	setAttr ($name + "_rAnkleTwist_MD.input2Z") 0.75;
	
	shadingNode -n ($name + "_rKNeeTwist_MD") -asUtility multiplyDivide;
	connectAttr -force ($name + "_rKneeCurveC.rotateX") ($name + "_rKNeeTwist_MD.input1X");
	connectAttr -force ($name + "_rKneeCurveC.rotateX") ($name + "_rKNeeTwist_MD.input1Y");
	connectAttr -force ($name + "_rKneeCurveC.rotateX") ($name + "_rKNeeTwist_MD.input1Z");
	setAttr ($name + "_rKNeeTwist_MD.input2X") 0.25;
	setAttr ($name + "_rKNeeTwist_MD.input2Y") 0.5;
	setAttr ($name + "_rKNeeTwist_MD.input2Z") 0.75;
	
	//RIGHT MOTION PATHS FOR CONTROLS
	group -n ($name + "_rLowerLegCurveCG") ($name + "_rLowerLegCurveC");
	setAttr ($name + "_rLowerLegCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_rLowerLegGuide_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rKneeTwist50Lctr") ($name + "_rLowerLegCurveCG") ($name + "_rLowerLegCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerLegGuide_MP");
	setAttr ($name + "_rLowerLegGuide_MP.uValue") .5;
	parentConstraint ($name + "_rLowerLegCurveC") ($name + "_rLowerLegMidClstr");
	connectAttr -force ($name + "_rAnkleTwist_MD.outputY") ($name + "_rLowerLegGuide_MP.frontTwist");
	
	group -n ($name + "_rUpperLegCurveCG") ($name + "_rUpperLegCurveC");
	setAttr ($name + "_rUpperLegCurveCG.rotateOrder") 1;
	pathAnimation -n ($name + "_rUpperLegGuide_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rHipJ") ($name + "_rUpperLegCurveCG") ($name + "_rUpperLegCurveGuide");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperLegGuide_MP");
	setAttr ($name + "_rUpperLegGuide_MP.uValue") .5;
	parentConstraint ($name + "_rUpperLegCurveC") ($name + "_rUpperLegMidClstr");
	connectAttr -force ($name + "_rKNeeTwist_MD.outputY") ($name + "_rUpperLegGuide_MP.frontTwist");
	
	//SET COLOURS
	setAttr ($name +  "_CurveLeg1Shape.overrideColor") 21;
	setAttr ($name + "_CurveLeg1bShape.overrideColor") 21;
	setAttr ($name + "_CurveLeg1cShape.overrideColor") 21;

	//RIGHT INDIVIDUAL JOINT CONTROLS
	duplicate -n ($name + "_rLowerLegCurve1C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_rLowerLegCurve2C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_rLowerLegCurve3C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_rUpperLegCurve1C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_rUpperLegCurve2C") ($name + "_CurveLeg1");
	duplicate -n ($name + "_rUpperLegCurve3C") ($name + "_CurveLeg1");
	scale -r ($rLowerLegLength/10) ($rLowerLegLength/10) ($rLowerLegLength/10) ($name + "_rLowerLegCurve1C") ($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurve3C");
	$rUpperLegLength = `getAttr ($name + "_rKneeJ.tx")`;
	scale -r ($rUpperLegLength/10) ($rUpperLegLength/10) ($rUpperLegLength/10) ($name + "_rUpperLegCurve1C") ($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurve3C");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLowerLegCurve1C") ($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurve3C") ($name + "_rUpperLegCurve1C") ($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurve3C");
	
	//RIGHT MOTION PATHS FOR INDIVIDUAL JOINT CONTROLS
	group -n ($name + "_rLowerLegCurve1CG") ($name + "_rLowerLegCurve1C");
	setAttr ($name + "_rLowerLegCurve1CG.rotateOrder") 1;
	group -n ($name + "_rLowerLegCurve2CG") ($name + "_rLowerLegCurve2C");
	setAttr ($name + "_rLowerLegCurve2CG.rotateOrder") 1;
	group -n ($name + "_rLowerLegCurve3CG") ($name + "_rLowerLegCurve3C");
	setAttr ($name + "_rLowerLegCurve3CG.rotateOrder") 1;
	group -n ($name + "_rUpperLegCurve1CG") ($name + "_rUpperLegCurve1C");
	setAttr ($name + "_rUpperLegCurve1CG.rotateOrder") 1;
	group -n ($name + "_rUpperLegCurve2CG") ($name + "_rUpperLegCurve2C");
	setAttr ($name + "_rUpperLegCurve2CG.rotateOrder") 1;
	group -n ($name + "_rUpperLegCurve3CG") ($name + "_rUpperLegCurve3C");
	setAttr ($name + "_rUpperLegCurve3CG.rotateOrder") 1;
	
	pathAnimation -n ($name + "_rLowerLeg1_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rKneeTwist75Lctr") ($name + "_rLowerLegCurve1CG") ($name + "_rLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerLeg1_MP");
	setAttr ($name + "_rLowerLeg1_MP.uValue") .25;
	connectAttr -force ($name + "_rAnkleTwist_MD.outputX") ($name + "_rLowerLeg1_MP.frontTwist");
	
	pathAnimation -n ($name + "_rLowerLeg2_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rKneeTwist50Lctr") ($name + "_rLowerLegCurve2CG") ($name + "_rLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerLeg2_MP");
	setAttr ($name + "_rLowerLeg2_MP.uValue") .5;
	connectAttr -force ($name + "_rAnkleTwist_MD.outputY") ($name + "_rLowerLeg2_MP.frontTwist");
	
	pathAnimation -n ($name + "_rLowerLeg3_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rKneeTwist25Lctr") ($name + "_rLowerLegCurve3CG") ($name + "_rLowerLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rLowerLeg3_MP");
	setAttr ($name + "_rLowerLeg3_MP.uValue") .75;
	connectAttr -force ($name + "_rAnkleTwist_MD.outputZ") ($name + "_rLowerLeg3_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperLeg1_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rHipJ") ($name + "_rUpperLegCurve1CG") ($name + "_rUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperLeg1_MP");
	setAttr ($name + "_rUpperLeg1_MP.uValue") .25;
	connectAttr -force ($name + "_rKNeeTwist_MD.outputX") ($name + "_rUpperLeg1_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperLeg2_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rHipJ") ($name + "_rUpperLegCurve2CG") ($name + "_rUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperLeg2_MP");
	setAttr ($name + "_rUpperLeg2_MP.uValue") .5;
	connectAttr -force ($name + "_rKNeeTwist_MD.outputY") ($name + "_rUpperLeg2_MP.frontTwist");
	
	pathAnimation -n ($name + "_rUpperLeg3_MP") -fractionMode true -followAxis x -upAxis z -worldUpType "objectrotation" -inverseFront true
	-worldUpVector 0 0 1 -worldUpObject ($name + "_rHipJ") ($name + "_rUpperLegCurve3CG") ($name + "_rUpperLegCurve");
	cutKey -cl -t ":" -f ":" -at "u" ($name + "_rUpperLeg3_MP");
	setAttr ($name + "_rUpperLeg3_MP.uValue") .75;
	connectAttr -force ($name + "_rKNeeTwist_MD.outputZ") ($name + "_rUpperLeg3_MP.frontTwist");
	
	
	//RIGHT CURVE LEG JOINTS
	select -cl;
	joint -n ($name + "_rLowerLegCurveJ1");
	parentConstraint ($name + "_rLowerLegCurve1C") ($name + "_rLowerLegCurveJ1");
	select -cl;
	joint -n ($name + "_rLowerLegCurveJ2");
	parentConstraint ($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurveJ2");
	select -cl;
	joint -n ($name + "_rLowerLegCurveJ3");
	parentConstraint ($name + "_rLowerLegCurve3C") ($name + "_rLowerLegCurveJ3");
	select -cl;
	joint -n ($name + "_rKneeCurveJ");
	parentConstraint ($name + "_rKneeCurveC") ($name + "_rKneeCurveJ");
	select -cl;
	joint -n ($name + "_rUpperLegCurveJ1");
	parentConstraint ($name + "_rUpperLegCurve1C") ($name + "_rUpperLegCurveJ1");
	select -cl;
	joint -n ($name + "_rUpperLegCurveJ2");
	parentConstraint ($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurveJ2");
	select -cl;
	joint -n ($name + "_rUpperLegCurveJ3");
	parentConstraint ($name + "_rUpperLegCurve3C") ($name + "_rUpperLegCurveJ3");
	select -cl;
	
	joint -n ($name + "_rHipCurveJ");
	pointConstraint ($name + "_rHipJ") ($name + "_rHipCurveJ");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_rUpperLegCurve1C") ($name + "_rUpperLegCurveJ1") ($name + "_rHipCurveJ"); 
	
	//ADD RIGHT CURVE ATTRIBUTE TO IK FK SWITCH
	shadingNode -asUtility multiplyDivide -n ($name + "_rLegCurve_MD1");
	connectAttr -force ($name + "_rLegSwitchC.curve") ($name + "_rLegCurve_MD1.input1X");
	setAttr ($name + "_rLegCurve_MD1.input2X") 2;
	shadingNode -asUtility multiplyDivide -n ($name + "_rLegCurve_MD2");
	connectAttr -force ($name + "_rLegCurve_MD1.outputX") ($name + "_rLegCurve_MD2.input1X");
	connectAttr -force ($name + "_rShoulderFKC.scaleX") ($name + "_rLegCurve_MD2.input2X");
	
	//UPPER LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperLegCurve_MD");
	connectAttr -force ($name + "_rLegSwitchC.upperCurve") ($name + "_rUpperLegCurve_MD.input1X");
	connectAttr -force ($name + "_rLegCurve_MD2.outputX") ($name + "_rUpperLegCurve_MD.input2X");
	connectAttr -force ($name + "_rUpperLegCurve_MD.outputX") ($name + "_rUpperLegTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_rUpperLegCurve_MD.outputX") ($name + "_rUpperLegTopClstrG.scaleX");

	//MID LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rMidLegCurve_MD");
	connectAttr -force ($name + "_rLegSwitchC.midCurve") ($name + "_rMidLegCurve_MD.input1X");
	connectAttr -force ($name + "_rLegCurve_MD2.outputX") ($name + "_rMidLegCurve_MD.input2X");
	connectAttr -force ($name + "_rMidLegCurve_MD.outputX") ($name + "_rLowerLegTopGuideClstrG.scaleX");
	connectAttr -force ($name + "_rMidLegCurve_MD.outputX") ($name + "_rLowerLegTopClstrG.scaleX");
	connectAttr -force ($name + "_rMidLegCurve_MD.outputX") ($name + "_rUpperLegBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_rMidLegCurve_MD.outputX") ($name + "_rUpperLegBtmClstrG.scaleX");

	//LOWER LEG CURVE
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerLegCurve_MD");
	connectAttr -force ($name + "_rLegSwitchC.lowerCurve") ($name + "_rLowerLegCurve_MD.input1X");
	connectAttr -force ($name + "_rLegCurve_MD2.outputX") ($name + "_rLowerLegCurve_MD.input2X");
	connectAttr -force ($name + "_rLowerLegCurve_MD.outputX") ($name + "_rLowerLegBtmGuideClstrG.scaleX");
	connectAttr -force ($name + "_rLowerLegCurve_MD.outputX") ($name + "_rLowerLegBtmClstrG.scaleX");
	
	//ADD ATTRIBUTE TO MAIN CONTROL FOR RIGHT LEG CURVE
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_rLowerLegCurveC.v");
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_rKneeCurveC.v");
	connectAttr -f ($name + "_MainC.legCurveMacro") ($name + "_rUpperLegCurveC.v");
	
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rLowerLegCurve1C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rLowerLegCurve2C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rLowerLegCurve3C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rUpperLegCurve1C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rUpperLegCurve2C.v");
	connectAttr -f ($name + "_MainC.legCurveMicro") ($name + "_rUpperLegCurve3C.v");
	
	//CONNECT RIGHT SCALE
	shadingNode -asUtility blendColors -n ($name + "_rUpperLegCurve1_Blend");
	setAttr ($name + "_rUpperLegCurve1_Blend.blender") 0.9;
	connectAttr -force ($name + "_rHipJ.scale") ($name + "_rUpperLegCurve1_Blend.color1");
	connectAttr -force ($name + "_rKneeJ.scale") ($name + "_rUpperLegCurve1_Blend.color2");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperLegCurve1_Scale_MD");
	connectAttr -force ($name + "_rUpperLegCurve1C.scale") ($name + "_rUpperLegCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperLegCurve1_Blend.output") ($name + "_rUpperLegCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperLegCurve1_Scale_MD.output") ($name + "_rUpperLegCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_rUpperLegCurve2_Blend") ($name + "_rUpperLegCurve1_Blend");
	setAttr ($name + "_rUpperLegCurve2_Blend.blender") 0.75;
	connectAttr -force ($name + "_rUpperLegCurve2_Blend.output") ($name + "_rUpperLegCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperLegCurve2_Scale_MD");
	connectAttr -force ($name + "_rUpperLegCurve2C.scale") ($name + "_rUpperLegCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperLegCurve2_Blend.output") ($name + "_rUpperLegCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperLegCurve2_Scale_MD.output") ($name + "_rUpperLegCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_rUpperLegCurve3_Blend") ($name + "_rUpperLegCurve1_Blend");
	setAttr ($name + "_rUpperLegCurve3_Blend.blender") 0.6;
	connectAttr -force ($name + "_rUpperLegCurve3_Blend.output") ($name + "_rUpperLegCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rUpperLegCurve3_Scale_MD");
	connectAttr -force ($name + "_rUpperLegCurve3C.scale") ($name + "_rUpperLegCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_rUpperLegCurve3_Blend.output") ($name + "_rUpperLegCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_rUpperLegCurve3_Scale_MD.output") ($name + "_rUpperLegCurveJ3.scale");
	
	duplicate -rr -ic -n ($name + "_rKneeCurve_Blend") ($name + "_rUpperLegCurve1_Blend");
	setAttr ($name + "_lKneeCurve_Blend.blender") 0.5;
	connectAttr -force ($name + "_lKneeCurve_Blend.output") ($name + "_rKneeCurveJ.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rKneeCurve_Scale_MD");
	connectAttr -force ($name + "_rKneeCurveC.scale") ($name + "_rKneeCurve_Scale_MD.input1");
	connectAttr -force ($name + "_rKneeCurve_Blend.output") ($name + "_rKneeCurve_Scale_MD.input2");
	connectAttr -force ($name + "_rKneeCurve_Scale_MD.output") ($name + "_rKneeCurveJ.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerLegCurve1_Blend") ($name + "_rUpperLegCurve1_Blend");
	setAttr ($name + "_rLowerLegCurve1_Blend.blender") 0.4;
	connectAttr -force ($name + "_rLowerLegCurve1_Blend.output") ($name + "_rLowerLegCurveJ1.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerLegCurve1_Scale_MD");
	connectAttr -force ($name + "_rLowerLegCurve1C.scale") ($name + "_rLowerLegCurve1_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerLegCurve1_Blend.output") ($name + "_rLowerLegCurve1_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerLegCurve1_Scale_MD.output") ($name + "_rLowerLegCurveJ1.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerLegCurve2_Blend") ($name + "_rLowerLegCurve1_Blend");
	setAttr ($name + "_rLowerLegCurve2_Blend.blender") 0.25;
	connectAttr -force ($name + "_rLowerLegCurve2_Blend.output") ($name + "_rLowerLegCurveJ2.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerLegCurve2_Scale_MD");
	connectAttr -force ($name + "_rLowerLegCurve2C.scale") ($name + "_rLowerLegCurve2_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerLegCurve2_Blend.output") ($name + "_rLowerLegCurve2_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerLegCurve2_Scale_MD.output") ($name + "_rLowerLegCurveJ2.scale");
	
	duplicate -rr -ic -n ($name + "_rLowerLegCurve3_Blend") ($name + "_rLowerLegCurve1_Blend");
	setAttr ($name + "_rLowerLegCurve3_Blend.blender") 0.1;
	connectAttr -force ($name + "_rLowerLegCurve3_Blend.output") ($name + "_rLowerLegCurveJ3.scale");
	shadingNode -asUtility multiplyDivide -n ($name + "_rLowerLegCurve3_Scale_MD");
	connectAttr -force ($name + "_rLowerLegCurve3C.scale") ($name + "_rLowerLegCurve3_Scale_MD.input1");
	connectAttr -force ($name + "_rLowerLegCurve3_Blend.output") ($name + "_rLowerLegCurve3_Scale_MD.input2");
	connectAttr -force ($name + "_rLowerLegCurve3_Scale_MD.output") ($name + "_rLowerLegCurveJ3.scale");	
	
	//RIGHT CLEAN UP
	parent ($name + "_rKneeCurveLctr") ($name + "_rLowerLegTopClstrG") ($name + "_rLowerLegBtmClstrG")
	($name + "_rLowerLegTopGuideClstrG") ($name + "_rLowerLegBtmGuideClstrG") ($name + "_rHipCurveLctr")
	($name + "_rKneeTopCurveLctr") ($name + "_rUpperLegTopClstrG") ($name + "_rUpperLegBtmClstrG") ($name + "_rUpperLegTopGuideClstrG")
	($name + "_rUpperLegBtmGuideClstrG") ($name + "_rKneeCurveCG") ($name + "_rLowerLegCurveJ1") ($name + "_rLowerLegCurveJ2")
	($name + "_rLowerLegCurveJ3") ($name + "_rKneeCurveJ") ($name + "_rUpperLegCurveJ1") ($name + "_rUpperLegCurveJ2") ($name + "_rUpperLegCurveJ3")
	($name + "_rHipCurveJ") ($name + "_curveNodesG");
	
	parent ($name + "_rLowerLegCurve") ($name + "_rUpperLegCurve") ($name + "_rLowerLegCurveGuide") ($name + "_rUpperLegCurveGuide")
	($name + "_rLowerLegMidClstr") ($name + "_rUpperLegMidClstr") ($name + "_rLowerLegCurveCG") ($name + "_rUpperLegCurveCG")
	($name + "_rLowerLegCurve1CG") ($name + "_rLowerLegCurve2CG") ($name + "_rLowerLegCurve3CG") ($name + "_rUpperLegCurve1CG")
	($name + "_rUpperLegCurve2CG") ($name + "_rUpperLegCurve3CG") ($name + "_extraCurveNodesG");
	
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerLegCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerLegCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerLegCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rLowerLegCurve3CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperLegCurveCG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperLegCurve1CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperLegCurve2CG.scale");
	connectAttr -f ($name + "_MainC.scale") ($name + "_rUpperLegCurve3CG.scale");
	
	setAttr ($name + "_rAnkleFKtoIKLctr.v") 0;
	setAttr ($name + "_rAnkleIKtoFKLctr.v") 0;
	setAttr ($name + "_rKneeTopCurveLctr.v") 0;
	setAttr ($name + "_rKneeCurveLctr.v") 0;
	setAttr ($name + "_rHipCurveLctr.v") 0;
	setAttr ($name + "_rKneeTwist25Lctr.v") 0;
	setAttr ($name + "_rKneeTwistLctr.v") 0;
	setAttr ($name + "_rAnkleAimLctr.v") 0;
	setAttr ($name + "_rKneeTwist75Lctr.v") 0;
	setAttr ($name + "_rKneeTwist50Lctr.v") 0;
	
	setAttr ($name + "_rUpperLegBtmGuideClstr.v") 0;
	setAttr ($name + "_rLowerLegMidClstr.v") 0;
	setAttr ($name + "_rUpperLegMidClstr.v") 0;
	setAttr ($name + "_rLowerLegTopClstr.v") 0;
	setAttr ($name + "_rLowerLegBtmClstr.v") 0;
	setAttr ($name + "_rLowerLegTopGuideClstr.v") 0;
	setAttr ($name + "_rLowerLegBtmGuideClstr.v") 0;
	setAttr ($name + "_rUpperLegTopClstr.v") 0;
	setAttr ($name + "_rUpperLegBtmClstr.v") 0;
	setAttr ($name + "_rUpperLegTopGuideClstr.v") 0;
	setAttr ($name + "_rLegUpLctr.v") 0;
	
	setAttr ($name + "_rHipJ.overrideEnabled") 1;
	setAttr ($name + "_rHipJ.overrideLevelOfDetail") 1;
	setAttr ($name + "_rAnkleJ.overrideEnabled") 1;
	
	
	setAttr ($name + "_rUpperLegCurveGuide.v") 0;
	setAttr ($name + "_rLowerLegCurveGuide.v") 0;
	setAttr ($name + "_rUpperLegCurve.template") 1;
	setAttr ($name + "_rLowerLegCurve.template") 1;
	
	editDisplayLayerMembers -noRecurse ($name + "_JointsLayer") ($name + "_rAnkleJFK") ($name + "_rLowerLegCurveJ1")
	($name + "_rLowerLegCurveJ2") ($name + "_rLowerLegCurveJ3") ($name + "_rKneeCurveJ") ($name + "_rUpperLegCurveJ1") ($name + "_rUpperLegCurveJ2")
	($name + "_rUpperLegCurveJ3") ($name + "_rHipCurveJ");
	
	editDisplayLayerMembers -noRecurse ($name + "_ControlsLayer") ($name + "_rUpperLegCurve3C")
	($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurveC") ($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurve1C") ($name + "_rKneeCurveC")
	($name + "_rLowerLegCurveC") ($name + "_rLowerLegCurve3C") ($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurve1C") ($name + "_rLowerLegCurve")
	($name + "_rUpperLegCurve") ($name + "_rLowerLegCurveGuide") ($name + "_rUpperLegCurveGuide") ;
	
	//LOCK AND HIDE CURVE CONTROLS
	select ($name + "_lKneeCurveC")($name + "_lLowerLegCurve1C") ($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurve3C")
	($name + "_lUpperLegCurve1C") ($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurve3C")
	($name + "_rKneeCurveC") ($name + "_rLowerLegCurve1C") ($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurve3C")
	($name + "_rUpperLegCurve1C") ($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurve3C") ;
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		//setAttr -l false -k true ($currentCurveControl + ".sx");
		//setAttr -l false -k true ($currentCurveControl + ".sy");
		//setAttr -l false -k true ($currentCurveControl + ".sz");
		setAttr -l true -k false ($currentCurveControl + ".v");
	}
	
	select ($name + "_lUpperLegCurveC") ($name + "_rUpperLegCurveC") ($name + "_rLowerLegCurveC") ($name + "_lLowerLegCurveC") ;
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		setAttr -l false -k true ($currentCurveControl + ".rx");
		setAttr -l false -k true ($currentCurveControl + ".ry");
		setAttr -l false -k true ($currentCurveControl + ".rz");
	}
	
	delete ($name + "_CurveLeg1");
	
	//LOCK CHANNELS
	select ($name + "_lLowerLegCurveC") ($name + "_lUpperLegCurveC") ($name + "_lLowerLegCurve1C")
	($name + "_lLowerLegCurve2C") ($name + "_lLowerLegCurve3C") ($name + "_lUpperLegCurve1C")
	($name + "_lUpperLegCurve2C") ($name + "_lUpperLegCurve3C") ($name + "_lKneeCurveC")
	($name + "_rLowerLegCurveC") ($name + "_rUpperLegCurveC") ($name + "_rLowerLegCurve1C")
	($name + "_rLowerLegCurve2C") ($name + "_rLowerLegCurve3C") ($name + "_rUpperLegCurve1C")
	($name + "_rUpperLegCurve2C") ($name + "_rUpperLegCurve3C") ($name + "_rKneeCurveC") ;
	
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		//setAttr -l 1 -k 0 ($currentCurveControl + ".sx");
		//setAttr -l 1 -k 0 ($currentCurveControl + ".sy");
		//setAttr -l 1 -k 0 ($currentCurveControl + ".sz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".v");
	}
	
	select ($name + "_lLowerLegCurveCG") ($name + "_lUpperLegCurveCG") ($name + "_lLowerLegCurve1CG")
	($name + "_lLowerLegCurve2CG") ($name + "_lLowerLegCurve3CG") ($name + "_lUpperLegCurve1CG")
	($name + "_lUpperLegCurve2CG") ($name + "_lUpperLegCurve3CG") ($name + "_rLowerLegCurveCG")
	($name + "_rUpperLegCurveCG") ($name + "_rLowerLegCurve1CG") ($name + "_rLowerLegCurve2CG")
	($name + "_rLowerLegCurve3CG") ($name + "_rUpperLegCurve1CG") ($name + "_rUpperLegCurve2CG")
	($name + "_rUpperLegCurve3CG")
	($name + "_lKneeCurveCG") ($name + "_rKneeCurveCG") ($name + "_curveNodesG") ($name + "_extraCurveNodesG");
	
	string $curveControls[] = `ls -sl`;
	string $currentCurveControl;
	for ($currentCurveControl in $curveControls)
	{
		setAttr -l 1 -k 0 ($currentCurveControl + ".tx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".ty");
		setAttr -l 1 -k 0 ($currentCurveControl + ".tz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".rx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".ry");
		setAttr -l 1 -k 0 ($currentCurveControl + ".rz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sx");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sy");
		setAttr -l 1 -k 0 ($currentCurveControl + ".sz");
		setAttr -l 1 -k 0 ($currentCurveControl + ".v");
	}
	
	parent ($name + "_lKneeTwistLctr") ($name + "_lAnkleAimLctr") ($name + "_lKneeTwist75Lctr")
	($name + "_lKneeTwist50Lctr") ($name + "_lKneeTwist25Lctr") ($name + "_rKneeTwistLctr") ($name + "_rAnkleAimLctr")
	($name + "_rKneeTwist75Lctr") ($name + "_rKneeTwist50Lctr") ($name + "_rKneeTwist25Lctr") ($name + "_extraCurveNodesG");
	
	changeLinearUnit $currentUnit;
}
	
//////////////////////////////////////////////////////////////////////////////
///////////////////////////////    GEOMETRY    ///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
global proc RRA_RapidMesh()
{
	string $name = `textField -q -text RRA_CharName`;
	
	string $currentUnit = `currentUnit -query -linear`;
	if ($currentUnit != "cm")
	{
		changeLinearUnit "centimeter";
	}
	
	print ("\nBUILDING \"" + $name + "\" GEOMETRY...\n");
	//CREATE GEOMETRY GROUP
	group -em -n ($name + "_scaleGeoG");
	group -n ($name + "_geoSkinG") ($name + "_scaleGeoG");
	connectAttr -f ($name + "_MainC.scale") ($name + "_scaleGeoG.scale");
	
	polyCylinder -n baseCylinder -r 1.5 -h 1 -sx 16 -sy 7 -sz 1 -ax 0 1 0 -rcp 0 -cuv 3 -ch 1;
	move -r 0 -.5 0 baseCylinder.scalePivot baseCylinder.rotatePivot ;
	move -r -os -wd 0 0.5 0 baseCylinder;
	group -n baseCylinderG baseCylinder; xform -os -piv 0 0 0;
	rotate 0 0 -90 baseCylinderG;
	makeIdentity -apply true -t 1 -r 1 -s 1;
	
	scale -r 1 0.9 0.9 baseCylinder.vtx[112:127] baseCylinder.vtx[129] ;
	scale -r 1 0.92 0.92 baseCylinder.vtx[96:127] baseCylinder.vtx[129] ;
	scale -r 1 0.95 0.95 baseCylinder.vtx[80:127] baseCylinder.vtx[129] ;
	scale -r 1 0.99 0.99 baseCylinder.vtx[64:127] baseCylinder.vtx[129] ;
	scale -r 1 0.95 0.95 baseCylinder.vtx[0:15] baseCylinder.vtx[128] ;
	scale -r 1 0.98 0.98 baseCylinder.vtx[0:31] baseCylinder.vtx[128] ;
	
	polySphere -n baseSphere -r 1.5 -sx 20 -sy 20 -ax 0 1 0 -cuv 2 -ch 1;
	makeIdentity -apply true -t 1 -r 1 -s 1;
	group -n baseSphereG baseSphere; xform -os -piv 0 0 0;
	
	/////LEFT LEG/////
	$lKneeLength = `xform -q -t ($name + "_lKneeJ")`;
	$lAnkleLength = `xform -q -t ($name + "_lAnkleJ")`;
	$lLegLength[0] = (($lKneeLength[0] + $lAnkleLength[0]) /2);
	//LEFT UPPER LEG
	$lUprLegLength = `getAttr ($name + "_lKneeJ.tx")`;
	$lLwrLegLength = `getAttr ($name + "_lAnkleJ.tx")`;
	
	$rKneeLength = `xform -q -t ($name + "_rKneeJ")`;
	$rAnkleLength = `xform -q -t ($name + "_rAnkleJ")`;
	$rLegLength[0] = (($rKneeLength[0] + $rAnkleLength[0]) /2);
	//LEFT UPPER LEG
	$rUprLegLength = `getAttr ($name + "_rKneeJ.tx")`;
	$rLwrLegLength = `getAttr ($name + "_rAnkleJ.tx")`;
	
	duplicate -rr -un -n ($name + "_lUprLegGeoG") baseCylinderG ;
	rename ($name + "_lUprLegGeoG|baseCylinder") ($name + "_lUprLegGeo");
	parent ($name + "_lUprLegGeoG") ($name + "_scaleGeoG");
	
	parentConstraint ($name + "_lHipJ") ($name + "_lUprLegGeoG");
	delete ($name + "_lUprLegGeoG_parentConstraint1");
	setAttr ($name + "_lUprLegGeoG.sx") $lUprLegLength;
	setAttr ($name + "_lUprLegGeoG.sy") ($lLegLength[0] /20);
	setAttr ($name + "_lUprLegGeoG.sz") ($lLegLength[0] /20);
	makeIdentity -apply true -t 1 -s 1 ($name + "_lUprLegGeoG");
	parentConstraint ($name + "_lHipJ") ($name + "_lUprLegGeoG");
	connectAttr -f ($name + "_lHipJ.scale") ($name + "_lUprLegGeoG.scale");
	
	
	//LEFT LOWER LEG
	duplicate -rr -un -n ($name + "_lLwrLegGeoG") baseCylinderG ;
	rename ($name + "_lLwrLegGeoG|baseCylinder") ($name + "_lLwrLegGeo");
	parent ($name + "_lLwrLegGeoG") ($name + "_scaleGeoG");
	
	parentConstraint ($name + "_lKneeJ") ($name + "_lLwrLegGeoG");
	delete ($name + "_lLwrLegGeoG_parentConstraint1");
	setAttr ($name + "_lLwrLegGeoG.sx") $lLwrLegLength;
	setAttr ($name + "_lLwrLegGeoG.sy") ($lLegLength[0] /20);
	setAttr ($name + "_lLwrLegGeo.sz") ($lLegLength[0] /20);
	makeIdentity -apply true -t 1 -s 1 ($name + "_lLwrLegGeoG");
	parentConstraint ($name + "_lKneeJ") ($name + "_lLwrLegGeoG");
	connectAttr -f ($name + "_lKneeJ.scale") ($name + "_lLwrLegGeoG.scale");
	
	duplicate -rr -un -n ($name + "_lKneeGeoG") baseSphereG;
	rename ($name + "_lKneeGeoG|baseSphere") ($name + "_lKneeGeo");
	parentConstraint ($name + "_lKneeJ") ($name + "_lKneeGeoG");
	setAttr ($name + "_lKneeGeoG.sx") ($lLegLength[0] /20);
	setAttr ($name + "_lKneeGeoG.sy") ($lLegLength[0] /20);
	setAttr ($name + "_lKneeGeoG.sz") ($lLegLength[0] /20);
	parent ($name + "_lKneeGeoG") ($name + "_scaleGeoG");
	duplicate -rr -un -n ($name + "_rKneeGeoG") baseSphereG;
	rename ($name + "_rKneeGeoG|baseSphere") ($name + "_rKneeGeo");
	parentConstraint ($name + "_rKneeJ") ($name + "_rKneeGeoG");
	setAttr ($name + "_rKneeGeoG.sx") ($rLegLength[0] /20);
	setAttr ($name + "_rKneeGeoG.sy") ($rLegLength[0] /20);
	setAttr ($name + "_rKneeGeoG.sz") ($rLegLength[0] /20);
	parent ($name + "_rKneeGeoG") ($name + "_scaleGeoG");
	
	duplicate -rr -un -n ($name + "_lHipGeoG") baseSphereG;
	rename ($name + "_lHipGeoG|baseSphere") ($name + "_lHipGeo");
	parentConstraint ($name + "_lHipJ") ($name + "_lHipGeoG");
	setAttr ($name + "_lHipGeo.sx") ($lLegLength[0] /20);            
	setAttr ($name + "_lHipGeo.sy") ($lLegLength[0] /20);
	setAttr ($name + "_lHipGeo.sz") ($lLegLength[0] /20);
	parent ($name + "_lHipGeoG") ($name + "_scaleGeoG");
	duplicate -rr -un -n ($name + "_rHipGeoG") baseSphereG;
	rename ($name + "_rHipGeoG|baseSphere") ($name + "_rHipGeo");
	parentConstraint ($name + "_rHipJ") ($name + "_rHipGeoG");
	setAttr ($name + "_rHipGeo.sx") ($rLegLength[0] /20);            
	setAttr ($name + "_rHipGeo.sy") ($rLegLength[0] /20);
	setAttr ($name + "_rHipGeo.sz") ($rLegLength[0] /20);
	parent ($name + "_rHipGeoG") ($name + "_scaleGeoG");
	
	//LEFT HEEL
	duplicate -rr -un -n ($name + "_lAnkleGeoG") baseSphereG;
	rename ($name + "_lAnkleGeoG|baseSphere") ($name + "_lAnkleGeo");
	parentConstraint ($name + "_lAnkleJ") ($name + "_lAnkleGeoG");
	setAttr ($name + "_lAnkleGeoG.sx") ($lLegLength[0] /20);            
	setAttr ($name + "_lAnkleGeoG.sy") ($lLegLength[0] /20);
	setAttr ($name + "_lAnkleGeoG.sz") ($lLegLength[0] /20);
	parent ($name + "_lAnkleGeoG") ($name + "_scaleGeoG");
	duplicate -rr -un -n ($name + "_rAnkleGeoG") baseSphereG;
	rename ($name + "_rAnkleGeoG|baseSphere") ($name + "_rAnkleGeo");
	parentConstraint ($name + "_rAnkleJ") ($name + "_rAnkleGeoG");
	setAttr ($name + "_rAnkleGeoG.sx") ($rLegLength[0] /20);            
	setAttr ($name + "_rAnkleGeoG.sy") ($rLegLength[0] /20);
	setAttr ($name + "_rAnkleGeoG.sz") ($rLegLength[0] /20);
	parent ($name + "_rAnkleGeoG") ($name + "_scaleGeoG");
	
	polyCube -n ($name + "_lHeelGeo") -sy 2;
	group -n ($name + "_lHeelGeoG") ($name + "_lHeelGeo");
	move -r -os -wd 0 .5 0  ($name + "_lHeelGeo.vtx[0:11]") ;
	parentConstraint ($name + "_lFootOutTilt") ($name + "_lFootInTilt") ($name + "_lFootHeelPivot") ($name + "_lHeelGeoG") ;
	parent ($name + "_lHeelGeoG") ($name + "_scaleGeoG");
	
	$lAnkleLoc = `xform -q -ws -t ($name + "_lAnkleJ")`;
	setAttr ($name + "_lHeelGeoG.sy") $lAnkleLoc[1];
	
	select ($name + "_lHeelGeoShape.vtx[0:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lHeelFrClstr");
	pointConstraint -skip y ($name + "_lBallJ") ($name + "_lHeelFrClstr");
	
	select ($name + "_lHeelGeoShape.vtx[8:11]") ;
	newCluster " -envelope 1";
	rename ($name + "_lHeelBckClstr");
	pointConstraint -skip y ($name + "_lFootHeelPivot") ($name + "_lHeelBckClstr");
	
	select ($name + "_lHeelGeoShape.vtx[1]") ($name + "_lHeelGeoShape.vtx[3]") ;
	newCluster " -envelope 1";
	rename ($name + "_lHeelOutClstr");
	pointConstraint -skip y ($name + "_lFootOutTilt") ($name + "_lHeelOutClstr");
	
	select ($name + "_lHeelGeoShape.vtx[0]") ($name + "_lHeelGeoShape.vtx[2]");
	newCluster " -envelope 1";
	rename ($name + "_lHeelInClstr");
	pointConstraint -skip y ($name + "_lFootInTilt") ($name + "_lHeelInClstr");
	
	spaceLocator -n ($name + "_lFootWidthAim");
	spaceLocator -n ($name + "_lFootWidthTarget");
	parent ($name + "_lFootWidthTarget") ($name + "_lFootWidthAim");
	pointConstraint ($name + "_lFootInTilt") ($name + "_lFootWidthAim");
	aimConstraint ($name + "_lFootOutTilt") ($name + "_lFootWidthAim");
	pointConstraint ($name + "_lFootOutTilt") ($name + "_lFootWidthTarget");
	
	$lFootWidth = `getAttr ($name + "_lFootWidthTarget").tx`;
	
	$HeelPosition = `xform -q -ws -t ($name + "_lFootHeelPivot")`;
	
	scale -r ($lFootWidth /2) 1 ($lFootWidth /2) ($name + "_lHeelBckClstr") ;
	
	select ($name + "_lHeelGeoShape.vtx[4:7]") ;
	newCluster " -envelope 1";
	rename ($name + "_lHeelTopClstr");
	pointConstraint ($name + "_lAnkleJ") ($name + "_lHeelTopClstr");
	scale -r ($lFootWidth /5) 1 ($lFootWidth /5) ($name + "_lHeelTopClstr") ;
	
	delete ($name + "_lHeelGeoG_parentConstraint1");
	move $lAnkleLoc[0] $lAnkleLoc[1] $lAnkleLoc[2] ($name + "_lHeelGeoG.scalePivot") ($name + "_lHeelGeoG.rotatePivot") ;
	move $lAnkleLoc[0] $lAnkleLoc[1] $lAnkleLoc[2] ($name + "_lHeelGeo.scalePivot") ($name + "_lHeelGeo.rotatePivot") ;
	pointConstraint -mo ($name + "_lAnkleJ") ($name + "_lHeelGeoG");
	orientConstraint -mo ($name + "_lAnkleJ") ($name + "_lHeelGeoG");
	
	delete -ch ($name + "_lHeelGeo");
	delete ($name + "_lHeelFrClstr") ($name + "_lHeelBckClstr") ($name + "_lHeelOutClstr") ($name + "_lHeelInClstr") ($name + "_lHeelTopClstr") ;
	
	//LEFT TOES
	polyCube -n ($name + "_lBallGeo");
	group -n ($name + "_lBallGeoG") ($name + "_lBallGeo");
	move -r 0 -0.5 -0.5 ($name + "_lBallGeoG.scalePivot") ($name + "_lBallGeoG.rotatePivot") ;
	move -r 0 -0.5 -0.5 ($name + "_lBallGeo.scalePivot") ($name + "_lBallGeo.rotatePivot") ;
	rotate 0 90 0;
	move -r 0 0.5 0;
	makeIdentity -apply true -t 1 -r 1 -s 1;
	$lBallInputs = `listHistory ($name + "_lBallGeo")`;
	
	delete `pointConstraint -skip y ($name + "_lBallJ") ($name + "_lBallGeoG")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "scene" ($name + "_lToeJ") ($name + "_lBallGeoG")`;
	parentConstraint -mo ($name + "_lBallJ") ($name + "_lBallGeoG");
	parent ($name + "_lBallGeoG") ($name + "_scaleGeoG");
	
	$lToeLength = `getAttr ($name + "_lToeJ.tx")`;
	setAttr ($name + "_lBallGeoG.sx") $lToeLength;
	setAttr ($name + "_lBallGeoG.sy") ($lAnkleLoc[1]/2);
	setAttr ($name + "_lBallGeoG.sz") ($lFootWidth * .8);
	
	lattice -n ($name + "_lBallGeoLattice") -divisions 2 2 2 -objectCentered true  -ldv 2 2 2 ($name + "_lBallGeo");
	
	select ($name + "_lBallGeoLatticeLattice.pt[0][0:1][0]") ;
	newCluster " -envelope 1";
	rename ($name + "_lBallOutClstr");
	pointConstraint -skip z -skip y ($name + "_lFootOutTilt") ($name + "_lBallOutClstr");
	
	select ($name + "_lBallGeoLatticeLattice.pt[0][0:1][1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lBallInClstr");
	pointConstraint -skip y ($name + "_lFootInTilt") ($name + "_lBallInClstr");
	
	select  ($name + "_lBallGeoLatticeLattice.pt[1][1][0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lBallTopClstr");
	spaceLocator -n ($name + "_lBallTopClstrLctr");
	pointConstraint -skip y ($name + "_lBallTopClstr") ($name + "_lBallTopClstrLctr");
	delete ($name + "_lBallTopClstrLctr_pointConstraint1");
	parent ($name + "_lBallTopClstr") ($name + "_lBallTopClstrLctr");
	scale 1 0.8 1 ($name + "_lBallTopClstrLctr");
	
	//////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////LEFT TOE GEOMETRY/////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
	
	if (`objExists ($name + "_lToe10J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 10;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[10]") ($name + "_lBallGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe10Clstr");
		
		$lToe08Loc = `xform -q -ws -t ($name + "_lToe08J1C")`;
		$lToe10Loc = `xform -q -ws -t ($name + "_lToe10J1C")`;
		$lToe10Offset[0] = ($lToe08Loc[0] - $lToe10Loc[0]) /-2;
		$lToe10Offset[1] = ($lToe08Loc[1] - $lToe10Loc[1]) /-2;
		$lToe10Offset[2] = ($lToe08Loc[2] - $lToe10Loc[2]) /-2;
		
		pointConstraint -skip y  -offset $lToe10Offset[0] $lToe10Offset[1] $lToe10Offset[2] ($name + "_lToe10J1C") ($name + "_lToe10Clstr");
		orientConstraint ($name + "_lToe10J1C") ($name + "_lToe10Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05_6Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe05J1C") ($name + "_lToe06J1C") ($name + "_lToe05_6Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[6]") ($name + "_lBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06_7Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe06J1C") ($name + "_lToe07J1C") ($name + "_lToe06_7Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[7]") ($name + "_lBallGeoShape.vtx[18]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07_8Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe07J1C") ($name + "_lToe08J1C") ($name + "_lToe07_8Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[8]") ($name + "_lBallGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08_9Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe08J1C") ($name + "_lToe09J1C") ($name + "_lToe08_9Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[9]") ($name + "_lBallGeoShape.vtx[20]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe09_10Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe09J1C") ($name + "_lToe10J1C") ($name + "_lToe09_10Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05_6Clstr") ($name + "_lToe06_7Clstr") ($name + "_lToe07_8Clstr") ($name + "_lToe08_9Clstr") ($name + "_lToe09_10Clstr") ($name + "_lToe10Clstr");
	}
	
	else if (`objExists ($name + "_lToe09J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 9;
		
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[9]") ($name + "_lBallGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe09Clstr");
		
		$lToe08Loc = `xform -q -ws -t ($name + "_lToe08J1C")`;
		$lToe09Loc = `xform -q -ws -t ($name + "_lToe09J1C")`;
		$lToe09Offset[0] = ($lToe08Loc[0] - $lToe09Loc[0]) /-2;
		$lToe09Offset[1] = ($lToe08Loc[1] - $lToe09Loc[1]) /-2;
		$lToe09Offset[2] = ($lToe08Loc[2] - $lToe09Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe09Offset[0] $lToe09Offset[1] $lToe09Offset[2] ($name + "_lToe09J1C") ($name + "_lToe09Clstr");
		orientConstraint ($name + "_lToe09J1C") ($name + "_lToe09Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05_6Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe05J1C") ($name + "_lToe06J1C") ($name + "_lToe05_6Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[6]") ($name + "_lBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06_7Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe06J1C") ($name + "_lToe07J1C") ($name + "_lToe06_7Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[7]") ($name + "_lBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07_8Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe07J1C") ($name + "_lToe08J1C") ($name + "_lToe07_8Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[8]") ($name + "_lBallGeoShape.vtx[18]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08_9Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe08J1C") ($name + "_lToe09J1C") ($name + "_lToe08_9Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05_6Clstr") ($name + "_lToe06_7Clstr") ($name + "_lToe07_8Clstr") ($name + "_lToe08_9Clstr") ($name + "_lToe09Clstr");
	}
	
	else if (`objExists ($name + "_lToe08J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 8;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[8]") ($name + "_lBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08Clstr");
		
		$lToe07Loc = `xform -q -ws -t ($name + "_lToe07J1C")`;
		$lToe08Loc = `xform -q -ws -t ($name + "_lToe08J1C")`;
		$lToe08Offset[0] = ($lToe07Loc[0] - $lToe08Loc[0]) /-2;
		$lToe08Offset[1] = ($lToe07Loc[1] - $lToe08Loc[1]) /-2;
		$lToe08Offset[2] = ($lToe07Loc[2] - $lToe08Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe08Offset[0] $lToe08Offset[1] $lToe08Offset[2] ($name + "_lToe08J1C") ($name + "_lToe08Clstr");
		orientConstraint ($name + "_lToe08J1C") ($name + "_lToe08Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05_6Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe05J1C") ($name + "_lToe06J1C") ($name + "_lToe05_6Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[6]") ($name + "_lBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06_7Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe06J1C") ($name + "_lToe07J1C") ($name + "_lToe06_7Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[7]") ($name + "_lBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07_8Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe07J1C") ($name + "_lToe08J1C") ($name + "_lToe07_8Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05_6Clstr") ($name + "_lToe06_7Clstr") ($name + "_lToe07_8Clstr") ($name + "_lToe08Clstr");
	}
	
	else if (`objExists ($name + "_lToe07J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 7;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[7]") ($name + "_lBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07Clstr");
		
		$lToe06Loc = `xform -q -ws -t ($name + "_lToe06J1C")`;
		$lToe07Loc = `xform -q -ws -t ($name + "_lToe07J1C")`;
		$lToe07Offset[0] = ($lToe06Loc[0] - $lToe07Loc[0]) /-2;
		$lToe07Offset[1] = ($lToe06Loc[1] - $lToe07Loc[1]) /-2;
		$lToe07Offset[2] = ($lToe06Loc[2] - $lToe07Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe07Offset[0] $lToe07Offset[1] $lToe07Offset[2] ($name + "_lToe07J1C") ($name + "_lToe07Clstr");
		orientConstraint ($name + "_lToe07J1C") ($name + "_lToe07Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05_6Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe05J1C") ($name + "_lToe06J1C") ($name + "_lToe05_6Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[6]") ($name + "_lBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06_7Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe06J1C") ($name + "_lToe07J1C") ($name + "_lToe06_7Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05_6Clstr") ($name + "_lToe06_7Clstr") ($name + "_lToe07Clstr");
	}
	
	else if (`objExists ($name + "_lToe06J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 6;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[6]") ($name + "_lBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06Clstr");
		
		$lToe05Loc = `xform -q -ws -t ($name + "_lToe05J1C")`;
		$lToe06Loc = `xform -q -ws -t ($name + "_lToe06J1C")`;
		$lToe06Offset[0] = ($lToe05Loc[0] - $lToe06Loc[0]) /-2;
		$lToe06Offset[1] = ($lToe05Loc[1] - $lToe06Loc[1]) /-2;
		$lToe06Offset[2] = ($lToe05Loc[2] - $lToe06Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe06Offset[0] $lToe06Offset[1] $lToe06Offset[2] ($name + "_lToe06J1C") ($name + "_lToe06Clstr");
		orientConstraint ($name + "_lToe06J1C") ($name + "_lToe06Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05_6Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe05J1C") ($name + "_lToe06J1C") ($name + "_lToe05_6Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05_6Clstr") ($name + "_lToe06Clstr");
	}
	
	else if (`objExists ($name + "_lToe05J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 5;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[5]") ($name + "_lBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05Clstr");
		
		$lToe04Loc = `xform -q -ws -t ($name + "_lToe04J1C")`;
		$lToe05Loc = `xform -q -ws -t ($name + "_lToe05J1C")`;
		$lToe05Offset[0] = ($lToe04Loc[0] - $lToe05Loc[0]) /-2;
		$lToe05Offset[1] = ($lToe04Loc[1] - $lToe05Loc[1]) /-2;
		$lToe05Offset[2] = ($lToe04Loc[2] - $lToe05Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe05Offset[0] $lToe05Offset[1] $lToe05Offset[2] ($name + "_lToe05J1C") ($name + "_lToe05Clstr");
		orientConstraint ($name + "_lToe05J1C") ($name + "_lToe05Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04_5Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe04J1C") ($name + "_lToe05J1C") ($name + "_lToe04_5Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04_5Clstr")
		($name + "_lToe05Clstr");
	}
	
	else if (`objExists ($name + "_lToe04J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 4;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[4]") ($name + "_lBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04Clstr");
		
		$lToe03Loc = `xform -q -ws -t ($name + "_lToe03J1C")`;
		$lToe04Loc = `xform -q -ws -t ($name + "_lToe04J1C")`;
		$lToe04Offset[0] = ($lToe03Loc[0] - $lToe04Loc[0]) /-2;
		$lToe04Offset[1] = ($lToe03Loc[1] - $lToe04Loc[1]) /-2;
		$lToe04Offset[2] = ($lToe03Loc[2] - $lToe04Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe04Offset[0] $lToe04Offset[1] $lToe04Offset[2] ($name + "_lToe04J1C") ($name + "_lToe04Clstr");
		orientConstraint ($name + "_lToe04J1C") ($name + "_lToe04Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03_4Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe03J1C") ($name + "_lToe04J1C") ($name + "_lToe03_4Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03_4Clstr") ($name + "_lToe04Clstr");
	}
	
	else if (`objExists ($name + "_lToe03J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 3;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[4]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[3]") ($name + "_lBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03Clstr");
		
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe03Loc = `xform -q -ws -t ($name + "_lToe03J1C")`;
		$lToe03Offset[0] = ($lToe02Loc[0] - $lToe03Loc[0]) /-2;
		$lToe03Offset[1] = ($lToe02Loc[1] - $lToe03Loc[1]) /-2;
		$lToe03Offset[2] = ($lToe02Loc[2] - $lToe03Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe03Offset[0] $lToe03Offset[1] $lToe03Offset[2] ($name + "_lToe03J1C") ($name + "_lToe03Clstr");
		orientConstraint ($name + "_lToe03J1C") ($name + "_lToe03Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02_3Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe02J1C") ($name + "_lToe03J1C") ($name + "_lToe02_3Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02_3Clstr") ($name + "_lToe03Clstr") ;
	}
	
	else if (`objExists ($name + "_lToe02J1")`)
	{
		setAttr ($lBallInputs[2] + ".subdivisionsWidth") 2;
		
		select ($name + "_lBallGeoShape.vtx[0]") ($name + "_lBallGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01Clstr");
		
		$lToe01Loc = `xform -q -ws -t ($name + "_lToe01J1C")`;
		$lToe02Loc = `xform -q -ws -t ($name + "_lToe02J1C")`;
		$lToe01Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /2;
		$lToe01Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /2;
		$lToe01Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $lToe01Offset[0] $lToe01Offset[1] $lToe01Offset[2] ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		orientConstraint ($name + "_lToe01J1C") ($name + "_lToe01Clstr");
		
		select ($name + "_lBallGeoShape.vtx[2]") ($name + "_lBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02Clstr");
		
		$lToe02Offset[0] = ($lToe01Loc[0] - $lToe02Loc[0]) /-2;
		$lToe02Offset[1] = ($lToe01Loc[1] - $lToe02Loc[1]) /-2;
		$lToe02Offset[2] = ($lToe01Loc[2] - $lToe02Loc[2]) /-2;
		
		pointConstraint -skip y -offset $lToe02Offset[0] $lToe02Offset[1] $lToe02Offset[2] ($name + "_lToe02J1C") ($name + "_lToe02Clstr");
		orientConstraint ($name + "_lToe02J1C") ($name + "_lToe02Clstr");
		
		select ($name + "_lBallGeoShape.vtx[1]") ($name + "_lBallGeoShape.vtx[4]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01_2Clstr");
		parentConstraint -skipTranslate y ($name + "_lToe01J1C") ($name + "_lToe02J1C") ($name + "_lToe01_2Clstr") ;
		
		delete -ch ($name + "_lBallGeo");
		delete ($name + "_lToe01Clstr") ($name + "_lToe01_2Clstr") ($name + "_lToe02Clstr") ;
	}
	
	delete -ch ($name + "_lBallGeo");
	delete ($name + "_lFootWidthAim") ($name + "_lBallOutClstr") ($name + "_lBallInClstr") ($name + "_lBallTopClstrLctr") ;
	
	/////////////////INDIVIDUAL LEFT TOES/////////////////////
	if (`objExists ($name + "_lToe01J1")`)
	{
		polyCube -n ($name + "_lToe01J1Geo");
		group -n ($name + "_lToe01J1GeoG") ($name + "_lToe01J1Geo");
		move -r -0.5 0 0 ($name + "_lToe01J1GeoG.scalePivot") ($name + "_lToe01J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe01J1Geo.scalePivot") ($name + "_lToe01J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe01J1C") ($name + "_lToe01J1GeoG");
		$lToe01_Loc = `getAttr ($name + "_lToe01J1.tz")`;
		$lToe02_Loc = `getAttr ($name + "_lToe02J1.tz")`;
		setAttr ($name + "_lToe01J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe01J1GeoG.sz") (($lToe01_Loc - $lToe02_Loc)*.9);
		select ($name + "_lToe01J1GeoShape.vtx[1]") ($name + "_lToe01J1GeoShape.vtx[3]") ($name + "_lToe01J1GeoShape.vtx[5]") ($name + "_lToe01J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01J1_Clstr");
		pointConstraint ($name + "_lToe01J2") ($name + "_lToe01J1_Clstr");
		
		polyCube -n ($name + "_lToe01J2Geo");
		group -n ($name + "_lToe01J2GeoG") ($name + "_lToe01J2Geo");
		move -r -0.5 0 0 ($name + "_lToe01J2GeoG.scalePivot") ($name + "_lToe01J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe01J2Geo.scalePivot") ($name + "_lToe01J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe01J2C") ($name + "_lToe01J2GeoG");
		setAttr ($name + "_lToe01J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe01J2GeoG.sz") (($lToe01_Loc - $lToe02_Loc)*.9);
		select ($name + "_lToe01J2GeoShape.vtx[1]") ($name + "_lToe01J2GeoShape.vtx[3]") ($name + "_lToe01J2GeoShape.vtx[5]") ($name + "_lToe01J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe01J2_Clstr");
		pointConstraint ($name + "_lToe01JTip") ($name + "_lToe01J2_Clstr");
		
		delete -ch ($name + "_lToe01J1Geo") ($name + "_lToe01J2Geo");
		parent ($name + "_lToe01J1GeoG") ($name + "_lToe01J2GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe01J1_Clstr") ($name + "_lToe01J2_Clstr");
	}
	
	
	if (`objExists ($name + "_lToe02J1")`)
	{
		polyCube -n ($name + "_lToe02J1Geo");
		group -n ($name + "_lToe02J1GeoG") ($name + "_lToe02J1Geo");
		move -r -0.5 0 0 ($name + "_lToe02J1GeoG.scalePivot") ($name + "_lToe02J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe02J1Geo.scalePivot") ($name + "_lToe02J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe02J1C") ($name + "_lToe02J1GeoG");
		$lToe01_Loc = `getAttr ($name + "_lToe01J1.tz")`;
		$lToe02_Loc = `getAttr ($name + "_lToe02J1.tz")`;
		setAttr ($name + "_lToe02J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe02J1GeoG.sz") (($lToe01_Loc - $lToe02_Loc)*.9);
		select ($name + "_lToe02J1GeoShape.vtx[1]") ($name + "_lToe02J1GeoShape.vtx[3]") ($name + "_lToe02J1GeoShape.vtx[5]") ($name + "_lToe02J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02J1_Clstr");
		pointConstraint ($name + "_lToe02J2") ($name + "_lToe02J1_Clstr");
		
		polyCube -n ($name + "_lToe02J2Geo");
		group -n ($name + "_lToe02J2GeoG") ($name + "_lToe02J2Geo");
		move -r -0.5 0 0 ($name + "_lToe02J2GeoG.scalePivot") ($name + "_lToe02J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe02J2Geo.scalePivot") ($name + "_lToe02J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe02J2C") ($name + "_lToe02J2GeoG");
		setAttr ($name + "_lToe02J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe02J2GeoG.sz") (($lToe01_Loc - $lToe02_Loc)*.9);
		select ($name + "_lToe02J2GeoShape.vtx[1]") ($name + "_lToe02J2GeoShape.vtx[3]") ($name + "_lToe02J2GeoShape.vtx[5]") ($name + "_lToe02J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02J2_Clstr");
		pointConstraint ($name + "_lToe02J3") ($name + "_lToe02J2_Clstr");
		
		polyCube -n ($name + "_lToe02J3Geo");
		group -n ($name + "_lToe02J3GeoG") ($name + "_lToe02J3Geo");
		move -r -0.5 0 0 ($name + "_lToe02J3GeoG.scalePivot") ($name + "_lToe02J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe02J3Geo.scalePivot") ($name + "_lToe02J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe02J3C") ($name + "_lToe02J3GeoG");
		setAttr ($name + "_lToe02J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe02J3GeoG.sz") (($lToe01_Loc - $lToe02_Loc)*.9);
		select ($name + "_lToe02J3GeoShape.vtx[1]") ($name + "_lToe02J3GeoShape.vtx[3]") ($name + "_lToe02J3GeoShape.vtx[5]") ($name + "_lToe02J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe02J3_Clstr");
		pointConstraint ($name + "_lToe02JTip") ($name + "_lToe02J3_Clstr");
		
		delete -ch ($name + "_lToe02J1Geo") ($name + "_lToe02J2Geo") ($name + "_lToe02J3Geo");
		parent ($name + "_lToe02J1GeoG") ($name + "_lToe02J2GeoG") ($name + "_lToe02J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe02J1_Clstr") ($name + "_lToe02J2_Clstr") ($name + "_lToe02J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe03J1")`)
	{
		polyCube -n ($name + "_lToe03J1Geo");
		group -n ($name + "_lToe03J1GeoG") ($name + "_lToe03J1Geo");
		move -r -0.5 0 0 ($name + "_lToe03J1GeoG.scalePivot") ($name + "_lToe03J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe03J1Geo.scalePivot") ($name + "_lToe03J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe03J1C") ($name + "_lToe03J1GeoG");
		$lToe01_Loc = `getAttr ($name + "_lToe01J1.tz")`;
		$lToe02_Loc = `getAttr ($name + "_lToe02J1.tz")`;
		$lToe03_Loc = `getAttr ($name + "_lToe03J1.tz")`;
		setAttr ($name + "_lToe03J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe03J1GeoG.sz") (($lToe02_Loc - $lToe03_Loc)*.9);
		setAttr ($name + "_lToe02J1GeoG.sz") (($lToe01_Loc - $lToe03_Loc)*.45);
		setAttr ($name + "_lToe02J2GeoG.sz") (($lToe01_Loc - $lToe03_Loc)*.45);
		setAttr ($name + "_lToe02J3GeoG.sz") (($lToe01_Loc - $lToe03_Loc)*.45);
		
		
		select ($name + "_lToe03J1GeoShape.vtx[1]") ($name + "_lToe03J1GeoShape.vtx[3]") ($name + "_lToe03J1GeoShape.vtx[5]") ($name + "_lToe03J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03J1_Clstr");
		pointConstraint ($name + "_lToe03J2") ($name + "_lToe03J1_Clstr");
		
		polyCube -n ($name + "_lToe03J2Geo");
		group -n ($name + "_lToe03J2GeoG") ($name + "_lToe03J2Geo");
		move -r -0.5 0 0 ($name + "_lToe03J2GeoG.scalePivot") ($name + "_lToe03J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe03J2Geo.scalePivot") ($name + "_lToe03J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe03J2C") ($name + "_lToe03J2GeoG");
		setAttr ($name + "_lToe03J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe03J2GeoG.sz") (($lToe02_Loc - $lToe03_Loc)*.9);
		select ($name + "_lToe03J2GeoShape.vtx[1]") ($name + "_lToe03J2GeoShape.vtx[3]") ($name + "_lToe03J2GeoShape.vtx[5]") ($name + "_lToe03J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03J2_Clstr");
		pointConstraint ($name + "_lToe03J3") ($name + "_lToe03J2_Clstr");
		
		polyCube -n ($name + "_lToe03J3Geo");
		group -n ($name + "_lToe03J3GeoG") ($name + "_lToe03J3Geo");
		move -r -0.5 0 0 ($name + "_lToe03J3GeoG.scalePivot") ($name + "_lToe03J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe03J3Geo.scalePivot") ($name + "_lToe03J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe03J3C") ($name + "_lToe03J3GeoG");
		setAttr ($name + "_lToe03J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe03J3GeoG.sz") (($lToe02_Loc - $lToe03_Loc)*.9);
		select ($name + "_lToe03J3GeoShape.vtx[1]") ($name + "_lToe03J3GeoShape.vtx[3]") ($name + "_lToe03J3GeoShape.vtx[5]") ($name + "_lToe03J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe03J3_Clstr");
		pointConstraint ($name + "_lToe03JTip") ($name + "_lToe03J3_Clstr");
		
		delete -ch ($name + "_lToe03J1Geo") ($name + "_lToe03J2Geo") ($name + "_lToe03J3Geo");
		parent ($name + "_lToe03J1GeoG") ($name + "_lToe03J2GeoG") ($name + "_lToe03J3GeoG") ($name + "_scaleGeoG");
		
		delete ($name + "_lToe03J1_Clstr") ($name + "_lToe03J2_Clstr") ($name + "_lToe03J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe04J1")`)
	{
		polyCube -n ($name + "_lToe04J1Geo");
		group -n ($name + "_lToe04J1GeoG") ($name + "_lToe04J1Geo");
		move -r -0.5 0 0 ($name + "_lToe04J1GeoG.scalePivot") ($name + "_lToe04J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe04J1Geo.scalePivot") ($name + "_lToe04J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe04J1C") ($name + "_lToe04J1GeoG");
		$lToe02_Loc = `getAttr ($name + "_lToe02J1.tz")`;
		$lToe03_Loc = `getAttr ($name + "_lToe03J1.tz")`;
		$lToe04_Loc = `getAttr ($name + "_lToe04J1.tz")`;
		setAttr ($name + "_lToe04J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe04J1GeoG.sz") (($lToe03_Loc - $lToe04_Loc)*.9);
		setAttr ($name + "_lToe03J1GeoG.sz") (($lToe02_Loc - $lToe04_Loc)*.45);
		setAttr ($name + "_lToe03J2GeoG.sz") (($lToe02_Loc - $lToe04_Loc)*.45);
		setAttr ($name + "_lToe03J3GeoG.sz") (($lToe02_Loc - $lToe04_Loc)*.45);
		
		select ($name + "_lToe04J1GeoShape.vtx[1]") ($name + "_lToe04J1GeoShape.vtx[3]") ($name + "_lToe04J1GeoShape.vtx[5]") ($name + "_lToe04J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04J1_Clstr");
		pointConstraint ($name + "_lToe04J2") ($name + "_lToe04J1_Clstr");
		
		polyCube -n ($name + "_lToe04J2Geo");
		group -n ($name + "_lToe04J2GeoG") ($name + "_lToe04J2Geo");
		move -r -0.5 0 0 ($name + "_lToe04J2GeoG.scalePivot") ($name + "_lToe04J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe04J2Geo.scalePivot") ($name + "_lToe04J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe04J2C") ($name + "_lToe04J2GeoG");
		setAttr ($name + "_lToe04J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe04J2GeoG.sz") (($lToe03_Loc - $lToe04_Loc)*.9);
		select ($name + "_lToe04J2GeoShape.vtx[1]") ($name + "_lToe04J2GeoShape.vtx[3]") ($name + "_lToe04J2GeoShape.vtx[5]") ($name + "_lToe04J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04J2_Clstr");
		pointConstraint ($name + "_lToe04J3") ($name + "_lToe04J2_Clstr");
		
		polyCube -n ($name + "_lToe04J3Geo");
		group -n ($name + "_lToe04J3GeoG") ($name + "_lToe04J3Geo");
		move -r -0.5 0 0 ($name + "_lToe04J3GeoG.scalePivot") ($name + "_lToe04J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe04J3Geo.scalePivot") ($name + "_lToe04J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe04J3C") ($name + "_lToe04J3GeoG");
		setAttr ($name + "_lToe04J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe04J3GeoG.sz") (($lToe03_Loc - $lToe04_Loc)*.9);
		select ($name + "_lToe04J3GeoShape.vtx[1]") ($name + "_lToe04J3GeoShape.vtx[3]") ($name + "_lToe04J3GeoShape.vtx[5]") ($name + "_lToe04J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe04J3_Clstr");
		pointConstraint ($name + "_lToe04JTip") ($name + "_lToe04J3_Clstr");
		
		delete -ch ($name + "_lToe04J1Geo") ($name + "_lToe04J2Geo") ($name + "_lToe04J3Geo");
		parent ($name + "_lToe04J1GeoG") ($name + "_lToe04J2GeoG") ($name + "_lToe04J3GeoG") ($name + "_scaleGeoG");
		
		delete ($name + "_lToe04J1_Clstr") ($name + "_lToe04J2_Clstr") ($name + "_lToe04J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe05J1")`)
	{
		polyCube -n ($name + "_lToe05J1Geo");
		group -n ($name + "_lToe05J1GeoG") ($name + "_lToe05J1Geo");
		move -r -0.5 0 0 ($name + "_lToe05J1GeoG.scalePivot") ($name + "_lToe05J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe05J1Geo.scalePivot") ($name + "_lToe05J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe05J1C") ($name + "_lToe05J1GeoG");
		$lToe03_Loc = `getAttr ($name + "_lToe03J1.tz")`;
		$lToe04_Loc = `getAttr ($name + "_lToe04J1.tz")`;
		$lToe05_Loc = `getAttr ($name + "_lToe05J1.tz")`;
		setAttr ($name + "_lToe05J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe05J1GeoG.sz") (($lToe04_Loc - $lToe05_Loc)*.9);
		setAttr ($name + "_lToe04J1GeoG.sz") (($lToe03_Loc - $lToe05_Loc)*.45);
		setAttr ($name + "_lToe04J2GeoG.sz") (($lToe03_Loc - $lToe05_Loc)*.45);
		setAttr ($name + "_lToe04J3GeoG.sz") (($lToe03_Loc - $lToe05_Loc)*.45);
		
		select ($name + "_lToe05J1GeoShape.vtx[1]") ($name + "_lToe05J1GeoShape.vtx[3]") ($name + "_lToe05J1GeoShape.vtx[5]") ($name + "_lToe05J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05J1_Clstr");
		pointConstraint ($name + "_lToe05J2") ($name + "_lToe05J1_Clstr");
		
		polyCube -n ($name + "_lToe05J2Geo");
		group -n ($name + "_lToe05J2GeoG") ($name + "_lToe05J2Geo");
		move -r -0.5 0 0 ($name + "_lToe05J2GeoG.scalePivot") ($name + "_lToe05J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe05J2Geo.scalePivot") ($name + "_lToe05J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe05J2C") ($name + "_lToe05J2GeoG");
		setAttr ($name + "_lToe05J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe05J2GeoG.sz") (($lToe04_Loc - $lToe05_Loc)*.9);
		select ($name + "_lToe05J2GeoShape.vtx[1]") ($name + "_lToe05J2GeoShape.vtx[3]") ($name + "_lToe05J2GeoShape.vtx[5]") ($name + "_lToe05J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05J2_Clstr");
		pointConstraint ($name + "_lToe05J3") ($name + "_lToe05J2_Clstr");
		
		polyCube -n ($name + "_lToe05J3Geo");
		group -n ($name + "_lToe05J3GeoG") ($name + "_lToe05J3Geo");
		move -r -0.5 0 0 ($name + "_lToe05J3GeoG.scalePivot") ($name + "_lToe05J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe05J3Geo.scalePivot") ($name + "_lToe05J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe05J3C") ($name + "_lToe05J3GeoG");
		setAttr ($name + "_lToe05J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe05J3GeoG.sz") (($lToe04_Loc - $lToe05_Loc)*.9);
		select ($name + "_lToe05J3GeoShape.vtx[1]") ($name + "_lToe05J3GeoShape.vtx[3]") ($name + "_lToe05J3GeoShape.vtx[5]") ($name + "_lToe05J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe05J3_Clstr");
		pointConstraint ($name + "_lToe05JTip") ($name + "_lToe05J3_Clstr");
		
		delete -ch ($name + "_lToe05J1Geo") ($name + "_lToe05J2Geo") ($name + "_lToe05J3Geo");
		parent ($name + "_lToe05J1GeoG") ($name + "_lToe05J2GeoG") ($name + "_lToe05J3GeoG") ($name + "_scaleGeoG");
		
		delete ($name + "_lToe05J1_Clstr") ($name + "_lToe05J2_Clstr") ($name + "_lToe05J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe06J1")`)
	{
		polyCube -n ($name + "_lToe06J1Geo");
		group -n ($name + "_lToe06J1GeoG") ($name + "_lToe06J1Geo");
		move -r -0.5 0 0 ($name + "_lToe06J1GeoG.scalePivot") ($name + "_lToe06J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe06J1Geo.scalePivot") ($name + "_lToe06J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe06J1C") ($name + "_lToe06J1GeoG");
		$lToe04_Loc = `getAttr ($name + "_lToe04J1.tz")`;
		$lToe05_Loc = `getAttr ($name + "_lToe05J1.tz")`;
		$lToe06_Loc = `getAttr ($name + "_lToe06J1.tz")`;
		setAttr ($name + "_lToe06J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe06J1GeoG.sz") (($lToe05_Loc - $lToe06_Loc)*.9);
		setAttr ($name + "_lToe05J1GeoG.sz") (($lToe04_Loc - $lToe06_Loc)*.45);
		setAttr ($name + "_lToe05J2GeoG.sz") (($lToe04_Loc - $lToe06_Loc)*.45);
		setAttr ($name + "_lToe05J3GeoG.sz") (($lToe04_Loc - $lToe06_Loc)*.45);
		
		
		select ($name + "_lToe06J1GeoShape.vtx[1]") ($name + "_lToe06J1GeoShape.vtx[3]") ($name + "_lToe06J1GeoShape.vtx[5]") ($name + "_lToe06J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06J1_Clstr");
		pointConstraint ($name + "_lToe06J2") ($name + "_lToe06J1_Clstr");
		
		polyCube -n ($name + "_lToe06J2Geo");
		group -n ($name + "_lToe06J2GeoG") ($name + "_lToe06J2Geo");
		move -r -0.5 0 0 ($name + "_lToe06J2GeoG.scalePivot") ($name + "_lToe06J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe06J2Geo.scalePivot") ($name + "_lToe06J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe06J2C") ($name + "_lToe06J2GeoG");
		setAttr ($name + "_lToe06J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe06J2GeoG.sz") (($lToe05_Loc - $lToe06_Loc)*.9);
		select ($name + "_lToe06J2GeoShape.vtx[1]") ($name + "_lToe06J2GeoShape.vtx[3]") ($name + "_lToe06J2GeoShape.vtx[5]") ($name + "_lToe06J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06J2_Clstr");
		pointConstraint ($name + "_lToe06J3") ($name + "_lToe06J2_Clstr");
		
		polyCube -n ($name + "_lToe06J3Geo");
		group -n ($name + "_lToe06J3GeoG") ($name + "_lToe06J3Geo");
		move -r -0.5 0 0 ($name + "_lToe06J3GeoG.scalePivot") ($name + "_lToe06J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe06J3Geo.scalePivot") ($name + "_lToe06J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe06J3C") ($name + "_lToe06J3GeoG");
		setAttr ($name + "_lToe06J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe06J3GeoG.sz") (($lToe05_Loc - $lToe06_Loc)*.9);
		select ($name + "_lToe06J3GeoShape.vtx[1]") ($name + "_lToe06J3GeoShape.vtx[3]") ($name + "_lToe06J3GeoShape.vtx[5]") ($name + "_lToe06J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe06J3_Clstr");
		pointConstraint ($name + "_lToe06JTip") ($name + "_lToe06J3_Clstr");
		
		delete -ch ($name + "_lToe06J1Geo") ($name + "_lToe06J2Geo") ($name + "_lToe06J3Geo");
		parent ($name + "_lToe06J1GeoG") ($name + "_lToe06J2GeoG") ($name + "_lToe06J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe06J1_Clstr") ($name + "_lToe06J2_Clstr") ($name + "_lToe06J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe07J1")`)
	{
		polyCube -n ($name + "_lToe07J1Geo");
		group -n ($name + "_lToe07J1GeoG") ($name + "_lToe07J1Geo");
		move -r -0.5 0 0 ($name + "_lToe07J1GeoG.scalePivot") ($name + "_lToe07J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe07J1Geo.scalePivot") ($name + "_lToe07J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe07J1C") ($name + "_lToe07J1GeoG");
		$lToe04_Loc = `getAttr ($name + "_lToe04J1.tz")`;
		$lToe05_Loc = `getAttr ($name + "_lToe05J1.tz")`;
		$lToe06_Loc = `getAttr ($name + "_lToe06J1.tz")`;
		$lToe07_Loc = `getAttr ($name + "_lToe07J1.tz")`;
		setAttr ($name + "_lToe07J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe07J1GeoG.sz") (($lToe06_Loc - $lToe07_Loc)*.9);
		setAttr ($name + "_lToe06J1GeoG.sz") (($lToe05_Loc - $lToe07_Loc)*.45);
		setAttr ($name + "_lToe06J2GeoG.sz") (($lToe05_Loc - $lToe07_Loc)*.45);
		setAttr ($name + "_lToe06J3GeoG.sz") (($lToe05_Loc - $lToe07_Loc)*.45);
		
		select ($name + "_lToe07J1GeoShape.vtx[1]") ($name + "_lToe07J1GeoShape.vtx[3]") ($name + "_lToe07J1GeoShape.vtx[5]") ($name + "_lToe07J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07J1_Clstr");
		pointConstraint ($name + "_lToe07J2") ($name + "_lToe07J1_Clstr");
		
		polyCube -n ($name + "_lToe07J2Geo");
		group -n ($name + "_lToe07J2GeoG") ($name + "_lToe07J2Geo");
		move -r -0.5 0 0 ($name + "_lToe07J2GeoG.scalePivot") ($name + "_lToe07J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe07J2Geo.scalePivot") ($name + "_lToe07J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe07J2C") ($name + "_lToe07J2GeoG");
		setAttr ($name + "_lToe07J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe07J2GeoG.sz") (($lToe06_Loc - $lToe07_Loc)*.9);
		select ($name + "_lToe07J2GeoShape.vtx[1]") ($name + "_lToe07J2GeoShape.vtx[3]") ($name + "_lToe07J2GeoShape.vtx[5]") ($name + "_lToe07J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07J2_Clstr");
		pointConstraint ($name + "_lToe07J3") ($name + "_lToe07J2_Clstr");
		
		polyCube -n ($name + "_lToe07J3Geo");
		group -n ($name + "_lToe07J3GeoG") ($name + "_lToe07J3Geo");
		move -r -0.5 0 0 ($name + "_lToe07J3GeoG.scalePivot") ($name + "_lToe07J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe07J3Geo.scalePivot") ($name + "_lToe07J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe07J3C") ($name + "_lToe07J3GeoG");
		setAttr ($name + "_lToe07J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe07J3GeoG.sz") (($lToe06_Loc - $lToe07_Loc)*.9);
		select ($name + "_lToe07J3GeoShape.vtx[1]") ($name + "_lToe07J3GeoShape.vtx[3]") ($name + "_lToe07J3GeoShape.vtx[5]") ($name + "_lToe07J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe07J3_Clstr");
		pointConstraint ($name + "_lToe07JTip") ($name + "_lToe07J3_Clstr");
		
		delete -ch ($name + "_lToe07J1Geo") ($name + "_lToe07J2Geo") ($name + "_lToe07J3Geo");
		parent ($name + "_lToe07J1GeoG") ($name + "_lToe07J2GeoG") ($name + "_lToe07J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe07J1_Clstr") ($name + "_lToe07J2_Clstr") ($name + "_lToe07J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe08J1")`)
	{
		polyCube -n ($name + "_lToe08J1Geo");
		group -n ($name + "_lToe08J1GeoG") ($name + "_lToe08J1Geo");
		move -r -0.5 0 0 ($name + "_lToe08J1GeoG.scalePivot") ($name + "_lToe08J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe08J1Geo.scalePivot") ($name + "_lToe08J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe08J1C") ($name + "_lToe08J1GeoG");
		$lToe05_Loc = `getAttr ($name + "_lToe05J1.tz")`;
		$lToe06_Loc = `getAttr ($name + "_lToe06J1.tz")`;
		$lToe07_Loc = `getAttr ($name + "_lToe07J1.tz")`;
		$lToe08_Loc = `getAttr ($name + "_lToe08J1.tz")`;
		setAttr ($name + "_lToe08J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe08J1GeoG.sz") (($lToe07_Loc - $lToe08_Loc)*.9);
		setAttr ($name + "_lToe07J1GeoG.sz") (($lToe06_Loc - $lToe08_Loc)*.45);
		setAttr ($name + "_lToe07J2GeoG.sz") (($lToe06_Loc - $lToe08_Loc)*.45);
		setAttr ($name + "_lToe07J3GeoG.sz") (($lToe06_Loc - $lToe08_Loc)*.45);
		
		select ($name + "_lToe08J1GeoShape.vtx[1]") ($name + "_lToe08J1GeoShape.vtx[3]") ($name + "_lToe08J1GeoShape.vtx[5]") ($name + "_lToe08J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08J1_Clstr");
		pointConstraint ($name + "_lToe08J2") ($name + "_lToe08J1_Clstr");
		
		polyCube -n ($name + "_lToe08J2Geo");
		group -n ($name + "_lToe08J2GeoG") ($name + "_lToe08J2Geo");
		move -r -0.5 0 0 ($name + "_lToe08J2GeoG.scalePivot") ($name + "_lToe08J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe08J2Geo.scalePivot") ($name + "_lToe08J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe08J2C") ($name + "_lToe08J2GeoG");
		setAttr ($name + "_lToe08J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe08J2GeoG.sz") (($lToe07_Loc - $lToe08_Loc)*.9);
		select ($name + "_lToe08J2GeoShape.vtx[1]") ($name + "_lToe08J2GeoShape.vtx[3]") ($name + "_lToe08J2GeoShape.vtx[5]") ($name + "_lToe08J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08J2_Clstr");
		pointConstraint ($name + "_lToe08J3") ($name + "_lToe08J2_Clstr");
		
		polyCube -n ($name + "_lToe08J3Geo");
		group -n ($name + "_lToe08J3GeoG") ($name + "_lToe08J3Geo");
		move -r -0.5 0 0 ($name + "_lToe08J3GeoG.scalePivot") ($name + "_lToe08J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe08J3Geo.scalePivot") ($name + "_lToe08J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe08J3C") ($name + "_lToe08J3GeoG");
		setAttr ($name + "_lToe08J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe08J3GeoG.sz") (($lToe07_Loc - $lToe08_Loc)*.9);
		select ($name + "_lToe08J3GeoShape.vtx[1]") ($name + "_lToe08J3GeoShape.vtx[3]") ($name + "_lToe08J3GeoShape.vtx[5]") ($name + "_lToe08J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe08J3_Clstr");
		pointConstraint ($name + "_lToe08JTip") ($name + "_lToe08J3_Clstr");
		
		delete -ch ($name + "_lToe08J1Geo") ($name + "_lToe08J2Geo") ($name + "_lToe08J3Geo");
		parent ($name + "_lToe08J1GeoG") ($name + "_lToe08J2GeoG") ($name + "_lToe08J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe08J1_Clstr") ($name + "_lToe08J2_Clstr") ($name + "_lToe08J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe09J1")`)
	{
		polyCube -n ($name + "_lToe09J1Geo");
		group -n ($name + "_lToe09J1GeoG") ($name + "_lToe09J1Geo");
		move -r -0.5 0 0 ($name + "_lToe09J1GeoG.scalePivot") ($name + "_lToe09J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe09J1Geo.scalePivot") ($name + "_lToe09J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe09J1C") ($name + "_lToe09J1GeoG");
		$lToe06_Loc = `getAttr ($name + "_lToe06J1.tz")`;
		$lToe07_Loc = `getAttr ($name + "_lToe07J1.tz")`;
		$lToe08_Loc = `getAttr ($name + "_lToe08J1.tz")`;
		$lToe09_Loc = `getAttr ($name + "_lToe09J1.tz")`;
		setAttr ($name + "_lToe09J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe09J1GeoG.sz") (($lToe08_Loc - $lToe09_Loc)*.9);
		setAttr ($name + "_lToe08J1GeoG.sz") (($lToe07_Loc - $lToe09_Loc)*.45);
		setAttr ($name + "_lToe08J2GeoG.sz") (($lToe07_Loc - $lToe09_Loc)*.45);
		setAttr ($name + "_lToe08J3GeoG.sz") (($lToe07_Loc - $lToe09_Loc)*.45);
		
		select ($name + "_lToe09J1GeoShape.vtx[1]") ($name + "_lToe09J1GeoShape.vtx[3]") ($name + "_lToe09J1GeoShape.vtx[5]") ($name + "_lToe09J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe09J1_Clstr");
		pointConstraint ($name + "_lToe09J2") ($name + "_lToe09J1_Clstr");
		
		polyCube -n ($name + "_lToe09J2Geo");
		group -n ($name + "_lToe09J2GeoG") ($name + "_lToe09J2Geo");
		move -r -0.5 0 0 ($name + "_lToe09J2GeoG.scalePivot") ($name + "_lToe09J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe09J2Geo.scalePivot") ($name + "_lToe09J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe09J2C") ($name + "_lToe09J2GeoG");
		setAttr ($name + "_lToe09J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe09J2GeoG.sz") (($lToe08_Loc - $lToe09_Loc)*.9);
		select ($name + "_lToe09J2GeoShape.vtx[1]") ($name + "_lToe09J2GeoShape.vtx[3]") ($name + "_lToe09J2GeoShape.vtx[5]") ($name + "_lToe09J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe09J2_Clstr");
		pointConstraint ($name + "_lToe09J3") ($name + "_lToe09J2_Clstr");
		
		polyCube -n ($name + "_lToe09J3Geo");
		group -n ($name + "_lToe09J3GeoG") ($name + "_lToe09J3Geo");
		move -r -0.5 0 0 ($name + "_lToe09J3GeoG.scalePivot") ($name + "_lToe09J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe09J3Geo.scalePivot") ($name + "_lToe09J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe09J3C") ($name + "_lToe09J3GeoG");
		setAttr ($name + "_lToe09J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe09J3GeoG.sz") (($lToe08_Loc - $lToe09_Loc)*.9);
		select ($name + "_lToe09J3GeoShape.vtx[1]") ($name + "_lToe09J3GeoShape.vtx[3]") ($name + "_lToe09J3GeoShape.vtx[5]") ($name + "_lToe09J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe09J3_Clstr");
		pointConstraint ($name + "_lToe09JTip") ($name + "_lToe09J3_Clstr");
		
		delete -ch ($name + "_lToe09J1Geo") ($name + "_lToe09J2Geo") ($name + "_lToe09J3Geo");
		parent ($name + "_lToe09J1GeoG") ($name + "_lToe09J2GeoG") ($name + "_lToe09J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe09J1_Clstr") ($name + "_lToe09J2_Clstr") ($name + "_lToe09J3_Clstr");
	}
	
	if (`objExists ($name + "_lToe10J1")`)
	{
		polyCube -n ($name + "_lToe10J1Geo");
		group -n ($name + "_lToe10J1GeoG") ($name + "_lToe10J1Geo");
		move -r -0.5 0 0 ($name + "_lToe10J1GeoG.scalePivot") ($name + "_lToe10J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe10J1Geo.scalePivot") ($name + "_lToe10J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe10J1C") ($name + "_lToe10J1GeoG");
		$lToe07_Loc = `getAttr ($name + "_lToe07J1.tz")`;
		$lToe08_Loc = `getAttr ($name + "_lToe08J1.tz")`;
		$lToe09_Loc = `getAttr ($name + "_lToe09J1.tz")`;
		$lToe10_Loc = `getAttr ($name + "_lToe10J1.tz")`;
		setAttr ($name + "_lToe10J1GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe10J1GeoG.sz") (($lToe09_Loc - $lToe10_Loc)*.9);
		setAttr ($name + "_lToe09J1GeoG.sz") (($lToe08_Loc - $lToe10_Loc)*.45);
		setAttr ($name + "_lToe09J2GeoG.sz") (($lToe08_Loc - $lToe10_Loc)*.45);
		setAttr ($name + "_lToe09J3GeoG.sz") (($lToe08_Loc - $lToe10_Loc)*.45);
		
		select ($name + "_lToe10J1GeoShape.vtx[1]") ($name + "_lToe10J1GeoShape.vtx[3]") ($name + "_lToe10J1GeoShape.vtx[5]") ($name + "_lToe10J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe10J1_Clstr");
		pointConstraint ($name + "_lToe10J2") ($name + "_lToe10J1_Clstr");
		
		polyCube -n ($name + "_lToe10J2Geo");
		group -n ($name + "_lToe10J2GeoG") ($name + "_lToe10J2Geo");
		move -r -0.5 0 0 ($name + "_lToe10J2GeoG.scalePivot") ($name + "_lToe10J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe10J2Geo.scalePivot") ($name + "_lToe10J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe10J2C") ($name + "_lToe10J2GeoG");
		setAttr ($name + "_lToe10J2GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe10J2GeoG.sz") (($lToe09_Loc - $lToe10_Loc)*.9);
		select ($name + "_lToe10J2GeoShape.vtx[1]") ($name + "_lToe10J2GeoShape.vtx[3]") ($name + "_lToe10J2GeoShape.vtx[5]") ($name + "_lToe10J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe10J2_Clstr");
		pointConstraint ($name + "_lToe10J3") ($name + "_lToe10J2_Clstr");
		
		polyCube -n ($name + "_lToe10J3Geo");
		group -n ($name + "_lToe10J3GeoG") ($name + "_lToe10J3Geo");
		move -r -0.5 0 0 ($name + "_lToe10J3GeoG.scalePivot") ($name + "_lToe10J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lToe10J3Geo.scalePivot") ($name + "_lToe10J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lToe10J3C") ($name + "_lToe10J3GeoG");
		setAttr ($name + "_lToe10J3GeoG.sy") ($lLegLength[0] /12);
		setAttr ($name + "_lToe10J3GeoG.sz") (($lToe09_Loc - $lToe10_Loc)*.9);
		select ($name + "_lToe10J3GeoShape.vtx[1]") ($name + "_lToe10J3GeoShape.vtx[3]") ($name + "_lToe10J3GeoShape.vtx[5]") ($name + "_lToe10J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lToe10J3_Clstr");
		pointConstraint ($name + "_lToe10JTip") ($name + "_lToe10J3_Clstr");
		
		delete -ch ($name + "_lToe10J1Geo") ($name + "_lToe10J2Geo") ($name + "_lToe10J3Geo");
		parent ($name + "_lToe10J1GeoG") ($name + "_lToe10J2GeoG") ($name + "_lToe10J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_lToe10J1_Clstr") ($name + "_lToe10J2_Clstr") ($name + "_lToe10J3_Clstr");
	}
	
	//////MOVE BOTTOM TOE POINTS TO GRID/////////
	if (`objExists ($name + "_lToe01J1")`)
	{
		move -y 0 0 0 ($name + "_lToe01J1GeoShape.vtx[0:1]") ($name + "_lToe01J1GeoShape.vtx[6:7]") ($name + "_lToe01J2GeoShape.vtx[0:1]") ($name + "_lToe01J2GeoShape.vtx[6:7]") ;
	}
	if (`objExists ($name + "_lToe02J1")`)
	{
		move -y 0 0 0 ($name + "_lToe02J1GeoShape.vtx[0:1]") ($name + "_lToe02J1GeoShape.vtx[6:7]") ($name + "_lToe02J2GeoShape.vtx[0:1]") ($name + "_lToe02J2GeoShape.vtx[6:7]") ($name + "_lToe02J3GeoShape.vtx[0:1]") ($name + "_lToe02J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe03J1")`)
	{
		move -y 0 0 0 ($name + "_lToe03J1GeoShape.vtx[0:1]") ($name + "_lToe03J1GeoShape.vtx[6:7]") ($name + "_lToe03J2GeoShape.vtx[0:1]") ($name + "_lToe03J2GeoShape.vtx[6:7]") ($name + "_lToe03J3GeoShape.vtx[0:1]") ($name + "_lToe03J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe04J1")`)
	{
		move -y 0 0 0 ($name + "_lToe04J1GeoShape.vtx[0:1]") ($name + "_lToe04J1GeoShape.vtx[6:7]") ($name + "_lToe04J2GeoShape.vtx[0:1]") ($name + "_lToe04J2GeoShape.vtx[6:7]") ($name + "_lToe04J3GeoShape.vtx[0:1]") ($name + "_lToe04J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe05J1")`)
	{
		move -y 0 0 0 ($name + "_lToe05J1GeoShape.vtx[0:1]") ($name + "_lToe05J1GeoShape.vtx[6:7]") ($name + "_lToe05J2GeoShape.vtx[0:1]") ($name + "_lToe05J2GeoShape.vtx[6:7]") ($name + "_lToe05J3GeoShape.vtx[0:1]") ($name + "_lToe05J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe06J1")`)
	{
		move -y 0 0 0 ($name + "_lToe06J1GeoShape.vtx[0:1]") ($name + "_lToe06J1GeoShape.vtx[6:7]") ($name + "_lToe06J2GeoShape.vtx[0:1]") ($name + "_lToe06J2GeoShape.vtx[6:7]") ($name + "_lToe06J3GeoShape.vtx[0:1]") ($name + "_lToe06J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe07J1")`)
	{
		move -y 0 0 0 ($name + "_lToe07J1GeoShape.vtx[0:1]") ($name + "_lToe07J1GeoShape.vtx[6:7]") ($name + "_lToe07J2GeoShape.vtx[0:1]") ($name + "_lToe07J2GeoShape.vtx[6:7]") ($name + "_lToe07J3GeoShape.vtx[0:1]") ($name + "_lToe07J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe08J1")`)
	{
		move -y 0 0 0 ($name + "_lToe08J1GeoShape.vtx[0:1]") ($name + "_lToe08J1GeoShape.vtx[6:7]") ($name + "_lToe08J2GeoShape.vtx[0:1]") ($name + "_lToe08J2GeoShape.vtx[6:7]") ($name + "_lToe08J3GeoShape.vtx[0:1]") ($name + "_lToe08J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe09J1")`)
	{
		move -y 0 0 0 ($name + "_lToe09J1GeoShape.vtx[0:1]") ($name + "_lToe09J1GeoShape.vtx[6:7]") ($name + "_lToe09J2GeoShape.vtx[0:1]") ($name + "_lToe09J2GeoShape.vtx[6:7]") ($name + "_lToe09J3GeoShape.vtx[0:1]") ($name + "_lToe09J3GeoShape.vtx[6:7]");
	}
	if (`objExists ($name + "_lToe10J1")`)
	{
		move -y 0 0 0 ($name + "_lToe10J1GeoShape.vtx[0:1]") ($name + "_lToe10J1GeoShape.vtx[6:7]") ($name + "_lToe10J2GeoShape.vtx[0:1]") ($name + "_lToe10J2GeoShape.vtx[6:7]") ($name + "_lToe10J3GeoShape.vtx[0:1]") ($name + "_lToe10J3GeoShape.vtx[6:7]");
	}
	
	//////////////////////////////////////////////////////////////////////////////
	////////////////////////////////LEFT ARM//////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	
	//LEFT UPPER ARM
	$lElbowLength = `xform -q -t ($name + "_lElbowJ")`;
	$lWristLength = `xform -q -t ($name + "_lWristJProxy")`;
	$lArmLength[0] = (($lElbowLength[0] + $lWristLength[0]) /2);
	$lUprArmLength = `getAttr ($name + "_lElbowJ.tx")`;
	$lLwrArmLength = `getAttr ($name + "_lWristJProxy.tx")`;
	
	$rElbowLength = `xform -q -t ($name + "_rElbowJ")`;
	$rWristLength = `xform -q -t ($name + "_rWristJProxy")`;
	$rArmLength[0] = (($rElbowLength[0] + $rWristLength[0]) /2);
	$rUprArmLength = `getAttr ($name + "_rElbowJ.tx")`;
	$rLwrArmLength = `getAttr ($name + "_rWristJProxy.tx")`;
	
	duplicate -rr -un -n ($name + "_lUprArmGeoG") baseCylinderG ;
	rename ($name + "_lUprArmGeoG|baseCylinder") ($name + "_lUprArmGeo");
	parent ($name + "_lUprArmGeoG") ($name + "_scaleGeoG");
	duplicate -rr -un -n ($name + "_rUprArmGeoG") baseCylinderG ;
	rename ($name + "_rUprArmGeoG|baseCylinder") ($name + "_rUprArmGeo");
	parent ($name + "_rUprArmGeoG") ($name + "_scaleGeoG");
	
	parentConstraint ($name + "_lShoulderJ") ($name + "_lUprArmGeoG");
	delete ($name + "_lUprArmGeoG_parentConstraint1");
	setAttr (($name + "_lUprArmGeoG.scale"), $lUprArmLength, ($lArmLength[0] /12), ($lArmLength[0] /12));
	makeIdentity -apply true -t 1 -s 1 ($name + "_lUprArmGeoG");
	parentConstraint ($name + "_lShoulderJ") ($name + "_lUprArmGeoG");
	connectAttr -f ($name + "_lShoulderJ.scale") ($name + "_lUprArmGeoG.scale");
	
	//LEFT LOWER ARM
	duplicate -rr -un -n ($name + "_lLwrArmGeoG") baseCylinderG ;
	rename ($name + "_lLwrArmGeoG|baseCylinder") ($name + "_lLwrArmGeo");
	parent ($name + "_lLwrArmGeoG") ($name + "_scaleGeoG");
	
	duplicate -rr -un -n ($name + "_rLwrArmGeoG") baseCylinderG ;
	rename ($name + "_rLwrArmGeoG|baseCylinder") ($name + "_rLwrArmGeo");
	parent ($name + "_rLwrArmGeoG") ($name + "_scaleGeoG");
	
	parentConstraint ($name + "_lElbowJ") ($name + "_lLwrArmGeoG");
	delete ($name + "_lLwrArmGeoG_parentConstraint1");
	setAttr (($name + "_lLwrArmGeoG.scale"), $lLwrArmLength, ($lArmLength[0] /12), ($lArmLength[0] /12));
	makeIdentity -apply true -t 1 -s 1 ($name + "_lLwrArmGeoG");
	parentConstraint ($name + "_lElbowJ") ($name + "_lLwrArmGeoG");
	connectAttr -f ($name + "_lElbowJ.scale") ($name + "_lLwrArmGeoG.scale");
	
	duplicate -rr -un -n ($name + "_lElbowGeoG") baseSphereG;
	rename ($name + "_lElbowGeoG|baseSphere") ($name + "_lElbowGeo");
	parentConstraint ($name + "_lElbowJ") ($name + "_lElbowGeoG");
	setAttr (($name + "_lElbowGeoG.scale"), ($lArmLength[0] /12), ($lArmLength[0] /12), ($lArmLength[0] /12));
	parent ($name + "_lElbowGeoG") ($name + "_scaleGeoG");
	
	duplicate -rr -un -n ($name + "_rElbowGeoG") baseSphereG;
	rename ($name + "_rElbowGeoG|baseSphere") ($name + "_rElbowGeo");
	parentConstraint ($name + "_rElbowJ") ($name + "_rElbowGeoG");
	setAttr (($name + "_rElbowGeoG.scale"), ($rArmLength[0] /12), ($rArmLength[0] /12), ($rArmLength[0] /12));
	parent ($name + "_rElbowGeoG") ($name + "_scaleGeoG");
	
	duplicate -rr -un -n ($name + "_lShoulderGeoG") baseSphereG;
	rename ($name + "_lShoulderGeoG|baseSphere") ($name + "_lShoulderGeo");
	parentConstraint ($name + "_lShoulderJ") ($name + "_lShoulderGeoG");
	setAttr (($name + "_lShoulderGeoG.scale"), ($lArmLength[0] /7), ($lArmLength[0] /7), ($lArmLength[0] /7));
	parent ($name + "_lShoulderGeoG") ($name + "_scaleGeoG");
	
	duplicate -rr -un -n ($name + "_rShoulderGeoG") baseSphereG;
	rename ($name + "_rShoulderGeoG|baseSphere") ($name + "_rShoulderGeo");
	parentConstraint ($name + "_rShoulderJ") ($name + "_rShoulderGeoG");
	setAttr (($name + "_rShoulderGeoG.scale"), ($rArmLength[0] /7), ($rArmLength[0] /7), ($rArmLength[0] /7));
	parent ($name + "_rShoulderGeoG") ($name + "_scaleGeoG");
	
	/////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////LEFT HAND GEOMETRY/////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////
	
	polyCube -n ($name + "_lHandGeo");
	group -n ($name + "_lHandGeoG") ($name + "_lHandGeo");
	move -r -0.5 0 0 ($name + "_lHandGeoG.scalePivot") ($name + "_lHandGeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_lHandGeo.scalePivot") ($name + "_lHandGeo.rotatePivot") ;
	setAttr ($name + "_lHandGeoG.sy") ($lArmLength[0] /8);
	setAttr ($name + "_lHandGeoG.sz") ($lArmLength[0] /3.5);
	makeIdentity -apply true -s 1 ($name + "_lHandGeoG");
	parentConstraint ($name + "_lWristJ") ($name + "_lHandGeoG");
	parent ($name + "_lHandGeoG") ($name + "_scaleGeoG");
	connectAttr -f ($name + "_lWristJG1.scale") ($name + "_lHandGeoG.scale");
	
	$lHandInputs = `listHistory ($name + "_lHandGeo")`;
	
	if (`objExists ($name + "_lFinger9J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 9;
		
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[21]") ($name + "_lHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing9Clstr");
		
		$lFinger8Loc = `xform -q -ws -t ($name + "_lFinger8J1C")`;
		$lFinger9Loc = `xform -q -ws -t ($name + "_lFinger9J1C")`;
		$lFinger9Offset[0] = ($lFinger8Loc[0] - $lFinger9Loc[0]) /-2;
		$lFinger9Offset[1] = ($lFinger8Loc[1] - $lFinger9Loc[1]) /-2;
		$lFinger9Offset[2] = ($lFinger8Loc[2] - $lFinger9Loc[2]) /-2;
		
		pointConstraint -offset $lFinger9Offset[0] $lFinger9Offset[1] $lFinger9Offset[2] ($name + "_lFinger9J1C") ($name + "_lFing9Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[39]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[37]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[35]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[33]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4_5Clstr");
		pointConstraint ($name + "_lFinger4J1C") ($name + "_lFinger5J1C") ($name + "_lFing4_5Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[13]") ($name + "_lHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing5_6Clstr");
		pointConstraint ($name + "_lFinger5J1C") ($name + "_lFinger6J1C") ($name + "_lFing5_6Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[15]") ($name + "_lHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing6_7Clstr");
		pointConstraint ($name + "_lFinger6J1C") ($name + "_lFinger7J1C") ($name + "_lFing6_7Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[17]") ($name + "_lHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing7_8Clstr");
		pointConstraint ($name + "_lFinger7J1C") ($name + "_lFinger8J1C") ($name + "_lFing7_8Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[19]") ($name + "_lHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing8_9Clstr");
		pointConstraint ($name + "_lFinger8J1C") ($name + "_lFinger9J1C") ($name + "_lFing8_9Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4_5Clstr") ($name + "_lFing5_6Clstr")
		($name + "_lFing6_7Clstr") ($name + "_lFing7_8Clstr") ($name + "_lFing8_9Clstr") ($name + "_lFing9Clstr");
	}
	
	else if (`objExists ($name + "_lFinger8J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 8;
		
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[19]") ($name + "_lHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing8Clstr");
		
		$lFinger7Loc = `xform -q -ws -t ($name + "_lFinger7J1C")`;
		$lFinger8Loc = `xform -q -ws -t ($name + "_lFinger8J1C")`;
		$lFinger8Offset[0] = ($lFinger7Loc[0] - $lFinger8Loc[0]) /-2;
		$lFinger8Offset[1] = ($lFinger7Loc[1] - $lFinger8Loc[1]) /-2;
		$lFinger8Offset[2] = ($lFinger7Loc[2] - $lFinger8Loc[2]) /-2;
		
		pointConstraint -offset $lFinger8Offset[0] $lFinger8Offset[1] $lFinger8Offset[2] ($name + "_lFinger8J1C") ($name + "_lFing8Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[35]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[33]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4_5Clstr");
		pointConstraint ($name + "_lFinger4J1C") ($name + "_lFinger5J1C") ($name + "_lFing4_5Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[13]") ($name + "_lHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing5_6Clstr");
		pointConstraint ($name + "_lFinger5J1C") ($name + "_lFinger6J1C") ($name + "_lFing5_6Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[15]") ($name + "_lHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing6_7Clstr");
		pointConstraint ($name + "_lFinger6J1C") ($name + "_lFinger7J1C") ($name + "_lFing6_7Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[17]") ($name + "_lHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing7_8Clstr");
		pointConstraint ($name + "_lFinger7J1C") ($name + "_lFinger8J1C") ($name + "_lFing7_8Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4_5Clstr") ($name + "_lFing5_6Clstr")
		($name + "_lFing6_7Clstr") ($name + "_lFing7_8Clstr") ($name + "_lFing8Clstr");
	}
	
	else if (`objExists ($name + "_lFinger7J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 7;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[17]") ($name + "_lHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing7Clstr");
		
		$lFinger6Loc = `xform -q -ws -t ($name + "_lFinger6J1C")`;
		$lFinger7Loc = `xform -q -ws -t ($name + "_lFinger7J1C")`;
		$lFinger7Offset[0] = ($lFinger6Loc[0] - $lFinger7Loc[0]) /-2;
		$lFinger7Offset[1] = ($lFinger6Loc[1] - $lFinger7Loc[1]) /-2;
		$lFinger7Offset[2] = ($lFinger6Loc[2] - $lFinger7Loc[2]) /-2;
		
		pointConstraint -offset $lFinger7Offset[0] $lFinger7Offset[1] $lFinger7Offset[2] ($name + "_lFinger7J1C") ($name + "_lFing7Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4_5Clstr");
		pointConstraint ($name + "_lFinger4J1C") ($name + "_lFinger5J1C") ($name + "_lFing4_5Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[13]") ($name + "_lHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing5_6Clstr");
		pointConstraint ($name + "_lFinger5J1C") ($name + "_lFinger6J1C") ($name + "_lFing5_6Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[15]") ($name + "_lHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing6_7Clstr");
		pointConstraint ($name + "_lFinger6J1C") ($name + "_lFinger7J1C") ($name + "_lFing6_7Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4_5Clstr") ($name + "_lFing5_6Clstr")
		($name + "_lFing6_7Clstr") ($name + "_lFing7Clstr") ;
	}
	
	else if (`objExists ($name + "_lFinger6J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 6;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[15]") ($name + "_lHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing6Clstr");
		
		$lFinger5Loc = `xform -q -ws -t ($name + "_lFinger5J1C")`;
		$lFinger6Loc = `xform -q -ws -t ($name + "_lFinger6J1C")`;
		$lFinger6Offset[0] = ($lFinger5Loc[0] - $lFinger6Loc[0]) /-2;
		$lFinger6Offset[1] = ($lFinger5Loc[1] - $lFinger6Loc[1]) /-2;
		$lFinger6Offset[2] = ($lFinger5Loc[2] - $lFinger6Loc[2]) /-2;
		
		pointConstraint -offset $lFinger6Offset[0] $lFinger6Offset[1] $lFinger6Offset[2] ($name + "_lFinger6J1C") ($name + "_lFing6Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4_5Clstr");
		pointConstraint ($name + "_lFinger4J1C") ($name + "_lFinger5J1C") ($name + "_lFing4_5Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[13]") ($name + "_lHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing5_6Clstr");
		pointConstraint ($name + "_lFinger5J1C") ($name + "_lFinger6J1C") ($name + "_lFing5_6Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4_5Clstr") ($name + "_lFing5_6Clstr")
		($name + "_lFing6Clstr");
	}
	
	else if (`objExists ($name + "_lFinger5J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 5;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[13]") ($name + "_lHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing5Clstr");
		
		$lFinger4Loc = `xform -q -ws -t ($name + "_lFinger4J1C")`;
		$lFinger5Loc = `xform -q -ws -t ($name + "_lFinger5J1C")`;
		$lFinger5Offset[0] = ($lFinger4Loc[0] - $lFinger5Loc[0]) /-2;
		$lFinger5Offset[1] = ($lFinger4Loc[1] - $lFinger5Loc[1]) /-2;
		$lFinger5Offset[2] = ($lFinger4Loc[2] - $lFinger5Loc[2]) /-2;
		
		pointConstraint -offset $lFinger5Offset[0] $lFinger5Offset[1] $lFinger5Offset[2] ($name + "_lFinger5J1C") ($name + "_lFing5Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4_5Clstr");
		pointConstraint ($name + "_lFinger4J1C") ($name + "_lFinger5J1C") ($name + "_lFing4_5Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4_5Clstr") ($name + "_lFing5Clstr");
	}
	
	else if (`objExists ($name + "_lFinger4J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 4;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[11]") ($name + "_lHandGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing4Clstr");
		
		$lFinger3Loc = `xform -q -ws -t ($name + "_lFinger3J1C")`;
		$lFinger4Loc = `xform -q -ws -t ($name + "_lFinger4J1C")`;
		$lFinger4Offset[0] = ($lFinger3Loc[0] - $lFinger4Loc[0]) /-2;
		$lFinger4Offset[1] = ($lFinger3Loc[1] - $lFinger4Loc[1]) /-2;
		$lFinger4Offset[2] = ($lFinger3Loc[2] - $lFinger4Loc[2]) /-2;
		
		pointConstraint -offset $lFinger4Offset[0] $lFinger4Offset[1] $lFinger4Offset[2] ($name + "_lFinger4J1C") ($name + "_lFing4Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3_4Clstr");
		pointConstraint ($name + "_lFinger3J1C") ($name + "_lFinger4J1C") ($name + "_lFing3_4Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3_4Clstr") ($name + "_lFing4Clstr");
	}
	
	else if (`objExists ($name + "_lFinger3J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 3;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[9]") ($name + "_lHandGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing3Clstr");
		
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger3Loc = `xform -q -ws -t ($name + "_lFinger3J1C")`;
		$lFinger3Offset[0] = ($lFinger2Loc[0] - $lFinger3Loc[0]) /-2;
		$lFinger3Offset[1] = ($lFinger2Loc[1] - $lFinger3Loc[1]) /-2;
		$lFinger3Offset[2] = ($lFinger2Loc[2] - $lFinger3Loc[2]) /-2;
		
		pointConstraint -offset $lFinger3Offset[0] $lFinger3Offset[1] $lFinger3Offset[2] ($name + "_lFinger3J1C") ($name + "_lFing3Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2_3Clstr");
		pointConstraint ($name + "_lFinger2J1C") ($name + "_lFinger3J1C") ($name + "_lFing2_3Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2_3Clstr") ($name + "_lFing3Clstr");
	}
	
	else if (`objExists ($name + "_lFinger2J1")`)
	{
		setAttr ($lHandInputs[2] + ".subdivisionsDepth") 2;
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		
		$lFinger1Loc = `xform -q -ws -t ($name + "_lFinger1J1C")`;
		$lFinger2Loc = `xform -q -ws -t ($name + "_lFinger2J1C")`;
		$lFinger1Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /2;
		$lFinger1Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /2;
		$lFinger1Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /2;
		
		pointConstraint -offset $lFinger1Offset[0] $lFinger1Offset[1] $lFinger1Offset[2] ($name + "_lFinger1J1C") ($name + "_lFing1Clstr");
		
		select ($name + "_lHandGeoShape.vtx[7]") ($name + "_lHandGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing2Clstr");
		
		$lFinger2Offset[0] = ($lFinger1Loc[0] - $lFinger2Loc[0]) /-2;
		$lFinger2Offset[1] = ($lFinger1Loc[1] - $lFinger2Loc[1]) /-2;
		$lFinger2Offset[2] = ($lFinger1Loc[2] - $lFinger2Loc[2]) /-2;
		
		pointConstraint -offset $lFinger2Offset[0] $lFinger2Offset[1] $lFinger2Offset[2] ($name + "_lFinger2J1C") ($name + "_lFing2Clstr");
		
		select ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1_2Clstr");
		pointConstraint ($name + "_lFinger1J1C") ($name + "_lFinger2J1C") ($name + "_lFing1_2Clstr") ;
		
		delete -ch ($name + "_lHandGeo");
		delete ($name + "_lFing1_2Clstr") ($name + "_lFing2Clstr");
	}
	
	else
	{
		select ($name + "_lHandGeoShape.vtx[1]") ($name + "_lHandGeoShape.vtx[3]") ($name + "_lHandGeoShape.vtx[5]") ($name + "_lHandGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFing1Clstr");
		pointConstraint ($name + "_lFinger1J1") ($name + "_lFing1Clstr");
	}
	
	//FIT LEFT PALM GEOMETRY
	delete -ch ($name + "_lHandGeo");

	select ($name + "_lHandGeo.e[0]") ;
	PolyConvertToRingAndSplit;
	select ($name + "_lHandGeo.e[0]") ;
	polySelectEdges edgeRing;
	PolySelectConvert 1;
	$lHandFaces = `ls -sl`;
	hilite ($name + "_lHandGeo") ;
	polyChipOff  -kft 1 -dup 0 -off 0 $lHandFaces;
	polySeparate -rs 1 -ch 1 ($name + "_lHandGeoShape");
	delete -ch ($name + "_lHandGeo");
	select ($name + "_lHandGeo");
	pickWalk -d down;
	rename ($name + "_lHand1GeoBase");
	pickWalk -d right;
	rename ($name + "_lHand2GeoTemp");
	polySeparate;
	pickWalk -d up;
	pickWalk -d down;
	rename ($name + "_lHand2Geo");
	pickWalk -d right;
	rename ($name + "_lHand1GeoEnd");
	polyUnite -ch 1 ($name + "_lHand1GeoBase") ($name + "_lHand1GeoEnd");
	rename ($name + "_lHand1Geo");
	polyMergeVertex  -d 0.01 -am 1 ($name + "_lHand1Geo");
	polyCloseBorder ($name + "_lHand1Geo");
	group -n ($name + "_lHand1GeoG") ($name + "_lHand1Geo");
	polyCloseBorder ($name + "_lHand2Geo");
	group -n ($name + "_lHand2GeoG") ($name + "_lHand2Geo");
	parent ($name + "_lHand1GeoG") ($name + "_lHand2GeoG") ($name + "_scaleGeoG");
	delete -ch ($name + "_lHand1GeoG") ($name + "_lHand2Geo");
	parent ($name + "_lHand1GeoG") ($name + "_lHand2GeoG") ($name + "_lHandGeoG");
	
	$lWristLoc = `xform -q -ws -rp ($name + "_lWristJ")`;
	$lHandLoc = `xform -q -ws -rp ($name + "_lPalmJ")`;
	move $lWristLoc[0] $lWristLoc[1] $lWristLoc[2] ($name + "_lHand1Geo.scalePivot") ($name + "_lHand1Geo.rotatePivot") ($name + "_lHand1GeoG.scalePivot") ($name + "_lHand1GeoG.rotatePivot");
	move $lHandLoc[0] $lHandLoc[1] $lHandLoc[2] ($name + "_lHand2Geo.scalePivot") ($name + "_lHand2Geo.rotatePivot") ($name + "_lHand2GeoG.scalePivot") ($name + "_lHand2GeoG.rotatePivot");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lHand1GeoG") ($name + "_lHand2GeoG");
	
	parentConstraint -mo ($name + "_lPalmJ") ($name + "_lHand2GeoG");
	lattice -n ($name + "_lHandGeoLattice") -divisions 3 2 2 -objectCentered true  -ldv 2 2 2 ($name + "_lHand1GeoG") ($name + "_lHand2GeoG");
	select -r ($name + "_lHandGeoLatticeLattice.pt[1][0:1][0]") ($name + "_lHandGeoLatticeLattice.pt[1][0:1][1]") ;
	newCluster " -envelope 1";
	rename ($name + "_lHandGeoLatticeClstr");
	delete `pointConstraint ($name + "_lPalmJ") ($name + "_lHandGeoLatticeClstr")`;
	delete -ch ($name + "_lHand1GeoG") ($name + "_lHand2GeoG");
 
	
	
	/////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////LEFT FINGER GEOMETRY/////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	polyCube -n ($name + "_lFinger1J1Geo");
	group -n ($name + "_lFinger1J1GeoG") ($name + "_lFinger1J1Geo");
	move -r -0.5 0 0 ($name + "_lFinger1J1GeoG.scalePivot") ($name + "_lFinger1J1GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_lFinger1J1Geo.scalePivot") ($name + "_lFinger1J1Geo.rotatePivot") ;
	parentConstraint ($name + "_lFinger1J1C") ($name + "_lFinger1J1GeoG");
	setAttr ($name + "_lFinger1J1Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_lFinger1J1Geo.sz") ($lArmLength[0] /8);
	select ($name + "_lFinger1J1GeoShape.vtx[1]") ($name + "_lFinger1J1GeoShape.vtx[3]") ($name + "_lFinger1J1GeoShape.vtx[5]") ($name + "_lFinger1J1GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_lFinger1J1_Clstr");
	pointConstraint ($name + "_lFinger1J2") ($name + "_lFinger1J1_Clstr");
	
	polyCube -n ($name + "_lFinger1J2Geo");
	group -n ($name + "_lFinger1J2GeoG") ($name + "_lFinger1J2Geo");
	move -r -0.5 0 0 ($name + "_lFinger1J2GeoG.scalePivot") ($name + "_lFinger1J2GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_lFinger1J2Geo.scalePivot") ($name + "_lFinger1J2Geo.rotatePivot") ;
	parentConstraint ($name + "_lFinger1J2C") ($name + "_lFinger1J2GeoG");
	setAttr ($name + "_lFinger1J2Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_lFinger1J2Geo.sz") ($lArmLength[0] /8);
	select ($name + "_lFinger1J2GeoShape.vtx[1]") ($name + "_lFinger1J2GeoShape.vtx[3]") ($name + "_lFinger1J2GeoShape.vtx[5]") ($name + "_lFinger1J2GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_lFinger1J2_Clstr");
	pointConstraint ($name + "_lFinger1J3") ($name + "_lFinger1J2_Clstr");
	
	polyCube -n ($name + "_lFinger1J3Geo");
	group -n ($name + "_lFinger1J3GeoG") ($name + "_lFinger1J3Geo");
	move -r -0.5 0 0 ($name + "_lFinger1J3GeoG.scalePivot") ($name + "_lFinger1J3GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_lFinger1J3Geo.scalePivot") ($name + "_lFinger1J3Geo.rotatePivot") ;
	parentConstraint ($name + "_lFinger1J3C") ($name + "_lFinger1J3GeoG");
	setAttr ($name + "_lFinger1J3Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_lFinger1J3Geo.sz") ($lArmLength[0] /8);
	select ($name + "_lFinger1J3GeoShape.vtx[1]") ($name + "_lFinger1J3GeoShape.vtx[3]") ($name + "_lFinger1J3GeoShape.vtx[5]") ($name + "_lFinger1J3GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_lFinger1J3_Clstr");
	pointConstraint ($name + "_lFinger1JTip") ($name + "_lFinger1J3_Clstr");
	
	if (`objExists ($name + "_lFinger2J1")`)
	{
		$lFinger1J1Loc = `getAttr ($name + "_lFinger1J1.tz")`;
		$lFinger2J1Loc = `getAttr ($name + "_lFinger2J1.tz")`;
		setAttr ($name + "_lFinger1J1Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger1J1Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger1J2Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger1J2Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger1J3Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger1J3Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
	}
	
	delete -ch ($name + "_lFinger1J1Geo") ($name + "_lFinger1J2Geo") ($name + "_lFinger1J3Geo");
	delete ($name + "_lFing1Clstr") ($name + "_lFinger1J1_Clstr") ($name + "_lFinger1J2_Clstr") ($name + "_lFinger1J3_Clstr") ;
	group -em -n ($name + "_lFingersGeoG");
	parent ($name + "_lFingersGeoG") ($name + "_scaleGeoG");
	parentConstraint ($name + "_lWristJ") ($name + "_lFingersGeoG");
	connectAttr -f ($name + "_lWristJG1.scale") ($name + "_lFingersGeoG.scale");
	parent ($name + "_lFinger1J1GeoG") ($name + "_lFinger1J2GeoG") ($name + "_lFinger1J3GeoG") ($name + "_lFingersGeoG");
	
	makeIdentity -apply true -s 1 ($name + "_lFinger1J1Geo") ($name + "_lFinger1J2Geo") ($name + "_lFinger1J3Geo");
	connectAttr -f ($name + "_lFinger1J1C.scale") ($name + "_lFinger1J1GeoG.scale");
	connectAttr -f ($name + "_lFinger1J1C.scale") ($name + "_lFinger1J2GeoG.scale");
	connectAttr -f ($name + "_lFinger1J1C.scale") ($name + "_lFinger1J3GeoG.scale");
	
	if (`objExists ($name + "_lFinger2J1")`)
	{
		polyCube -n ($name + "_lFinger2J1Geo");
		group -n ($name + "_lFinger2J1GeoG") ($name + "_lFinger2J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger2J1GeoG.scalePivot") ($name + "_lFinger2J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger2J1Geo.scalePivot") ($name + "_lFinger2J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger2J1C") ($name + "_lFinger2J1GeoG");
		$lFinger1J1Loc = `getAttr ($name + "_lFinger1J1.tz")`;
		$lFinger2J1Loc = `getAttr ($name + "_lFinger2J1.tz")`;
		setAttr ($name + "_lFinger2J1Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger2J1Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		select ($name + "_lFinger2J1GeoShape.vtx[1]") ($name + "_lFinger2J1GeoShape.vtx[3]") ($name + "_lFinger2J1GeoShape.vtx[5]") ($name + "_lFinger2J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger2J1_Clstr");
		pointConstraint ($name + "_lFinger2J2") ($name + "_lFinger2J1_Clstr");
		
		polyCube -n ($name + "_lFinger2J2Geo");
		group -n ($name + "_lFinger2J2GeoG") ($name + "_lFinger2J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger2J2GeoG.scalePivot") ($name + "_lFinger2J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger2J2Geo.scalePivot") ($name + "_lFinger2J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger2J2C") ($name + "_lFinger2J2GeoG");
		setAttr ($name + "_lFinger2J2Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger2J2Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		select ($name + "_lFinger2J2GeoShape.vtx[1]") ($name + "_lFinger2J2GeoShape.vtx[3]") ($name + "_lFinger2J2GeoShape.vtx[5]") ($name + "_lFinger2J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger2J2_Clstr");
		pointConstraint ($name + "_lFinger2J3") ($name + "_lFinger2J2_Clstr");
		
		polyCube -n ($name + "_lFinger2J3Geo");
		group -n ($name + "_lFinger2J3GeoG") ($name + "_lFinger2J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger2J3GeoG.scalePivot") ($name + "_lFinger2J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger2J3Geo.scalePivot") ($name + "_lFinger2J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger2J3C") ($name + "_lFinger2J3GeoG");
		setAttr ($name + "_lFinger2J3Geo.sy") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		setAttr ($name + "_lFinger2J3Geo.sz") (($lFinger1J1Loc - $lFinger2J1Loc)*.9);
		select ($name + "_lFinger2J3GeoShape.vtx[1]") ($name + "_lFinger2J3GeoShape.vtx[3]") ($name + "_lFinger2J3GeoShape.vtx[5]") ($name + "_lFinger2J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger2J3_Clstr");
		pointConstraint ($name + "_lFinger2JTip") ($name + "_lFinger2J3_Clstr");
		
		delete -ch ($name + "_lFinger2J1Geo") ($name + "_lFinger2J2Geo") ($name + "_lFinger2J3Geo");
		delete ($name + "_lFinger2J1_Clstr") ($name + "_lFinger2J2_Clstr") ($name + "_lFinger2J3_Clstr") ;
		parent ($name + "_lFinger2J1GeoG") ($name + "_lFinger2J2GeoG") ($name + "_lFinger2J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger2J1Geo") ($name + "_lFinger2J2Geo") ($name + "_lFinger2J3Geo");
		connectAttr -f ($name + "_lFinger2J1C.scale") ($name + "_lFinger2J1GeoG.scale");
		connectAttr -f ($name + "_lFinger2J1C.scale") ($name + "_lFinger2J2GeoG.scale");
		connectAttr -f ($name + "_lFinger2J1C.scale") ($name + "_lFinger2J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger3J1")`)
	{
		polyCube -n ($name + "_lFinger3J1Geo");
		group -n ($name + "_lFinger3J1GeoG") ($name + "_lFinger3J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger3J1GeoG.scalePivot") ($name + "_lFinger3J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger3J1Geo.scalePivot") ($name + "_lFinger3J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger3J1C") ($name + "_lFinger3J1GeoG");
		$lFinger2J1Loc = `getAttr ($name + "_lFinger2J1.tz")`;
		$lFinger3J1Loc = `getAttr ($name + "_lFinger3J1.tz")`;
		setAttr ($name + "_lFinger3J1Geo.sy") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		setAttr ($name + "_lFinger3J1Geo.sz") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		select ($name + "_lFinger3J1GeoShape.vtx[1]") ($name + "_lFinger3J1GeoShape.vtx[3]") ($name + "_lFinger3J1GeoShape.vtx[5]") ($name + "_lFinger3J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger3J1_Clstr");
		pointConstraint ($name + "_lFinger3J2") ($name + "_lFinger3J1_Clstr");
		
		polyCube -n ($name + "_lFinger3J2Geo");
		group -n ($name + "_lFinger3J2GeoG") ($name + "_lFinger3J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger3J2GeoG.scalePivot") ($name + "_lFinger3J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger3J2Geo.scalePivot") ($name + "_lFinger3J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger3J2C") ($name + "_lFinger3J2GeoG");
		setAttr ($name + "_lFinger3J2Geo.sy") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		setAttr ($name + "_lFinger3J2Geo.sz") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		select ($name + "_lFinger3J2GeoShape.vtx[1]") ($name + "_lFinger3J2GeoShape.vtx[3]") ($name + "_lFinger3J2GeoShape.vtx[5]") ($name + "_lFinger3J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger3J2_Clstr");
		pointConstraint ($name + "_lFinger3J3") ($name + "_lFinger3J2_Clstr");
		
		polyCube -n ($name + "_lFinger3J3Geo");
		group -n ($name + "_lFinger3J3GeoG") ($name + "_lFinger3J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger3J3GeoG.scalePivot") ($name + "_lFinger3J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger3J3Geo.scalePivot") ($name + "_lFinger3J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger3J3C") ($name + "_lFinger3J3GeoG");
		setAttr ($name + "_lFinger3J3Geo.sy") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		setAttr ($name + "_lFinger3J3Geo.sz") (($lFinger2J1Loc - $lFinger3J1Loc)*.9);
		select ($name + "_lFinger3J3GeoShape.vtx[1]") ($name + "_lFinger3J3GeoShape.vtx[3]") ($name + "_lFinger3J3GeoShape.vtx[5]") ($name + "_lFinger3J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger3J3_Clstr");
		pointConstraint ($name + "_lFinger3JTip") ($name + "_lFinger3J3_Clstr");
		
		delete -ch ($name + "_lFinger3J1Geo") ($name + "_lFinger3J2Geo") ($name + "_lFinger3J3Geo");
		delete ($name + "_lFinger3J1_Clstr") ($name + "_lFinger3J2_Clstr") ($name + "_lFinger3J3_Clstr") ;
		parent ($name + "_lFinger3J1GeoG") ($name + "_lFinger3J2GeoG") ($name + "_lFinger3J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger3J1Geo") ($name + "_lFinger3J2Geo") ($name + "_lFinger3J3Geo");
		connectAttr -f ($name + "_lFinger3J1C.scale") ($name + "_lFinger3J1GeoG.scale");
		connectAttr -f ($name + "_lFinger3J1C.scale") ($name + "_lFinger3J2GeoG.scale");
		connectAttr -f ($name + "_lFinger3J1C.scale") ($name + "_lFinger3J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger4J1")`)
	{
		polyCube -n ($name + "_lFinger4J1Geo");
		group -n ($name + "_lFinger4J1GeoG") ($name + "_lFinger4J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger4J1GeoG.scalePivot") ($name + "_lFinger4J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger4J1Geo.scalePivot") ($name + "_lFinger4J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger4J1C") ($name + "_lFinger4J1GeoG");
		$lFinger3J1Loc = `getAttr ($name + "_lFinger3J1.tz")`;
		$lFinger4J1Loc = `getAttr ($name + "_lFinger4J1.tz")`;
		setAttr ($name + "_lFinger4J1Geo.sy") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		setAttr ($name + "_lFinger4J1Geo.sz") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		select ($name + "_lFinger4J1GeoShape.vtx[1]") ($name + "_lFinger4J1GeoShape.vtx[3]") ($name + "_lFinger4J1GeoShape.vtx[5]") ($name + "_lFinger4J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger4J1_Clstr");
		pointConstraint ($name + "_lFinger4J2") ($name + "_lFinger4J1_Clstr");
		
		polyCube -n ($name + "_lFinger4J2Geo");
		group -n ($name + "_lFinger4J2GeoG") ($name + "_lFinger4J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger4J2GeoG.scalePivot") ($name + "_lFinger4J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger4J2Geo.scalePivot") ($name + "_lFinger4J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger4J2C") ($name + "_lFinger4J2GeoG");
		setAttr ($name + "_lFinger4J2Geo.sy") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		setAttr ($name + "_lFinger4J2Geo.sz") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		select ($name + "_lFinger4J2GeoShape.vtx[1]") ($name + "_lFinger4J2GeoShape.vtx[3]") ($name + "_lFinger4J2GeoShape.vtx[5]") ($name + "_lFinger4J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger4J2_Clstr");
		pointConstraint ($name + "_lFinger4J3") ($name + "_lFinger4J2_Clstr");
		
		polyCube -n ($name + "_lFinger4J3Geo");
		group -n ($name + "_lFinger4J3GeoG") ($name + "_lFinger4J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger4J3GeoG.scalePivot") ($name + "_lFinger4J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger4J3Geo.scalePivot") ($name + "_lFinger4J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger4J3C") ($name + "_lFinger4J3GeoG");
		setAttr ($name + "_lFinger4J3Geo.sy") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		setAttr ($name + "_lFinger4J3Geo.sz") (($lFinger3J1Loc - $lFinger4J1Loc)*.9);
		select ($name + "_lFinger4J3GeoShape.vtx[1]") ($name + "_lFinger4J3GeoShape.vtx[3]") ($name + "_lFinger4J3GeoShape.vtx[5]") ($name + "_lFinger4J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger4J3_Clstr");
		pointConstraint ($name + "_lFinger4JTip") ($name + "_lFinger4J3_Clstr");
		
		delete -ch ($name + "_lFinger4J1Geo") ($name + "_lFinger4J2Geo") ($name + "_lFinger4J3Geo");
		delete ($name + "_lFinger4J1_Clstr") ($name + "_lFinger4J2_Clstr") ($name + "_lFinger4J3_Clstr") ;
		parent ($name + "_lFinger4J1GeoG") ($name + "_lFinger4J2GeoG") ($name + "_lFinger4J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger4J1Geo") ($name + "_lFinger4J2Geo") ($name + "_lFinger4J3Geo");
		connectAttr -f ($name + "_lFinger4J1C.scale") ($name + "_lFinger4J1GeoG.scale");
		connectAttr -f ($name + "_lFinger4J1C.scale") ($name + "_lFinger4J2GeoG.scale");
		connectAttr -f ($name + "_lFinger4J1C.scale") ($name + "_lFinger4J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger5J1")`)
	{
		polyCube -n ($name + "_lFinger5J1Geo");
		group -n ($name + "_lFinger5J1GeoG") ($name + "_lFinger5J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger5J1GeoG.scalePivot") ($name + "_lFinger5J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger5J1Geo.scalePivot") ($name + "_lFinger5J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger5J1C") ($name + "_lFinger5J1GeoG");
		$lFinger4J1Loc = `getAttr ($name + "_lFinger4J1.tz")`;
		$lFinger5J1Loc = `getAttr ($name + "_lFinger5J1.tz")`;
		setAttr ($name + "_lFinger5J1Geo.sy") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		setAttr ($name + "_lFinger5J1Geo.sz") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		select ($name + "_lFinger5J1GeoShape.vtx[1]") ($name + "_lFinger5J1GeoShape.vtx[3]") ($name + "_lFinger5J1GeoShape.vtx[5]") ($name + "_lFinger5J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger5J1_Clstr");
		pointConstraint ($name + "_lFinger5J2") ($name + "_lFinger5J1_Clstr");
		
		polyCube -n ($name + "_lFinger5J2Geo");
		group -n ($name + "_lFinger5J2GeoG") ($name + "_lFinger5J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger5J2GeoG.scalePivot") ($name + "_lFinger5J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger5J2Geo.scalePivot") ($name + "_lFinger5J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger5J2C") ($name + "_lFinger5J2GeoG");
		setAttr ($name + "_lFinger5J2Geo.sy") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		setAttr ($name + "_lFinger5J2Geo.sz") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		select ($name + "_lFinger5J2GeoShape.vtx[1]") ($name + "_lFinger5J2GeoShape.vtx[3]") ($name + "_lFinger5J2GeoShape.vtx[5]") ($name + "_lFinger5J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger5J2_Clstr");
		pointConstraint ($name + "_lFinger5J3") ($name + "_lFinger5J2_Clstr");
		
		polyCube -n ($name + "_lFinger5J3Geo");
		group -n ($name + "_lFinger5J3GeoG") ($name + "_lFinger5J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger5J3GeoG.scalePivot") ($name + "_lFinger5J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger5J3Geo.scalePivot") ($name + "_lFinger5J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger5J3C") ($name + "_lFinger5J3GeoG");
		setAttr ($name + "_lFinger5J3Geo.sy") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		setAttr ($name + "_lFinger5J3Geo.sz") (($lFinger4J1Loc - $lFinger5J1Loc)*.9);
		select ($name + "_lFinger5J3GeoShape.vtx[1]") ($name + "_lFinger5J3GeoShape.vtx[3]") ($name + "_lFinger5J3GeoShape.vtx[5]") ($name + "_lFinger5J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger5J3_Clstr");
		pointConstraint ($name + "_lFinger5JTip") ($name + "_lFinger5J3_Clstr");
		
		delete -ch ($name + "_lFinger5J1Geo") ($name + "_lFinger5J2Geo") ($name + "_lFinger5J3Geo");
		delete ($name + "_lFinger5J1_Clstr") ($name + "_lFinger5J2_Clstr") ($name + "_lFinger5J3_Clstr") ;
		parent ($name + "_lFinger5J1GeoG") ($name + "_lFinger5J2GeoG") ($name + "_lFinger5J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger5J1Geo") ($name + "_lFinger5J2Geo") ($name + "_lFinger5J3Geo");
		connectAttr -f ($name + "_lFinger5J1C.scale") ($name + "_lFinger5J1GeoG.scale");
		connectAttr -f ($name + "_lFinger5J1C.scale") ($name + "_lFinger5J2GeoG.scale");
		connectAttr -f ($name + "_lFinger5J1C.scale") ($name + "_lFinger5J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger6J1")`)
	{
		polyCube -n ($name + "_lFinger6J1Geo");
		group -n ($name + "_lFinger6J1GeoG") ($name + "_lFinger6J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger6J1GeoG.scalePivot") ($name + "_lFinger6J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger6J1Geo.scalePivot") ($name + "_lFinger6J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger6J1C") ($name + "_lFinger6J1GeoG");
		$lFinger5J1Loc = `getAttr ($name + "_lFinger5J1.tz")`;
		$lFinger6J1Loc = `getAttr ($name + "_lFinger6J1.tz")`;
		setAttr ($name + "_lFinger6J1Geo.sy") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		setAttr ($name + "_lFinger6J1Geo.sz") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		select ($name + "_lFinger6J1GeoShape.vtx[1]") ($name + "_lFinger6J1GeoShape.vtx[3]") ($name + "_lFinger6J1GeoShape.vtx[5]") ($name + "_lFinger6J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger6J1_Clstr");
		pointConstraint ($name + "_lFinger6J2") ($name + "_lFinger6J1_Clstr");
		
		polyCube -n ($name + "_lFinger6J2Geo");
		group -n ($name + "_lFinger6J2GeoG") ($name + "_lFinger6J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger6J2GeoG.scalePivot") ($name + "_lFinger6J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger6J2Geo.scalePivot") ($name + "_lFinger6J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger6J2C") ($name + "_lFinger6J2GeoG");
		setAttr ($name + "_lFinger6J2Geo.sy") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		setAttr ($name + "_lFinger6J2Geo.sz") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		select ($name + "_lFinger6J2GeoShape.vtx[1]") ($name + "_lFinger6J2GeoShape.vtx[3]") ($name + "_lFinger6J2GeoShape.vtx[5]") ($name + "_lFinger6J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger6J2_Clstr");
		pointConstraint ($name + "_lFinger6J3") ($name + "_lFinger6J2_Clstr");
		
		polyCube -n ($name + "_lFinger6J3Geo");
		group -n ($name + "_lFinger6J3GeoG") ($name + "_lFinger6J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger6J3GeoG.scalePivot") ($name + "_lFinger6J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger6J3Geo.scalePivot") ($name + "_lFinger6J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger6J3C") ($name + "_lFinger6J3GeoG");
		setAttr ($name + "_lFinger6J3Geo.sy") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		setAttr ($name + "_lFinger6J3Geo.sz") (($lFinger5J1Loc - $lFinger6J1Loc)*.9);
		select ($name + "_lFinger6J3GeoShape.vtx[1]") ($name + "_lFinger6J3GeoShape.vtx[3]") ($name + "_lFinger6J3GeoShape.vtx[5]") ($name + "_lFinger6J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger6J3_Clstr");
		pointConstraint ($name + "_lFinger6JTip") ($name + "_lFinger6J3_Clstr");
		
		delete -ch ($name + "_lFinger6J1Geo") ($name + "_lFinger6J2Geo") ($name + "_lFinger6J3Geo");
		delete ($name + "_lFinger6J1_Clstr") ($name + "_lFinger6J2_Clstr") ($name + "_lFinger6J3_Clstr") ;
		parent ($name + "_lFinger6J1GeoG") ($name + "_lFinger6J2GeoG") ($name + "_lFinger6J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger6J1Geo") ($name + "_lFinger6J2Geo") ($name + "_lFinger6J3Geo");
		connectAttr -f ($name + "_lFinger6J1C.scale") ($name + "_lFinger6J1GeoG.scale");
		connectAttr -f ($name + "_lFinger6J1C.scale") ($name + "_lFinger6J2GeoG.scale");
		connectAttr -f ($name + "_lFinger6J1C.scale") ($name + "_lFinger6J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger7J1")`)
	{
		polyCube -n ($name + "_lFinger7J1Geo");
		group -n ($name + "_lFinger7J1GeoG") ($name + "_lFinger7J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger7J1GeoG.scalePivot") ($name + "_lFinger7J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger7J1Geo.scalePivot") ($name + "_lFinger7J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger7J1C") ($name + "_lFinger7J1GeoG");
		$lFinger6J1Loc = `getAttr ($name + "_lFinger6J1.tz")`;
		$lFinger7J1Loc = `getAttr ($name + "_lFinger7J1.tz")`;
		setAttr ($name + "_lFinger7J1Geo.sy") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		setAttr ($name + "_lFinger7J1Geo.sz") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		select ($name + "_lFinger7J1GeoShape.vtx[1]") ($name + "_lFinger7J1GeoShape.vtx[3]") ($name + "_lFinger7J1GeoShape.vtx[5]") ($name + "_lFinger7J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger7J1_Clstr");
		pointConstraint ($name + "_lFinger7J2") ($name + "_lFinger7J1_Clstr");
		
		polyCube -n ($name + "_lFinger7J2Geo");
		group -n ($name + "_lFinger7J2GeoG") ($name + "_lFinger7J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger7J2GeoG.scalePivot") ($name + "_lFinger7J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger7J2Geo.scalePivot") ($name + "_lFinger7J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger7J2C") ($name + "_lFinger7J2GeoG");
		setAttr ($name + "_lFinger7J2Geo.sy") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		setAttr ($name + "_lFinger7J2Geo.sz") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		select ($name + "_lFinger7J2GeoShape.vtx[1]") ($name + "_lFinger7J2GeoShape.vtx[3]") ($name + "_lFinger7J2GeoShape.vtx[5]") ($name + "_lFinger7J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger7J2_Clstr");
		pointConstraint ($name + "_lFinger7J3") ($name + "_lFinger7J2_Clstr");
		
		polyCube -n ($name + "_lFinger7J3Geo");
		group -n ($name + "_lFinger7J3GeoG") ($name + "_lFinger7J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger7J3GeoG.scalePivot") ($name + "_lFinger7J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger7J3Geo.scalePivot") ($name + "_lFinger7J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger7J3C") ($name + "_lFinger7J3GeoG");
		setAttr ($name + "_lFinger7J3Geo.sy") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		setAttr ($name + "_lFinger7J3Geo.sz") (($lFinger6J1Loc - $lFinger7J1Loc)*.9);
		select ($name + "_lFinger7J3GeoShape.vtx[1]") ($name + "_lFinger7J3GeoShape.vtx[3]") ($name + "_lFinger7J3GeoShape.vtx[5]") ($name + "_lFinger7J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger7J3_Clstr");
		pointConstraint ($name + "_lFinger7JTip") ($name + "_lFinger7J3_Clstr");
		
		delete -ch ($name + "_lFinger7J1Geo") ($name + "_lFinger7J2Geo") ($name + "_lFinger7J3Geo");
		delete ($name + "_lFinger7J1_Clstr") ($name + "_lFinger7J2_Clstr") ($name + "_lFinger7J3_Clstr") ;
		parent ($name + "_lFinger7J1GeoG") ($name + "_lFinger7J2GeoG") ($name + "_lFinger7J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger7J1Geo") ($name + "_lFinger7J2Geo") ($name + "_lFinger7J3Geo");
		connectAttr -f ($name + "_lFinger7J1C.scale") ($name + "_lFinger7J1GeoG.scale");
		connectAttr -f ($name + "_lFinger7J1C.scale") ($name + "_lFinger7J2GeoG.scale");
		connectAttr -f ($name + "_lFinger7J1C.scale") ($name + "_lFinger7J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger8J1")`)
	{
		polyCube -n ($name + "_lFinger8J1Geo");
		group -n ($name + "_lFinger8J1GeoG") ($name + "_lFinger8J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger8J1GeoG.scalePivot") ($name + "_lFinger8J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger8J1Geo.scalePivot") ($name + "_lFinger8J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger8J1C") ($name + "_lFinger8J1GeoG");
		$lFinger7J1Loc = `getAttr ($name + "_lFinger7J1.tz")`;
		$lFinger8J1Loc = `getAttr ($name + "_lFinger8J1.tz")`;
		setAttr ($name + "_lFinger8J1Geo.sy") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		setAttr ($name + "_lFinger8J1Geo.sz") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		select ($name + "_lFinger8J1GeoShape.vtx[1]") ($name + "_lFinger8J1GeoShape.vtx[3]") ($name + "_lFinger8J1GeoShape.vtx[5]") ($name + "_lFinger8J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger8J1_Clstr");
		pointConstraint ($name + "_lFinger8J2") ($name + "_lFinger8J1_Clstr");
		
		polyCube -n ($name + "_lFinger8J2Geo");
		group -n ($name + "_lFinger8J2GeoG") ($name + "_lFinger8J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger8J2GeoG.scalePivot") ($name + "_lFinger8J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger8J2Geo.scalePivot") ($name + "_lFinger8J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger8J2C") ($name + "_lFinger8J2GeoG");
		setAttr ($name + "_lFinger8J2Geo.sy") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		setAttr ($name + "_lFinger8J2Geo.sz") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		select ($name + "_lFinger8J2GeoShape.vtx[1]") ($name + "_lFinger8J2GeoShape.vtx[3]") ($name + "_lFinger8J2GeoShape.vtx[5]") ($name + "_lFinger8J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger8J2_Clstr");
		pointConstraint ($name + "_lFinger8J3") ($name + "_lFinger8J2_Clstr");
		
		polyCube -n ($name + "_lFinger8J3Geo");
		group -n ($name + "_lFinger8J3GeoG") ($name + "_lFinger8J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger8J3GeoG.scalePivot") ($name + "_lFinger8J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger8J3Geo.scalePivot") ($name + "_lFinger8J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger8J3C") ($name + "_lFinger8J3GeoG");
		setAttr ($name + "_lFinger8J3Geo.sy") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		setAttr ($name + "_lFinger8J3Geo.sz") (($lFinger7J1Loc - $lFinger8J1Loc)*.9);
		select ($name + "_lFinger8J3GeoShape.vtx[1]") ($name + "_lFinger8J3GeoShape.vtx[3]") ($name + "_lFinger8J3GeoShape.vtx[5]") ($name + "_lFinger8J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger8J3_Clstr");
		pointConstraint ($name + "_lFinger8JTip") ($name + "_lFinger8J3_Clstr");
		
		delete -ch ($name + "_lFinger8J1Geo") ($name + "_lFinger8J2Geo") ($name + "_lFinger8J3Geo");
		delete ($name + "_lFinger8J1_Clstr") ($name + "_lFinger8J2_Clstr") ($name + "_lFinger8J3_Clstr") ;
		parent ($name + "_lFinger8J1GeoG") ($name + "_lFinger8J2GeoG") ($name + "_lFinger8J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger8J1Geo") ($name + "_lFinger8J2Geo") ($name + "_lFinger8J3Geo");
		connectAttr -f ($name + "_lFinger8J1C.scale") ($name + "_lFinger8J1GeoG.scale");
		connectAttr -f ($name + "_lFinger8J1C.scale") ($name + "_lFinger8J2GeoG.scale");
		connectAttr -f ($name + "_lFinger8J1C.scale") ($name + "_lFinger8J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lFinger9J1")`)
	{
		polyCube -n ($name + "_lFinger9J1Geo");
		group -n ($name + "_lFinger9J1GeoG") ($name + "_lFinger9J1Geo");
		move -r -0.5 0 0 ($name + "_lFinger9J1GeoG.scalePivot") ($name + "_lFinger9J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger9J1Geo.scalePivot") ($name + "_lFinger9J1Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger9J1C") ($name + "_lFinger9J1GeoG");
		$lFinger8J1Loc = `getAttr ($name + "_lFinger8J1.tz")`;
		$lFinger9J1Loc = `getAttr ($name + "_lFinger9J1.tz")`;
		setAttr ($name + "_lFinger9J1Geo.sy") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		setAttr ($name + "_lFinger9J1Geo.sz") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		select ($name + "_lFinger9J1GeoShape.vtx[1]") ($name + "_lFinger9J1GeoShape.vtx[3]") ($name + "_lFinger9J1GeoShape.vtx[5]") ($name + "_lFinger9J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger9J1_Clstr");
		pointConstraint ($name + "_lFinger9J2") ($name + "_lFinger9J1_Clstr");
		
		polyCube -n ($name + "_lFinger9J2Geo");
		group -n ($name + "_lFinger9J2GeoG") ($name + "_lFinger9J2Geo");
		move -r -0.5 0 0 ($name + "_lFinger9J2GeoG.scalePivot") ($name + "_lFinger9J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger9J2Geo.scalePivot") ($name + "_lFinger9J2Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger9J2C") ($name + "_lFinger9J2GeoG");
		setAttr ($name + "_lFinger9J2Geo.sy") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		setAttr ($name + "_lFinger9J2Geo.sz") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		select ($name + "_lFinger9J2GeoShape.vtx[1]") ($name + "_lFinger9J2GeoShape.vtx[3]") ($name + "_lFinger9J2GeoShape.vtx[5]") ($name + "_lFinger9J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger9J2_Clstr");
		pointConstraint ($name + "_lFinger9J3") ($name + "_lFinger9J2_Clstr");
		
		polyCube -n ($name + "_lFinger9J3Geo");
		group -n ($name + "_lFinger9J3GeoG") ($name + "_lFinger9J3Geo");
		move -r -0.5 0 0 ($name + "_lFinger9J3GeoG.scalePivot") ($name + "_lFinger9J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lFinger9J3Geo.scalePivot") ($name + "_lFinger9J3Geo.rotatePivot") ;
		parentConstraint ($name + "_lFinger9J3C") ($name + "_lFinger9J3GeoG");
		setAttr ($name + "_lFinger9J3Geo.sy") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		setAttr ($name + "_lFinger9J3Geo.sz") (($lFinger8J1Loc - $lFinger9J1Loc)*.9);
		select ($name + "_lFinger9J3GeoShape.vtx[1]") ($name + "_lFinger9J3GeoShape.vtx[3]") ($name + "_lFinger9J3GeoShape.vtx[5]") ($name + "_lFinger9J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lFinger9J3_Clstr");
		pointConstraint ($name + "_lFinger9JTip") ($name + "_lFinger9J3_Clstr");
		
		delete -ch ($name + "_lFinger9J1Geo") ($name + "_lFinger9J2Geo") ($name + "_lFinger9J3Geo");
		delete ($name + "_lFinger9J1_Clstr") ($name + "_lFinger9J2_Clstr") ($name + "_lFinger9J3_Clstr") ;
		parent ($name + "_lFinger9J1GeoG") ($name + "_lFinger9J2GeoG") ($name + "_lFinger9J3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lFinger9J1Geo") ($name + "_lFinger9J2Geo") ($name + "_lFinger9J3Geo");
		connectAttr -f ($name + "_lFinger9J1C.scale") ($name + "_lFinger9J1GeoG.scale");
		connectAttr -f ($name + "_lFinger9J1C.scale") ($name + "_lFinger9J2GeoG.scale");
		connectAttr -f ($name + "_lFinger9J1C.scale") ($name + "_lFinger9J3GeoG.scale");
	}
	
	if (`objExists ($name + "_lThumbJ1")`)
	{
		duplicate -n ($name + "_lThumbJ1Geo1") ($name + "_lHand1Geo");
		select ($name + "_lThumbJ1Geo1");
		PolySelectConvert 1;
		select -d ($name + "_lThumbJ1Geo1.f[0]") ;
		doDelete;
		
		$lPalmLoc = `getAttr ($name + "_lPalmJ.tx")`;
		polyPlane -n ($name + "_lThumbJ1Geo2") -w ($lPalmLoc *.75) -h ($lPalmLoc *.75) -sx 1 -sy 1 -ax 0 1 0 -cuv 2 -ch 1;
		pointConstraint ($name + "_lThumbJ2C") ($name + "_lThumbJ1Geo2");
		aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ($name + "_lThumbJ1C") ($name + "_lThumbJ1C") ($name + "_lThumbJ1Geo2"); 
		delete ($name + "_lThumbJ1Geo2_pointConstraint1");
		delete ($name + "_lThumbJ1Geo2_aimConstraint1");
		
		polyUnite -n ($name + "_lThumbJ1Geo") -ch 0 ($name + "_lThumbJ1Geo2") ($name + "_lThumbJ1Geo1");
		polyAppend -ch on -s 1 -tx 1 -ed 5 -ed 0 ($name + "_lThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 6 -ed 2 -ed 8 ($name + "_lThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 4 -ed 3 -ed 10 ($name + "_lThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 1 -ed 11 -ed 7 -ed 9 ($name + "_lThumbJ1GeoShape") ;
		
		group -n ($name + "_lThumbJ1GeoG") ($name + "_lThumbJ1Geo");
		$lThumbJ1Loc = `xform -q -ws -rp ($name + "_lThumbJ1")`;
		move $lThumbJ1Loc[0] $lThumbJ1Loc[1] $lThumbJ1Loc[2] ($name + "_lThumbJ1GeoG.scalePivot") ($name + "_lThumbJ1GeoG.rotatePivot") ;
		move $lThumbJ1Loc[0] $lThumbJ1Loc[1] $lThumbJ1Loc[2] ($name + "_lThumbJ1Geo.scalePivot") ($name + "_lThumbJ1Geo.rotatePivot") ;
		rotate -r 0 -90 0 ($name + "_lThumbJ1GeoG");
		parentConstraint -mo ($name + "_lThumbJ1") ($name + "_lThumbJ1GeoG");
		rotate -r 0 90 0 ($name + "_lThumbJ1Geo");
		makeIdentity -apply true -r 1 ($name + "_lThumbJ1Geo");
		
		polyCube -n ($name + "_lThumbJ2Geo");
		group -n ($name + "_lThumbJ2GeoG") ($name + "_lThumbJ2Geo");
		move -r -0.5 0 0 ($name + "_lThumbJ2GeoG.scalePivot") ($name + "_lThumbJ2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lThumbJ2Geo.scalePivot") ($name + "_lThumbJ2Geo.rotatePivot") ;
		parentConstraint ($name + "_lThumbJ2C") ($name + "_lThumbJ2GeoG");
		setAttr ($name + "_lThumbJ2Geo.sy") ($lPalmLoc *.75);
		setAttr ($name + "_lThumbJ2Geo.sz") ($lPalmLoc *.75);
		select ($name + "_lThumbJ2GeoShape.vtx[1]") ($name + "_lThumbJ2GeoShape.vtx[3]") ($name + "_lThumbJ2GeoShape.vtx[5]") ($name + "_lThumbJ2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lThumbJ2_Clstr");
		pointConstraint ($name + "_lThumbJ3") ($name + "_lThumbJ2_Clstr");
		
		polyCube -n ($name + "_lThumbJ3Geo");
		group -n ($name + "_lThumbJ3GeoG") ($name + "_lThumbJ3Geo");
		move -r -0.5 0 0 ($name + "_lThumbJ3GeoG.scalePivot") ($name + "_lThumbJ3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_lThumbJ3Geo.scalePivot") ($name + "_lThumbJ3Geo.rotatePivot") ;
		parentConstraint ($name + "_lThumbJ3C") ($name + "_lThumbJ3GeoG");
		setAttr ($name + "_lThumbJ3Geo.sy") ($lPalmLoc *.75);
		setAttr ($name + "_lThumbJ3Geo.sz") ($lPalmLoc *.75);
		select ($name + "_lThumbJ3GeoShape.vtx[1]") ($name + "_lThumbJ3GeoShape.vtx[3]") ($name + "_lThumbJ3GeoShape.vtx[5]") ($name + "_lThumbJ3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_lThumbJ3_Clstr");
		pointConstraint ($name + "_lThumbJTip") ($name + "_lThumbJ3_Clstr");
		
		delete -ch ($name + "_lThumbJ1Geo") ($name + "_lThumbJ2Geo") ($name + "_lThumbJ3Geo");
		delete ($name + "_lThumbJ2_Clstr") ($name + "_lThumbJ3_Clstr") ;
		parent ($name + "_lThumbJ1GeoG") ($name + "_lThumbJ2GeoG") ($name + "_lThumbJ3GeoG") ($name + "_lFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_lThumbJ1Geo") ($name + "_lThumbJ2Geo") ($name + "_lThumbJ3Geo");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ1GeoG.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ2GeoG.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ3GeoG.scale");
	}
	
	/////RIGHT LEG/////
	$rKneeLength = `xform -q -t ($name + "_rKneeJ")`;
	$rAnkleLength = `xform -q -t ($name + "_rAnkleJ")`;
	$rLegLength[0] = (($rKneeLength[0] + $rAnkleLength[0]) /2);
	//RIGHT UPPER LEG
	$rUprLegLength = `getAttr ($name + "_rKneeJ.tx")`;
	$rLwrLegLength = `getAttr ($name + "_rAnkleJ.tx")`;
	
	//RIGHT UPPER LEG
	duplicate -rr -un -n ($name + "_rUprLegGeoG") baseCylinderG ;
	rename ($name + "_rUprLegGeoG|baseCylinder") ($name + "_rUprLegGeo");
	parent ($name + "_rUprLegGeoG") ($name + "_scaleGeoG");
	
	rotate -r -os 180 0 180 ($name + "_rUprLegGeoG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rUprLegGeoG");
	parentConstraint ($name + "_rHipJ") ($name + "_rUprLegGeoG");
	delete ($name + "_rUprLegGeoG_parentConstraint1");
	setAttr (($name + "_rUprLegGeoG.scale"), ($rUprLegLength * -1), ($rLegLength[0] /-20), ($rLegLength[0] /-20));
	makeIdentity -apply true -t 1 -s 1 ($name + "_rUprLegGeoG");
	parentConstraint ($name + "_rHipJ") ($name + "_rUprLegGeoG");
	connectAttr -f ($name + "_rHipJ.scale") ($name + "_rUprLegGeoG.scale");
	
	
	//RIGHT LOWER LEG
	duplicate -rr -un -n ($name + "_rLwrLegGeoG") baseCylinderG ;
	rename ($name + "_rLwrLegGeoG|baseCylinder") ($name + "_rLwrLegGeo");
	parent ($name + "_rLwrLegGeoG") ($name + "_scaleGeoG");
	
	
	//RIGHT LOWER LEG
	rotate -r -os 0 0 180 ($name + "_rLwrLegGeoG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLwrLegGeoG");
	parentConstraint ($name + "_rKneeJ") ($name + "_rLwrLegGeoG");
	delete ($name + "_rLwrLegGeoG_parentConstraint1");
	setAttr (($name + "_rLwrLegGeoG.scale"), ($rLwrLegLength * -1), ($rLegLength[0] /-20), ($rLegLength[0] /-20));
	makeIdentity -apply true -t 1 -s 1 ($name + "_rLwrLegGeoG");
	parentConstraint ($name + "_rKneeJ") ($name + "_rLwrLegGeoG");
	connectAttr -f ($name + "_rKneeJ.scale") ($name + "_rLwrLegGeoG.scale");
	
	parentConstraint ($name + "_rKneeJ") ($name + "_rKneeGeoG");
	parentConstraint ($name + "_rHipJ") ($name + "_rHipGeoG");
	
	
	//RIGHT HEEL
	parentConstraint ($name + "_rAnkleJ") ($name + "_rAnkleGeoG");
	
	polyCube -n ($name + "_rHeelGeo") -sy 2;
	group -n ($name + "_rHeelGeoG") ($name + "_rHeelGeo");
	move -r -os -wd 0 .5 0  ($name + "_rHeelGeo.vtx[0:11]") ;
	parentConstraint ($name + "_rFootOutTilt") ($name + "_rFootInTilt") ($name + "_rFootHeelPivot") ($name + "_rHeelGeoG") ;
	
	$rAnkleLoc = `xform -q -ws -t ($name + "_rAnkleJ")`;
	setAttr ($name + "_rHeelGeo.sy") $rAnkleLoc[1];
	
	select ($name + "_rHeelGeoShape.vtx[0:3]") ;
	newCluster " -envelope 1";
	rename ($name + "_rHeelFrClstr");
	pointConstraint -skip y ($name + "_rBallJ") ($name + "_rHeelFrClstr");
	
	select ($name + "_rHeelGeoShape.vtx[8:11]") ;
	newCluster " -envelope 1";
	rename ($name + "_rHeelBckClstr");
	pointConstraint -skip y ($name + "_rFootHeelPivot") ($name + "_rHeelBckClstr");
	
	select ($name + "_rHeelGeoShape.vtx[0]") ($name + "_rHeelGeoShape.vtx[2]") ;
	newCluster " -envelope 1";
	rename ($name + "_rHeelOutClstr");
	pointConstraint -skip y ($name + "_rFootOutTilt") ($name + "_rHeelOutClstr");
	
	select ($name + "_rHeelGeoShape.vtx[1]") ($name + "_rHeelGeoShape.vtx[3]");
	newCluster " -envelope 1";
	rename ($name + "_rHeelInClstr");
	pointConstraint -skip y ($name + "_rFootInTilt") ($name + "_rHeelInClstr");
	
	spaceLocator -n ($name + "_rFootWidthAim");
	spaceLocator -n ($name + "_rFootWidthTarget");
	parent ($name + "_rFootWidthTarget") ($name + "_rFootWidthAim");
	pointConstraint ($name + "_rFootInTilt") ($name + "_rFootWidthAim");
	aimConstraint ($name + "_rFootOutTilt") ($name + "_rFootWidthAim");
	pointConstraint ($name + "_rFootOutTilt") ($name + "_rFootWidthTarget");
	
	$rFootWidth = `getAttr ($name + "_rFootWidthTarget").tx`;
	
	$HeelPosition = `xform -q -ws -t ($name + "_rFootHeelPivot")`;
	
	scale -r ($rFootWidth /2) 1 ($rFootWidth /2) ($name + "_rHeelBckClstr") ;
	
	select ($name + "_rHeelGeoShape.vtx[4:7]") ;
	newCluster " -envelope 1";
	rename ($name + "_rHeelTopClstr");
	pointConstraint ($name + "_rAnkleJ") ($name + "_rHeelTopClstr");
	scale -r ($rFootWidth /5) 1 ($rFootWidth /5) ($name + "_rHeelTopClstr") ;
	
	delete ($name + "_rHeelGeoG_parentConstraint1");
	move $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] ($name + "_rHeelGeoG.scalePivot") ($name + "_rHeelGeoG.rotatePivot") ;
	move $rAnkleLoc[0] $rAnkleLoc[1] $rAnkleLoc[2] ($name + "_rHeelGeo.scalePivot") ($name + "_rHeelGeo.rotatePivot") ;
	pointConstraint -mo ($name + "_rAnkleJ") ($name + "_rHeelGeoG");
	orientConstraint -mo ($name + "_rAnkleJ") ($name + "_rHeelGeoG");
	
	delete -ch ($name + "_rHeelGeo");
	delete ($name + "_rHeelFrClstr") ($name + "_rHeelBckClstr") ($name + "_rHeelOutClstr") ($name + "_rHeelInClstr") ($name + "_rHeelTopClstr") ;
	parent ($name + "_rHeelGeoG") ($name + "_scaleGeoG");
	
	//RIGHT TOES
	polyCube -n ($name + "_rBallGeo");
	group -n ($name + "_rBallGeoG") ($name + "_rBallGeo");
	move -r 0 -0.5 -0.5 ($name + "_rBallGeoG.scalePivot") ($name + "_rBallGeoG.rotatePivot") ;
	move -r 0 -0.5 -0.5 ($name + "_rBallGeo.scalePivot") ($name + "_rBallGeo.rotatePivot") ;
	rotate 0 90 0;
	move -r 0 0.5 0;
	makeIdentity -apply true -t 1 -r 1 -s 1;
	$rBallInputs = `listHistory ($name + "_rBallGeo")`;
	
	delete `pointConstraint -skip y ($name + "_rBallJ") ($name + "_rBallGeoG")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "scene" ($name + "_rToeJ") ($name + "_rBallGeoG")`;
	parentConstraint -mo ($name + "_rBallJ") ($name + "_rBallGeoG");
	parent ($name + "_rBallGeoG") ($name + "_scaleGeoG");
	
	$rToeLength = `getAttr ($name + "_rToeJ.tx")`;
	setAttr (($name + "_rBallGeo.scale"), ($rToeLength*-1), ($rAnkleLoc[1]/2), ($rFootWidth * -.8));
	
	lattice -n ($name + "_rBallGeoLattice") -divisions 2 2 2 -objectCentered true  -ldv 2 2 2 ($name + "_rBallGeo");
	
	select ($name + "_rBallGeoLatticeLattice.pt[0][0:1][0]") ;
	newCluster " -envelope 1";
	rename ($name + "_rBallOutClstr");
	pointConstraint -skip y ($name + "_rFootOutTilt") ($name + "_rBallOutClstr");
	
	select ($name + "_rBallGeoLatticeLattice.pt[0][0:1][1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rBallInClstr");
	pointConstraint -skip y ($name + "_rFootInTilt") ($name + "_rBallInClstr");
	
	select ($name + "_rBallGeoLatticeLattice.pt[1][1][0:1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rBallTopClstr");
	spaceLocator -n ($name + "_rBallTopClstrLctr");
	pointConstraint -skip y ($name + "_rBallTopClstr") ($name + "_rBallTopClstrLctr");
	delete ($name + "_rBallTopClstrLctr_pointConstraint1");
	parent ($name + "_rBallTopClstr") ($name + "_rBallTopClstrLctr");
	scale 1 0.8 1 ($name + "_rBallTopClstrLctr");
		
	//////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////RIGHT TOE GEOMETRY/////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
	
	if (`objExists ($name + "_rToe10J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 10;
		delete -ch ($name + "_rBallGeo");
		
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[10]") ($name + "_rBallGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe10Clstr");
		
		$rToe08Loc = `xform -q -ws -t ($name + "_rToe08J1C")`;
		$rToe10Loc = `xform -q -ws -t ($name + "_rToe10J1C")`;
		$rToe10Offset[0] = ($rToe08Loc[0] - $rToe10Loc[0]) /-2;
		$rToe10Offset[1] = ($rToe08Loc[1] - $rToe10Loc[1]) /-2;
		$rToe10Offset[2] = ($rToe08Loc[2] - $rToe10Loc[2]) /-2;
		
		pointConstraint -skip y  -offset $rToe10Offset[0] $rToe10Offset[1] $rToe10Offset[2] ($name + "_rToe10J1C") ($name + "_rToe10Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe10J1C") ($name + "_rToe10Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05_6Clstr");
		pointConstraint -skip y ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[6]") ($name + "_rBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06_7Clstr");
		pointConstraint -skip y ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[7]") ($name + "_rBallGeoShape.vtx[18]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07_8Clstr");
		pointConstraint -skip y ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[8]") ($name + "_rBallGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08_9Clstr");
		pointConstraint -skip y ($name + "_rToe08J1C") ($name + "_rToe09J1C") ($name + "_rToe08_9Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe08J1C") ($name + "_rToe09J1C") ($name + "_rToe08_9Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[9]") ($name + "_rBallGeoShape.vtx[20]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe09_10Clstr");
		pointConstraint -skip y ($name + "_rToe09J1C") ($name + "_rToe10J1C") ($name + "_rToe09_10Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe09J1C") ($name + "_rToe10J1C") ($name + "_rToe09_10Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05_6Clstr") ($name + "_rToe06_7Clstr") ($name + "_rToe07_8Clstr") ($name + "_rToe08_9Clstr") ($name + "_rToe09_10Clstr") ($name + "_rToe10Clstr");
	}
	
	else if (`objExists ($name + "_rToe09J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 9;
		delete -ch ($name + "_rBallGeo");
		
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[9]") ($name + "_rBallGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe09Clstr");
		
		$rToe08Loc = `xform -q -ws -t ($name + "_rToe08J1C")`;
		$rToe09Loc = `xform -q -ws -t ($name + "_rToe09J1C")`;
		$rToe09Offset[0] = ($rToe08Loc[0] - $rToe09Loc[0]) /-2;
		$rToe09Offset[1] = ($rToe08Loc[1] - $rToe09Loc[1]) /-2;
		$rToe09Offset[2] = ($rToe08Loc[2] - $rToe09Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe09Offset[0] $rToe09Offset[1] $rToe09Offset[2] ($name + "_rToe09J1C") ($name + "_rToe09Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe09J1C") ($name + "_rToe09Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05_6Clstr");
		pointConstraint -skip y ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[6]") ($name + "_rBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06_7Clstr");
		pointConstraint -skip y ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[7]") ($name + "_rBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07_8Clstr");
		pointConstraint -skip y ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[8]") ($name + "_rBallGeoShape.vtx[18]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08_9Clstr");
		pointConstraint -skip y ($name + "_rToe08J1C") ($name + "_rToe09J1C") ($name + "_rToe08_9Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe08J1C") ($name + "_rToe09J1C") ($name + "_rToe08_9Clstr") ; 
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05_6Clstr") ($name + "_rToe06_7Clstr") ($name + "_rToe07_8Clstr") ($name + "_rToe08_9Clstr") ($name + "_rToe09Clstr");
	}
	
	else if (`objExists ($name + "_rToe08J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 8;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[8]") ($name + "_rBallGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08Clstr");
		
		$rToe07Loc = `xform -q -ws -t ($name + "_rToe07J1C")`;
		$rToe08Loc = `xform -q -ws -t ($name + "_rToe08J1C")`;
		$rToe08Offset[0] = ($rToe07Loc[0] - $rToe08Loc[0]) /-2;
		$rToe08Offset[1] = ($rToe07Loc[1] - $rToe08Loc[1]) /-2;
		$rToe08Offset[2] = ($rToe07Loc[2] - $rToe08Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe08Offset[0] $rToe08Offset[1] $rToe08Offset[2] ($name + "_rToe08J1C") ($name + "_rToe08Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe08J1C") ($name + "_rToe08Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05_6Clstr");
		pointConstraint -skip y ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ; 
		select ($name + "_rBallGeoShape.vtx[6]") ($name + "_rBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06_7Clstr");
		pointConstraint -skip y ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[7]") ($name + "_rBallGeoShape.vtx[16]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07_8Clstr");
		pointConstraint -skip y ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe07J1C") ($name + "_rToe08J1C") ($name + "_rToe07_8Clstr") ; 
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05_6Clstr") ($name + "_rToe06_7Clstr") ($name + "_rToe07_8Clstr") ($name + "_rToe08Clstr");
	}
	
	else if (`objExists ($name + "_rToe07J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 7;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[7]") ($name + "_rBallGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07Clstr");
		
		$rToe06Loc = `xform -q -ws -t ($name + "_rToe06J1C")`;
		$rToe07Loc = `xform -q -ws -t ($name + "_rToe07J1C")`;
		$rToe07Offset[0] = ($rToe06Loc[0] - $rToe07Loc[0]) /-2;
		$rToe07Offset[1] = ($rToe06Loc[1] - $rToe07Loc[1]) /-2;
		$rToe07Offset[2] = ($rToe06Loc[2] - $rToe07Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe07Offset[0] $rToe07Offset[1] $rToe07Offset[2] ($name + "_rToe07J1C") ($name + "_rToe07Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe07J1C") ($name + "_rToe07Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05_6Clstr");
		pointConstraint -skip y ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[6]") ($name + "_rBallGeoShape.vtx[14]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06_7Clstr");
		pointConstraint -skip y ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe06J1C") ($name + "_rToe07J1C") ($name + "_rToe06_7Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05_6Clstr") ($name + "_rToe06_7Clstr") ($name + "_rToe07Clstr");
	}	
	
	else if (`objExists ($name + "_rToe06J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 6;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[6]") ($name + "_rBallGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06Clstr");
		
		$rToe05Loc = `xform -q -ws -t ($name + "_rToe05J1C")`;
		$rToe06Loc = `xform -q -ws -t ($name + "_rToe06J1C")`;
		$rToe06Offset[0] = ($rToe05Loc[0] - $rToe06Loc[0]) /-2;
		$rToe06Offset[1] = ($rToe05Loc[1] - $rToe06Loc[1]) /-2;
		$rToe06Offset[2] = ($rToe05Loc[2] - $rToe06Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe06Offset[0] $rToe06Offset[1] $rToe06Offset[2] ($name + "_rToe06J1C") ($name + "_rToe06Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe06J1C") ($name + "_rToe06Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ; 
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[12]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05_6Clstr");
		pointConstraint -skip y ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe06J1C") ($name + "_rToe05_6Clstr") ; 
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05_6Clstr") ($name + "_rToe06Clstr");
	}
	
	else if (`objExists ($name + "_rToe05J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 5;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[5]") ($name + "_rBallGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05Clstr");
		
		$rToe04Loc = `xform -q -ws -t ($name + "_rToe04J1C")`;
		$rToe05Loc = `xform -q -ws -t ($name + "_rToe05J1C")`;
		$rToe05Offset[0] = ($rToe04Loc[0] - $rToe05Loc[0]) /-2;
		$rToe05Offset[1] = ($rToe04Loc[1] - $rToe05Loc[1]) /-2;
		$rToe05Offset[2] = ($rToe04Loc[2] - $rToe05Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe05Offset[0] $rToe05Offset[1] $rToe05Offset[2] ($name + "_rToe05J1C") ($name + "_rToe05Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe05J1C") ($name + "_rToe05Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[10]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04_5Clstr");
		pointConstraint -skip y ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe05J1C") ($name + "_rToe04_5Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04_5Clstr")
		($name + "_rToe05Clstr");
	}
	
	else if (`objExists ($name + "_rToe04J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 4;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[4]") ($name + "_rBallGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04Clstr");
		
		$rToe03Loc = `xform -q -ws -t ($name + "_rToe03J1C")`;
		$rToe04Loc = `xform -q -ws -t ($name + "_rToe04J1C")`;
		$rToe04Offset[0] = ($rToe03Loc[0] - $rToe04Loc[0]) /-2;
		$rToe04Offset[1] = ($rToe03Loc[1] - $rToe04Loc[1]) /-2;
		$rToe04Offset[2] = ($rToe03Loc[2] - $rToe04Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe04Offset[0] $rToe04Offset[1] $rToe04Offset[2] ($name + "_rToe04J1C") ($name + "_rToe04Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe04J1C") ($name + "_rToe04Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[8]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03_4Clstr");
		pointConstraint -skip y ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe04J1C") ($name + "_rToe03_4Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03_4Clstr") ($name + "_rToe04Clstr");
	}
	
	else if (`objExists ($name + "_rToe03J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 3;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[4]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[3]") ($name + "_rBallGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03Clstr");
		
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe03Loc = `xform -q -ws -t ($name + "_rToe03J1C")`;
		$rToe03Offset[0] = ($rToe02Loc[0] - $rToe03Loc[0]) /-2;
		$rToe03Offset[1] = ($rToe02Loc[1] - $rToe03Loc[1]) /-2;
		$rToe03Offset[2] = ($rToe02Loc[2] - $rToe03Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe03Offset[0] $rToe03Offset[1] $rToe03Offset[2] ($name + "_rToe03J1C") ($name + "_rToe03Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe03J1C") ($name + "_rToe03Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[6]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02_3Clstr");
		pointConstraint -skip y ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe03J1C") ($name + "_rToe02_3Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02_3Clstr") ($name + "_rToe03Clstr");
	}
		
	else if (`objExists ($name + "_rToe02J1")`)
	{
		setAttr ($rBallInputs[2] + ".subdivisionsWidth") 2;
		delete -ch ($name + "_rBallGeo");
		
		select ($name + "_rBallGeoShape.vtx[0]") ($name + "_rBallGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01Clstr");
		
		$rToe01Loc = `xform -q -ws -t ($name + "_rToe01J1C")`;
		$rToe02Loc = `xform -q -ws -t ($name + "_rToe02J1C")`;
		$rToe01Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /2;
		$rToe01Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /2;
		$rToe01Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /2;
		
		pointConstraint -skip y -offset $rToe01Offset[0] $rToe01Offset[1] $rToe01Offset[2] ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe01Clstr");
		
		select ($name + "_rBallGeoShape.vtx[2]") ($name + "_rBallGeoShape.vtx[5]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02Clstr");
		
		$rToe02Offset[0] = ($rToe01Loc[0] - $rToe02Loc[0]) /-2;
		$rToe02Offset[1] = ($rToe01Loc[1] - $rToe02Loc[1]) /-2;
		$rToe02Offset[2] = ($rToe01Loc[2] - $rToe02Loc[2]) /-2;
		
		pointConstraint -skip y -offset $rToe02Offset[0] $rToe02Offset[1] $rToe02Offset[2] ($name + "_rToe02J1C") ($name + "_rToe02Clstr");
		orientConstraint -offset -180 0 0 ($name + "_rToe02J1C") ($name + "_rToe02Clstr");
		
		select ($name + "_rBallGeoShape.vtx[1]") ($name + "_rBallGeoShape.vtx[4]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01_2Clstr");
		pointConstraint -skip y ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		orientConstraint -offset -180 0 0 ($name + "_rToe01J1C") ($name + "_rToe02J1C") ($name + "_rToe01_2Clstr") ;
		
		delete -ch ($name + "_rBallGeo");
		delete ($name + "_rToe01Clstr") ($name + "_rToe01_2Clstr") ($name + "_rToe02Clstr");
	}
	
	delete -ch ($name + "_rBallGeo");
	delete ($name + "_rFootWidthAim") ($name + "_rBallOutClstr") ($name + "_rBallInClstr") ($name + "_rBallTopClstrLctr") ;
	parentConstraint -mo ($name + "_rBallJ") ($name + "_rBallGeoG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rBallGeo");
	
	/////////////////INDIVIDUAL RIGHT TOES/////////////////////
	if (`objExists ($name + "_rToe01J1")`)
	{
		polyCube -n ($name + "_rToe01J1Geo");
		group -n ($name + "_rToe01J1GeoG") ($name + "_rToe01J1Geo");
		move -r -0.5 0 0 ($name + "_rToe01J1GeoG.scalePivot") ($name + "_rToe01J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe01J1Geo.scalePivot") ($name + "_rToe01J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe01J1C") ($name + "_rToe01J1GeoG");
		$rToe01_Loc = `getAttr ($name + "_rToe01J1.tz")`;
		$rToe02_Loc = `getAttr ($name + "_rToe02J1.tz")`;
		setAttr ($name + "_rToe01J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe01J1GeoG.sz") (($rToe01_Loc - $rToe02_Loc)*-.9);
		select ($name + "_rToe01J1GeoShape.vtx[1]") ($name + "_rToe01J1GeoShape.vtx[3]") ($name + "_rToe01J1GeoShape.vtx[5]") ($name + "_rToe01J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01J1_Clstr");
		pointConstraint ($name + "_rToe01J2") ($name + "_rToe01J1_Clstr");
		
		polyCube -n ($name + "_rToe01J2Geo");
		group -n ($name + "_rToe01J2GeoG") ($name + "_rToe01J2Geo");
		move -r -0.5 0 0 ($name + "_rToe01J2GeoG.scalePivot") ($name + "_rToe01J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe01J2Geo.scalePivot") ($name + "_rToe01J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe01J2C") ($name + "_rToe01J2GeoG");
		setAttr ($name + "_rToe01J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe01J2GeoG.sz") (($rToe01_Loc - $rToe02_Loc)*-.9);
		select ($name + "_rToe01J2GeoShape.vtx[1]") ($name + "_rToe01J2GeoShape.vtx[3]") ($name + "_rToe01J2GeoShape.vtx[5]") ($name + "_rToe01J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe01J2_Clstr");
		pointConstraint ($name + "_rToe01JTip") ($name + "_rToe01J2_Clstr");
		
		delete -ch ($name + "_rToe01J1Geo") ($name + "_rToe01J2Geo");
		parent ($name + "_rToe01J1GeoG") ($name + "_rToe01J2GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe01J1_Clstr") ($name + "_rToe01J2_Clstr");
	}
	
	
	if (`objExists ($name + "_rToe02J1")`)
	{
		polyCube -n ($name + "_rToe02J1Geo");
		group -n ($name + "_rToe02J1GeoG") ($name + "_rToe02J1Geo");
		move -r -0.5 0 0 ($name + "_rToe02J1GeoG.scalePivot") ($name + "_rToe02J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe02J1Geo.scalePivot") ($name + "_rToe02J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe02J1C") ($name + "_rToe02J1GeoG");
		$rToe01_Loc = `getAttr ($name + "_rToe01J1.tz")`;
		$rToe02_Loc = `getAttr ($name + "_rToe02J1.tz")`;
		setAttr ($name + "_rToe02J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe02J1GeoG.sz") (($rToe01_Loc - $rToe02_Loc)*-.9);
		select ($name + "_rToe02J1GeoShape.vtx[1]") ($name + "_rToe02J1GeoShape.vtx[3]") ($name + "_rToe02J1GeoShape.vtx[5]") ($name + "_rToe02J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02J1_Clstr");
		pointConstraint ($name + "_rToe02J2") ($name + "_rToe02J1_Clstr");
		
		polyCube -n ($name + "_rToe02J2Geo");
		group -n ($name + "_rToe02J2GeoG") ($name + "_rToe02J2Geo");
		move -r -0.5 0 0 ($name + "_rToe02J2GeoG.scalePivot") ($name + "_rToe02J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe02J2Geo.scalePivot") ($name + "_rToe02J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe02J2C") ($name + "_rToe02J2GeoG");
		setAttr ($name + "_rToe02J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe02J2GeoG.sz") (($rToe01_Loc - $rToe02_Loc)*-.9);
		select ($name + "_rToe02J2GeoShape.vtx[1]") ($name + "_rToe02J2GeoShape.vtx[3]") ($name + "_rToe02J2GeoShape.vtx[5]") ($name + "_rToe02J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02J2_Clstr");
		pointConstraint ($name + "_rToe02J3") ($name + "_rToe02J2_Clstr");
		
		polyCube -n ($name + "_rToe02J3Geo");
		group -n ($name + "_rToe02J3GeoG") ($name + "_rToe02J3Geo");
		move -r -0.5 0 0 ($name + "_rToe02J3GeoG.scalePivot") ($name + "_rToe02J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe02J3Geo.scalePivot") ($name + "_rToe02J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe02J3C") ($name + "_rToe02J3GeoG");
		setAttr ($name + "_rToe02J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe02J3GeoG.sz") (($rToe01_Loc - $rToe02_Loc)*-.9);
		select ($name + "_rToe02J3GeoShape.vtx[1]") ($name + "_rToe02J3GeoShape.vtx[3]") ($name + "_rToe02J3GeoShape.vtx[5]") ($name + "_rToe02J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe02J3_Clstr");
		pointConstraint ($name + "_rToe02JTip") ($name + "_rToe02J3_Clstr");
		
		delete -ch ($name + "_rToe02J1Geo") ($name + "_rToe02J2Geo") ($name + "_rToe02J3Geo");
		parent ($name + "_rToe02J1GeoG") ($name + "_rToe02J2GeoG") ($name + "_rToe02J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe02J1_Clstr") ($name + "_rToe02J2_Clstr") ($name + "_rToe02J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe03J1")`)
	{
		polyCube -n ($name + "_rToe03J1Geo");
		group -n ($name + "_rToe03J1GeoG") ($name + "_rToe03J1Geo");
		move -r -0.5 0 0 ($name + "_rToe03J1GeoG.scalePivot") ($name + "_rToe03J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe03J1Geo.scalePivot") ($name + "_rToe03J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe03J1C") ($name + "_rToe03J1GeoG");
		$rToe01_Loc = `getAttr ($name + "_rToe01J1.tz")`;
		$rToe02_Loc = `getAttr ($name + "_rToe02J1.tz")`;
		$rToe03_Loc = `getAttr ($name + "_rToe03J1.tz")`;
		setAttr ($name + "_rToe03J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe03J1GeoG.sz") (($rToe02_Loc - $rToe03_Loc)*-.9);
		setAttr ($name + "_rToe02J1GeoG.sz") (($rToe01_Loc - $rToe03_Loc)*.45);
		setAttr ($name + "_rToe02J2GeoG.sz") (($rToe01_Loc - $rToe03_Loc)*.45);
		setAttr ($name + "_rToe02J3GeoG.sz") (($rToe01_Loc - $rToe03_Loc)*.45);
		
		
		select ($name + "_rToe03J1GeoShape.vtx[1]") ($name + "_rToe03J1GeoShape.vtx[3]") ($name + "_rToe03J1GeoShape.vtx[5]") ($name + "_rToe03J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03J1_Clstr");
		pointConstraint ($name + "_rToe03J2") ($name + "_rToe03J1_Clstr");
		
		polyCube -n ($name + "_rToe03J2Geo");
		group -n ($name + "_rToe03J2GeoG") ($name + "_rToe03J2Geo");
		move -r -0.5 0 0 ($name + "_rToe03J2GeoG.scalePivot") ($name + "_rToe03J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe03J2Geo.scalePivot") ($name + "_rToe03J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe03J2C") ($name + "_rToe03J2GeoG");
		setAttr ($name + "_rToe03J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe03J2GeoG.sz") (($rToe02_Loc - $rToe03_Loc)*-.9);
		select ($name + "_rToe03J2GeoShape.vtx[1]") ($name + "_rToe03J2GeoShape.vtx[3]") ($name + "_rToe03J2GeoShape.vtx[5]") ($name + "_rToe03J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03J2_Clstr");
		pointConstraint ($name + "_rToe03J3") ($name + "_rToe03J2_Clstr");
		
		polyCube -n ($name + "_rToe03J3Geo");
		group -n ($name + "_rToe03J3GeoG") ($name + "_rToe03J3Geo");
		move -r -0.5 0 0 ($name + "_rToe03J3GeoG.scalePivot") ($name + "_rToe03J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe03J3Geo.scalePivot") ($name + "_rToe03J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe03J3C") ($name + "_rToe03J3GeoG");
		setAttr ($name + "_rToe03J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe03J3GeoG.sz") (($rToe02_Loc - $rToe03_Loc)*-.9);
		select ($name + "_rToe03J3GeoShape.vtx[1]") ($name + "_rToe03J3GeoShape.vtx[3]") ($name + "_rToe03J3GeoShape.vtx[5]") ($name + "_rToe03J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe03J3_Clstr");
		pointConstraint ($name + "_rToe03JTip") ($name + "_rToe03J3_Clstr");
		
		delete -ch ($name + "_rToe03J1Geo") ($name + "_rToe03J2Geo") ($name + "_rToe03J3Geo");
		parent ($name + "_rToe03J1GeoG") ($name + "_rToe03J2GeoG") ($name + "_rToe03J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe03J1_Clstr") ($name + "_rToe03J2_Clstr") ($name + "_rToe03J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe04J1")`)
	{
		polyCube -n ($name + "_rToe04J1Geo");
		group -n ($name + "_rToe04J1GeoG") ($name + "_rToe04J1Geo");
		move -r -0.5 0 0 ($name + "_rToe04J1GeoG.scalePivot") ($name + "_rToe04J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe04J1Geo.scalePivot") ($name + "_rToe04J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe04J1C") ($name + "_rToe04J1GeoG");
		$rToe02_Loc = `getAttr ($name + "_rToe02J1.tz")`;
		$rToe03_Loc = `getAttr ($name + "_rToe03J1.tz")`;
		$rToe04_Loc = `getAttr ($name + "_rToe04J1.tz")`;
		setAttr ($name + "_rToe04J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe04J1GeoG.sz") (($rToe03_Loc - $rToe04_Loc)*-.9);
		setAttr ($name + "_rToe03J1GeoG.sz") (($rToe02_Loc - $rToe04_Loc)*.45);
		setAttr ($name + "_rToe03J2GeoG.sz") (($rToe02_Loc - $rToe04_Loc)*.45);
		setAttr ($name + "_rToe03J3GeoG.sz") (($rToe02_Loc - $rToe04_Loc)*.45);
		
		select ($name + "_rToe04J1GeoShape.vtx[1]") ($name + "_rToe04J1GeoShape.vtx[3]") ($name + "_rToe04J1GeoShape.vtx[5]") ($name + "_rToe04J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04J1_Clstr");
		pointConstraint ($name + "_rToe04J2") ($name + "_rToe04J1_Clstr");
		
		polyCube -n ($name + "_rToe04J2Geo");
		group -n ($name + "_rToe04J2GeoG") ($name + "_rToe04J2Geo");
		move -r -0.5 0 0 ($name + "_rToe04J2GeoG.scalePivot") ($name + "_rToe04J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe04J2Geo.scalePivot") ($name + "_rToe04J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe04J2C") ($name + "_rToe04J2GeoG");
		setAttr ($name + "_rToe04J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe04J2GeoG.sz") (($rToe03_Loc - $rToe04_Loc)*-.9);
		select ($name + "_rToe04J2GeoShape.vtx[1]") ($name + "_rToe04J2GeoShape.vtx[3]") ($name + "_rToe04J2GeoShape.vtx[5]") ($name + "_rToe04J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04J2_Clstr");
		pointConstraint ($name + "_rToe04J3") ($name + "_rToe04J2_Clstr");
		
		polyCube -n ($name + "_rToe04J3Geo");
		group -n ($name + "_rToe04J3GeoG") ($name + "_rToe04J3Geo");
		move -r -0.5 0 0 ($name + "_rToe04J3GeoG.scalePivot") ($name + "_rToe04J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe04J3Geo.scalePivot") ($name + "_rToe04J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe04J3C") ($name + "_rToe04J3GeoG");
		setAttr ($name + "_rToe04J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe04J3GeoG.sz") (($rToe03_Loc - $rToe04_Loc)*-.9);
		select ($name + "_rToe04J3GeoShape.vtx[1]") ($name + "_rToe04J3GeoShape.vtx[3]") ($name + "_rToe04J3GeoShape.vtx[5]") ($name + "_rToe04J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe04J3_Clstr");
		pointConstraint ($name + "_rToe04JTip") ($name + "_rToe04J3_Clstr");
		
		delete -ch ($name + "_rToe04J1Geo") ($name + "_rToe04J2Geo") ($name + "_rToe04J3Geo");
		parent ($name + "_rToe04J1GeoG") ($name + "_rToe04J2GeoG") ($name + "_rToe04J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe04J1_Clstr") ($name + "_rToe04J2_Clstr") ($name + "_rToe04J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe05J1")`)
	{
		polyCube -n ($name + "_rToe05J1Geo");
		group -n ($name + "_rToe05J1GeoG") ($name + "_rToe05J1Geo");
		move -r -0.5 0 0 ($name + "_rToe05J1GeoG.scalePivot") ($name + "_rToe05J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe05J1Geo.scalePivot") ($name + "_rToe05J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe05J1C") ($name + "_rToe05J1GeoG");
		$rToe03_Loc = `getAttr ($name + "_rToe03J1.tz")`;
		$rToe04_Loc = `getAttr ($name + "_rToe04J1.tz")`;
		$rToe05_Loc = `getAttr ($name + "_rToe05J1.tz")`;
		setAttr ($name + "_rToe05J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe05J1GeoG.sz") (($rToe04_Loc - $rToe05_Loc)*-.9);
		setAttr ($name + "_rToe04J1GeoG.sz") (($rToe03_Loc - $rToe05_Loc)*.45);
		setAttr ($name + "_rToe04J2GeoG.sz") (($rToe03_Loc - $rToe05_Loc)*.45);
		setAttr ($name + "_rToe04J3GeoG.sz") (($rToe03_Loc - $rToe05_Loc)*.45);
		
		select ($name + "_rToe05J1GeoShape.vtx[1]") ($name + "_rToe05J1GeoShape.vtx[3]") ($name + "_rToe05J1GeoShape.vtx[5]") ($name + "_rToe05J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05J1_Clstr");
		pointConstraint ($name + "_rToe05J2") ($name + "_rToe05J1_Clstr");
		
		polyCube -n ($name + "_rToe05J2Geo");
		group -n ($name + "_rToe05J2GeoG") ($name + "_rToe05J2Geo");
		move -r -0.5 0 0 ($name + "_rToe05J2GeoG.scalePivot") ($name + "_rToe05J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe05J2Geo.scalePivot") ($name + "_rToe05J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe05J2C") ($name + "_rToe05J2GeoG");
		setAttr ($name + "_rToe05J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe05J2GeoG.sz") (($rToe04_Loc - $rToe05_Loc)*-.9);
		select ($name + "_rToe05J2GeoShape.vtx[1]") ($name + "_rToe05J2GeoShape.vtx[3]") ($name + "_rToe05J2GeoShape.vtx[5]") ($name + "_rToe05J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05J2_Clstr");
		pointConstraint ($name + "_rToe05J3") ($name + "_rToe05J2_Clstr");
		
		polyCube -n ($name + "_rToe05J3Geo");
		group -n ($name + "_rToe05J3GeoG") ($name + "_rToe05J3Geo");
		move -r -0.5 0 0 ($name + "_rToe05J3GeoG.scalePivot") ($name + "_rToe05J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe05J3Geo.scalePivot") ($name + "_rToe05J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe05J3C") ($name + "_rToe05J3GeoG");
		setAttr ($name + "_rToe05J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe05J3GeoG.sz") (($rToe04_Loc - $rToe05_Loc)*-.9);
		select ($name + "_rToe05J3GeoShape.vtx[1]") ($name + "_rToe05J3GeoShape.vtx[3]") ($name + "_rToe05J3GeoShape.vtx[5]") ($name + "_rToe05J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe05J3_Clstr");
		pointConstraint ($name + "_rToe05JTip") ($name + "_rToe05J3_Clstr");
		
		delete -ch ($name + "_rToe05J1Geo") ($name + "_rToe05J2Geo") ($name + "_rToe05J3Geo");
		parent ($name + "_rToe05J1GeoG") ($name + "_rToe05J2GeoG") ($name + "_rToe05J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe05J1_Clstr") ($name + "_rToe05J2_Clstr") ($name + "_rToe05J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe06J1")`)
	{
		polyCube -n ($name + "_rToe06J1Geo");
		group -n ($name + "_rToe06J1GeoG") ($name + "_rToe06J1Geo");
		move -r -0.5 0 0 ($name + "_rToe06J1GeoG.scalePivot") ($name + "_rToe06J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe06J1Geo.scalePivot") ($name + "_rToe06J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe06J1C") ($name + "_rToe06J1GeoG");
		$rToe04_Loc = `getAttr ($name + "_rToe04J1.tz")`;
		$rToe05_Loc = `getAttr ($name + "_rToe05J1.tz")`;
		$rToe06_Loc = `getAttr ($name + "_rToe06J1.tz")`;
		setAttr ($name + "_rToe06J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe06J1GeoG.sz") (($rToe05_Loc - $rToe06_Loc)*-.9);
		setAttr ($name + "_rToe05J1GeoG.sz") (($rToe04_Loc - $rToe06_Loc)*.45);
		setAttr ($name + "_rToe05J2GeoG.sz") (($rToe04_Loc - $rToe06_Loc)*.45);
		setAttr ($name + "_rToe05J3GeoG.sz") (($rToe04_Loc - $rToe06_Loc)*.45);
		
		
		select ($name + "_rToe06J1GeoShape.vtx[1]") ($name + "_rToe06J1GeoShape.vtx[3]") ($name + "_rToe06J1GeoShape.vtx[5]") ($name + "_rToe06J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06J1_Clstr");
		pointConstraint ($name + "_rToe06J2") ($name + "_rToe06J1_Clstr");
		
		polyCube -n ($name + "_rToe06J2Geo");
		group -n ($name + "_rToe06J2GeoG") ($name + "_rToe06J2Geo");
		move -r -0.5 0 0 ($name + "_rToe06J2GeoG.scalePivot") ($name + "_rToe06J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe06J2Geo.scalePivot") ($name + "_rToe06J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe06J2C") ($name + "_rToe06J2GeoG");
		setAttr ($name + "_rToe06J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe06J2GeoG.sz") (($rToe05_Loc - $rToe06_Loc)*-.9);
		select ($name + "_rToe06J2GeoShape.vtx[1]") ($name + "_rToe06J2GeoShape.vtx[3]") ($name + "_rToe06J2GeoShape.vtx[5]") ($name + "_rToe06J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06J2_Clstr");
		pointConstraint ($name + "_rToe06J3") ($name + "_rToe06J2_Clstr");
		
		polyCube -n ($name + "_rToe06J3Geo");
		group -n ($name + "_rToe06J3GeoG") ($name + "_rToe06J3Geo");
		move -r -0.5 0 0 ($name + "_rToe06J3GeoG.scalePivot") ($name + "_rToe06J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe06J3Geo.scalePivot") ($name + "_rToe06J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe06J3C") ($name + "_rToe06J3GeoG");
		setAttr ($name + "_rToe06J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe06J3GeoG.sz") (($rToe05_Loc - $rToe06_Loc)*-.9);
		select ($name + "_rToe06J3GeoShape.vtx[1]") ($name + "_rToe06J3GeoShape.vtx[3]") ($name + "_rToe06J3GeoShape.vtx[5]") ($name + "_rToe06J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe06J3_Clstr");
		pointConstraint ($name + "_rToe06JTip") ($name + "_rToe06J3_Clstr");
		
		delete -ch ($name + "_rToe06J1Geo") ($name + "_rToe06J2Geo") ($name + "_rToe06J3Geo");
		parent ($name + "_rToe06J1GeoG") ($name + "_rToe06J2GeoG") ($name + "_rToe06J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe06J1_Clstr") ($name + "_rToe06J2_Clstr") ($name + "_rToe06J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe07J1")`)
	{
		polyCube -n ($name + "_rToe07J1Geo");
		group -n ($name + "_rToe07J1GeoG") ($name + "_rToe07J1Geo");
		move -r -0.5 0 0 ($name + "_rToe07J1GeoG.scalePivot") ($name + "_rToe07J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe07J1Geo.scalePivot") ($name + "_rToe07J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe07J1C") ($name + "_rToe07J1GeoG");
		$rToe04_Loc = `getAttr ($name + "_rToe04J1.tz")`;
		$rToe05_Loc = `getAttr ($name + "_rToe05J1.tz")`;
		$rToe06_Loc = `getAttr ($name + "_rToe06J1.tz")`;
		$rToe07_Loc = `getAttr ($name + "_rToe07J1.tz")`;
		setAttr ($name + "_rToe07J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe07J1GeoG.sz") (($rToe06_Loc - $rToe07_Loc)*-.9);
		setAttr ($name + "_rToe06J1GeoG.sz") (($rToe05_Loc - $rToe07_Loc)*.45);
		setAttr ($name + "_rToe06J2GeoG.sz") (($rToe05_Loc - $rToe07_Loc)*.45);
		setAttr ($name + "_rToe06J3GeoG.sz") (($rToe05_Loc - $rToe07_Loc)*.45);
		
		
		select ($name + "_rToe07J1GeoShape.vtx[1]") ($name + "_rToe07J1GeoShape.vtx[3]") ($name + "_rToe07J1GeoShape.vtx[5]") ($name + "_rToe07J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07J1_Clstr");
		pointConstraint ($name + "_rToe07J2") ($name + "_rToe07J1_Clstr");
		
		polyCube -n ($name + "_rToe07J2Geo");
		group -n ($name + "_rToe07J2GeoG") ($name + "_rToe07J2Geo");
		move -r -0.5 0 0 ($name + "_rToe07J2GeoG.scalePivot") ($name + "_rToe07J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe07J2Geo.scalePivot") ($name + "_rToe07J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe07J2C") ($name + "_rToe07J2GeoG");
		setAttr ($name + "_rToe07J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe07J2GeoG.sz") (($rToe06_Loc - $rToe07_Loc)*-.9);
		select ($name + "_rToe07J2GeoShape.vtx[1]") ($name + "_rToe07J2GeoShape.vtx[3]") ($name + "_rToe07J2GeoShape.vtx[5]") ($name + "_rToe07J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07J2_Clstr");
		pointConstraint ($name + "_rToe07J3") ($name + "_rToe07J2_Clstr");
		
		polyCube -n ($name + "_rToe07J3Geo");
		group -n ($name + "_rToe07J3GeoG") ($name + "_rToe07J3Geo");
		move -r -0.5 0 0 ($name + "_rToe07J3GeoG.scalePivot") ($name + "_rToe07J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe07J3Geo.scalePivot") ($name + "_rToe07J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe07J3C") ($name + "_rToe07J3GeoG");
		setAttr ($name + "_rToe07J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe07J3GeoG.sz") (($rToe06_Loc - $rToe07_Loc)*-.9);
		select ($name + "_rToe07J3GeoShape.vtx[1]") ($name + "_rToe07J3GeoShape.vtx[3]") ($name + "_rToe07J3GeoShape.vtx[5]") ($name + "_rToe07J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe07J3_Clstr");
		pointConstraint ($name + "_rToe07JTip") ($name + "_rToe07J3_Clstr");
		
		delete -ch ($name + "_rToe07J1Geo") ($name + "_rToe07J2Geo") ($name + "_rToe07J3Geo");
		parent ($name + "_rToe07J1GeoG") ($name + "_rToe07J2GeoG") ($name + "_rToe07J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe07J1_Clstr") ($name + "_rToe07J2_Clstr") ($name + "_rToe07J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe08J1")`)
	{
		polyCube -n ($name + "_rToe08J1Geo");
		group -n ($name + "_rToe08J1GeoG") ($name + "_rToe08J1Geo");
		move -r -0.5 0 0 ($name + "_rToe08J1GeoG.scalePivot") ($name + "_rToe08J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe08J1Geo.scalePivot") ($name + "_rToe08J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe08J1C") ($name + "_rToe08J1GeoG");
		$rToe05_Loc = `getAttr ($name + "_rToe05J1.tz")`;
		$rToe06_Loc = `getAttr ($name + "_rToe06J1.tz")`;
		$rToe07_Loc = `getAttr ($name + "_rToe07J1.tz")`;
		$rToe08_Loc = `getAttr ($name + "_rToe08J1.tz")`;
		setAttr ($name + "_rToe08J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe08J1GeoG.sz") (($rToe07_Loc - $rToe08_Loc)*-.9);
		setAttr ($name + "_rToe07J1GeoG.sz") (($rToe06_Loc - $rToe08_Loc)*.45);
		setAttr ($name + "_rToe07J2GeoG.sz") (($rToe06_Loc - $rToe08_Loc)*.45);
		setAttr ($name + "_rToe07J3GeoG.sz") (($rToe06_Loc - $rToe08_Loc)*.45);
		
		select ($name + "_rToe08J1GeoShape.vtx[1]") ($name + "_rToe08J1GeoShape.vtx[3]") ($name + "_rToe08J1GeoShape.vtx[5]") ($name + "_rToe08J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08J1_Clstr");
		pointConstraint ($name + "_rToe08J2") ($name + "_rToe08J1_Clstr");
		
		polyCube -n ($name + "_rToe08J2Geo");
		group -n ($name + "_rToe08J2GeoG") ($name + "_rToe08J2Geo");
		move -r -0.5 0 0 ($name + "_rToe08J2GeoG.scalePivot") ($name + "_rToe08J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe08J2Geo.scalePivot") ($name + "_rToe08J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe08J2C") ($name + "_rToe08J2GeoG");
		setAttr ($name + "_rToe08J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe08J2GeoG.sz") (($rToe07_Loc - $rToe08_Loc)*-.9);
		select ($name + "_rToe08J2GeoShape.vtx[1]") ($name + "_rToe08J2GeoShape.vtx[3]") ($name + "_rToe08J2GeoShape.vtx[5]") ($name + "_rToe08J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08J2_Clstr");
		pointConstraint ($name + "_rToe08J3") ($name + "_rToe08J2_Clstr");
		
		polyCube -n ($name + "_rToe08J3Geo");
		group -n ($name + "_rToe08J3GeoG") ($name + "_rToe08J3Geo");
		move -r -0.5 0 0 ($name + "_rToe08J3GeoG.scalePivot") ($name + "_rToe08J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe08J3Geo.scalePivot") ($name + "_rToe08J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe08J3C") ($name + "_rToe08J3GeoG");
		setAttr ($name + "_rToe08J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe08J3GeoG.sz") (($rToe07_Loc - $rToe08_Loc)*-.9);
		select ($name + "_rToe08J3GeoShape.vtx[1]") ($name + "_rToe08J3GeoShape.vtx[3]") ($name + "_rToe08J3GeoShape.vtx[5]") ($name + "_rToe08J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe08J3_Clstr");
		pointConstraint ($name + "_rToe08JTip") ($name + "_rToe08J3_Clstr");
		
		delete -ch ($name + "_rToe08J1Geo") ($name + "_rToe08J2Geo") ($name + "_rToe08J3Geo");
		parent ($name + "_rToe08J1GeoG") ($name + "_rToe08J2GeoG") ($name + "_rToe08J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe08J1_Clstr") ($name + "_rToe08J2_Clstr") ($name + "_rToe08J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe09J1")`)
	{
		polyCube -n ($name + "_rToe09J1Geo");
		group -n ($name + "_rToe09J1GeoG") ($name + "_rToe09J1Geo");
		move -r -0.5 0 0 ($name + "_rToe09J1GeoG.scalePivot") ($name + "_rToe09J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe09J1Geo.scalePivot") ($name + "_rToe09J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe09J1C") ($name + "_rToe09J1GeoG");
		$rToe06_Loc = `getAttr ($name + "_rToe06J1.tz")`;
		$rToe07_Loc = `getAttr ($name + "_rToe07J1.tz")`;
		$rToe08_Loc = `getAttr ($name + "_rToe08J1.tz")`;
		$rToe09_Loc = `getAttr ($name + "_rToe09J1.tz")`;
		setAttr ($name + "_rToe09J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe09J1GeoG.sz") (($rToe08_Loc - $rToe09_Loc)*-.9);
		setAttr ($name + "_rToe08J1GeoG.sz") (($rToe07_Loc - $rToe09_Loc)*.45);
		setAttr ($name + "_rToe08J2GeoG.sz") (($rToe07_Loc - $rToe09_Loc)*.45);
		setAttr ($name + "_rToe08J3GeoG.sz") (($rToe07_Loc - $rToe09_Loc)*.45);
		
		select ($name + "_rToe09J1GeoShape.vtx[1]") ($name + "_rToe09J1GeoShape.vtx[3]") ($name + "_rToe09J1GeoShape.vtx[5]") ($name + "_rToe09J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe09J1_Clstr");
		pointConstraint ($name + "_rToe09J2") ($name + "_rToe09J1_Clstr");
		
		polyCube -n ($name + "_rToe09J2Geo");
		group -n ($name + "_rToe09J2GeoG") ($name + "_rToe09J2Geo");
		move -r -0.5 0 0 ($name + "_rToe09J2GeoG.scalePivot") ($name + "_rToe09J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe09J2Geo.scalePivot") ($name + "_rToe09J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe09J2C") ($name + "_rToe09J2GeoG");
		setAttr ($name + "_rToe09J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe09J2GeoG.sz") (($rToe08_Loc - $rToe09_Loc)*-.9);
		select ($name + "_rToe09J2GeoShape.vtx[1]") ($name + "_rToe09J2GeoShape.vtx[3]") ($name + "_rToe09J2GeoShape.vtx[5]") ($name + "_rToe09J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe09J2_Clstr");
		pointConstraint ($name + "_rToe09J3") ($name + "_rToe09J2_Clstr");
		
		polyCube -n ($name + "_rToe09J3Geo");
		group -n ($name + "_rToe09J3GeoG") ($name + "_rToe09J3Geo");
		move -r -0.5 0 0 ($name + "_rToe09J3GeoG.scalePivot") ($name + "_rToe09J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe09J3Geo.scalePivot") ($name + "_rToe09J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe09J3C") ($name + "_rToe09J3GeoG");
		setAttr ($name + "_rToe09J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe09J3GeoG.sz") (($rToe08_Loc - $rToe09_Loc)*-.9);
		select ($name + "_rToe09J3GeoShape.vtx[1]") ($name + "_rToe09J3GeoShape.vtx[3]") ($name + "_rToe09J3GeoShape.vtx[5]") ($name + "_rToe09J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe09J3_Clstr");
		pointConstraint ($name + "_rToe09JTip") ($name + "_rToe09J3_Clstr");
		
		delete -ch ($name + "_rToe09J1Geo") ($name + "_rToe09J2Geo") ($name + "_rToe09J3Geo");
		parent ($name + "_rToe09J1GeoG") ($name + "_rToe09J2GeoG") ($name + "_rToe09J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe09J1_Clstr") ($name + "_rToe09J2_Clstr") ($name + "_rToe09J3_Clstr");
	}
	
	if (`objExists ($name + "_rToe10J1")`)
	{
		polyCube -n ($name + "_rToe10J1Geo");
		group -n ($name + "_rToe10J1GeoG") ($name + "_rToe10J1Geo");
		move -r -0.5 0 0 ($name + "_rToe10J1GeoG.scalePivot") ($name + "_rToe10J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe10J1Geo.scalePivot") ($name + "_rToe10J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe10J1C") ($name + "_rToe10J1GeoG");
		$rToe07_Loc = `getAttr ($name + "_rToe07J1.tz")`;
		$rToe08_Loc = `getAttr ($name + "_rToe08J1.tz")`;
		$rToe09_Loc = `getAttr ($name + "_rToe09J1.tz")`;
		$rToe10_Loc = `getAttr ($name + "_rToe10J1.tz")`;
		setAttr ($name + "_rToe10J1GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe10J1GeoG.sz") (($rToe09_Loc - $rToe10_Loc)*-.9);
		setAttr ($name + "_rToe09J1GeoG.sz") (($rToe08_Loc - $rToe10_Loc)*.45);
		setAttr ($name + "_rToe09J2GeoG.sz") (($rToe08_Loc - $rToe10_Loc)*.45);
		setAttr ($name + "_rToe09J3GeoG.sz") (($rToe08_Loc - $rToe10_Loc)*.45);
		
		select ($name + "_rToe10J1GeoShape.vtx[1]") ($name + "_rToe10J1GeoShape.vtx[3]") ($name + "_rToe10J1GeoShape.vtx[5]") ($name + "_rToe10J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe10J1_Clstr");
		pointConstraint ($name + "_rToe10J2") ($name + "_rToe10J1_Clstr");
		
		polyCube -n ($name + "_rToe10J2Geo");
		group -n ($name + "_rToe10J2GeoG") ($name + "_rToe10J2Geo");
		move -r -0.5 0 0 ($name + "_rToe10J2GeoG.scalePivot") ($name + "_rToe10J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe10J2Geo.scalePivot") ($name + "_rToe10J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe10J2C") ($name + "_rToe10J2GeoG");
		setAttr ($name + "_rToe10J2GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe10J2GeoG.sz") (($rToe09_Loc - $rToe10_Loc)*-.9);
		select ($name + "_rToe10J2GeoShape.vtx[1]") ($name + "_rToe10J2GeoShape.vtx[3]") ($name + "_rToe10J2GeoShape.vtx[5]") ($name + "_rToe10J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe10J2_Clstr");
		pointConstraint ($name + "_rToe10J3") ($name + "_rToe10J2_Clstr");
		
		polyCube -n ($name + "_rToe10J3Geo");
		group -n ($name + "_rToe10J3GeoG") ($name + "_rToe10J3Geo");
		move -r -0.5 0 0 ($name + "_rToe10J3GeoG.scalePivot") ($name + "_rToe10J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rToe10J3Geo.scalePivot") ($name + "_rToe10J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rToe10J3C") ($name + "_rToe10J3GeoG");
		setAttr ($name + "_rToe10J3GeoG.sy") ($rLegLength[0] /-12);
		setAttr ($name + "_rToe10J3GeoG.sz") (($rToe09_Loc - $rToe10_Loc)*-.9);
		select ($name + "_rToe10J3GeoShape.vtx[1]") ($name + "_rToe10J3GeoShape.vtx[3]") ($name + "_rToe10J3GeoShape.vtx[5]") ($name + "_rToe10J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rToe10J3_Clstr");
		pointConstraint ($name + "_rToe10JTip") ($name + "_rToe10J3_Clstr");
		
		delete -ch ($name + "_rToe10J1Geo") ($name + "_rToe10J2Geo") ($name + "_rToe10J3Geo");
		parent ($name + "_rToe10J1GeoG") ($name + "_rToe10J2GeoG") ($name + "_rToe10J3GeoG") ($name + "_scaleGeoG");
		delete ($name + "_rToe10J1_Clstr") ($name + "_rToe10J2_Clstr") ($name + "_rToe10J3_Clstr");
	}
	
	//////MOVE BOTTOM TOE POINTS TO GRID/////////
	if (`objExists ($name + "_rToe01J1")`)
	{
		move -y 0 0 0 ($name + "_rToe01J1GeoShape.vtx[2:5]") ($name + "_rToe01J2GeoShape.vtx[2:5]") ;
	}
	if (`objExists ($name + "_rToe02J1")`)
	{
		move -y 0 0 0 ($name + "_rToe02J1GeoShape.vtx[2:5]") ($name + "_rToe02J2GeoShape.vtx[2:5]") ($name + "_rToe02J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe03J1")`)
	{
		move -y 0 0 0 ($name + "_rToe03J1GeoShape.vtx[2:5]") ($name + "_rToe03J2GeoShape.vtx[2:5]") ($name + "_rToe03J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe04J1")`)
	{
		move -y 0 0 0 ($name + "_rToe04J1GeoShape.vtx[2:5]") ($name + "_rToe04J2GeoShape.vtx[2:5]") ($name + "_rToe04J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe05J1")`)
	{
		move -y 0 0 0 ($name + "_rToe05J1GeoShape.vtx[2:5]") ($name + "_rToe05J2GeoShape.vtx[2:5]") ($name + "_rToe05J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe06J1")`)
	{
		move -y 0 0 0 ($name + "_rToe06J1GeoShape.vtx[2:5]") ($name + "_rToe06J2GeoShape.vtx[2:5]") ($name + "_rToe06J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe07J1")`)
	{
		move -y 0 0 0 ($name + "_rToe07J1GeoShape.vtx[2:5]") ($name + "_rToe07J2GeoShape.vtx[2:5]") ($name + "_rToe07J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe08J1")`)
	{
		move -y 0 0 0 ($name + "_rToe08J1GeoShape.vtx[2:5]") ($name + "_rToe08J2GeoShape.vtx[2:5]") ($name + "_rToe08J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe09J1")`)
	{
		move -y 0 0 0 ($name + "_rToe09J1GeoShape.vtx[2:5]") ($name + "_rToe09J2GeoShape.vtx[2:5]") ($name + "_rToe09J3GeoShape.vtx[2:5]");
	}
	if (`objExists ($name + "_rToe10J1")`)
	{
		move -y 0 0 0 ($name + "_rToe10J1GeoShape.vtx[2:5]") ($name + "_rToe10J2GeoShape.vtx[2:5]") ($name + "_rToe10J3GeoShape.vtx[2:5]");
	}
	
	//////////////////////////////////////////////////////////////////////////////
	////////////////////////////////RIGHT ARM//////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	
	//RIGHT UPPER ARM
	$rElbowLength = `xform -q -t ($name + "_rElbowJ")`;
	$rWristLength = `xform -q -t ($name + "_rWristJProxy")`;
	$rArmLength[0] = (($rElbowLength[0] + $rWristLength[0]) /2);
	$rUprArmLength = `getAttr ($name + "_rElbowJ.tx")`;
	$rLwrArmLength = `getAttr ($name + "_rWristJProxy.tx")`;
	
	rotate -r 0 0 180 ($name + "_rUprArmGeoG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rUprArmGeoG");
	parentConstraint ($name + "_rShoulderJ") ($name + "_rUprArmGeoG");
	delete ($name + "_rUprArmGeoG_parentConstraint1");
	setAttr (($name + "_rUprArmGeoG.scale"), ($rUprArmLength * -1), ($rArmLength[0] /-12), ($rArmLength[0] /-12));
	makeIdentity -apply true -t 1 -s 1 ($name + "_rUprArmGeoG");
	parentConstraint ($name + "_rShoulderJ") ($name + "_rUprArmGeoG");
	connectAttr -f ($name + "_rShoulderJ.scale") ($name + "_rUprArmGeoG.scale");
	
	//RIGHT LOWER ARM
	rotate -r 0 0 180 ($name + "_rLwrArmGeoG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLwrArmGeoG");
	parentConstraint ($name + "_rElbowJ") ($name + "_rLwrArmGeoG");
	delete ($name + "_rLwrArmGeoG_parentConstraint1");
	setAttr (($name + "_rLwrArmGeoG.scale"), ($rLwrArmLength * -1), ($rArmLength[0] /-12), ($rArmLength[0] /-12));
	makeIdentity -apply true -t 1 -s 1 ($name + "_rLwrArmGeoG");
	parentConstraint ($name + "_rElbowJ") ($name + "_rLwrArmGeoG");
	connectAttr -f ($name + "_rElbowJ.scale") ($name + "_rLwrArmGeoG.scale");
	
	parentConstraint ($name + "_rElbowJ") ($name + "_rElbowGeoG");
	parentConstraint ($name + "_rShoulderJ") ($name + "_rShoulderGeoG");
	
	/////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////RIGHT HAND GEOMETRY/////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////
	
	polyCube -n ($name + "_rHandGeo");
	group -n ($name + "_rHandGeoG") ($name + "_rHandGeo");
	move -r -0.5 0 0 ($name + "_rHandGeoG.scalePivot") ($name + "_rHandGeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_rHandGeo.scalePivot") ($name + "_rHandGeo.rotatePivot") ;
	setAttr ($name + "_rHandGeoG.sy") ($rArmLength[0] /8);
	setAttr ($name + "_rHandGeoG.sz") ($rArmLength[0] /3.5);
	makeIdentity -apply true -s 1 ($name + "_rHandGeoG");
	parentConstraint ($name + "_rWristJ") ($name + "_rHandGeoG");
	parent ($name + "_rHandGeoG") ($name + "_scaleGeoG");
	connectAttr -f ($name + "_rWristJG1.scale") ($name + "_rHandGeoG.scale");
	
	$rHandInputs = `listHistory ($name + "_rHandGeo")`;
	
	if (`objExists ($name + "_rFinger9J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 9;
		
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[21]") ($name + "_rHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing9Clstr");
		
		$rFinger8Loc = `xform -q -ws -t ($name + "_rFinger8J1C")`;
		$rFinger9Loc = `xform -q -ws -t ($name + "_rFinger9J1C")`;
		$rFinger9Offset[0] = ($rFinger8Loc[0] - $rFinger9Loc[0]) /-2;
		$rFinger9Offset[1] = ($rFinger8Loc[1] - $rFinger9Loc[1]) /-2;
		$rFinger9Offset[2] = ($rFinger8Loc[2] - $rFinger9Loc[2]) /-2;
		
		pointConstraint -offset $rFinger9Offset[0] $rFinger9Offset[1] $rFinger9Offset[2] ($name + "_rFinger9J1C") ($name + "_rFing9Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[39]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[37]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[35]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[33]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4_5Clstr");
		pointConstraint ($name + "_rFinger4J1C") ($name + "_rFinger5J1C") ($name + "_rFing4_5Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[13]") ($name + "_rHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing5_6Clstr");
		pointConstraint ($name + "_rFinger5J1C") ($name + "_rFinger6J1C") ($name + "_rFing5_6Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[15]") ($name + "_rHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing6_7Clstr");
		pointConstraint ($name + "_rFinger6J1C") ($name + "_rFinger7J1C") ($name + "_rFing6_7Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[17]") ($name + "_rHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing7_8Clstr");
		pointConstraint ($name + "_rFinger7J1C") ($name + "_rFinger8J1C") ($name + "_rFing7_8Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[19]") ($name + "_rHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing8_9Clstr");
		pointConstraint ($name + "_rFinger8J1C") ($name + "_rFinger9J1C") ($name + "_rFing8_9Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4_5Clstr") ($name + "_rFing5_6Clstr")
		($name + "_rFing6_7Clstr") ($name + "_rFing7_8Clstr") ($name + "_rFing8_9Clstr") ($name + "_rFing9Clstr");
	}
	
	else if (`objExists ($name + "_rFinger8J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 8;
		
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[19]") ($name + "_rHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing8Clstr");
		
		$rFinger7Loc = `xform -q -ws -t ($name + "_rFinger7J1C")`;
		$rFinger8Loc = `xform -q -ws -t ($name + "_rFinger8J1C")`;
		$rFinger8Offset[0] = ($rFinger7Loc[0] - $rFinger8Loc[0]) /-2;
		$rFinger8Offset[1] = ($rFinger7Loc[1] - $rFinger8Loc[1]) /-2;
		$rFinger8Offset[2] = ($rFinger7Loc[2] - $rFinger8Loc[2]) /-2;
		
		pointConstraint -offset $rFinger8Offset[0] $rFinger8Offset[1] $rFinger8Offset[2] ($name + "_rFinger8J1C") ($name + "_rFing8Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[35]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[33]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4_5Clstr");
		pointConstraint ($name + "_rFinger4J1C") ($name + "_rFinger5J1C") ($name + "_rFing4_5Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[13]") ($name + "_rHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing5_6Clstr");
		pointConstraint ($name + "_rFinger5J1C") ($name + "_rFinger6J1C") ($name + "_rFing5_6Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[15]") ($name + "_rHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing6_7Clstr");
		pointConstraint ($name + "_rFinger6J1C") ($name + "_rFinger7J1C") ($name + "_rFing6_7Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[17]") ($name + "_rHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing7_8Clstr");
		pointConstraint ($name + "_rFinger7J1C") ($name + "_rFinger8J1C") ($name + "_rFing7_8Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4_5Clstr") ($name + "_rFing5_6Clstr")
		($name + "_rFing6_7Clstr") ($name + "_rFing7_8Clstr") ($name + "_rFing8Clstr");
	}
	
	else if (`objExists ($name + "_rFinger7J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 7;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[17]") ($name + "_rHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing7Clstr");
		
		$rFinger6Loc = `xform -q -ws -t ($name + "_rFinger6J1C")`;
		$rFinger7Loc = `xform -q -ws -t ($name + "_rFinger7J1C")`;
		$rFinger7Offset[0] = ($rFinger6Loc[0] - $rFinger7Loc[0]) /-2;
		$rFinger7Offset[1] = ($rFinger6Loc[1] - $rFinger7Loc[1]) /-2;
		$rFinger7Offset[2] = ($rFinger6Loc[2] - $rFinger7Loc[2]) /-2;
		
		pointConstraint -offset $rFinger7Offset[0] $rFinger7Offset[1] $rFinger7Offset[2] ($name + "_rFinger7J1C") ($name + "_rFing7Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[31]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[29]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4_5Clstr");
		pointConstraint ($name + "_rFinger4J1C") ($name + "_rFinger5J1C") ($name + "_rFing4_5Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[13]") ($name + "_rHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing5_6Clstr");
		pointConstraint ($name + "_rFinger5J1C") ($name + "_rFinger6J1C") ($name + "_rFing5_6Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[15]") ($name + "_rHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing6_7Clstr");
		pointConstraint ($name + "_rFinger6J1C") ($name + "_rFinger7J1C") ($name + "_rFing6_7Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4_5Clstr") ($name + "_rFing5_6Clstr")
		($name + "_rFing6_7Clstr") ($name + "_rFing7Clstr");
	}
	
	else if (`objExists ($name + "_rFinger6J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 6;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[15]") ($name + "_rHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing6Clstr");
		
		$rFinger5Loc = `xform -q -ws -t ($name + "_rFinger5J1C")`;
		$rFinger6Loc = `xform -q -ws -t ($name + "_rFinger6J1C")`;
		$rFinger6Offset[0] = ($rFinger5Loc[0] - $rFinger6Loc[0]) /-2;
		$rFinger6Offset[1] = ($rFinger5Loc[1] - $rFinger6Loc[1]) /-2;
		$rFinger6Offset[2] = ($rFinger5Loc[2] - $rFinger6Loc[2]) /-2;
		
		pointConstraint -offset $rFinger6Offset[0] $rFinger6Offset[1] $rFinger6Offset[2] ($name + "_rFinger6J1C") ($name + "_rFing6Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[27]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[25]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4_5Clstr");
		pointConstraint ($name + "_rFinger4J1C") ($name + "_rFinger5J1C") ($name + "_rFing4_5Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[13]") ($name + "_rHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing5_6Clstr");
		pointConstraint ($name + "_rFinger5J1C") ($name + "_rFinger6J1C") ($name + "_rFing5_6Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4_5Clstr") ($name + "_rFing5_6Clstr")
		($name + "_rFing6Clstr");
	}
	
	else if (`objExists ($name + "_rFinger5J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 5;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[13]") ($name + "_rHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing5Clstr");
		
		$rFinger4Loc = `xform -q -ws -t ($name + "_rFinger4J1C")`;
		$rFinger5Loc = `xform -q -ws -t ($name + "_rFinger5J1C")`;
		$rFinger5Offset[0] = ($rFinger4Loc[0] - $rFinger5Loc[0]) /-2;
		$rFinger5Offset[1] = ($rFinger4Loc[1] - $rFinger5Loc[1]) /-2;
		$rFinger5Offset[2] = ($rFinger4Loc[2] - $rFinger5Loc[2]) /-2;
		
		pointConstraint -offset $rFinger5Offset[0] $rFinger5Offset[1] $rFinger5Offset[2] ($name + "_rFinger5J1C") ($name + "_rFing5Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[23]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[21]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4_5Clstr");
		pointConstraint ($name + "_rFinger4J1C") ($name + "_rFinger5J1C") ($name + "_rFing4_5Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4_5Clstr") ($name + "_rFing5Clstr");
	}
	
	else if (`objExists ($name + "_rFinger4J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 4;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[11]") ($name + "_rHandGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing4Clstr");
		
		$rFinger3Loc = `xform -q -ws -t ($name + "_rFinger3J1C")`;
		$rFinger4Loc = `xform -q -ws -t ($name + "_rFinger4J1C")`;
		$rFinger4Offset[0] = ($rFinger3Loc[0] - $rFinger4Loc[0]) /-2;
		$rFinger4Offset[1] = ($rFinger3Loc[1] - $rFinger4Loc[1]) /-2;
		$rFinger4Offset[2] = ($rFinger3Loc[2] - $rFinger4Loc[2]) /-2;
		
		pointConstraint -offset $rFinger4Offset[0] $rFinger4Offset[1] $rFinger4Offset[2] ($name + "_rFinger4J1C") ($name + "_rFing4Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[19]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[17]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3_4Clstr");
		pointConstraint ($name + "_rFinger3J1C") ($name + "_rFinger4J1C") ($name + "_rFing3_4Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3_4Clstr") ($name + "_rFing4Clstr");
	}
	
	else if (`objExists ($name + "_rFinger3J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 3;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[9]") ($name + "_rHandGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing3Clstr");
		
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger3Loc = `xform -q -ws -t ($name + "_rFinger3J1C")`;
		$rFinger3Offset[0] = ($rFinger2Loc[0] - $rFinger3Loc[0]) /-2;
		$rFinger3Offset[1] = ($rFinger2Loc[1] - $rFinger3Loc[1]) /-2;
		$rFinger3Offset[2] = ($rFinger2Loc[2] - $rFinger3Loc[2]) /-2;
		
		pointConstraint -offset $rFinger3Offset[0] $rFinger3Offset[1] $rFinger3Offset[2] ($name + "_rFinger3J1C") ($name + "_rFing3Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[15]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[13]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2_3Clstr");
		pointConstraint ($name + "_rFinger2J1C") ($name + "_rFinger3J1C") ($name + "_rFing2_3Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2_3Clstr") ($name + "_rFing3Clstr");
	}
	
	else if (`objExists ($name + "_rFinger2J1")`)
	{
		setAttr ($rHandInputs[2] + ".subdivisionsDepth") 2;
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		
		$rFinger1Loc = `xform -q -ws -t ($name + "_rFinger1J1C")`;
		$rFinger2Loc = `xform -q -ws -t ($name + "_rFinger2J1C")`;
		$rFinger1Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /2;
		$rFinger1Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /2;
		$rFinger1Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /2;
		
		pointConstraint -offset $rFinger1Offset[0] $rFinger1Offset[1] $rFinger1Offset[2] ($name + "_rFinger1J1C") ($name + "_rFing1Clstr");
		
		select ($name + "_rHandGeoShape.vtx[7]") ($name + "_rHandGeoShape.vtx[9]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing2Clstr");
		
		$rFinger2Offset[0] = ($rFinger1Loc[0] - $rFinger2Loc[0]) /-2;
		$rFinger2Offset[1] = ($rFinger1Loc[1] - $rFinger2Loc[1]) /-2;
		$rFinger2Offset[2] = ($rFinger1Loc[2] - $rFinger2Loc[2]) /-2;
		
		pointConstraint -offset $rFinger2Offset[0] $rFinger2Offset[1] $rFinger2Offset[2] ($name + "_rFinger2J1C") ($name + "_rFing2Clstr");
		
		select ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[11]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1_2Clstr");
		pointConstraint ($name + "_rFinger1J1C") ($name + "_rFinger2J1C") ($name + "_rFing1_2Clstr") ;
		
		delete -ch ($name + "_rHandGeo");
		delete ($name + "_rFing1_2Clstr") ($name + "_rFing2Clstr");
	}
	
	else
	{
		select ($name + "_rHandGeoShape.vtx[1]") ($name + "_rHandGeoShape.vtx[3]") ($name + "_rHandGeoShape.vtx[5]") ($name + "_rHandGeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFing1Clstr");
		pointConstraint ($name + "_rFinger1J1") ($name + "_rFing1Clstr");
	}
	
	//FIT RIGHT PALM GEOMETRY
	delete -ch ($name + "_rHandGeo");
	
	select ($name + "_rHandGeo.e[0]") ;
	PolyConvertToRingAndSplit;
	select ($name + "_rHandGeo.e[0]") ;
	polySelectEdges edgeRing;
	PolySelectConvert 1;
	$rHandFaces = `ls -sl`;
	hilite ($name + "_rHandGeo") ;
	polyChipOff  -kft 1 -dup 0 -off 0 $rHandFaces;
	polySeparate -rs 1 -ch 1 ($name + "_rHandGeoShape");
	delete -ch ($name + "_rHandGeo");
	select ($name + "_rHandGeo");
	pickWalk -d down;
	rename ($name + "_rHand1GeoBase");
	pickWalk -d right;
	rename ($name + "_rHand2GeoTemp");
	polySeparate;
	pickWalk -d up;
	pickWalk -d down;
	rename ($name + "_rHand2Geo");
	pickWalk -d right;
	rename ($name + "_rHand1GeoEnd");
	polyUnite -ch 1 ($name + "_rHand1GeoBase") ($name + "_rHand1GeoEnd");
	rename ($name + "_rHand1Geo");
	polyMergeVertex  -d 0.01 -am 1 ($name + "_rHand1Geo");
	polyCloseBorder ($name + "_rHand1Geo");
	group -n ($name + "_rHand1GeoG") ($name + "_rHand1Geo");
	polyCloseBorder ($name + "_rHand2Geo");
	group -n ($name + "_rHand2GeoG") ($name + "_rHand2Geo");
	parent ($name + "_rHand1GeoG") ($name + "_rHand2GeoG") ($name + "_scaleGeoG");
	delete -ch ($name + "_rHand1GeoG") ($name + "_rHand2Geo");
	parent ($name + "_rHand1GeoG") ($name + "_rHand2GeoG") ($name + "_rHandGeoG");
	
	$rWristLoc = `xform -q -ws -rp ($name + "_rWristJ")`;
	$rHandLoc = `xform -q -ws -rp ($name + "_rPalmJ")`;
	move $rWristLoc[0] $rWristLoc[1] $rWristLoc[2] ($name + "_rHand1Geo.scalePivot") ($name + "_rHand1Geo.rotatePivot") ($name + "_rHand1GeoG.scalePivot") ($name + "_rHand1GeoG.rotatePivot");
	move $rHandLoc[0] $rHandLoc[1] $rHandLoc[2] ($name + "_rHand2Geo.scalePivot") ($name + "_rHand2Geo.rotatePivot") ($name + "_rHand2GeoG.scalePivot") ($name + "_rHand2GeoG.rotatePivot");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rHand1GeoG") ($name + "_rHand2GeoG");
	
	parentConstraint -mo ($name + "_rPalmJ") ($name + "_rHand2GeoG");
	lattice -n ($name + "_rHandGeoLattice") -divisions 3 2 2 -objectCentered true  -ldv 2 2 2 ($name + "_rHand1GeoG") ($name + "_rHand2GeoG");
	select -r ($name + "_rHandGeoLatticeLattice.pt[1][0:1][0]") ($name + "_rHandGeoLatticeLattice.pt[1][0:1][1]") ;
	newCluster " -envelope 1";
	rename ($name + "_rHandGeoLatticeClstr");
	delete `pointConstraint ($name + "_rPalmJ") ($name + "_rHandGeoLatticeClstr")`;
	delete -ch ($name + "_rHand1GeoG") ($name + "_rHand2GeoG");
	
	/////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////RIGHT FINGER GEOMETRY/////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////
	polyCube -n ($name + "_rFinger1J1Geo");
	group -n ($name + "_rFinger1J1GeoG") ($name + "_rFinger1J1Geo");
	move -r -0.5 0 0 ($name + "_rFinger1J1GeoG.scalePivot") ($name + "_rFinger1J1GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_rFinger1J1Geo.scalePivot") ($name + "_rFinger1J1Geo.rotatePivot") ;
	parentConstraint ($name + "_rFinger1J1C") ($name + "_rFinger1J1GeoG");
	setAttr ($name + "_rFinger1J1Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_rFinger1J1Geo.sz") ($lArmLength[0] /8);
	select ($name + "_rFinger1J1GeoShape.vtx[1]") ($name + "_rFinger1J1GeoShape.vtx[3]") ($name + "_rFinger1J1GeoShape.vtx[5]") ($name + "_rFinger1J1GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_rFinger1J1_Clstr");
	pointConstraint ($name + "_rFinger1J2") ($name + "_rFinger1J1_Clstr");
	
	polyCube -n ($name + "_rFinger1J2Geo");
	group -n ($name + "_rFinger1J2GeoG") ($name + "_rFinger1J2Geo");
	move -r -0.5 0 0 ($name + "_rFinger1J2GeoG.scalePivot") ($name + "_rFinger1J2GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_rFinger1J2Geo.scalePivot") ($name + "_rFinger1J2Geo.rotatePivot") ;
	parentConstraint ($name + "_rFinger1J2C") ($name + "_rFinger1J2GeoG");
	setAttr ($name + "_rFinger1J2Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_rFinger1J2Geo.sz") ($lArmLength[0] /8);
	select ($name + "_rFinger1J2GeoShape.vtx[1]") ($name + "_rFinger1J2GeoShape.vtx[3]") ($name + "_rFinger1J2GeoShape.vtx[5]") ($name + "_rFinger1J2GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_rFinger1J2_Clstr");
	pointConstraint ($name + "_rFinger1J3") ($name + "_rFinger1J2_Clstr");
	
	polyCube -n ($name + "_rFinger1J3Geo");
	group -n ($name + "_rFinger1J3GeoG") ($name + "_rFinger1J3Geo");
	move -r -0.5 0 0 ($name + "_rFinger1J3GeoG.scalePivot") ($name + "_rFinger1J3GeoG.rotatePivot") ;
	move -r -0.5 0 0 ($name + "_rFinger1J3Geo.scalePivot") ($name + "_rFinger1J3Geo.rotatePivot") ;
	parentConstraint ($name + "_rFinger1J3C") ($name + "_rFinger1J3GeoG");
	setAttr ($name + "_rFinger1J3Geo.sy") ($lArmLength[0] /8);
	setAttr ($name + "_rFinger1J3Geo.sz") ($lArmLength[0] /8);
	select ($name + "_rFinger1J3GeoShape.vtx[1]") ($name + "_rFinger1J3GeoShape.vtx[3]") ($name + "_rFinger1J3GeoShape.vtx[5]") ($name + "_rFinger1J3GeoShape.vtx[7]") ;
	newCluster " -envelope 1";
	rename ($name + "_rFinger1J3_Clstr");
	pointConstraint ($name + "_rFinger1JTip") ($name + "_rFinger1J3_Clstr");
	
	if (`objExists ($name + "_rFinger2J1")`)
	{
		$rFinger1J1Loc = `getAttr ($name + "_rFinger1J1.tz")`;
		$rFinger2J1Loc = `getAttr ($name + "_rFinger2J1.tz")`;
		setAttr ($name + "_rFinger1J1Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger1J1Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger1J2Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger1J2Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger1J3Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger1J3Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
	}
	
	delete -ch ($name + "_rFinger1J1Geo") ($name + "_rFinger1J2Geo") ($name + "_rFinger1J3Geo");
	delete ($name + "_rFing1Clstr") ($name + "_rFinger1J1_Clstr") ($name + "_rFinger1J2_Clstr") ($name + "_rFinger1J3_Clstr") ;
	group -em -n ($name + "_rFingersGeoG");
	parent ($name + "_rFingersGeoG") ($name + "_scaleGeoG");
	parentConstraint ($name + "_lWristJ") ($name + "_rFingersGeoG");
	connectAttr -f ($name + "_rWristJG1.scale") ($name + "_rFingersGeoG.scale");
	parent ($name + "_rFinger1J1GeoG") ($name + "_rFinger1J2GeoG") ($name + "_rFinger1J3GeoG") ($name + "_rFingersGeoG");
	
	makeIdentity -apply true -s 1 ($name + "_rFinger1J1Geo") ($name + "_rFinger1J2Geo") ($name + "_rFinger1J3Geo");
	connectAttr -f ($name + "_rFinger1J1C.scale") ($name + "_rFinger1J1GeoG.scale");
	connectAttr -f ($name + "_rFinger1J1C.scale") ($name + "_rFinger1J2GeoG.scale");
	connectAttr -f ($name + "_rFinger1J1C.scale") ($name + "_rFinger1J3GeoG.scale");
	
	if (`objExists ($name + "_rFinger2J1")`)
	{
		polyCube -n ($name + "_rFinger2J1Geo");
		group -n ($name + "_rFinger2J1GeoG") ($name + "_rFinger2J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger2J1GeoG.scalePivot") ($name + "_rFinger2J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger2J1Geo.scalePivot") ($name + "_rFinger2J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger2J1C") ($name + "_rFinger2J1GeoG");
		$rFinger1J1Loc = `getAttr ($name + "_rFinger1J1.tz")`;
		$rFinger2J1Loc = `getAttr ($name + "_rFinger2J1.tz")`;
		setAttr ($name + "_rFinger2J1Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger2J1Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		select ($name + "_rFinger2J1GeoShape.vtx[1]") ($name + "_rFinger2J1GeoShape.vtx[3]") ($name + "_rFinger2J1GeoShape.vtx[5]") ($name + "_rFinger2J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger2J1_Clstr");
		pointConstraint ($name + "_rFinger2J2") ($name + "_rFinger2J1_Clstr");
		
		polyCube -n ($name + "_rFinger2J2Geo");
		group -n ($name + "_rFinger2J2GeoG") ($name + "_rFinger2J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger2J2GeoG.scalePivot") ($name + "_rFinger2J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger2J2Geo.scalePivot") ($name + "_rFinger2J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger2J2C") ($name + "_rFinger2J2GeoG");
		setAttr ($name + "_rFinger2J2Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger2J2Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		select ($name + "_rFinger2J2GeoShape.vtx[1]") ($name + "_rFinger2J2GeoShape.vtx[3]") ($name + "_rFinger2J2GeoShape.vtx[5]") ($name + "_rFinger2J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger2J2_Clstr");
		pointConstraint ($name + "_rFinger2J3") ($name + "_rFinger2J2_Clstr");
		
		polyCube -n ($name + "_rFinger2J3Geo");
		group -n ($name + "_rFinger2J3GeoG") ($name + "_rFinger2J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger2J3GeoG.scalePivot") ($name + "_rFinger2J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger2J3Geo.scalePivot") ($name + "_rFinger2J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger2J3C") ($name + "_rFinger2J3GeoG");
		setAttr ($name + "_rFinger2J3Geo.sy") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		setAttr ($name + "_rFinger2J3Geo.sz") (($rFinger1J1Loc - $rFinger2J1Loc)*.9);
		select ($name + "_rFinger2J3GeoShape.vtx[1]") ($name + "_rFinger2J3GeoShape.vtx[3]") ($name + "_rFinger2J3GeoShape.vtx[5]") ($name + "_rFinger2J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger2J3_Clstr");
		pointConstraint ($name + "_rFinger2JTip") ($name + "_rFinger2J3_Clstr");
		
		delete -ch ($name + "_rFinger2J1Geo") ($name + "_rFinger2J2Geo") ($name + "_rFinger2J3Geo");
		delete ($name + "_rFinger2J1_Clstr") ($name + "_rFinger2J2_Clstr") ($name + "_rFinger2J3_Clstr") ;
		parent ($name + "_rFinger2J1GeoG") ($name + "_rFinger2J2GeoG") ($name + "_rFinger2J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger2J1Geo") ($name + "_rFinger2J2Geo") ($name + "_rFinger2J3Geo");
		connectAttr -f ($name + "_rFinger2J1C.scale") ($name + "_rFinger2J1GeoG.scale");
		connectAttr -f ($name + "_rFinger2J1C.scale") ($name + "_rFinger2J2GeoG.scale");
		connectAttr -f ($name + "_rFinger2J1C.scale") ($name + "_rFinger2J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger3J1")`)
	{
		polyCube -n ($name + "_rFinger3J1Geo");
		group -n ($name + "_rFinger3J1GeoG") ($name + "_rFinger3J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger3J1GeoG.scalePivot") ($name + "_rFinger3J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger3J1Geo.scalePivot") ($name + "_rFinger3J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger3J1C") ($name + "_rFinger3J1GeoG");
		$rFinger2J1Loc = `getAttr ($name + "_rFinger2J1.tz")`;
		$rFinger3J1Loc = `getAttr ($name + "_rFinger3J1.tz")`;
		setAttr ($name + "_rFinger3J1Geo.sy") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		setAttr ($name + "_rFinger3J1Geo.sz") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		select ($name + "_rFinger3J1GeoShape.vtx[1]") ($name + "_rFinger3J1GeoShape.vtx[3]") ($name + "_rFinger3J1GeoShape.vtx[5]") ($name + "_rFinger3J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger3J1_Clstr");
		pointConstraint ($name + "_rFinger3J2") ($name + "_rFinger3J1_Clstr");
		
		polyCube -n ($name + "_rFinger3J2Geo");
		group -n ($name + "_rFinger3J2GeoG") ($name + "_rFinger3J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger3J2GeoG.scalePivot") ($name + "_rFinger3J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger3J2Geo.scalePivot") ($name + "_rFinger3J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger3J2C") ($name + "_rFinger3J2GeoG");
		setAttr ($name + "_rFinger3J2Geo.sy") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		setAttr ($name + "_rFinger3J2Geo.sz") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		select ($name + "_rFinger3J2GeoShape.vtx[1]") ($name + "_rFinger3J2GeoShape.vtx[3]") ($name + "_rFinger3J2GeoShape.vtx[5]") ($name + "_rFinger3J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger3J2_Clstr");
		pointConstraint ($name + "_rFinger3J3") ($name + "_rFinger3J2_Clstr");
		
		polyCube -n ($name + "_rFinger3J3Geo");
		group -n ($name + "_rFinger3J3GeoG") ($name + "_rFinger3J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger3J3GeoG.scalePivot") ($name + "_rFinger3J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger3J3Geo.scalePivot") ($name + "_rFinger3J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger3J3C") ($name + "_rFinger3J3GeoG");
		setAttr ($name + "_rFinger3J3Geo.sy") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		setAttr ($name + "_rFinger3J3Geo.sz") (($rFinger2J1Loc - $rFinger3J1Loc)*.9);
		select ($name + "_rFinger3J3GeoShape.vtx[1]") ($name + "_rFinger3J3GeoShape.vtx[3]") ($name + "_rFinger3J3GeoShape.vtx[5]") ($name + "_rFinger3J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger3J3_Clstr");
		pointConstraint ($name + "_rFinger3JTip") ($name + "_rFinger3J3_Clstr");
		
		delete -ch ($name + "_rFinger3J1Geo") ($name + "_rFinger3J2Geo") ($name + "_rFinger3J3Geo");
		delete ($name + "_rFinger3J1_Clstr") ($name + "_rFinger3J2_Clstr") ($name + "_rFinger3J3_Clstr") ;
		parent ($name + "_rFinger3J1GeoG") ($name + "_rFinger3J2GeoG") ($name + "_rFinger3J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger3J1Geo") ($name + "_rFinger3J2Geo") ($name + "_rFinger3J3Geo");
		connectAttr -f ($name + "_rFinger3J1C.scale") ($name + "_rFinger3J1GeoG.scale");
		connectAttr -f ($name + "_rFinger3J1C.scale") ($name + "_rFinger3J2GeoG.scale");
		connectAttr -f ($name + "_rFinger3J1C.scale") ($name + "_rFinger3J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger4J1")`)
	{
		polyCube -n ($name + "_rFinger4J1Geo");
		group -n ($name + "_rFinger4J1GeoG") ($name + "_rFinger4J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger4J1GeoG.scalePivot") ($name + "_rFinger4J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger4J1Geo.scalePivot") ($name + "_rFinger4J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger4J1C") ($name + "_rFinger4J1GeoG");
		$rFinger3J1Loc = `getAttr ($name + "_rFinger3J1.tz")`;
		$rFinger4J1Loc = `getAttr ($name + "_rFinger4J1.tz")`;
		setAttr ($name + "_rFinger4J1Geo.sy") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		setAttr ($name + "_rFinger4J1Geo.sz") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		select ($name + "_rFinger4J1GeoShape.vtx[1]") ($name + "_rFinger4J1GeoShape.vtx[3]") ($name + "_rFinger4J1GeoShape.vtx[5]") ($name + "_rFinger4J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger4J1_Clstr");
		pointConstraint ($name + "_rFinger4J2") ($name + "_rFinger4J1_Clstr");
		
		polyCube -n ($name + "_rFinger4J2Geo");
		group -n ($name + "_rFinger4J2GeoG") ($name + "_rFinger4J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger4J2GeoG.scalePivot") ($name + "_rFinger4J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger4J2Geo.scalePivot") ($name + "_rFinger4J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger4J2C") ($name + "_rFinger4J2GeoG");
		setAttr ($name + "_rFinger4J2Geo.sy") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		setAttr ($name + "_rFinger4J2Geo.sz") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		select ($name + "_rFinger4J2GeoShape.vtx[1]") ($name + "_rFinger4J2GeoShape.vtx[3]") ($name + "_rFinger4J2GeoShape.vtx[5]") ($name + "_rFinger4J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger4J2_Clstr");
		pointConstraint ($name + "_rFinger4J3") ($name + "_rFinger4J2_Clstr");
		
		polyCube -n ($name + "_rFinger4J3Geo");
		group -n ($name + "_rFinger4J3GeoG") ($name + "_rFinger4J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger4J3GeoG.scalePivot") ($name + "_rFinger4J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger4J3Geo.scalePivot") ($name + "_rFinger4J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger4J3C") ($name + "_rFinger4J3GeoG");
		setAttr ($name + "_rFinger4J3Geo.sy") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		setAttr ($name + "_rFinger4J3Geo.sz") (($rFinger3J1Loc - $rFinger4J1Loc)*.9);
		select ($name + "_rFinger4J3GeoShape.vtx[1]") ($name + "_rFinger4J3GeoShape.vtx[3]") ($name + "_rFinger4J3GeoShape.vtx[5]") ($name + "_rFinger4J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger4J3_Clstr");
		pointConstraint ($name + "_rFinger4JTip") ($name + "_rFinger4J3_Clstr");
		
		delete -ch ($name + "_rFinger4J1Geo") ($name + "_rFinger4J2Geo") ($name + "_rFinger4J3Geo");
		delete ($name + "_rFinger4J1_Clstr") ($name + "_rFinger4J2_Clstr") ($name + "_rFinger4J3_Clstr") ;
		parent ($name + "_rFinger4J1GeoG") ($name + "_rFinger4J2GeoG") ($name + "_rFinger4J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger4J1Geo") ($name + "_rFinger4J2Geo") ($name + "_rFinger4J3Geo");
		connectAttr -f ($name + "_rFinger4J1C.scale") ($name + "_rFinger4J1GeoG.scale");
		connectAttr -f ($name + "_rFinger4J1C.scale") ($name + "_rFinger4J2GeoG.scale");
		connectAttr -f ($name + "_rFinger4J1C.scale") ($name + "_rFinger4J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger5J1")`)
	{
		polyCube -n ($name + "_rFinger5J1Geo");
		group -n ($name + "_rFinger5J1GeoG") ($name + "_rFinger5J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger5J1GeoG.scalePivot") ($name + "_rFinger5J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger5J1Geo.scalePivot") ($name + "_rFinger5J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger5J1C") ($name + "_rFinger5J1GeoG");
		$rFinger4J1Loc = `getAttr ($name + "_rFinger4J1.tz")`;
		$rFinger5J1Loc = `getAttr ($name + "_rFinger5J1.tz")`;
		setAttr ($name + "_rFinger5J1Geo.sy") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		setAttr ($name + "_rFinger5J1Geo.sz") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		select ($name + "_rFinger5J1GeoShape.vtx[1]") ($name + "_rFinger5J1GeoShape.vtx[3]") ($name + "_rFinger5J1GeoShape.vtx[5]") ($name + "_rFinger5J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger5J1_Clstr");
		pointConstraint ($name + "_rFinger5J2") ($name + "_rFinger5J1_Clstr");
		
		polyCube -n ($name + "_rFinger5J2Geo");
		group -n ($name + "_rFinger5J2GeoG") ($name + "_rFinger5J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger5J2GeoG.scalePivot") ($name + "_rFinger5J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger5J2Geo.scalePivot") ($name + "_rFinger5J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger5J2C") ($name + "_rFinger5J2GeoG");
		setAttr ($name + "_rFinger5J2Geo.sy") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		setAttr ($name + "_rFinger5J2Geo.sz") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		select ($name + "_rFinger5J2GeoShape.vtx[1]") ($name + "_rFinger5J2GeoShape.vtx[3]") ($name + "_rFinger5J2GeoShape.vtx[5]") ($name + "_rFinger5J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger5J2_Clstr");
		pointConstraint ($name + "_rFinger5J3") ($name + "_rFinger5J2_Clstr");
		
		polyCube -n ($name + "_rFinger5J3Geo");
		group -n ($name + "_rFinger5J3GeoG") ($name + "_rFinger5J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger5J3GeoG.scalePivot") ($name + "_rFinger5J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger5J3Geo.scalePivot") ($name + "_rFinger5J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger5J3C") ($name + "_rFinger5J3GeoG");
		setAttr ($name + "_rFinger5J3Geo.sy") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		setAttr ($name + "_rFinger5J3Geo.sz") (($rFinger4J1Loc - $rFinger5J1Loc)*.9);
		select ($name + "_rFinger5J3GeoShape.vtx[1]") ($name + "_rFinger5J3GeoShape.vtx[3]") ($name + "_rFinger5J3GeoShape.vtx[5]") ($name + "_rFinger5J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger5J3_Clstr");
		pointConstraint ($name + "_rFinger5JTip") ($name + "_rFinger5J3_Clstr");
		
		delete -ch ($name + "_rFinger5J1Geo") ($name + "_rFinger5J2Geo") ($name + "_rFinger5J3Geo");
		delete ($name + "_rFinger5J1_Clstr") ($name + "_rFinger5J2_Clstr") ($name + "_rFinger5J3_Clstr") ;
		parent ($name + "_rFinger5J1GeoG") ($name + "_rFinger5J2GeoG") ($name + "_rFinger5J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger5J1Geo") ($name + "_rFinger5J2Geo") ($name + "_rFinger5J3Geo");
		connectAttr -f ($name + "_rFinger5J1C.scale") ($name + "_rFinger5J1GeoG.scale");
		connectAttr -f ($name + "_rFinger5J1C.scale") ($name + "_rFinger5J2GeoG.scale");
		connectAttr -f ($name + "_rFinger5J1C.scale") ($name + "_rFinger5J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger6J1")`)
	{
		polyCube -n ($name + "_rFinger6J1Geo");
		group -n ($name + "_rFinger6J1GeoG") ($name + "_rFinger6J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger6J1GeoG.scalePivot") ($name + "_rFinger6J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger6J1Geo.scalePivot") ($name + "_rFinger6J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger6J1C") ($name + "_rFinger6J1GeoG");
		$rFinger5J1Loc = `getAttr ($name + "_rFinger5J1.tz")`;
		$rFinger6J1Loc = `getAttr ($name + "_rFinger6J1.tz")`;
		setAttr ($name + "_rFinger6J1Geo.sy") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		setAttr ($name + "_rFinger6J1Geo.sz") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		select ($name + "_rFinger6J1GeoShape.vtx[1]") ($name + "_rFinger6J1GeoShape.vtx[3]") ($name + "_rFinger6J1GeoShape.vtx[5]") ($name + "_rFinger6J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger6J1_Clstr");
		pointConstraint ($name + "_rFinger6J2") ($name + "_rFinger6J1_Clstr");
		
		polyCube -n ($name + "_rFinger6J2Geo");
		group -n ($name + "_rFinger6J2GeoG") ($name + "_rFinger6J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger6J2GeoG.scalePivot") ($name + "_rFinger6J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger6J2Geo.scalePivot") ($name + "_rFinger6J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger6J2C") ($name + "_rFinger6J2GeoG");
		setAttr ($name + "_rFinger6J2Geo.sy") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		setAttr ($name + "_rFinger6J2Geo.sz") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		select ($name + "_rFinger6J2GeoShape.vtx[1]") ($name + "_rFinger6J2GeoShape.vtx[3]") ($name + "_rFinger6J2GeoShape.vtx[5]") ($name + "_rFinger6J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger6J2_Clstr");
		pointConstraint ($name + "_rFinger6J3") ($name + "_rFinger6J2_Clstr");
		
		polyCube -n ($name + "_rFinger6J3Geo");
		group -n ($name + "_rFinger6J3GeoG") ($name + "_rFinger6J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger6J3GeoG.scalePivot") ($name + "_rFinger6J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger6J3Geo.scalePivot") ($name + "_rFinger6J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger6J3C") ($name + "_rFinger6J3GeoG");
		setAttr ($name + "_rFinger6J3Geo.sy") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		setAttr ($name + "_rFinger6J3Geo.sz") (($rFinger5J1Loc - $rFinger6J1Loc)*.9);
		select ($name + "_rFinger6J3GeoShape.vtx[1]") ($name + "_rFinger6J3GeoShape.vtx[3]") ($name + "_rFinger6J3GeoShape.vtx[5]") ($name + "_rFinger6J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger6J3_Clstr");
		pointConstraint ($name + "_rFinger6JTip") ($name + "_rFinger6J3_Clstr");
		
		delete -ch ($name + "_rFinger6J1Geo") ($name + "_rFinger6J2Geo") ($name + "_rFinger6J3Geo");
		delete ($name + "_rFinger6J1_Clstr") ($name + "_rFinger6J2_Clstr") ($name + "_rFinger6J3_Clstr") ;
		parent ($name + "_rFinger6J1GeoG") ($name + "_rFinger6J2GeoG") ($name + "_rFinger6J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger6J1Geo") ($name + "_rFinger6J2Geo") ($name + "_rFinger6J3Geo");
		connectAttr -f ($name + "_rFinger6J1C.scale") ($name + "_rFinger6J1GeoG.scale");
		connectAttr -f ($name + "_rFinger6J1C.scale") ($name + "_rFinger6J2GeoG.scale");
		connectAttr -f ($name + "_rFinger6J1C.scale") ($name + "_rFinger6J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger7J1")`)
	{
		polyCube -n ($name + "_rFinger7J1Geo");
		group -n ($name + "_rFinger7J1GeoG") ($name + "_rFinger7J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger7J1GeoG.scalePivot") ($name + "_rFinger7J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger7J1Geo.scalePivot") ($name + "_rFinger7J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger7J1C") ($name + "_rFinger7J1GeoG");
		$rFinger6J1Loc = `getAttr ($name + "_rFinger6J1.tz")`;
		$rFinger7J1Loc = `getAttr ($name + "_rFinger7J1.tz")`;
		setAttr ($name + "_rFinger7J1Geo.sy") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		setAttr ($name + "_rFinger7J1Geo.sz") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		select ($name + "_rFinger7J1GeoShape.vtx[1]") ($name + "_rFinger7J1GeoShape.vtx[3]") ($name + "_rFinger7J1GeoShape.vtx[5]") ($name + "_rFinger7J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger7J1_Clstr");
		pointConstraint ($name + "_rFinger7J2") ($name + "_rFinger7J1_Clstr");
		
		polyCube -n ($name + "_rFinger7J2Geo");
		group -n ($name + "_rFinger7J2GeoG") ($name + "_rFinger7J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger7J2GeoG.scalePivot") ($name + "_rFinger7J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger7J2Geo.scalePivot") ($name + "_rFinger7J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger7J2C") ($name + "_rFinger7J2GeoG");
		setAttr ($name + "_rFinger7J2Geo.sy") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		setAttr ($name + "_rFinger7J2Geo.sz") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		select ($name + "_rFinger7J2GeoShape.vtx[1]") ($name + "_rFinger7J2GeoShape.vtx[3]") ($name + "_rFinger7J2GeoShape.vtx[5]") ($name + "_rFinger7J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger7J2_Clstr");
		pointConstraint ($name + "_rFinger7J3") ($name + "_rFinger7J2_Clstr");
		
		polyCube -n ($name + "_rFinger7J3Geo");
		group -n ($name + "_rFinger7J3GeoG") ($name + "_rFinger7J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger7J3GeoG.scalePivot") ($name + "_rFinger7J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger7J3Geo.scalePivot") ($name + "_rFinger7J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger7J3C") ($name + "_rFinger7J3GeoG");
		setAttr ($name + "_rFinger7J3Geo.sy") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		setAttr ($name + "_rFinger7J3Geo.sz") (($rFinger6J1Loc - $rFinger7J1Loc)*.9);
		select ($name + "_rFinger7J3GeoShape.vtx[1]") ($name + "_rFinger7J3GeoShape.vtx[3]") ($name + "_rFinger7J3GeoShape.vtx[5]") ($name + "_rFinger7J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger7J3_Clstr");
		pointConstraint ($name + "_rFinger7JTip") ($name + "_rFinger7J3_Clstr");
		
		delete -ch ($name + "_rFinger7J1Geo") ($name + "_rFinger7J2Geo") ($name + "_rFinger7J3Geo");
		delete ($name + "_rFinger7J1_Clstr") ($name + "_rFinger7J2_Clstr") ($name + "_rFinger7J3_Clstr") ;
		parent ($name + "_rFinger7J1GeoG") ($name + "_rFinger7J2GeoG") ($name + "_rFinger7J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger7J1Geo") ($name + "_rFinger7J2Geo") ($name + "_rFinger7J3Geo");
		connectAttr -f ($name + "_rFinger7J1C.scale") ($name + "_rFinger7J1GeoG.scale");
		connectAttr -f ($name + "_rFinger7J1C.scale") ($name + "_rFinger7J2GeoG.scale");
		connectAttr -f ($name + "_rFinger7J1C.scale") ($name + "_rFinger7J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger8J1")`)
	{
		polyCube -n ($name + "_rFinger8J1Geo");
		group -n ($name + "_rFinger8J1GeoG") ($name + "_rFinger8J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger8J1GeoG.scalePivot") ($name + "_rFinger8J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger8J1Geo.scalePivot") ($name + "_rFinger8J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger8J1C") ($name + "_rFinger8J1GeoG");
		$rFinger7J1Loc = `getAttr ($name + "_rFinger7J1.tz")`;
		$rFinger8J1Loc = `getAttr ($name + "_rFinger8J1.tz")`;
		setAttr ($name + "_rFinger8J1Geo.sy") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		setAttr ($name + "_rFinger8J1Geo.sz") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		select ($name + "_rFinger8J1GeoShape.vtx[1]") ($name + "_rFinger8J1GeoShape.vtx[3]") ($name + "_rFinger8J1GeoShape.vtx[5]") ($name + "_rFinger8J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger8J1_Clstr");
		pointConstraint ($name + "_rFinger8J2") ($name + "_rFinger8J1_Clstr");
		
		polyCube -n ($name + "_rFinger8J2Geo");
		group -n ($name + "_rFinger8J2GeoG") ($name + "_rFinger8J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger8J2GeoG.scalePivot") ($name + "_rFinger8J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger8J2Geo.scalePivot") ($name + "_rFinger8J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger8J2C") ($name + "_rFinger8J2GeoG");
		setAttr ($name + "_rFinger8J2Geo.sy") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		setAttr ($name + "_rFinger8J2Geo.sz") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		select ($name + "_rFinger8J2GeoShape.vtx[1]") ($name + "_rFinger8J2GeoShape.vtx[3]") ($name + "_rFinger8J2GeoShape.vtx[5]") ($name + "_rFinger8J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger8J2_Clstr");
		pointConstraint ($name + "_rFinger8J3") ($name + "_rFinger8J2_Clstr");
		
		polyCube -n ($name + "_rFinger8J3Geo");
		group -n ($name + "_rFinger8J3GeoG") ($name + "_rFinger8J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger8J3GeoG.scalePivot") ($name + "_rFinger8J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger8J3Geo.scalePivot") ($name + "_rFinger8J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger8J3C") ($name + "_rFinger8J3GeoG");
		setAttr ($name + "_rFinger8J3Geo.sy") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		setAttr ($name + "_rFinger8J3Geo.sz") (($rFinger7J1Loc - $rFinger8J1Loc)*.9);
		select ($name + "_rFinger8J3GeoShape.vtx[1]") ($name + "_rFinger8J3GeoShape.vtx[3]") ($name + "_rFinger8J3GeoShape.vtx[5]") ($name + "_rFinger8J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger8J3_Clstr");
		pointConstraint ($name + "_rFinger8JTip") ($name + "_rFinger8J3_Clstr");
		
		delete -ch ($name + "_rFinger8J1Geo") ($name + "_rFinger8J2Geo") ($name + "_rFinger8J3Geo");
		delete ($name + "_rFinger8J1_Clstr") ($name + "_rFinger8J2_Clstr") ($name + "_rFinger8J3_Clstr") ;
		parent ($name + "_rFinger8J1GeoG") ($name + "_rFinger8J2GeoG") ($name + "_rFinger8J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger8J1Geo") ($name + "_rFinger8J2Geo") ($name + "_rFinger8J3Geo");
		connectAttr -f ($name + "_rFinger8J1C.scale") ($name + "_rFinger8J1GeoG.scale");
		connectAttr -f ($name + "_rFinger8J1C.scale") ($name + "_rFinger8J2GeoG.scale");
		connectAttr -f ($name + "_rFinger8J1C.scale") ($name + "_rFinger8J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rFinger9J1")`)
	{
		polyCube -n ($name + "_rFinger9J1Geo");
		group -n ($name + "_rFinger9J1GeoG") ($name + "_rFinger9J1Geo");
		move -r -0.5 0 0 ($name + "_rFinger9J1GeoG.scalePivot") ($name + "_rFinger9J1GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger9J1Geo.scalePivot") ($name + "_rFinger9J1Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger9J1C") ($name + "_rFinger9J1GeoG");
		$rFinger8J1Loc = `getAttr ($name + "_rFinger8J1.tz")`;
		$rFinger9J1Loc = `getAttr ($name + "_rFinger9J1.tz")`;
		setAttr ($name + "_rFinger9J1Geo.sy") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		setAttr ($name + "_rFinger9J1Geo.sz") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		select ($name + "_rFinger9J1GeoShape.vtx[1]") ($name + "_rFinger9J1GeoShape.vtx[3]") ($name + "_rFinger9J1GeoShape.vtx[5]") ($name + "_rFinger9J1GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger9J1_Clstr");
		pointConstraint ($name + "_rFinger9J2") ($name + "_rFinger9J1_Clstr");
		
		polyCube -n ($name + "_rFinger9J2Geo");
		group -n ($name + "_rFinger9J2GeoG") ($name + "_rFinger9J2Geo");
		move -r -0.5 0 0 ($name + "_rFinger9J2GeoG.scalePivot") ($name + "_rFinger9J2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger9J2Geo.scalePivot") ($name + "_rFinger9J2Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger9J2C") ($name + "_rFinger9J2GeoG");
		setAttr ($name + "_rFinger9J2Geo.sy") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		setAttr ($name + "_rFinger9J2Geo.sz") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		select ($name + "_rFinger9J2GeoShape.vtx[1]") ($name + "_rFinger9J2GeoShape.vtx[3]") ($name + "_rFinger9J2GeoShape.vtx[5]") ($name + "_rFinger9J2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger9J2_Clstr");
		pointConstraint ($name + "_rFinger9J3") ($name + "_rFinger9J2_Clstr");
		
		polyCube -n ($name + "_rFinger9J3Geo");
		group -n ($name + "_rFinger9J3GeoG") ($name + "_rFinger9J3Geo");
		move -r -0.5 0 0 ($name + "_rFinger9J3GeoG.scalePivot") ($name + "_rFinger9J3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rFinger9J3Geo.scalePivot") ($name + "_rFinger9J3Geo.rotatePivot") ;
		parentConstraint ($name + "_rFinger9J3C") ($name + "_rFinger9J3GeoG");
		setAttr ($name + "_rFinger9J3Geo.sy") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		setAttr ($name + "_rFinger9J3Geo.sz") (($rFinger8J1Loc - $rFinger9J1Loc)*.9);
		select ($name + "_rFinger9J3GeoShape.vtx[1]") ($name + "_rFinger9J3GeoShape.vtx[3]") ($name + "_rFinger9J3GeoShape.vtx[5]") ($name + "_rFinger9J3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rFinger9J3_Clstr");
		pointConstraint ($name + "_rFinger9JTip") ($name + "_rFinger9J3_Clstr");
		
		delete -ch ($name + "_rFinger9J1Geo") ($name + "_rFinger9J2Geo") ($name + "_rFinger9J3Geo");
		delete ($name + "_rFinger9J1_Clstr") ($name + "_rFinger9J2_Clstr") ($name + "_rFinger9J3_Clstr") ;
		parent ($name + "_rFinger9J1GeoG") ($name + "_rFinger9J2GeoG") ($name + "_rFinger9J3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rFinger9J1Geo") ($name + "_rFinger9J2Geo") ($name + "_rFinger9J3Geo");
		connectAttr -f ($name + "_rFinger9J1C.scale") ($name + "_rFinger9J1GeoG.scale");
		connectAttr -f ($name + "_rFinger9J1C.scale") ($name + "_rFinger9J2GeoG.scale");
		connectAttr -f ($name + "_rFinger9J1C.scale") ($name + "_rFinger9J3GeoG.scale");
	}
	
	if (`objExists ($name + "_rThumbJ1")`)
	{
		duplicate -n ($name + "_rThumbJ1Geo1") ($name + "_rHand1Geo");
		select ($name + "_rThumbJ1Geo1");
		PolySelectConvert 1;
		select -d ($name + "_rThumbJ1Geo1.f[0]") ;
		doDelete;
		
		$rPalmLoc = `getAttr ($name + "_rPalmJ.tx")`;
		
		polyPlane -n ($name + "_rThumbJ1Geo2") -w ($rPalmLoc * -.75) -h ($rPalmLoc * -.75) -sx 1 -sy 1 -ax 0 1 0 -cuv 2 -ch 1;
		pointConstraint ($name + "_rThumbJ2C") ($name + "_rThumbJ1Geo2");
		aimConstraint -aimVector 0 -1 0 -upVector 0 0 -1 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ($name + "_rThumbJ1C") ($name + "_rThumbJ1C") ($name + "_rThumbJ1Geo2"); 
		delete ($name + "_rThumbJ1Geo2_pointConstraint1");
		delete ($name + "_rThumbJ1Geo2_aimConstraint1");
		
		polyUnite -n ($name + "_rThumbJ1Geo") -ch 0 ($name + "_rThumbJ1Geo2") ($name + "_rThumbJ1Geo1");
		polyAppend -ch on -s 1 -tx 1 -ed 5 -ed 0 ($name + "_rThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 6 -ed 2 -ed 8 ($name + "_rThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 4 -ed 3 -ed 10 ($name + "_rThumbJ1GeoShape") ;
		polyAppend -ch on -s 1 -tx 1 -ed 7 -ed 9 -ed 1 -ed 11 ($name + "_rThumbJ1GeoShape") ;
		
		group -n ($name + "_rThumbJ1GeoG") ($name + "_rThumbJ1Geo");
		$rThumbJ1Loc = `xform -q -ws -rp ($name + "_rThumbJ1")`;
		move $rThumbJ1Loc[0] $rThumbJ1Loc[1] $rThumbJ1Loc[2] ($name + "_rThumbJ1GeoG.scalePivot") ($name + "_rThumbJ1GeoG.rotatePivot") ;
		move $rThumbJ1Loc[0] $rThumbJ1Loc[1] $rThumbJ1Loc[2] ($name + "_rThumbJ1Geo.scalePivot") ($name + "_rThumbJ1Geo.rotatePivot") ;
		rotate -r 0 -90 0 ($name + "_rThumbJ1GeoG");
		parentConstraint -mo ($name + "_rThumbJ1") ($name + "_rThumbJ1GeoG");
		rotate -r 0 90 0 ($name + "_rThumbJ1Geo");
		makeIdentity -apply true -r 1 ($name + "_rThumbJ1Geo");
		
		polyCube -n ($name + "_rThumbJ2Geo");
		group -n ($name + "_rThumbJ2GeoG");
		move -r -0.5 0 0 ($name + "_rThumbJ2GeoG.scalePivot") ($name + "_rThumbJ2GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rThumbJ2Geo.scalePivot") ($name + "_rThumbJ2Geo.rotatePivot") ;
		parentConstraint ($name + "_rThumbJ2C") ($name + "_rThumbJ2GeoG");
		setAttr ($name + "_rThumbJ2Geo.sy") ($rPalmLoc * -.75);
		setAttr ($name + "_rThumbJ2Geo.sz") ($rPalmLoc * -.75);
		select ($name + "_rThumbJ2GeoShape.vtx[1]") ($name + "_rThumbJ2GeoShape.vtx[3]") ($name + "_rThumbJ2GeoShape.vtx[5]") ($name + "_rThumbJ2GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rThumbJ2_Clstr");
		pointConstraint ($name + "_rThumbJ3") ($name + "_rThumbJ2_Clstr");
		
		polyCube -n ($name + "_rThumbJ3Geo");
		group -n ($name + "_rThumbJ3GeoG");
		move -r -0.5 0 0 ($name + "_rThumbJ3GeoG.scalePivot") ($name + "_rThumbJ3GeoG.rotatePivot") ;
		move -r -0.5 0 0 ($name + "_rThumbJ3Geo.scalePivot") ($name + "_rThumbJ3Geo.rotatePivot") ;
		parentConstraint ($name + "_rThumbJ3C") ($name + "_rThumbJ3GeoG");
		setAttr ($name + "_rThumbJ3Geo.sy") ($rPalmLoc * -.75);
		setAttr ($name + "_rThumbJ3Geo.sz") ($rPalmLoc * -.75);
		select ($name + "_rThumbJ3GeoShape.vtx[1]") ($name + "_rThumbJ3GeoShape.vtx[3]") ($name + "_rThumbJ3GeoShape.vtx[5]") ($name + "_rThumbJ3GeoShape.vtx[7]") ;
		newCluster " -envelope 1";
		rename ($name + "_rThumbJ3_Clstr");
		pointConstraint ($name + "_rThumbJTip") ($name + "_rThumbJ3_Clstr");
		
		delete -ch ($name + "_rThumbJ1Geo") ($name + "_rThumbJ2Geo") ($name + "_rThumbJ3Geo");
		delete ($name + "_rThumbJ2_Clstr") ($name + "_rThumbJ3_Clstr") ;
		parent ($name + "_rThumbJ1GeoG") ($name + "_rThumbJ2GeoG") ($name + "_rThumbJ3GeoG") ($name + "_rFingersGeoG");
		
		makeIdentity -apply true -s 1 ($name + "_rThumbJ1Geo") ($name + "_rThumbJ2Geo") ($name + "_rThumbJ3Geo");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ1GeoG.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ2GeoG.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ3GeoG.scale");
	}
	
	/////////HEAD///////////
	polyCube -n ($name + "_HeadTopGeo") -w 1 -h 1 -d 1 -sx 1 -sy 1 -sz 1 -ax 0 1 0 -cuv 4 -ch 1;
	polySmooth  -mth 0 -dv 2 -c 1 -kb 0 -ksb 1 -khe 0 -kt 1 -kmb 1 -suv 1 -sl 1 -dpe 1 -ps 0.1 -ro 1 -ch 1 ($name + "_HeadTopGeo");
	move -r 0 0 0.0303227 ($name + "_HeadTopGeo.vtx[34]") ($name + "_HeadTopGeo.vtx[36]") ($name + "_HeadTopGeo.vtx[50]") ($name + "_HeadTopGeo.vtx[74]") ($name + "_HeadTopGeo.vtx[77]") ;
	move -r 0 -0.0272904 0 ($name + "_HeadTopGeo.vtx[47]") ($name + "_HeadTopGeo.vtx[49]") ($name + "_HeadTopGeo.vtx[64]") ($name + "_HeadTopGeo.vtx[87:88]") ;
	move -r 0 -0.118258 0.118258 ($name + "_HeadTopGeo.vtx[0:1]") ($name + "_HeadTopGeo.vtx[8]") ($name + "_HeadTopGeo.vtx[26:27]") ;
	move -r 0 0 -0.0424517 ($name + "_HeadTopGeo.vtx[0:1]") ;
	move -r 0 -0.0219276 0 ($name + "_HeadTopGeo.vtx[26:27]") ($name + "_HeadTopGeo.vtx[63]") ($name + "_HeadTopGeo.vtx[65]") ($name + "_HeadTopGeo.vtx[87:88]") ;
	move -r 0 -0.00626502 0 ($name + "_HeadTopGeo.vtx[87:88]") ;
	move -r 0 -0.00626502 0 ($name + "_HeadTopGeo.vtx[63]") ($name + "_HeadTopGeo.vtx[65]") ;
	move -r 0 -0.0140963 -0.00626502 ($name + "_HeadTopGeo.vtx[86]") ($name + "_HeadTopGeo.vtx[89]") ;
	move -r 0 -0.0657827 0 ($name + "_HeadTopGeo.vtx[0:1]") ;
	move -r 0 -0.111204 0 ($name + "_HeadTopGeo.vtx[47]") ($name + "_HeadTopGeo.vtx[49]") ;
	move -r 0 -0.117469 0 ($name + "_HeadTopGeo.vtx[18:19]") ;
	move -r 0 -0.0645777 0 ($name + "_HeadTopGeo.vtx[46]") ($name + "_HeadTopGeo.vtx[48]") ;
	move -r 0 -0.00156625 -0.0109638 ($name + "_HeadTopGeo.vtx[46]") ($name + "_HeadTopGeo.vtx[48]");
	move -r 0 -0.0293769 -0.0160238 ($name + "_HeadTopGeo.vtx[6:7]") ;
	move -r 0 -0.0156625 0 ($name + "_HeadTopGeo.vtx[34]") ($name + "_HeadTopGeo.vtx[36]") ($name + "_HeadTopGeo.vtx[50]") ($name + "_HeadTopGeo.vtx[74]") ($name + "_HeadTopGeo.vtx[77]") ($name + "_HeadTopGeo.vtx[93:94]") ;
	move -r 0 -0.0219276 0 ($name + "_HeadTopGeo.vtx[34]") ($name + "_HeadTopGeo.vtx[36]") ($name + "_HeadTopGeo.vtx[50]") ($name + "_HeadTopGeo.vtx[74]") ($name + "_HeadTopGeo.vtx[77]") ;
	move -r 0 0.0203613 0 ($name + "_HeadTopGeo.vtx[0:1]") ($name + "_HeadTopGeo.vtx[8]") ($name + "_HeadTopGeo.vtx[18:19]") ($name + "_HeadTopGeo.vtx[23]") ($name + "_HeadTopGeo.vtx[26:27]") ($name + "_HeadTopGeo.vtx[47]") ($name + "_HeadTopGeo.vtx[49]") ($name + "_HeadTopGeo.vtx[63:65]") ($name + "_HeadTopGeo.vtx[87:88]") ;
	move -r 0 0.0500673 0 ($name + "_HeadTopGeo.vtx[0:1]") ($name + "_HeadTopGeo.vtx[8]") ($name + "_HeadTopGeo.vtx[18:19]") ($name + "_HeadTopGeo.vtx[23]") ($name + "_HeadTopGeo.vtx[26:27]") ($name + "_HeadTopGeo.vtx[46:49]") ($name + "_HeadTopGeo.vtx[62:65]") ($name + "_HeadTopGeo.vtx[86:89]") ;
	move -r 0 0.0282989 0 ($name + "_HeadTopGeo.vtx[6:7]") ($name + "_HeadTopGeo.vtx[11]") ($name + "_HeadTopGeo.vtx[32:33]") ;
	scale -r -p 0cm -0.368014cm 0.295457cm 1.069691 1 1 ($name + "_HeadTopGeo.vtx[0:1]") ($name + "_HeadTopGeo.vtx[8]") ($name + "_HeadTopGeo.vtx[26:27]") ($name + "_HeadTopGeo.vtx[47]") ($name + "_HeadTopGeo.vtx[49]") ($name + "_HeadTopGeo.vtx[64]") ($name + "_HeadTopGeo.vtx[87:88]") ;
	scale -r -p 0.248091cm -0.367827cm 0.0815972cm 1 1 1 ($name + "_HeadTopGeo.f[55]") ;
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0 -pvy -0.3680142015 -pvz 0.2199364901 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadTopGeo.f[52:59]");
	move -r 0 -0.24816 0 ($name + "_HeadTopGeo.f[52:59]");
	move -r 0 0.0957809 0 ($name + "_HeadTopGeo.vtx[101:103]") ($name + "_HeadTopGeo.vtx[108:109]") ;
	move -r 0 -0.0195916 0 ($name + "_HeadTopGeo.vtx[95:100]") ($name + "_HeadTopGeo.vtx[104:107]") ;
	move -r 0 -0.0217684 0 ($name + "_HeadTopGeo.vtx[96:97]") ($name + "_HeadTopGeo.vtx[99]") ($name + "_HeadTopGeo.vtx[104:105]") ;
	scale -r -p 0cm -0.589415cm 0.219936cm 0.820306 1 1 ($name + "_HeadTopGeo.vtx[95:109]") ;
	scale -r -p 0cm -0.444336cm 0cm 1.036799 1 1 ($name + "_HeadTopGeo.vtx[18:19]") ($name + "_HeadTopGeo.vtx[23]") ($name + "_HeadTopGeo.vtx[63:64]") ($name + "_HeadTopGeo.vtx[101:103]") ($name + "_HeadTopGeo.vtx[52:59]") ;
	select -d ($name + "_HeadTopGeo.vtx[18:19]") ($name + "_HeadTopGeo.vtx[23]") ($name + "_HeadTopGeo.vtx[63:64]") ($name + "_HeadTopGeo.vtx[101:103]") ($name + "_HeadTopGeo.vtx[52:59]") ;
	
	select ($name + "_HeadTopGeo.vtx[4:7]") ($name + "_HeadTopGeo.vtx[10:11]") ($name + "_HeadTopGeo.vtx[14:17]") ($name + "_HeadTopGeo.vtx[21:22]") ($name + "_HeadTopGeo.vtx[24:25]") ($name + "_HeadTopGeo.vtx[30:33]") ($name + "_HeadTopGeo.vtx[38:45]") ($name + "_HeadTopGeo.vtx[54:61]")  ($name + "_HeadTopGeo.vtx[65:72]") ($name + "_HeadTopGeo.vtx[77:84]") ($name + "_HeadTopGeo.vtx[77:84]") ($name + "_HeadTopGeo.vtx[87:94]") ;
	scale -r -p 0cm 0.0729602cm -0.131944cm 0.967254 1 1 ;
	select -add ($name + "_HeadTopGeo.vtx[2:3]") ($name + "_HeadTopGeo.vtx[9]") ($name + "_HeadTopGeo.vtx[12:13]") ($name + "_HeadTopGeo.vtx[28:29]") ($name + "_HeadTopGeo.vtx[34:37]") ;
	scale -r -p 0cm 0.0729602cm -0.0547171cm 0.912778 1 1 ;
	select ($name + "_HeadTopGeo.vtx[101:103]") ($name + "_HeadTopGeo.vtx[52:59]") ;
	scale -r -p 0cm -0.520526cm 0cm 1.065 1 1 ;
	select ($name + "_HeadTopGeo.vtx[0:1]") ($name + "_HeadTopGeo.vtx[8]") ($name + "_HeadTopGeo.vtx[11]") ($name + "_HeadTopGeo.vtx[18:19]") ($name + "_HeadTopGeo.vtx[23]") ($name + "_HeadTopGeo.vtx[26:27]") ($name + "_HeadTopGeo.vtx[46:49]") ($name + "_HeadTopGeo.vtx[62:64]") ($name + "_HeadTopGeo.vtx[85:86]") ;
	scale -r -p 0cm -0.33138cm 0.059129cm 0.957222 1 1 ;
	select ($name + "_HeadTopGeo.vtx[97:100]") ($name + "_HeadTopGeo.vtx[105]") ($name + "_HeadTopGeo.vtx[107]") ;
	move -r 0 -0.0123915 0 ;
	select -cl  ;
	select ($name + "_HeadTopGeo.vtx[99:100]") ;
	move -r 0 -0.00309787 0 ;
	select -cl  ;
	select ($name + "_HeadTopGeo.vtx[1]") ($name + "_HeadTopGeo.vtx[96]") ($name + "_HeadTopGeo.vtx[0]") ($name + "_HeadTopGeo.vtx[104]") ;
	scale -r -p 0cm -0.513002cm 0.330436cm 0.950714 1 1 ;
	polySoftEdge -angle 45 -ch 1 ($name + "_HeadTopGeo");
	duplicate -n ($name + "_HeadBtmGeo") ($name + "_HeadTopGeo") ;
	
	delete ($name + "_HeadBtmGeo.f[0:51]") ($name + "_HeadBtmGeo.f[60:95]") ;
	polyCloseBorder -ch 1 ($name + "_HeadBtmGeo");
	
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0 -pvy -0.3684650958 -pvz 0.2199362814 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadBtmGeo.f[20]");
	setAttr "polyExtrudeFace2.localScale" -type double3 0.85 0.85 0.85 ;
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0 -pvy -0.3684484959 -pvz 0.2142376453 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadBtmGeo.f[20]");
	setAttr "polyExtrudeFace3.localTranslate" -type double3 0 0 -0.14 ;
	
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0 -pvy -0.3680999577 -pvz 0.0780961439 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadBtmGeo.f[25]") ($name + "_HeadBtmGeo.f[30]");
	setAttr "polyExtrudeFace4.localTranslate" -type double3 0 0 0.15 ;
	move -r 0.0261447 0 0 ($name + "_HeadBtmGeo.f[25]") ;
	move -r -0.0261447 0 0 ($name + "_HeadBtmGeo.f[30]") ;
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0.01281668246 -pvy -0.4460017607 -pvz 0.2193639018 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadBtmGeo.f[8:10]") ($name + "_HeadBtmGeo.f[13:16]") ($name + "_HeadBtmGeo.f[19]") ($name + "_HeadBtmGeo.f[45]") ($name + "_HeadBtmGeo.f[49]");
	setAttr "polyExtrudeFace5.localTranslate" -type double3 0 0 0.04 ;
	
	
	delete ($name + "_HeadTopGeo.f[52:59]") ($name + "_HeadTopGeo.f[96:107]") ;
	polyCloseBorder -ch 1 ($name + "_HeadTopGeo");
	
	polyExtrudeFacet -constructionHistory 1 -keepFacesTogether 1 -pvx 0 -pvy -0.3684650958 -pvz 0.2199362814 -divisions 1 -twist 0 -taper 1 -off 0 -smoothingAngle 30 ($name + "_HeadTopGeo.f[88]");
	setAttr "polyExtrudeFace6.localScale" -type double3 0.85 0.85 0.85 ;
	
	polyCylinder -n ($name + "_earsGeo") -r 0.1 -h .85 -sz 1;
	rotate 0 0 90 ($name + "_earsGeo");
	move  0 -0.08 0 ;
	
	group -n ($name + "_HeadGeoG") ($name + "_HeadTopGeo") ($name + "_HeadBtmGeo") ($name + "_earsGeo");
	xform -os -piv 0 -0.05 -0.0;
	
	pointConstraint ($name + "_HeadJ") ($name + "_HeadTipJ") ($name + "_HeadGeoG");
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z ($name + "_HeadTipJ") ($name + "_HeadGeoG");
	
	spaceLocator -n ($name + "_HeadAimLctr");
	spaceLocator -n ($name + "_HeadTargetLctr");
	parent ($name + "_HeadTargetLctr") ($name + "_HeadAimLctr");
	pointConstraint ($name + "_HeadJ") ($name + "_HeadAimLctr");
	pointConstraint ($name + "_HeadTipJ") ($name + "_HeadTargetLctr");
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z ($name + "_HeadTipJ") ($name + "_HeadAimLctr");
	
	$HeadHeight = `getAttr ($name + "_HeadTargetLctr.ty")`;
	setAttr ($name + "_HeadGeoG.sy") ($HeadHeight * 1.1);
	
	spaceLocator -n ($name + "_lEyeAimLctr");
	spaceLocator -n ($name + "_lEyeTargetLctr");
	parent ($name + "_lEyeTargetLctr") ($name + "_lEyeAimLctr");
	pointConstraint ($name + "_HeadGeoG") ($name + "_lEyeAimLctr");
	pointConstraint ($name + "_lEyeJ") ($name + "_lEyeTargetLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 0 0 -worldUpType "none" ($name + "_lEyeJ") ($name + "_lEyeAimLctr");
	$lEyeDistance = `getAttr ($name + "_lEyeTargetLctr.tx")`;
	
	spaceLocator -n ($name + "_rEyeAimLctr");
	spaceLocator -n ($name + "_rEyeTargetLctr");
	parent ($name + "_rEyeTargetLctr") ($name + "_rEyeAimLctr");
	pointConstraint ($name + "_HeadGeoG") ($name + "_rEyeAimLctr");
	pointConstraint ($name + "_rEyeJ") ($name + "_rEyeTargetLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 0 0 -worldUpType "none" ($name + "_rEyeJ") ($name + "_rEyeAimLctr");
	$rEyeDistance = `getAttr ($name + "_rEyeTargetLctr.tx")`;
	
	setAttr ($name + "_HeadGeoG.sx") (($lEyeDistance + $rEyeDistance)* 1.05);
	setAttr ($name + "_HeadGeoG.sz") (($lEyeDistance + $rEyeDistance)* 1.2);
	makeIdentity -apply true -s 1 ($name + "_HeadGeoG");
	
	$lEyeSpace = `getAttr ($name + "_lEyeJ.tz")`;
	$rEyeSpace = `getAttr ($name + "_rEyeJ.tz")`;
	polySphere -n ($name + "_lEyeGeo") -r (($lEyeSpace - $rEyeSpace)/-4);
	rotate -r -os 90 0 0 ($name + "_lEyeGeo");
	makeIdentity -apply true -t 1 -r 1 -s 1;
	
	//EYE MATERIALS
	shadingNode -n ($name + "_EyeWhites") -asShader lambert;
	sets -renderable true -noSurfaceShader true -empty -name ($name + "_EyeWhitesSG");
	connectAttr -f ($name + "_EyeWhites.outColor") ($name + "_EyeWhitesSG.surfaceShader");
	setAttr ($name + "_EyeWhites.color") -type double3 1 1 1 ;
	shadingNode -n ($name + "_Pupils") -asShader lambert;
	sets -renderable true -noSurfaceShader true -empty -name ($name + "_PupilsSG");
	connectAttr -f ($name + "_Pupils.outColor") ($name + "_PupilsSG.surfaceShader");
	setAttr ($name + "_Pupils.color") -type double3 0 0 0;
	
	select ($name + "_lEyeGeo");
	sets -e -forceElement ($name + "_EyeWhitesSG");
	select -r ($name + "_lEyeGeoShape.f[320:359]") ($name + "_lEyeGeoShape.f[380:399]") ;
	sets -e -forceElement ($name + "_PupilsSG");
	
	//EYE LIDS
	polySphere -n ($name + "_lEyeLidBtmGeo") -r (($lEyeSpace - $rEyeSpace)/-3.5);
	setAttr ($name + "_lEyeLidBtmGeo.rotateOrder") 2;
	delete ($name + "_lEyeLidBtmGeo.f[180:359]") ($name + "_lEyeLidBtmGeo.f[380:399]") ;
	polyCloseBorder -ch 1 ($name + "_lEyeLidBtmGeo");
	delete -ch ($name + "_lEyeLidBtmGeo");
	duplicate -n ($name + "_rEyeLidBtmGeo") ($name + "_lEyeLidBtmGeo");
	
	polySphere -n ($name + "_lEyeLidTopGeo") -r (($lEyeSpace - $rEyeSpace)/-3.5);
	setAttr ($name + "_lEyeLidTopGeo.rotateOrder") 2;
	delete ($name + "_lEyeLidTopGeo.f[0:179]") ($name + "_lEyeLidTopGeo.f[360:379]") ;
	polyCloseBorder -ch 1 ($name + "_lEyeLidTopGeo");
	delete -ch ($name + "_lEyeLidTopGeo");
	duplicate -n ($name + "_rEyeLidTopGeo") ($name + "_lEyeLidTopGeo");
	
	group -n ($name + "_lEyeLidTopGeoG") ($name + "_lEyeLidTopGeo"); xform -os -piv 0 0 0;
	group -n ($name + "_lEyeLidBtmGeoG") ($name + "_lEyeLidBtmGeo"); xform -os -piv 0 0 0;
	
	group -n ($name + "_rEyeLidTopGeoG") ($name + "_rEyeLidTopGeo"); xform -os -piv 0 0 0;
	group -n ($name + "_rEyeLidBtmGeoG") ($name + "_rEyeLidBtmGeo"); xform -os -piv 0 0 0;
	
	rotate -25 0 0 ($name + "_lEyeLidTopGeoG") ($name + "_rEyeLidTopGeoG");
	rotate 25 0 0 ($name + "_lEyeLidBtmGeoG") ($name + "_rEyeLidBtmGeoG");
	makeIdentity -apply true -r 1 ($name + "_lEyeLidTopGeoG") ($name + "_rEyeLidTopGeoG") ($name + "_lEyeLidBtmGeoG") ($name + "_rEyeLidBtmGeoG");
	
	duplicate -n ($name + "_rEyeGeo") ($name + "_lEyeGeo");
	group -n ($name + "_lEyeGeoG2") ($name + "_lEyeGeo") ($name + "_lEyeLidBtmGeoG") ($name + "_lEyeLidTopGeoG"); xform -os -piv 0 0 0;
	group -n ($name + "_rEyeGeoG2") ($name + "_rEyeGeo") ($name + "_rEyeLidBtmGeoG") ($name + "_rEyeLidTopGeoG"); xform -os -piv 0 0 0;
	group -n ($name + "_lEyeGeoG") ($name + "_lEyeGeoG2"); xform -os -piv 0 0 0;
	group -n ($name + "_rEyeGeoG") ($name + "_rEyeGeoG2"); xform -os -piv 0 0 0;
	
	
	
	//LID FOLLOW LOCATOR
	spaceLocator -n ($name + "_EyeLidsFollowLctr");
	pointConstraint($name + "_EyeAimC") ($name + "_EyeLidsFollowLctr");
	delete ($name + "_EyeLidsFollowLctr_pointConstraint1");
	parentConstraint -mo ($name + "_HeadC") ($name + "_EyeLidsFollowLctr");
	parent ($name + "_EyeLidsFollowLctr") ($name + "_MainC");
	setAttr ($name + "_EyeLidsFollowLctr.v") 0;
	
	//CONSTRAINTS
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") -skip y -skip z ($name + "_lEyeAimC") ($name + "_EyeLidsFollowLctr") ($name + "_lEyeLidTopGeoG");
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") -skip y -skip z ($name + "_lEyeAimC") ($name + "_EyeLidsFollowLctr") ($name + "_lEyeLidBtmGeoG");
	
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") -skip y -skip z ($name + "_rEyeAimC") ($name + "_EyeLidsFollowLctr") ($name + "_rEyeLidTopGeoG");
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") -skip y -skip z ($name + "_rEyeAimC") ($name + "_EyeLidsFollowLctr") ($name + "_rEyeLidBtmGeoG");
	
	//LIMITS
	transformLimits -rx 0 45 -erx 1 0 ($name + "_lEyeLidBtmGeoG");
	transformLimits -rx 0 45 -erx 1 0 ($name + "_rEyeLidBtmGeoG");
	
	//ANIMATION ATTRIBUTES
	//LEFT EYE
	addAttr -ln "TopOpenClose"  -at double  -min -10 -max 10 -dv 0 ($name + "_lEyeAimC");
	setAttr -e-keyable true ($name + "_lEyeAimC.TopOpenClose");
	addAttr -ln "BtmOpenClose"  -at double  -min -10 -max 10 -dv 0 ($name + "_lEyeAimC");
	setAttr -e-keyable true ($name + "_lEyeAimC.BtmOpenClose");
	
	addAttr -ln "TopExpress"  -at double  -min -10 -max 10 -dv 0 ($name + "_lEyeAimC");
	setAttr -e-keyable true ($name + "_lEyeAimC.TopExpress");
	addAttr -ln "BtmExpress"  -at double  -min -10 -max 10 -dv 0 ($name + "_lEyeAimC");
	setAttr -e-keyable true ($name + "_lEyeAimC.BtmExpress");
	
	addAttr -ln "LidsFollow"  -at double  -min 0 -max 1 -dv 1 ($name + "_lEyeAimC");
	setAttr -e-keyable true ($name + "_lEyeAimC.LidsFollow");
	
	//RIGHT EYE
	addAttr -ln "TopOpenClose"  -at double  -min -10 -max 10 -dv 0 ($name + "_rEyeAimC");
	setAttr -e-keyable true ($name + "_rEyeAimC.TopOpenClose");
	addAttr -ln "BtmOpenClose"  -at double  -min -10 -max 10 -dv 0 ($name + "_rEyeAimC");
	setAttr -e-keyable true ($name + "_rEyeAimC.BtmOpenClose");
	
	addAttr -ln "TopExpress"  -at double  -min -10 -max 10 -dv 0 ($name + "_rEyeAimC");
	setAttr -e-keyable true ($name + "_rEyeAimC.TopExpress");
	addAttr -ln "BtmExpress"  -at double  -min -10 -max 10 -dv 0 ($name + "_rEyeAimC");
	setAttr -e-keyable true ($name + "_rEyeAimC.BtmExpress");
	
	addAttr -ln "LidsFollow"  -at double  -min 0 -max 1 -dv 1 ($name + "_rEyeAimC");
	setAttr -e-keyable true ($name + "_rEyeAimC.LidsFollow");
	
	//ATTRIBUTE CONNECTIONS
	//LEFT EYE LIDS FOLLOW
	connectAttr -f ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidTopGeoG_aimConstraint1." + $name + "_lEyeAimCW0");
	setAttr ($name + "_lEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_lEyeAimC.LidsFollow") 0;
	setAttr ($name + "_lEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	
	connectAttr -f ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidBtmGeoG_aimConstraint1." + $name + "_lEyeAimCW0");
	setAttr ($name + "_lEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_lEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.LidsFollow") ($name + "_lEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_lEyeAimC.LidsFollow") 1;
	
	//LEFT EYE TOP LID
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopOpenClose") ($name + "_lEyeLidTopGeo.rx");
	setAttr ($name + "_lEyeAimC.TopOpenClose") 10;
	setAttr ($name + "_lEyeLidTopGeo.rx") 75;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopOpenClose") ($name + "_lEyeLidTopGeo.rx");
	setAttr ($name + "_lEyeAimC.TopOpenClose") -10;
	setAttr ($name + "_lEyeLidTopGeo.rx") -75;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopOpenClose") ($name + "_lEyeLidTopGeo.rx");
	setAttr ($name + "_lEyeAimC.TopOpenClose") 0;
	
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopExpress") ($name + "_lEyeLidTopGeo.rz");
	setAttr ($name + "_lEyeAimC.TopExpress") 10;
	setAttr ($name + "_lEyeLidTopGeo.rz") 45;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopExpress") ($name + "_lEyeLidTopGeo.rz");
	setAttr ($name + "_lEyeAimC.TopExpress") -10;
	setAttr ($name + "_lEyeLidTopGeo.rz") -45;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.TopExpress") ($name + "_lEyeLidTopGeo.rz");
	setAttr ($name + "_lEyeAimC.TopExpress") 0;
	
	//LEFT EYE BTM LID
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmOpenClose") ($name + "_lEyeLidBtmGeo.rx");
	setAttr ($name + "_lEyeAimC.BtmOpenClose") 10;
	setAttr ($name + "_lEyeLidBtmGeo.rx") -75;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmOpenClose") ($name + "_lEyeLidBtmGeo.rx");
	setAttr ($name + "_lEyeAimC.BtmOpenClose") -10;
	setAttr ($name + "_lEyeLidBtmGeo.rx") 75;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmOpenClose") ($name + "_lEyeLidBtmGeo.rx");
	setAttr ($name + "_lEyeAimC.BtmOpenClose") 0;
	
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmExpress") ($name + "_lEyeLidBtmGeo.rz");
	setAttr ($name + "_lEyeAimC.BtmExpress") 10;
	setAttr ($name + "_lEyeLidBtmGeo.rz") -45;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmExpress") ($name + "_lEyeLidBtmGeo.rz");
	setAttr ($name + "_lEyeAimC.BtmExpress") -10;
	setAttr ($name + "_lEyeLidBtmGeo.rz") 45;
	setDrivenKeyframe -currentDriver ($name + "_lEyeAimC.BtmExpress") ($name + "_lEyeLidBtmGeo.rz");
	setAttr ($name + "_lEyeAimC.BtmExpress") 0;
	
	
	//RIGHT EYE LIDS FOLLOW
	connectAttr -f ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidTopGeoG_aimConstraint1." + $name + "_rEyeAimCW0");
	setAttr ($name + "_rEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_rEyeAimC.LidsFollow") 0;
	setAttr ($name + "_rEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidTopGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	
	connectAttr -f ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidBtmGeoG_aimConstraint1." + $name + "_rEyeAimCW0");
	setAttr ($name + "_rEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_rEyeAimC.LidsFollow") 0;
	setAttr ($name + "_rEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.LidsFollow") ($name + "_rEyeLidBtmGeoG_aimConstraint1." + $name + "_EyeLidsFollowLctrW1");
	setAttr ($name + "_rEyeAimC.LidsFollow") 1;
	
	//RIGHT EYE TOP LID
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopOpenClose") ($name + "_rEyeLidTopGeo.rx");
	setAttr ($name + "_rEyeAimC.TopOpenClose") 10;
	setAttr ($name + "_rEyeLidTopGeo.rx") 75;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopOpenClose") ($name + "_rEyeLidTopGeo.rx");
	setAttr ($name + "_rEyeAimC.TopOpenClose") -10;
	setAttr ($name + "_rEyeLidTopGeo.rx") -75;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopOpenClose") ($name + "_rEyeLidTopGeo.rx");
	setAttr ($name + "_rEyeAimC.TopOpenClose") 0;
	
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopExpress") ($name + "_rEyeLidTopGeo.rz");
	setAttr ($name + "_rEyeAimC.TopExpress") 10;
	setAttr ($name + "_rEyeLidTopGeo.rz") -45;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopExpress") ($name + "_rEyeLidTopGeo.rz");
	setAttr ($name + "_rEyeAimC.TopExpress") -10;
	setAttr ($name + "_rEyeLidTopGeo.rz") 45;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.TopExpress") ($name + "_rEyeLidTopGeo.rz");
	setAttr ($name + "_rEyeAimC.TopExpress") 0;
	
	//RIGHT EYE BTM LID
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmOpenClose") ($name + "_rEyeLidBtmGeo.rx");
	setAttr ($name + "_rEyeAimC.BtmOpenClose") 10;
	setAttr ($name + "_rEyeLidBtmGeo.rx") -75;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmOpenClose") ($name + "_rEyeLidBtmGeo.rx");
	setAttr ($name + "_rEyeAimC.BtmOpenClose") -10;
	setAttr ($name + "_rEyeLidBtmGeo.rx") 75;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmOpenClose") ($name + "_rEyeLidBtmGeo.rx");
	setAttr ($name + "_rEyeAimC.BtmOpenClose") 0;
	
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmExpress") ($name + "_rEyeLidBtmGeo.rz");
	setAttr ($name + "_rEyeAimC.BtmExpress") 10;
	setAttr ($name + "_rEyeLidBtmGeo.rz") 45;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmExpress") ($name + "_rEyeLidBtmGeo.rz");
	setAttr ($name + "_rEyeAimC.BtmExpress") -10;
	setAttr ($name + "_rEyeLidBtmGeo.rz") -45;
	setDrivenKeyframe -currentDriver ($name + "_rEyeAimC.BtmExpress") ($name + "_rEyeLidBtmGeo.rz");
	setAttr ($name + "_rEyeAimC.BtmExpress") 0;
	
	//SET SDK CURVES TO TANGENT
	selectKey -k ($name + "_rEyeLidBtmGeo_rotateZ") ($name + "_rEyeLidBtmGeo_rotateX") ($name + "_rEyeLidTopGeo_rotateZ")
	($name + "_rEyeLidTopGeo_rotateX") ($name + "_lEyeLidBtmGeo_rotateZ") ($name + "_lEyeLidBtmGeo_rotateX") ($name + "_lEyeLidTopGeo_rotateZ")
	($name + "_lEyeLidTopGeo_rotateX") ;
	keyTangent -itt spline -ott spline;
	
	/////TORSO//////
	$lShoulderLoc = `xform -q -ws -t ($name + "_lShoulderJ")`;
	$rShoulderLoc = `xform -q -ws -t ($name + "_rShoulderJ")`;
	$lHipLoc = `xform -q -ws -t ($name + "_lHipJ")`;
	$rHipLoc = `xform -q -ws -t ($name + "_rHipJ")`;
	
	$shoulderWidth = (($lShoulderLoc[0] - $rShoulderLoc[0])/1);
	$hipWidth = (($lHipLoc[0] - $rHipLoc[0]) /1);
	
	$torsoWidth = (($shoulderWidth - $hipWidth)/2);
	$torsoHeight = (($lShoulderLoc[1] + $rShoulderLoc[1])/2) - (($lHipLoc[1] + $rHipLoc[1])/2);
	
	polyCylinder -n ($name + "_torsoGeo") -h 5 -sy 3 -sz 4 -rcp 1;
	scale -r 1.05 1 1.05 ($name + "_torsoGeo.e[0:59]") ($name + "_torsoGeo.e[140:199]") ;
	scale -r  1 2. 1 ($name + "_torsoGeo.e[80:119]");
	
	duplicate -n ($name + "_RootGeo") ($name + "_torsoGeo");
	scale -r ($hipWidth * 0.7) ($torsoHeight * 0.025) ($torsoWidth * 1.2) ($name + "_RootGeo");
	scale -r 0.98 1 0.98 ($name + "_RootGeoShape.vtx[0:79]") ($name + "_RootGeoShape.vtx[200]");
	scale -r 0.9 1 0.9 ($name + "_RootGeoShape.vtx[0:59]") ($name + "_RootGeoShape.vtx[200]");
	pointConstraint ($name + "_ROOTJ") ($name + "_RootGeo");
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z ($name + "_Spine01J") ($name + "_RootGeo");
	select ($name + "_RootGeoShape.vtx[100:199]") ($name + "_RootGeoShape.vtx[201]") ;
	newCluster " -envelope 1";
	rename ($name + "_RootGeoTopClstr");
	pointConstraint ($name + "_Spine01J") ($name + "_RootGeoTopClstr");
	select ($name + "_RootGeoShape.vtx[0:99]") ($name + "_RootGeoShape.vtx[200]") ;
	newCluster " -envelope 1";
	rename ($name + "_RootGeoBtmClstr");
	scale -r  1 4 1 ($name + "_RootGeoBtmClstr");
	pointConstraint -skip x ($name + "_rHipJ") ($name + "_lHipJ") ($name + "_RootGeoBtmClstr");
	
	select ($name + "_Spine??J");
	$SpineJoints = `ls -sl`;
	$SpineNum = `size $SpineJoints`;
	int $CurrentSpine = 1;
	while ($CurrentSpine < $SpineNum)
	{
		string $CurrentString = $CurrentSpine;
		string $NextString = $CurrentSpine + 1;
		string $SpineJoint;
		string $NextJoint;
		string $SpineGeo;
		if ($CurrentSpine < 10)
		{
			$SpineJoint = $name + "_Spine0" + $CurrentString + "J";
			$NextJoint  = $name + "_Spine0" + $NextString + "J";			
			$SpineGeo   = $name + "_Spine0" + $CurrentString + "Geo";
		}
		else
		{
			$SpineJoint = $name + "_Spine" + $CurrentString + "J";
			$NextJoint  = $name + "_Spine" + $NextString + "J";			
			$SpineGeo   = $name + "_Spine" + $CurrentString + "Geo";
		}
		
		duplicate -n $SpineGeo ($name + "_torsoGeo");
		scale -r ($hipWidth * 0.6) ($torsoHeight * 0.025) ($torsoWidth * 1.) $SpineGeo;
		move -r 0 ($torsoHeight * -0.075) 0 ($SpineGeo + ".scalePivot") ($SpineGeo + ".rotatePivot") ;
		pointConstraint $SpineJoint $SpineGeo;
		aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z $NextJoint $SpineGeo;
		select ($SpineGeo + "Shape.vtx[100:199]") ($SpineGeo + "Shape.vtx[201]") ;
		newCluster " -envelope 1";
		rename ($SpineGeo + "TopClstr");
		pointConstraint $NextJoint ($SpineGeo + "TopClstr");
		
		delete -constraints $SpineGeo;
		delete -ch $SpineGeo;
		makeIdentity -apply true -t 1 -r 1 -s 1 $SpineGeo;
		parent $SpineGeo ($name + "_geoSkinG");
		
		duplicate -n ($SpineGeo + "Scale") $SpineGeo;
		select -r ($SpineGeo + "Scale.vtx[0:201]") ;
		newCluster " -envelope 1";
		rename ($SpineGeo + "ScaleClstr");
		
		blendShape -tc 0 -n ($SpineGeo + "Blend") ($SpineGeo + "Scale") $SpineGeo;
    	
		select $SpineJoint $NextJoint $SpineGeo ;
		newSkinCluster "-n SkinClstr -toSelectedBones -mi 2 -omi true -dr 10 -rui true";
		rename SkinClstr ($SpineJoint + "SkinClstr");
		skinPercent -tv $NextJoint  1    ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[120:199]") ($SpineGeo + ".vtx[201]");
		skinPercent -tv $SpineJoint 0.15 ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[100:119]");
		skinPercent -tv $NextJoint  0.15 ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[80:99]");
		skinPercent -tv $SpineJoint 1    ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[0:79]") ($SpineGeo + ".vtx[200]");
		
		$CurrentSpine = $CurrentSpine + 1;
	}
	
	
	string $CurrentString = $CurrentSpine;
	//string $NextString = $CurrentSpine + 1;
	string $SpineJoint;
	//string $NextJoint;
	string $SpineGeo;
	if ($CurrentSpine < 10)
	{
		$SpineJoint = $name + "_Spine0" + $CurrentString + "J";
		$SpineGeo   = $name + "_Spine0" + $CurrentString + "Geo";
	}
	else
	{
		$SpineJoint = $name + "_Spine" + $CurrentString + "J";
		$SpineGeo   = $name + "_Spine" + $CurrentString + "Geo";
	}
	
	duplicate -n $SpineGeo ($name + "_torsoGeo");
	scale -r ($hipWidth * 0.6) ($torsoHeight * 0.025) ($torsoWidth * 1.) $SpineGeo;
	move -r 0 ($torsoHeight * -0.075) 0 ($name + "_Spine01Geo.scalePivot") ($SpineGeo + ".rotatePivot") ;
	pointConstraint $SpineJoint $SpineGeo;
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z ($name + "_SpineTopJ") $SpineGeo;
	select ($SpineGeo + "Shape.vtx[100:199]") ($SpineGeo + "Shape.vtx[201]") ;
	newCluster " -envelope 1";
	rename ($SpineGeo + "TopClstr");
	pointConstraint ($name + "_SpineTopJ") ($SpineGeo + "TopClstr");

	duplicate -n ($name + "_SpineTopGeo") ($name + "_torsoGeo");
	scale -r ($shoulderWidth * 0.5) ($torsoHeight * 0.025) ($torsoWidth * 1.2) ($name + "_SpineTopGeo");
	move -r 0 ($torsoHeight * -0.08) 0 ($name + "_SpineTopGeo.scalePivot") ($name + "_SpineTopGeo.rotatePivot") ;
	pointConstraint ($name + "_SpineTopJ") ($name + "_SpineTopGeo");
	select ($name + "_SpineTopGeoShape.vtx[100:199]") ($name + "_SpineTopGeoShape.vtx[201]") ;
	newCluster " -envelope 1";
	rename ($name + "_SpineTopGeoTopClstr");
	pointConstraint -skip x -skip z ($name + "_Neck01J") ($name + "_lShoulderJ") ($name + "_rShoulderJ") ($name + "_SpineTopGeoTopClstr");
	setAttr ($name + "_SpineTopGeoTopClstr_pointConstraint1." + $name + "_Neck01JW0") 4;
	$lShoulderHeight = `xform -q -ws -rp ($name + "_lShoulderJ")`;
	$rShoulderHeight = `xform -q -ws -rp ($name + "_rShoulderJ")`;
	$Neck01Height = `xform -q -ws -rp ($name + "_Neck01J")`;
	$Neck01Distance = ($Neck01Height[1] - (($lShoulderHeight[1] + $rShoulderHeight[1])/2));
	scale -r 1 1.5 1 ($name + "_SpineTopGeoTopClstr") ;
	delete ($name + "_SpineTopGeo_pointConstraint1");
	makeIdentity -apply true -s 1 ($name + "_SpineTopGeo");
	pointConstraint -skip x -skip z ($name + "_Neck01J") ($name + "_lShoulderJ") ($name + "_rShoulderJ") ($name + "_SpineTopGeoTopClstr");
	
	delete -constraints ($name + "_RootGeo") $SpineGeo;
	delete -ch ($name + "_RootGeo") $SpineGeo;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_RootGeo") $SpineGeo;
	parent ($name + "_RootGeo") $SpineGeo ($name + "_geoSkinG");
	
	//BLENDSHAPES FOR TORSO
	duplicate -n ($name + "_RootGeoScale") ($name + "_RootGeo");
	select -r ($name + "_RootGeoScale.vtx[0:201]") ;
	newCluster " -envelope 1";
	rename ($name + "_RootGeoScaleClstr");
	
	duplicate -n ($SpineGeo + "Scale") $SpineGeo;
	select -r ($SpineGeo + "Scale.vtx[0:201]") ;
	newCluster " -envelope 1";
	rename ($SpineGeo + "ScaleClstr");
	

	duplicate -n ($name + "_SpineTopGeoScale") ($name + "_SpineTopGeo");
	select -r ($name + "_SpineTopGeoScale.vtx[0:201]") ;
	newCluster " -envelope 1";
	rename ($name + "_SpineTopGeoScaleClstr");
	
	
	$HeadLoc = `xform -q -ws -t ($name + "_HeadJ")`;
	$spineTopLoc = `xform -q -ws -t ($name + "_SpineTopJ")`;
	
	
	$neckWidth = ($shoulderWidth/10);
	$neckHeight = (($HeadLoc[1] - ($lShoulderLoc[1] + $rShoulderLoc[1])/2));
	
	select ($name + "_Neck??J");
	$NeckJoints = `ls -sl`;
	$NeckNum = `size $NeckJoints`;
	int $CurrentNeck = 0;
	while ($CurrentNeck <= $NeckNum)
	{
		string $CurrentString = $CurrentNeck;
		string $NextString = $CurrentNeck + 1;
		string $NeckJoint;
		string $NextJoint;
		string $NeckGeo;
		if ($CurrentNeck < 10)
		{
			$NeckJoint = $name + "_Neck0" + $CurrentString + "J";
			$NextJoint  = $name + "_Neck0" + $NextString + "J";			
			$NeckGeo   = $name + "_Neck0" + $CurrentString + "Geo";
		}
		else
		{
			$NeckJoint = $name + "_Neck" + $CurrentString + "J";
			$NextJoint  = $name + "_Neck" + $NextString + "J";			
			$NeckGeo   = $name + "_Neck" + $CurrentString + "Geo";
		}
		if ($CurrentNeck == 0)
		{
			$NeckJoint = $name + "_SpineTopJ";	
			$NextJoint = $name + "_Neck01J";
			$NeckGeo   = $name + "_NeckBaseGeo";
		}	
		if (!`objExists $NextJoint`)
		{
			$NextJoint = ($name + "_HeadJ");
		}
		
		duplicate -n $NeckGeo ($name + "_torsoGeo");
		scale -r ($neckWidth * 1) ($neckHeight * 0.025) ($neckWidth * 1) $NeckGeo;
		move -r 0 ($neckHeight * -0.075) 0 ($NeckGeo + ".scalePivot") ($NeckGeo + ".rotatePivot") ;
		pointConstraint $NeckJoint $NeckGeo;
		aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y -skip z $NextJoint $NeckGeo;
		select ($NeckGeo + "Shape.vtx[100:199]") ($NeckGeo + "Shape.vtx[201]") ;
		newCluster " -envelope 1";
		rename ($NeckGeo + "TopClstr");
		pointConstraint $NextJoint ($NeckGeo + "TopClstr");
		
		delete -constraints $NeckGeo;
		delete -ch $NeckGeo;
		makeIdentity -apply true -t 1 -r 1 -s 1 $NeckGeo;
		parent $NeckGeo ($name + "_geoSkinG");
		
		duplicate -n ($NeckGeo + "Scale") $NeckGeo;
		select -r ($NeckGeo + "Scale.vtx[0:201]") ;
		newCluster " -envelope 1";
		rename ($NeckGeo + "ScaleClstr");
		
		blendShape -tc 0 -n ($NeckGeo + "Blend") ($NeckGeo + "Scale") $NeckGeo;
    	
		select $NeckJoint $NextJoint $NeckGeo ;
		newSkinCluster "-n SkinClstr -toSelectedBones -mi 2 -omi true -dr 10 -rui true";
		rename SkinClstr ($NeckJoint + "SkinClstr");
		skinPercent -tv $NextJoint  1    ($NeckJoint + "SkinClstr") ($NeckGeo + ".vtx[120:199]") ($NeckGeo + ".vtx[201]");
		skinPercent -tv $NeckJoint 0.15 ($NeckJoint + "SkinClstr") ($NeckGeo + ".vtx[100:119]");
		skinPercent -tv $NextJoint  0.15 ($NeckJoint + "SkinClstr") ($NeckGeo + ".vtx[80:99]");
		skinPercent -tv $NeckJoint 1    ($NeckJoint + "SkinClstr") ($NeckGeo + ".vtx[0:79]") ($NeckGeo + ".vtx[200]");
		
		$CurrentNeck = $CurrentNeck + 1;
	}
	
	setAttr ($name + "_NeckBaseGeoScale.v") 0;
	
	string $CurrentString = $CurrentNeck;
	//string $NextString = $CurrentNeck + 1;
	string $NeckJoint;
	//string $NextJoint;
	string $NeckGeo;
	if ($CurrentNeck < 10)
	{
		$NeckJoint = $name + "_Neck0" + $CurrentString + "J";
		$NeckGeo   = $name + "_Neck0" + $CurrentString + "Geo";
	}
	else
	{
		$NeckJoint = $name + "_Neck" + $CurrentString + "J";
		$NeckGeo   = $name + "_Neck" + $CurrentString + "Geo";
	}

	
	
	
	//CLEAN UP AND ATTACH GEOMETRY
	
	//TORSO
	delete -ch ($name + "_RootGeo")	($name + "_HeadBtmGeo") ($name + "_HeadTopGeo") ($name + "_lEyeGeo") ($name + "_rEyeGeo") ;
	
	delete -constraints ($name + "_RootGeo") ($name + "_HeadBtmGeo") ($name + "_HeadTopGeo") ($name + "_lEyeGeo") ($name + "_rEyeGeo") ;
	
	delete baseCylinderG baseSphereG ($name + "_torsoGeo") ($name + "_RootGeoTopClstr") ($name + "_RootGeoBtmClstr")
	($name + "_Spine??GeoTopClstr") ($name + "_SpineTopGeoTopClstr")
	($name + "_HeadAimLctr") ($name + "_lEyeAimLctr") ($name + "_rEyeAimLctr"); //($name + "_Neck01AimLctr") ;
	
	//BLENDSHAPE CONNECTIONS
	blendShape -tc 0 -n ($name + "_RootGeoBlend") ($name + "_RootGeoScale") ($name + "_RootGeo");
	blendShape -tc 0 -n ($SpineGeo + "Blend") ($SpineGeo + "Scale") $SpineGeo;
	blendShape -tc 0 -n ($name + "_SpineTopGeoBlend") ($name + "_SpineTopGeoScale") ($name + "_SpineTopGeo");
	
	select ($name + "_RootGeo") ($name + "_Spine??Geo") ($name + "_SpineTopGeo") ($name + "_Neck??Geo") ;
	$TorsoGeo = `ls -sl`;
	string $selectedGeo;
	for ($selectedGeo in $TorsoGeo)
	{
		addAttr -ln "Width"  -at double  -min .01 -dv 1 $selectedGeo;
		setAttr -e-keyable true ($selectedGeo + ".Width");
		addAttr -ln "Depth"  -at double  -min .01 -dv 1 $selectedGeo;
		setAttr -e-keyable true ($selectedGeo + ".Depth");
		
		connectAttr -f ($selectedGeo + ".Width") ($selectedGeo + "ScaleClstr.scaleX");
		connectAttr -f ($selectedGeo + ".Depth") ($selectedGeo + "ScaleClstr.scaleZ");
		setAttr ($selectedGeo + "Blend." + $selectedGeo + "Scale") 1;
		
		setAttr ($selectedGeo + "Scale.v") 0;
		setAttr ($selectedGeo + "ScaleClstr.v") 0;
		parent ($selectedGeo + "ScaleClstr") ($name + "_geoSkinG");
	}
	parent ($name + "_SpineTopGeoScale") ($name + "_geoSkinG");
	
	//SKIN CLUSTERS
	select ($name + "_ROOTJ") ($name + "_Spine01J") ($name + "_RootGeo") ;
	newSkinCluster "-n rootSkinClstr -toSelectedBones -mi 2 -omi true -dr 10 -rui true";
	rename rootSkinClstr ($name + "_RootSkinClstr");
	skinPercent -tv ($name + "_Spine01J") 1    ($name + "_RootSkinClstr") ($name + "_RootGeo.vtx[120:199]") ($name + "_RootGeo.vtx[201]");
	skinPercent -tv ($name + "_Spine01J") 0.98 ($name + "_RootSkinClstr") ($name + "_RootGeo.vtx[100:119]");
	skinPercent -tv ($name + "_Spine01J") 0.08 ($name + "_RootSkinClstr") ($name + "_RootGeo.vtx[80:99]");
	
	select $SpineJoint ($name + "_SpineTopJ") $SpineGeo ;
	newSkinCluster "-n SkinClstr -toSelectedBones -mi 2 -omi true -dr 10 -rui true";
	rename SkinClstr ($SpineJoint + "SkinClstr");
	skinPercent -tv ($name + "_SpineTopJ")  1    ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[120:199]") ($SpineGeo + ".vtx[201]");
	skinPercent -tv $SpineJoint             0.15 ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[100:119]");
	skinPercent -tv ($name + "_SpineTopJ")  0.15 ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[80:99]");
	skinPercent -tv $SpineJoint             1    ($SpineJoint + "SkinClstr") ($SpineGeo + ".vtx[0:79]") ($SpineGeo + ".vtx[200]");
	
	//UPPER BODY
	parentConstraint -mo ($name + "_SpineTopJ") ($name + "_SpineTopGeo");
	scaleConstraint -mo ($name + "_SpineTopJ") ($name + "_SpineTopGeo");
	$HeadLoc = `xform -q -ws -rp ($name + "_HeadJ")`;
	move  $HeadLoc[0] $HeadLoc[1] $HeadLoc[2] ($name + "_HeadTopGeo.scalePivot") ($name + "_HeadTopGeo.rotatePivot") ;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_HeadTopGeo");
	parentConstraint -mo ($name + "_HeadJ") ($name + "_HeadTopGeo");
	$JawLoc = `xform -q -ws -rp ($name + "_JawJ")`;
	move  $JawLoc[0] $JawLoc[1] $JawLoc[2] ($name + "_HeadBtmGeo.scalePivot") ($name + "_HeadBtmGeo.rotatePivot") ;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_HeadBtmGeo");
	parentConstraint -mo ($name + "_JawJ") ($name + "_HeadBtmGeo");
	parentConstraint ($name + "_lEyeJ") ($name + "_lEyeGeoG");
	delete ($name + "_lEyeGeoG_parentConstraint1");
	parentConstraint -mo ($name + "_HeadC") ($name + "_lEyeGeoG");
	parentConstraint ($name + "_rEyeJ") ($name + "_rEyeGeoG");
	delete ($name + "_rEyeGeoG_parentConstraint1");
	parentConstraint -mo ($name + "_HeadC") ($name + "_rEyeGeoG");
	orientConstraint ($name + "_lEyeJ") ($name + "_lEyeGeo");
	orientConstraint ($name + "_rEyeJ") ($name + "_rEyeGeo");
	
	//PARENT GEO TO GROUP
	setAttr ($name + "_NeckBaseGeoScaleClstr.v") 0;
	select ($name + "_HeadGeoG") ($name + "_lEyeGeoG") ($name + "_rEyeGeoG") ($name + "_SpineTopGeo") ($name + "_NeckBaseGeoTopClstr") ($name + "_NeckBaseGeoScaleClstr") ($name + "_Neck??GeoTopClstr") ;
	select -add ($name + "_geoSkinG");
	parent;
	
	select -hi ($name + "_geoSkinG");
	pickWalk -d up;
	string $selectedList[] = `ls -sl`;
	string $currentObject;
	for ($currentObject in $selectedList)
	{
		setAttr -l false -k true ($currentObject + ".tx");
		setAttr -l false -k true ($currentObject + ".ty");
		setAttr -l false -k true ($currentObject + ".tz");
		setAttr -l false -k true ($currentObject + ".rx");
		setAttr -l false -k true ($currentObject + ".ry");
		setAttr -l false -k true ($currentObject + ".rz");
		setAttr -l false -k true ($currentObject + ".sx");
		setAttr -l false -k true ($currentObject + ".sy");
		setAttr -l false -k true ($currentObject + ".sz");
		setAttr -l false -k true ($currentObject + ".v");
	}
	
	//LOCK TORSO
	select -r ($name + "_RootGeo") ($name + "_Spine??Geo") ($name + "_SpineTopGeo") ;
	string $selectedList[] = `ls -sl`;
	string $currentObject;
	for ($currentObject in $selectedList)
	{
		setAttr -l 1 -k 0 ($currentObject + ".tx");
		setAttr -l 1 -k 0 ($currentObject + ".ty");
		setAttr -l 1 -k 0 ($currentObject + ".tz");
		setAttr -l 1 -k 0 ($currentObject + ".rx");
		setAttr -l 1 -k 0 ($currentObject + ".ry");
		setAttr -l 1 -k 0 ($currentObject + ".rz");
		setAttr -l 1 -k 0 ($currentObject + ".sx");
		setAttr -l 1 -k 0 ($currentObject + ".sy");
		setAttr -l 1 -k 0 ($currentObject + ".sz");
		setAttr -l 1 -k 0 ($currentObject + ".v");
	}
	
	//HEAD SCALE
	scaleConstraint ($name + "_HeadC") ($name + "_HeadTopGeo");
	parent ($name + "_HeadBtmGeo") ($name + "_earsGeo") ($name + "_HeadTopGeo");
	scaleConstraint ($name + "_HeadC") ($name + "_lEyeGeoG");
	scaleConstraint ($name + "_HeadC") ($name + "_rEyeGeoG");
	
	
	//ADD RADIUS
	select ($name + "_lKneeGeo") ($name + "_rKneeGeo") ($name + "_lHipGeo")
	($name + "_rHipGeo") ($name + "_lAnkleGeo") ($name + "_rAnkleGeo")
	($name + "_lUprLegGeo") ($name + "_lLwrLegGeo") ($name + "_rUprLegGeo")
	($name + "_rLwrLegGeo") ($name + "_lElbowGeo") ($name + "_rElbowGeo")
	($name + "_lShoulderGeo") ($name + "_rShoulderGeo") ($name + "_lLwrArmGeo")
	($name + "_lUprArmGeo") ($name + "_rLwrArmGeo") ($name + "_rUprArmGeo") ;
	$limbGeo = `ls -sl`;
	string $currentGeo;
	
	for ($currentGeo in $limbGeo)
	{
		addAttr -ln "radius"  -at double  -min 0 $currentGeo;
		setAttr -e-keyable true ($currentGeo + ".radius");
		setAttr ($currentGeo + ".radius") 1.5;
	}
	
	//addAttr -ln "radius"  -at double  -min 0 ($name + "_NeckGeo");
	//setAttr -e-keyable true ($name + "_NeckGeo.radius");
	//$GeoInputs = `listHistory ($name + "_NeckGeo")`;
	//$NeckRadius = `getAttr ($GeoInputs[6] + ".radius")`;
	//setAttr ($name + "_NeckGeo.radius") $NeckRadius;
	//$GeoInputs = `listHistory ($name + "_NeckGeo")`;
	//connectAttr -force ($name + "_NeckGeo.radius") ($GeoInputs[6] + ".radius");
	
	//TOON LEGS
	if (`objExists ($name + "_lHipCurveJ")`)
	{
		parent -w ($name + "_lUprLegGeo") ($name + "_lLwrLegGeo") ($name + "_rUprLegGeo") ($name + "_rLwrLegGeo");
		delete ($name + "_lUprLegGeoG") ($name + "_lLwrLegGeoG") ($name + "_rUprLegGeoG") ($name + "_rLwrLegGeoG");
		select ($name + "_lKneeCurveJ") ($name + "_lUpperLegCurveJ1")
		($name + "_lUpperLegCurveJ2") ($name + "_lUpperLegCurveJ3")
		($name + "_lHipCurveJ") ($name + "_lUprLegGeo");
		newSkinCluster "-n lUprLegSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename lUprLegSkinClstr ($name + "_lUprLegSkinClstr");
		select ($name + "_lAnkleJ") ($name + "_lLowerLegCurveJ1")
		($name + "_lLowerLegCurveJ2") ($name + "_lLowerLegCurveJ3")
		($name + "_lKneeCurveJ") ($name + "_lLwrLegGeo");
		newSkinCluster "-n lLwrLegSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename lLwrLegSkinClstr ($name + "_lLwrLegSkinClstr");
		delete ($name + "_lKneeGeoG_parentConstraint1");
		parentConstraint -mo ($name + "_lKneeCurveC") ($name + "_lKneeGeoG");
	
		select ($name + "_rKneeCurveJ") ($name + "_rUpperLegCurveJ1")
		($name + "_rUpperLegCurveJ2") ($name + "_rUpperLegCurveJ3")
		($name + "_rHipCurveJ") ($name + "_rUprLegGeo");
		newSkinCluster "-n  rUprLegSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename rUprLegSkinClstr ($name + "_rUprLegSkinClstr");
		select ($name + "_rAnkleJ") ($name + "_rLowerLegCurveJ1")
		($name + "_rLowerLegCurveJ2") ($name + "_rLowerLegCurveJ3")
		($name + "_rKneeCurveJ") ($name + "_rLwrLegGeo");
		newSkinCluster "-n rLwrLegSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename rLwrLegSkinClstr ($name + "_rLwrLegSkinClstr");
		delete ($name + "_rKneeGeoG_parentConstraint1");
		parentConstraint -mo ($name + "_rKneeCurveC") ($name + "_rKneeGeoG");
	
	
		select ($name + "_lUprLegGeo") ($name + "_lLwrLegGeo") ($name + "_rUprLegGeo") ($name + "_rLwrLegGeo");
		$limbGeo = `ls -sl`;
		string $currentGeo;
		
		$GeoInputs = `listHistory ($name + "_lUprLegGeo")`;
		connectAttr -force ($name + "_lUprLegGeo.radius") ($GeoInputs[9] + ".radius");
		$GeoInputs = `listHistory ($name + "_lLwrLegGeo")`;
		connectAttr -force ($name + "_lLwrLegGeo.radius") ($GeoInputs[9] + ".radius");
		
		$GeoInputs = `listHistory ($name + "_rUprLegGeo")`;
		connectAttr -force ($name + "_rUprLegGeo.radius") ($GeoInputs[10] + ".radius");
		$GeoInputs = `listHistory ($name + "_rLwrLegGeo")`;
		connectAttr -force ($name + "_rLwrLegGeo.radius") ($GeoInputs[10] + ".radius");
		
		parent ($name + "_lUprLegGeo") ($name + "_lLwrLegGeo")
		($name + "_rUprLegGeo") ($name + "_rLwrLegGeo") ($name + "_geoSkinG");
	}
	
	else
	{
		$GeoInputs = `listHistory ($name + "_lUprLegGeo")`;
		connectAttr -force ($name + "_lUprLegGeo.radius") ($GeoInputs[4] + ".radius");
		$GeoInputs = `listHistory ($name + "_lLwrLegGeo")`;
		connectAttr -force ($name + "_lLwrLegGeo.radius") ($GeoInputs[4] + ".radius");
		
		$GeoInputs = `listHistory ($name + "_rUprLegGeo")`;
		connectAttr -force ($name + "_rUprLegGeo.radius") ($GeoInputs[5] + ".radius");
		$GeoInputs = `listHistory ($name + "_rLwrLegGeo")`;
		connectAttr -force ($name + "_rLwrLegGeo.radius") ($GeoInputs[5] + ".radius");
	}
	
	select ($name + "_lKneeGeo") ($name + "_rKneeGeo") ($name + "_lHipGeo")
	($name + "_rHipGeo") ($name + "_lAnkleGeo") ($name + "_rAnkleGeo");
	$limbGeo = `ls -sl`;
	string $currentGeo;
	
	for ($currentGeo in $limbGeo)
	{
		$GeoInputs = `listHistory $currentGeo`;
		connectAttr -force ($currentGeo + ".radius") ($GeoInputs[1] + ".radius");
	}
	
	//TOON ARMS
	if (`objExists ($name + "_lShoulderCurveJ")`)
	{
		parent -w ($name + "_lLwrArmGeo") ($name + "_lUprArmGeo")
		($name + "_rLwrArmGeo") ($name + "_rUprArmGeo") ;
		delete ($name + "_lLwrArmGeoG") ($name + "_lUprArmGeoG")
		($name + "_rLwrArmGeoG") ($name + "_rUprArmGeoG");
		select ($name + "_lElbowCurveJ") ($name + "_lUpperArmCurveJ1")
		($name + "_lUpperArmCurveJ2") ($name + "_lUpperArmCurveJ3")
		($name + "_lShoulderCurveJ") ($name + "_lUprArmGeo");
		newSkinCluster "-n lUprArmGeoSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename lUprArmGeoSkinClstr ($name + "_lUprArmGeoSkinClstr");
		select ($name + "_lWristJ") ($name + "_lLowerArmCurveJ1")
		($name + "_lLowerArmCurveJ2") ($name + "_lLowerArmCurveJ3")
		($name + "_lElbowCurveJ") ($name + "_lLwrArmGeo");
		newSkinCluster "-n lLwrArmGeoSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename lLwrArmGeoSkinClstr ($name + "_lLwrArmGeoSkinClstr");
		delete ($name + "_lElbowGeoG_parentConstraint1");
		parentConstraint -mo ($name + "_lElbowCurveC") ($name + "_lElbowGeoG");
	
		select ($name + "_rElbowCurveJ") ($name + "_rUpperArmCurveJ1")
		($name + "_rUpperArmCurveJ2") ($name + "_rUpperArmCurveJ3")
		($name + "_rShoulderCurveJ") ($name + "_rUprArmGeo");
		newSkinCluster "-n rUprArmGeoSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename rUprArmGeoSkinClstr ($name + "_rUprArmGeoSkinClstr");
		select ($name + "_rWristJ") ($name + "_rLowerArmCurveJ1")
		($name + "_rLowerArmCurveJ2") ($name + "_rLowerArmCurveJ3")
		($name + "_rElbowCurveJ") ($name + "_rLwrArmGeo");
		newSkinCluster "-n rLwrArmGeoSkinClstr -toSelectedBones -ignoreHierarchy -mi 5 -dr 10 -rui true";
		rename rLwrArmGeoSkinClstr ($name + "_rLwrArmGeoSkinClstr");
		delete ($name + "_rElbowGeoG_parentConstraint1");
		parentConstraint -mo ($name + "_rElbowCurveC") ($name + "_rElbowGeoG");
	
		select ($name + "_lLwrArmGeo") ($name + "_lUprArmGeo")
		($name + "_rLwrArmGeo") ($name + "_rUprArmGeo") ;
		$limbGeo = `ls -sl`;
		string $currentGeo;
		
		$GeoInputs = `listHistory ($name + "_lUprArmGeo")`;
		connectAttr -force ($name + "_lUprArmGeo.radius") ($GeoInputs[9] + ".radius");
		$GeoInputs = `listHistory ($name + "_lLwrArmGeo")`;
		connectAttr -force ($name + "_lLwrArmGeo.radius") ($GeoInputs[9] + ".radius");
		
		$GeoInputs = `listHistory ($name + "_rUprArmGeo")`;
		connectAttr -force ($name + "_rUprArmGeo.radius") ($GeoInputs[10] + ".radius");
		$GeoInputs = `listHistory ($name + "_rLwrArmGeo")`;
		connectAttr -force ($name + "_rLwrArmGeo.radius") ($GeoInputs[10] + ".radius");
		
		parent ($name + "_lLwrArmGeo") ($name + "_lUprArmGeo")
		($name + "_rLwrArmGeo") ($name + "_rUprArmGeo") ($name + "_geoSkinG");
	}
	
	else
	{
		$GeoInputs = `listHistory ($name + "_lUprArmGeo")`;
		connectAttr -force ($name + "_lUprArmGeo.radius") ($GeoInputs[4] + ".radius");
		$GeoInputs = `listHistory ($name + "_lLwrArmGeo")`;
		connectAttr -force ($name + "_lLwrArmGeo.radius") ($GeoInputs[4] + ".radius");
		
		$GeoInputs = `listHistory ($name + "_rUprArmGeo")`;
		connectAttr -force ($name + "_rUprArmGeo.radius") ($GeoInputs[5] + ".radius");
		$GeoInputs = `listHistory ($name + "_rLwrArmGeo")`;
		connectAttr -force ($name + "_rLwrArmGeo.radius") ($GeoInputs[5] + ".radius");
	}
	
	
	select ($name + "_lElbowGeo") ($name + "_rElbowGeo") ($name + "_lShoulderGeo") ($name + "_rShoulderGeo");
	$limbGeo = `ls -sl`;
	string $currentGeo;
	
	for ($currentGeo in $limbGeo)
	{
		$GeoInputs = `listHistory $currentGeo`;
		connectAttr -force ($currentGeo + ".radius") ($GeoInputs[1] + ".radius");
	}
	
	//LOCK AND HIDE GEO CHANNELS
	select ($name + "_lKneeGeo") ($name + "_rKneeGeo") ($name + "_lHipGeo")
	($name + "_rHipGeo") ($name + "_lAnkleGeo") ($name + "_rAnkleGeo")
	($name + "_lUprLegGeo") ($name + "_lLwrLegGeo")
	($name + "_rUprLegGeo") ($name + "_rLwrLegGeo") ($name + "_lElbowGeo")
	($name + "_rElbowGeo") ($name + "_lShoulderGeo") ($name + "_rShoulderGeo")
	($name + "_lLwrArmGeo") ($name + "_lUprArmGeo") ($name + "_rLwrArmGeo")
	($name + "_rUprArmGeo") ($name + "_HeadTopGeo") ($name + "_HeadBtmGeo")
	($name + "_earsGeo") ($name + "_Neck??Geo") ($name + "_HeadTopGeo")
	($name + "_HeadBtmGeo") ($name + "_lHeelGeo") ($name + "_lBallGeo")
	($name + "_rHeelGeo") ($name + "_rBallGeo");
	$limbGeo = `ls -sl`;
	string $currentGeo;
	for ($currentGeo in $limbGeo)
	{
		setAttr -l 1 -k 0 ($currentGeo + ".tx");
		setAttr -l 1 -k 0 ($currentGeo + ".ty");
		setAttr -l 1 -k 0 ($currentGeo + ".tz");
		setAttr -l 1 -k 0 ($currentGeo + ".rx");
		setAttr -l 1 -k 0 ($currentGeo + ".ry");
		setAttr -l 1 -k 0 ($currentGeo + ".rz");
		setAttr -l 1 -k 0 ($currentGeo + ".sx");
		setAttr -l 1 -k 0 ($currentGeo + ".sy");
		setAttr -l 1 -k 0 ($currentGeo + ".sz");
		setAttr -l 1 -k 0 ($currentGeo + ".v");
	}
	
	select ($name + "_lHand1Geo") ($name + "_lHand2Geo") ($name + "_rHand1Geo") ($name + "_rHand2Geo");
	$limbGeo = `ls -sl`;
	string $currentGeo;
	for ($currentGeo in $limbGeo)
	{
		setAttr -l 1 -k 0 ($currentGeo + ".tx");
		setAttr -l 1 -k 0 ($currentGeo + ".ty");
		setAttr -l 1 -k 0 ($currentGeo + ".tz");
		setAttr -l 1 -k 0 ($currentGeo + ".rx");
		setAttr -l 1 -k 0 ($currentGeo + ".ry");
		setAttr -l 1 -k 0 ($currentGeo + ".rz");
		setAttr -l 1 -k 0 ($currentGeo + ".sx");
		setAttr -l 1 -k 0 ($currentGeo + ".sz");
		setAttr -l 1 -k 0 ($currentGeo + ".v");
	}
	
	//FINGERS
	select ($name + "_lFinger?J1Geo") ($name + "_lFinger?J2Geo")
	($name + "_lFinger?J3Geo") ($name + "_rFinger?J1Geo")
	($name + "_rFinger?J2Geo") ($name + "_rFinger?J3Geo");
	
	//TOES
	if (`objExists ($name + "_lToe01J1Geo")`)
		{select -add ($name + "_lToe??J1Geo") ($name + "_lToe??J2Geo")
		($name + "_rToe01J1Geo") ($name + "_rToe01J2Geo");}
	if (`objExists ($name + "_lToe02J3Geo")`)
		{select -add ($name + "_rToe??J3Geo");}
	
	
	$limbGeo = `ls -sl`;
	string $currentGeo;
	for ($currentGeo in $limbGeo)
	{
		setAttr -l 1 -k 0 ($currentGeo + ".tx");
		setAttr -l 1 -k 0 ($currentGeo + ".ty");
		setAttr -l 1 -k 0 ($currentGeo + ".tz");
		setAttr -l 1 -k 0 ($currentGeo + ".rx");
		setAttr -l 1 -k 0 ($currentGeo + ".ry");
		setAttr -l 1 -k 0 ($currentGeo + ".rz");
		setAttr -l 1 -k 0 ($currentGeo + ".sx");
		setAttr -l 1 -k 0 ($currentGeo + ".v");	
	}
	
	//EYES
	addAttr -ln "eyeWidth"  -at double  -min 0.1 -dv 1 ($name + "_lEyeGeo");
	setAttr -e-keyable true ($name + "_lEyeGeo.eyeWidth");
	addAttr -ln "eyeHeight"  -at double  -min 0.1 -dv 1 ($name + "_lEyeGeo");
	setAttr -e-keyable true ($name + "_lEyeGeo.eyeHeight");
	addAttr -ln "eyeDepth"  -at double  -min 0.1 -dv 1 ($name + "_lEyeGeo");
	setAttr -e-keyable true ($name + "_lEyeGeo.eyeDepth");
	connectAttr -f ($name + "_lEyeGeo.eyeWidth") ($name + "_lEyeGeoG2.sx");
	connectAttr -f ($name + "_lEyeGeo.eyeHeight") ($name + "_lEyeGeoG2.sy");
	connectAttr -f ($name + "_lEyeGeo.eyeDepth") ($name + "_lEyeGeoG2.sz");
	
	
	addAttr -ln "eyeWidth"  -at double  -min 0.1 -dv 1 ($name + "_rEyeGeo");
	setAttr -e-keyable true ($name + "_rEyeGeo.eyeWidth");
	addAttr -ln "eyeHeight"  -at double  -min 0.1 -dv 1 ($name + "_rEyeGeo");
	setAttr -e-keyable true ($name + "_rEyeGeo.eyeHeight");
	addAttr -ln "eyeDepth"  -at double  -min 0.1 -dv 1 ($name + "_rEyeGeo");
	setAttr -e-keyable true ($name + "_rEyeGeo.eyeDepth");
	connectAttr -f ($name + "_rEyeGeo.eyeWidth") ($name + "_rEyeGeoG2.sx");
	connectAttr -f ($name + "_rEyeGeo.eyeHeight") ($name + "_rEyeGeoG2.sy");
	connectAttr -f ($name + "_rEyeGeo.eyeDepth") ($name + "_rEyeGeoG2.sz");
	
	select ($name + "_lEyeGeo") ($name + "_rEyeGeo") ($name + "_lEyeLidBtmGeo")
	($name + "_lEyeLidTopGeo") ($name + "_rEyeLidBtmGeo") ($name + "_rEyeLidTopGeo");
	$limbGeo = `ls -sl`;
	string $currentGeo;
	for ($currentGeo in $limbGeo)
	{
		setAttr -l 1 -k 0 ($currentGeo + ".tx");
		setAttr -l 1 -k 0 ($currentGeo + ".ty");
		setAttr -l 1 -k 0 ($currentGeo + ".tz");
		setAttr -l 1 -k 0 ($currentGeo + ".rx");
		setAttr -l 1 -k 0 ($currentGeo + ".ry");
		setAttr -l 1 -k 0 ($currentGeo + ".rz");
		setAttr -l 1 -k 0 ($currentGeo + ".sx");
		setAttr -l 1 -k 0 ($currentGeo + ".sy");
		setAttr -l 1 -k 0 ($currentGeo + ".sz");
		setAttr -l 1 -k 0 ($currentGeo + ".v");
	}
	
	//EARS
	$earInputs = `listHistory ($name + "_earsGeo")`;
	
	addAttr -ln "radius"  -at double  -min .001 -dv .1 ($name + "_earsGeo");
	setAttr -e-keyable true ($name + "_earsGeo.radius");
	connectAttr -f ($name + "_earsGeo.radius") ($earInputs[2] + ".radius");
	
	addAttr -ln "width"  -at double  -min .001 -dv .85 ($name + "_earsGeo");
	setAttr -e-keyable true ($name + "_earsGeo.width");
	connectAttr -f ($name + "_earsGeo.width") ($earInputs[2] + ".height");
	
	parent ($name + "_geoSkinG") ($name + "_MainC");
	setAttr ($name + "_scaleGeoG.inheritsTransform") 0;
	setAttr ($name + "_geoSkinG.inheritsTransform") 0;
	
	
	//ADD COLOURS
	shadingNode -n ($name + "_geoColour01") -asShader lambert;
	sets -renderable true -noSurfaceShader true -empty -name ($name + "_geoColour01SG");
	connectAttr -f ($name + "_geoColour01.outColor") ($name + "_geoColour01SG.surfaceShader");
	setAttr ($name + "_geoColour01.color") -type double3 0.84 0.79 0.58 ;
	
	parent -w ($name + "_HeadBtmGeo_parentConstraint1") ($name + "_HeadTopGeo_parentConstraint1") ($name + "_HeadTopGeo_scaleConstraint1") ($name + "_SpineTopGeo_parentConstraint1");
	select ($name + "*Geo");
	select -d ($name + "_lEyeGeo") ($name + "_rEyeGeo");
	
	sets -e -forceElement ($name + "_geoColour01SG");
	
	shadingNode -n ($name + "_geoColour02") -asShader lambert;
	sets -renderable true -noSurfaceShader true -empty -name ($name + "_geoColour02SG");
	connectAttr -f ($name + "_geoColour02.outColor") ($name + "_geoColour02SG.surfaceShader");
	setAttr ($name + "_geoColour02.color") -type double3 .5 0.44 0.3 ;
	
	select -r ($name + "_lElbowGeo") ($name + "_lShoulderGeo") ($name + "_rShoulderGeo")($name + "_rElbowGeo")
	($name + "_lKneeGeo") ($name + "_rKneeGeo") ($name + "_lAnkleGeo") ($name + "_rAnkleGeo") ;
	sets -e -forceElement ($name + "_geoColour02SG");
	
	parent ($name + "_HeadBtmGeo_parentConstraint1") ($name + "_HeadBtmGeo");
	parent ($name + "_HeadTopGeo_parentConstraint1") ($name + "_HeadTopGeo");
	parent ($name + "_HeadTopGeo_scaleConstraint1")   ($name + "_HeadTopGeo");
	parent ($name + "_SpineTopGeo_parentConstraint1") ($name + "_SpineTopGeo");
	
	//*/
	changeLinearUnit $currentUnit;
}

//ASSIGN COLOURS
global proc RRA_AssignColors()
{
	string $name = `textField -q -text RRA_CharName`;
	//LEFT SIDE
	select ($name + "_l*C");
	pickWalk -d down;
	string $leftControls[] = `ls -sl`;
	string $currentControl;
	for ($currentControl in $leftControls)
	{
		setAttr ($currentControl + ".overrideEnabled") 1;
		setAttr ($currentControl + ".overrideColor") 6;
	}
	
	//RIGHT SIDE
	select ($name + "_r*C");
	pickWalk -d down;
	string $rightControls[] = `ls -sl`;
	string $currentControl;
	for ($currentControl in $rightControls)
	{
		setAttr ($currentControl + ".overrideEnabled") 1;
		setAttr ($currentControl + ".overrideColor") 13;
	}
	//MAIN CONTROL
	setAttr ($name + "_MainCShape.overrideEnabled") 1;
	setAttr ($name + "_MainCShape.overrideColor") 14;
	
	setAttr ($name + "_Outer1Shape.overrideEnabled") 1;
	setAttr ($name + "_Outer2Shape.overrideEnabled") 1;
	setAttr ($name + "_Outer3Shape.overrideEnabled") 1;
	setAttr ($name + "_Outer4Shape.overrideEnabled") 1;
	setAttr ($name + "_Arrow1Shape.overrideEnabled") 1;
	setAttr ($name + "_Arrow2Shape.overrideEnabled") 1;
	setAttr ($name + "_Arrow3Shape.overrideEnabled") 1;
	setAttr ($name + "_Arrow4Shape.overrideEnabled") 1;
	
	setAttr ($name + "_Outer1Shape.overrideColor") 14;
	setAttr ($name + "_Outer2Shape.overrideColor") 14;
	setAttr ($name + "_Outer3Shape.overrideColor") 14;
	setAttr ($name + "_Outer4Shape.overrideColor") 14;
	setAttr ($name + "_Arrow1Shape.overrideColor") 14;
	setAttr ($name + "_Arrow2Shape.overrideColor") 14;
	setAttr ($name + "_Arrow3Shape.overrideColor") 14;
	setAttr ($name + "_Arrow4Shape.overrideColor") 14;

	//CENTER CONTROLS
	select ($name + "_ROOTC") ($name + "_MainHipC") ($name + "_Spine??FKC")
	($name + "_SpineTopIKC") ($name + "_SpineMidIKC") ($name + "_NeckMidIKC") ($name + "_Neck??FKC") ($name + "_HeadC")
	($name + "_HeadC") ($name + "_EyeAimC") ($name + "_JawC");
	$centerControls = `ls -sl`;
	string $each;
	for ($each in $centerControls)
	{
		setAttr ($each + "Shape.overrideEnabled") 1;
		setAttr ($each + "Shape.overrideColor") 14;
	}
	

}

global proc int RRA_CheckName(string $validate)
{
	string $nameMatch = `match "^[a-zA-Z][0-9a-zA-Z_]*$" $validate`;
	int $goodMatch = ! `strcmp $nameMatch $validate`;
	
	return $goodMatch;
}

global proc RRA_RigPrompts(string $name)
{
	int $nameSize = `size $name`;

	if ($nameSize == "0")
	{
		string $returnVal_Generate = `confirmDialog
			-title "Character Rig Needs a Name!"
			-message "You must enter a name for the rig in\nStep 2.1: Character Name text field.\n"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK"`;
	}
	
	else if (! RRA_CheckName($name))
	{
		string $returnVal_Generate = `confirmDialog
			-title "The Rig's Name is Invalid!"
			-message "A valid name must begin with a letter.\n    The rest of the name may only contain\nletters, numbers and/or underscores.\n"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK"`;
	}
	else if (`objExists ($name)`)
	{
		string $returnVal_Generate = `confirmDialog
			-title "The Rig's Name is not Unique!"
			-message "A rig already exists with that name.\nYou must create a unique name.\n"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK"`;
	}
	else
	{
		RRA_GenerateRigUI($name);
	}
}

global proc RRA_SplineControls(string $splineType, string $name, string $spline, string $splineStart, string $splineStartC, string $splineStartMasterC, string $splineEnd, string $splineEndC, string $splineEndMasterC, string $topControlAttach, float $splineScale, int $splineProxiesNum, float $topControlSize)
{
	//FK SPINE CONTROLS
	circle -n ($name + $spline + "01FKC") -c 0 0 0 -nr 0 0 1 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	move -r -os -wd 0 0 -2.4 ($name + $spline + "01FKC.cv[1]") ($name + $spline + "01FKC.cv[5]");
	move -r -os -wd 0 0 -2.25  ($name + $spline + "01FKC.cv[0]") ($name + $spline + "01FKC.cv[2]") ($name + $spline + "01FKC.cv[4]") ($name + $spline + "01FKC.cv[6]") ;
	move -r -os -wd 0 0 -1.8 ($name + $spline + "01FKC.cv[3]") ($name + $spline + "01FKC.cv[7]") ;
	delete -ch ($name + $spline + "01FKC");
	group -n ($name + $spline + "01FKCG") ($name + $spline + "01FKC"); xform -os -piv 0 0 0;
	delete `pointConstraint ($name + $spline + "Temp01J") ($name + $spline + "01FKCG")`;
	
	if ($splineType == "isSpine")
	{
		setAttr (($name + $spline + "01FKCG.scale"), ($splineScale*4.5), ($splineScale*1.1), ($splineScale*2.5));
	}
	else
	{
		setAttr (($name + $spline + "01FKCG.scale"), ($splineScale*2.5), ($splineScale*1.1), ($splineScale*2.0));
		scale -r 1 0.4 1  ($name + $spline + "01FKC.cv[1]") ($name + $spline + "01FKC.cv[5]") ;
	}
		
	makeIdentity -apply true -t 0 -s 1 ($name + $spline + "01FKCG");
	
	//SPINE CONTROL ORIENTATION
	spaceLocator -n ($name + $spline + "AlignLctr");
	delete `pointConstraint "RRA_ROOT" ($name + $spline + "AlignLctr")`;
	delete `aimConstraint -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "vector" -worldUpVector 1 0 0
	"RRA_SpineTop" ($name + $spline + "AlignLctr")`;
	
	delete `orientConstraint ($name + $spline + "AlignLctr") ($name + $spline + "01FKCG")`;
	delete ($name + $spline + "AlignLctr");
 
	int $num = 2;
	while ($num < 11)
	{
		string $stringNum = $num;
		if ($num < 10)
		{
			$stringNum = ("0" + $num);
		}
			
		if (`objExists ($name + $spline + "Temp" + $stringNum + "J")`)
		{
			duplicate -rr -n ($name + $spline + "" + $stringNum + "FKCG")  ($name + $spline + "01FKCG");
			delete `pointConstraint ($name + $spline + "Temp" + $stringNum + "J") ($name + $spline + "" + $stringNum + "FKCG")`;
			makeIdentity -apply true -t 1 -s 1 ($name + $spline + "" + $stringNum + "FKCG");
			select ($name + $spline + "" + $stringNum + "FKCG");
			pickWalk -d down;
			rename ($name + $spline + "" + $stringNum + "FKC");
		}
		$num++;
	}

	duplicate -n ($name + $splineEnd + "FKCG") ($name + $spline + "01FKCG");
	parent ($name + $splineEnd + "FKCG") ($name + $splineEnd + "J");
	makeIdentity -apply false -t 1 -s 1 ($name + $splineEnd + "FKCG");
	parent -w ($name + $splineEnd + "FKCG");
	makeIdentity -apply true -t 0 -s 1 ($name + $splineEnd + "FKCG");
	pickWalk -d down;
	rename ($name + $splineEnd + "FKC");
	
	
	//IK SPLINE CONTROLS
	
	//TOP
	curve -n ($name + $splineEndMasterC) -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0
	-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0
	-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0	
	-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9
	-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24;

	pickWalk -d down;
	rename ($name + $splineEndMasterC + "Shape");
	delete -ch ($name + $splineEndMasterC + "Shape");
	
	if ($splineType == "isNeck")
	{
		move -r 0 0 0.95 ($name + $splineEndMasterC + ".cv[12]")  ($name + $splineEndMasterC + ".cv[0]") ($name + $splineEndMasterC + ".cv[24]") ($name + $splineEndMasterC + ".cv[18]") ($name + $splineEndMasterC + ".cv[6]") ;
		move -r 0 0 -0.65 ($name + $splineEndMasterC + ".cv[3]") ($name + $splineEndMasterC + ".cv[9]") ($name + $splineEndMasterC + ".cv[15]") ($name + $splineEndMasterC + ".cv[21]") ;
	}
	
	rotate 90 0 0 ($name + $splineEndMasterC);
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + $splineEndMasterC);
	group -n ($name + $splineEndMasterC + "G") ($name + $splineEndMasterC); xform -os -piv 0 0 0;
	delete `parentConstraint ($name + $topControlAttach) ($name + $splineEndMasterC + "G")`;
	makeIdentity -apply true -t 1 ($name + $splineEndMasterC + "G");
	delete `parentConstraint ($name + $topControlAttach) ($name + $splineEndMasterC + "G")`;
	$HeadJointLoc = `xform -ws -q -rp ($name + $splineEnd + "J")`;
	//$Neck01JointLoc = `xform -ws -q -rp ($name + "_Neck01J")`;
	
	$HeadTipJointLoc = `xform -q -t ($name + $topControlAttach)`;
	setAttr ($name + $splineEndMasterC + ".ty") ($topControlSize/3);
	setAttr (($name + $splineEndMasterC + ".scale"), ($topControlSize/7), ($topControlSize/8), ($topControlSize/7));
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + $splineEndMasterC);
	
	move $HeadJointLoc[0] $HeadJointLoc[1] $HeadJointLoc[2] ($name + $splineEndMasterC + ".scalePivot") ($name + $splineEndMasterC + ".rotatePivot") ;
	move $HeadJointLoc[0] $HeadJointLoc[1] $HeadJointLoc[2] ($name + $splineEndMasterC + "G.scalePivot") ($name + $splineEndMasterC + "G.rotatePivot") ;
	
	group -n ($name + $splineEndMasterC + "G2") ($name + $splineEndMasterC + "G"); xform -os -piv 0 0 0;
	move $HeadJointLoc[0] $HeadJointLoc[1] $HeadJointLoc[2] ($name + $splineEndMasterC + "G2.scalePivot") ($name + $splineEndMasterC + "G2.rotatePivot") ;

	if ($splineType == "isSpine")
	{
		scale -r 1.75 0 1.75 ($name + $splineEndMasterC);
		makeIdentity -apply true -s 1 ($name + $splineEndMasterC);
	}
	
	//MID
	if ($splineType == "isSpine")
	{
		curve -n ($name + $spline + "MidIKC") -d 1 -p 0 0 2.5 -p -1.5 0 1 -p -3.5 0 1 -p -3.5 0 -1 -p 3.5 0 -1 -p 3.5 0 1 -p 1.5 0 1 -p 0 0 2.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;
	}
	else
	{
		curve -n ($name + $spline + "MidIKC") -d 1 -p 0 0 1.5 -p -0.5 0 1 -p -1.0 0 1 -p -1.0 0 -1 -p 1.0 0 -1 -p 1.0 0 1 -p 0.5 0 1 -p 0 0 1.5 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 ;
	}		
	setAttr (($name + $spline + "MidIKC.scale"), ($splineScale*1.25),($splineScale*1.25),($splineScale*1.25));
	makeIdentity -apply true -s 1 ($name + $spline + "MidIKC");

		//duplicate -n ($name + $spline + "MidIKCG");
	pickWalk -d down;
	rename ($name + $spline + "MidIKCShape");
	group -n ($name + $spline + "MidIKCG2") ($name + $spline + "MidIKC") ; xform -os -piv 0 0 0;
	group -n ($name + $spline + "MidIKCG") ($name + $spline + "MidIKCG2"); xform -os -piv 0 0 0;
	
	//CONSTRAIN TO FK CONTROLS
	//NUMBER OF SPINE JOINTS
	select ("RRA" + $spline + "??") ("RRA" + $splineEnd);
	$spineDums = `ls -sl`;
	$spineNum = `size $spineDums`;

	if ($spineNum == 2)
		{parentConstraint ($name + $spline + "01FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 3)
		{parentConstraint ($name + $spline + "01FKC") ($name + $spline + "02FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 4)
		{parentConstraint ($name + $spline + "02FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 5)
		{parentConstraint ($name + $spline + "02FKC") ($name + $spline + "03FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 6)
		{parentConstraint ($name + $spline + "03FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 7)
		{parentConstraint ($name + $spline + "03FKC") ($name + $spline + "04FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 8)
		{parentConstraint ($name + $spline + "04FKC") ($name + $spline + "MidIKCG");}
	if ($spineNum == 9)
		{parentConstraint ($name + $spline + "04FKC") ($name + $spline + "05FKC") ($name + $spline + "MidIKCG");}
		if ($spineNum == 10)
		{parentConstraint ($name + $spline + "05FKC") ($name + $spline + "MidIKCG");}
	
	
	pointConstraint  ($name + $splineEndC) ($name + $splineEndMasterC + "G");
	
	//CREATE LOCATOR FOR ANGLED SPLINE END
	spaceLocator -n ($name + $splineEndMasterC + "_OrientLctr");
	delete `orientConstraint  ($name + $splineEndC) ($name + $splineEndMasterC + "_OrientLctr")`;
	parentConstraint -mo ($name + "_MainC") ($name + $splineEndMasterC + "_OrientLctr");
	orientConstraint ($name + $splineEndMasterC + "_OrientLctr") ($name + $splineEndC) ($name + $splineEndMasterC + "G");
	setAttr ($name + $splineEndMasterC + "_OrientLctr.v") 0;
	parent ($name + $splineEndMasterC + "_OrientLctr")  ($name + "_MainC");
	

	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////RIBBON SPINE////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	//GET SPINE LENGTH
	spaceLocator -n ($name + $spline + "StartLctr");
	spaceLocator -n ($name + $spline + "EndLctr");
	parent  ($name + $spline + "EndLctr") ($name + $spline + "StartLctr");
	pointConstraint ($name + $splineStartC) ($name + $spline + "StartLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none"
	($name + $splineEndMasterC) ($name + $spline + "StartLctr");
	pointConstraint ($name + $splineEndMasterC) ($name + $spline + "EndLctr");
	
	//SPINE START POSITION
	nurbsPlane -n ($name + $spline + "_ribbon") -p 0 0 0 -ax 0 0 1 -w 1 -lr 3 -d 3 -u 1 -v $splineProxiesNum -ch 1;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 2 -kcp 0 -kc 0 -su 1 -du 1 -sv 2 -dv 3 -tol 0.01 -fr 0  -dir 0 ($name + $spline + "_ribbon");
	delete -ch;
	
	//RIBBON BLENDSHAPE
	duplicate -rr -n ($name + $spline + "_ribbonBlend") ($name + $spline + "_ribbon");
	select ($name + $spline + "_ribbonBlend.cv[1][*]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "_ribbonBlend_lCluster");
	move  0 0 0 ($name + $spline + "_ribbonBlend_lCluster.scalePivot") ($name + $spline + "_ribbonBlend_lCluster.rotatePivot") ;
	select ($name + $spline + "_ribbonBlend.cv[0][*]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "_ribbonBlend_rCluster");
	move 0 0 0 ($name + $spline + "_ribbonBlend_rCluster.scalePivot") ($name + $spline + "_ribbonBlend_rCluster.rotatePivot") ;
	
	select ($name + $spline + "_ribbonBlend") ($name + $spline + "_ribbon") ;
	blendShape -n ($name + $spline + "_ribbonBlendShape") -tc 0;
	setAttr ($name + $spline + "_ribbonBlendShape1." + $name + $spline + "_ribbonBlend") 1;
	
	group -n ($name + $spline + "_ribbonBlend_lClusterG") ($name + $spline + "_ribbonBlend_lCluster");xform -os -piv 0 0 0;
	group -n ($name + $spline + "_ribbonBlend_rClusterG") ($name + $spline + "_ribbonBlend_rCluster");xform -os -piv 0 0 0;
	
	//CHECK FOR NUCLEUS
	int $nucleusCheck;
	if (`objExists "nucleus1"`)
	{
		$nucleusCheck = 1;
	}
	
	//HAIR
	select ($name + $spline + "_ribbon");
	createHair 1 $splineProxiesNum 10 0 0 0 0 5 0 2 1 1;
	
	//DELETE NUCLEUS IF IT WAS JUST CREATED
	$hairSystemShape = `ls -sl`;
	$nucleus = `listConnections -type "nucleus"`;
	$nucleusSize = `size $nucleus`;
	if ($nucleusCheck == 0 && $nucleusSize > 0)
	{
		delete $nucleus;
	}
	
	//CLEAN UP HAIR
	select $hairSystemShape;
	pickWalk -d up;
	string $hairSystem[] =`ls -sl`;
	delete $hairSystem[0] ($hairSystem[0] + "OutputCurves");
	select ($hairSystem[0] + "Follicles");
	rename ($hairSystem[0] + "Follicles") ($name + $spline + "_hairSystemFollicles");
	

	select -hi ($name + $spline + "_hairSystemFollicles");
	select -d  ($name + $spline + "_hairSystemFollicles");
	$follicles = `ls -sl`;
	float $folliclesNum = `size $follicles`;
	$folliclesNum = $folliclesNum/3;
	int $hierarchySize = 2;
	select ($name + $spline + "_hairSystemFollicles");
	pickWalk -d down;
	rename ($name + $spline + "01F");
	while ($hierarchySize <= $folliclesNum)
	{
		pickWalk -d right;
		$previous = `ls -sl`;
		if ($hierarchySize < 10)
		{
			string $currentValue = $hierarchySize;
			rename ($name + $spline + "0" + $currentValue + "F");
		}
		else
		{
			string $currentValue = $hierarchySize;
			rename ($name + $spline + "" + $currentValue + "F");
		}
		$hierarchySize = $hierarchySize + 1;
	}
	
	select ($name + $spline + "??F");
	pickWalk -d down;
	pickWalk -d right;
	delete;
	
	select -cl;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//LOCATORS FOR POSITIONS

	//JOINT LOCATIONS
	$startPos = `xform -q -ws -rp ("RRA" + $splineStart)`;
	$EndPos = `xform -q -ws -rp ("RRA" + $splineEnd)`;
	
	select ("RRA" + $spline + "??");
	$splineJoints = `ls -sl -type "transform"`;
	$splineSize = `size $splineJoints`;
	
	
	select -add ("RRA" + $splineEnd);
	
	$splineProxies = `ls -sl`;
	$vertebrae = `size $splineProxies`;
	
	
	//PATHS
	curve -n ($name + $spline + "SplineBtm") -d 1 -p $startPos[0] $startPos[1] $startPos[2] -p $EndPos[0] $EndPos[1] $EndPos[2];
	rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 0 -s ($vertebrae - 2) -d 3 -tol 0 ($name + $spline + "SplineBtm");

	//if ($vertebrae == 2)
	//{delete "test.cv[1]";}

	$i = 1;
	string $each; 
	for ($each in $splineJoints)
	{
		$splinePos = `xform -q -ws -rp $each`;
		move -ws $splinePos[0] $splinePos[1] $splinePos[2] ($name + $spline + "SplineBtm.cv[" + $i + "]");
		$i++;
	}

	
	select ($name + "_SpineSplineBtm");
	pickWalk -d down;
	rename ($name + "_SpineSplineBtmShape");

	float $vertebraeFloat = $vertebrae;
	
	//CUT CURVE IN HALF
	detachCurve -ch 0 -cos on -rpo 1 -n ($name + $spline + "SplineTop") ($name + $spline + "SplineBtm.u[0.5]");
	rename ($name + $spline + "SplineTop1") ($name + $spline + "SplineTop");
	
	rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($name + $spline + "SplineBtm");
	rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 1 -kcp 0 -kep 0 -kt 0 -s 1 -d 3 -tol 0.000328084 ($name + $spline + "SplineTop");
	
	//ATTACH LOCATORS TO PATHS
	$i = 1;
	string $nPad = "0"; 
	string $each;
	for ($each in $splineJoints)
	{
		if ($i >= 10)
		{
			$nPad = "";
		}
		spaceLocator -n ($name + $spline + $nPad + $i + "CurveLctr");
		if ($i <= (($splineSize + 1)/2))
		{
			pathAnimation -n ($name + $spline + $nPad + $i + "Lctr_MP") -fractionMode true -follow false ($name + $spline + $nPad + $i + "CurveLctr") ($name + $spline + "SplineBtm");
			cutKey -cl -t ":" -f ":" -at "u" ($name + $spline + $nPad + $i + "Lctr_MP");
			float $uValue = ((float)$i/(((float)$splineSize + (float)1)/(float)2));
			if ($uValue == 1)
			{
				$uValue = 0.99999;
			}
			setAttr ($name + $spline + $nPad + $i + "Lctr_MP.uValue") $uValue;
		}
		else
		{
			pathAnimation -n ($name + $spline + $nPad + $i + "Lctr_MP") -fractionMode true -follow false ($name + $spline + $nPad + $i + "CurveLctr") ($name + $spline + "SplineTop");
			cutKey -cl -t ":" -f ":" -at "u" ($name + $spline + $nPad + $i + "Lctr_MP");
			float $uValue = (((float)$i - (((float)$splineSize + (float)1)/(float)2))/(((float)$splineSize + (float)1)/(float)2));
			if ($uValue == 1)
			{
				$uValue = 0.99999;
			}
			setAttr ($name + $spline + $nPad + $i + "Lctr_MP.uValue") $uValue;
		}
		$i++;
	}
	
	select ($name + $spline + "??CurveLctr");
	$SplineCurveLctrs = `ls -sl`;
	string $currentLctr;
	for ($currentLctr in $SplineCurveLctrs)
	{
		setAttr ($currentLctr + ".v") 0;
	}
	
	//GET POSITIONS
	$splineStartPos = `xform -q -ws -rp ("RRA" + $splineStart)`;
	$splineEndPos = `xform -q -ws -rp ("RRA" + $splineEnd)`;
	$SpineCenterPos = `xform -q -ws -t ($name + $spline + "SplineTop.cv[0]")`;
	
	//CREATE CLUSTERS SPINE SPLINE
	select ($name + $spline + "SplineBtm.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "SplineBtm_BtmClstr");
	group -n ($name + $spline + "SplineBtm_ClusterG") ($name + $spline + "SplineBtm_BtmClstr");
	xform -os -piv $splineStartPos[0] $splineStartPos[1] $splineStartPos[2];
	parentConstraint -mo ($name + $splineStartMasterC) ($name + $spline + "SplineBtm_ClusterG");
	
	select ($name + $spline + "SplineBtm.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "SplineBtm_TopClstr");

	select ($name + $spline + "SplineTop.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "SplineTop_BtmClstr");
	
	group -n ($name + $spline + "SplineMid_ClusterG") ($name + $spline + "SplineBtm_TopClstr")($name + $spline + "SplineTop_BtmClstr");
	xform -os -piv $SpineCenterPos[0] $SpineCenterPos[1] $SpineCenterPos[2];
	parentConstraint -mo ($name + $spline + "MidIKC") ($name + $spline + "SplineMid_ClusterG");
	
	select ($name + $spline + "SplineTop.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "SplineTop_TopClstr");
	group -n ($name + $spline + "SplineTop_ClusterG") ($name + $spline + "SplineTop_TopClstr");
	xform -os -piv $splineEndPos[0] $splineEndPos[1] $splineEndPos[2];
	parentConstraint -mo ($name + $splineEndMasterC) ($name + $spline + "SplineTop_ClusterG");
	                                        
	setAttr ($name + $spline + "SplineBtm_BtmClstr.v") 0;
	setAttr ($name + $spline + "SplineBtm_TopClstr.v") 0;
	setAttr ($name + $spline + "SplineTop_BtmClstr.v") 0;
	setAttr ($name + $spline + "SplineTop_TopClstr.v") 0;
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//SPINE CURVE CONTROLS AND JOINTS
	if ($splineType == "isSpine")
	{
		curve -d 1 -p -4 0 0 -p 4 0 0 -k 0 -k 1 -n ($name + $spline + "01CurveC");
		pickWalk -d down;
		rename ($name + $spline + "01CurveCShape");
		circle -c 5 0 0 -nr 0 1 0 -ch 0 -n ($name + $spline + "01CurveC2");
		circle -c -5 0 0 -nr 0 1 0 -ch 0 -n ($name + $spline + "01CurveC3");
	}
	else
	{
		curve -d 1 -p -2 0 0 -p 2 0 0 -k 0 -k 1 -n ($name + $spline + "01CurveC");
		pickWalk -d down;
		rename ($name + $spline + "01CurveCShape");
		circle -c 3 0 0 -nr 0 1 0 -ch 0 -n ($name + $spline + "01CurveC2");
		circle -c -3 0 0 -nr 0 1 0 -ch 0 -n ($name + $spline + "01CurveC3");
	}		
	
	parent -r -s ($name + $spline + "01CurveC2Shape") ($name + $spline + "01CurveC3Shape") ($name + $spline + "01CurveC");
	delete ($name + $spline + "01CurveC2") ($name + $spline + "01CurveC3");
	if ($splineType == "isSpine")
	{
		setAttr (($name + $spline + "01CurveC.scale"), ($splineScale*1.25),($splineScale*1.25),($splineScale*1.25));
	}
	else
	{
		setAttr (($name + $spline + "01CurveC.scale"), ($splineScale*0.575),($splineScale*0.575),($splineScale*0.575));
	}
	makeIdentity -apply true -s 1 ($name + $spline + "01CurveC");
	
	//SET COLOUR
	setAttr ($name + $spline + "01CurveCShape.overrideEnabled") 1;
	setAttr ($name + $spline + "01CurveCShape.overrideColor") 27;
	setAttr ($name + $spline + "01CurveC2Shape.overrideEnabled") 1;
	setAttr ($name + $spline + "01CurveC2Shape.overrideColor") 27;
	setAttr ($name + $spline + "01CurveC3Shape.overrideEnabled") 1;
	setAttr ($name + $spline + "01CurveC3Shape.overrideColor") 27;
	
	group -n ($name + $spline + "01CurveCG") ($name + $spline + "01CurveC");
	delete `pointConstraint ("RRA" + $spline + "01") ($name + $spline + "01CurveCG")`;
	pointConstraint -mo ($name + $spline + "01CurveLctr") ($name + $spline + "01CurveCG");
	orientConstraint ($name + $spline + "01F") ($name + $spline + "01CurveCG");

	select -cl;
	joint -n ($name + $spline + "01J");
	parentConstraint ($name + $spline + "01CurveC") ($name + $spline + "01J");

	int $num = 2;
	while ($num < 11)
	{
		string $stringNum = $num;
		if ($num < 10)
		{
			$stringNum = ("0" + $num);
		}

		if (`objExists ($name + $spline + "Temp" + $stringNum + "J")`)
		{
			duplicate -n ($name + $spline + "" + $stringNum + "CurveCG") ($name + $spline + "01CurveCG");
			select ($name + $spline + "" + $stringNum + "CurveCG");
			pickWalk -d down;
			rename ($name + $spline + "" + $stringNum + "CurveC");
			delete `pointConstraint ("RRA" + $spline + $stringNum) ($name + $spline + "" + $stringNum + "CurveCG")`;
			pointConstraint -mo ($name + $spline + "" + $stringNum + "CurveLctr") ($name + $spline + "" + $stringNum + "CurveCG");
			orientConstraint ($name + $spline + "" + $stringNum + "F") ($name + $spline + "" + $stringNum + "CurveCG");
			select -cl;
			joint -n ($name + $spline + "" + $stringNum + "J");
			parentConstraint ($name + $spline + "" + $stringNum + "CurveC") ($name + $spline + "" + $stringNum + "J");
		}
		$num++;
	}

	parentConstraint -mo ($name + $splineEndMasterC) ($name + $splineEnd + "J");

	select ($name + $spline + "??J");
	string $selectedList[] = `ls -sl`;
	string $currentObject;
	for ($currentObject in $selectedList)		
	{
		setAttr ($currentObject + ".tx") 0;
		setAttr ($currentObject + ".ty") 0;
		setAttr ($currentObject + ".tz") 0;
		setAttr ($currentObject + ".radius") 1;
	}
	
	select -cl;
	joint -n ($name + $spline + "TopJIK") -p 0 2 0 ;
	
	select -cl;
	joint -n ($name + $spline + "Btm01JIK") -p 0 -2 0 ;
	
	select -cl;
	joint -n ($name + $spline + "MidJIK") -p 0 0 0 ;
	
	select ($name + $spline + "TopJIK") ($name + $spline + "Btm01JIK") ($name + $spline + "MidJIK");
	string $selectedList[] = `ls -sl`;
	
	string $currentObject;
	
	for ($currentObject in $selectedList)		
	{
		setAttr ($currentObject + ".radius") .5;
	}
	
	select ($name + $spline + "_ribbon") ($name + $spline + "TopJIK") ($name + $spline + "Btm01JIK") ($name + $spline + "MidJIK");
	newSkinCluster "-n ribbonSkinClstr -toSelectedBones -ignoreHierarchy -mi 3 -dr 1 -rui true";
	rename ribbonSkinClstr ($name + $spline + "_ribbonSkinClstr");
	$bindPose = `listConnections -destination 0 -source 1 -t "dagPose" ($name + $spline + "_ribbonSkinClstr")`;
	delete $bindPose;
	
	//GROUP AND SCALE
	group -n ($name + $spline + "_ribbonSpineG") ($name + $spline + "Btm01JIK") ($name + $spline + "MidJIK") ($name + $spline + "TopJIK");
	$spineLength = `xform -q -t ($name + $spline + "EndLctr")`;
	setAttr (($name + $spline + "_ribbonSpineG.scale"), ($spineLength[1] / 4), ($spineLength[1] / 4), ($spineLength[1] / 4));
	delete ($name + $spline + "EndLctr");
	
	//CONNECT TO RIG
	parentConstraint ($name + $splineEndMasterC) ($name + $spline + "TopJIK") ;
	
	parentConstraint ($name + $spline + "MidIKC") ($name + $spline + "MidJIK") ;
	
	parentConstraint ($name + $splineStartMasterC) ($name + $spline + "Btm01JIK") ;
	
	//CREATE CURVE FOR SPINE LENGTH
	$splineStart_Pos = `xform -q -ws -t ($name + $splineStart + "J")`;
	$spineMidJIK_Pos = `xform -q -ws -t ($name + $spline + "MidJIK")`;
	$splineEnd_Pos = `xform -q -ws -t ($name + $spline + "TopJIK")`;
	
	curve -n ($name + $spline + "LengthCX") -d 3
	-p $splineStart_Pos[0] $splineStart_Pos[1] $splineStart_Pos[2]
	-p (( $spineMidJIK_Pos[0] - $splineStart_Pos[0]) /3.4 + $splineStart_Pos[0])
	(( $spineMidJIK_Pos[1] - $splineStart_Pos[1]) /3.4 + $splineStart_Pos[1])
	(( $spineMidJIK_Pos[2] - $splineStart_Pos[2]) /3.4 + $splineStart_Pos[2])
	
	-p (( $spineMidJIK_Pos[0] - $splineStart_Pos[0]) /1.35 + $splineStart_Pos[0])
	(( $spineMidJIK_Pos[1] - $splineStart_Pos[1]) /1.35 + $splineStart_Pos[1])
	(( $spineMidJIK_Pos[2] - $splineStart_Pos[2]) /1.35 + $splineStart_Pos[2])
	
	-p (($splineEnd_Pos[0] - $spineMidJIK_Pos[0]) /3.7 + $spineMidJIK_Pos[0])
	(($splineEnd_Pos[1] - $spineMidJIK_Pos[1]) /3.7 + $spineMidJIK_Pos[1])
	(($splineEnd_Pos[2] - $spineMidJIK_Pos[2]) /3.7 + $spineMidJIK_Pos[2])
	
	-p (($splineEnd_Pos[0] - $spineMidJIK_Pos[0]) /1.4 + $spineMidJIK_Pos[0])
	(($splineEnd_Pos[1] - $spineMidJIK_Pos[1]) /1.4 + $spineMidJIK_Pos[1])
	(($splineEnd_Pos[2] - $spineMidJIK_Pos[2]) /1.4 + $spineMidJIK_Pos[2])
	-p $splineEnd_Pos[0] $splineEnd_Pos[1] $splineEnd_Pos[2]
	-k 0 -k 0 -k 0 -k 1 -k 2 -k 3 -k 3 -k 3;
	//-k 0 -k 0 -k 0 -k 1 -k 2 -k 2 -k 2 ;
	pickWalk -d down;
	rename ($name + $spline + "LengthCXShape");
	select ($name + $spline + "LengthCX");
	arclen -ch 1;
	string $curveInfoNode[] = `listConnections -t curveInfo -d 1 -s 0 ($name + $spline + "LengthCXShape")`;
	rename $curveInfoNode[0] ($name + $spline + "LengthInfo");	
	
	//ATTACH CURVE TO RIG
	select ($name + $spline + "LengthCX.cv[0:1]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "LengthCXlstr01");
	
	select ($name + $spline + "LengthCX.cv[2:3]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "LengthCXlstr02");
	
	select ($name + $spline + "LengthCX.cv[4:5]") ;
	newCluster " -envelope 1";
	rename ($name + $spline + "LengthCXlstr03");
	
	connectAttr -f ($name + "_MainHipC.matrix") ($name + $spline + "LengthCXlstr01Shape.weightedNode");
	setAttr ($name + $spline + "LengthCXlstr01Cluster.relative") 0;
	parent ($name + $spline + "LengthCXlstr01") ($name + $splineStartMasterC);
	setAttr ($name + $spline + "LengthCXlstr01.v") 0;
	
	connectAttr -f ($name + $spline + "MidIKC.matrix") ($name + $spline + "LengthCXlstr02Shape.weightedNode");
	setAttr ($name + $spline + "LengthCXlstr02Cluster.relative") 0;
	parent ($name + $spline + "LengthCXlstr02") ($name + $spline + "MidIKC");
	setAttr ($name + $spline + "LengthCXlstr02.v") 0;
	
	connectAttr -f ($name + $splineEndC + ".matrix") ($name + $spline + "LengthCXlstr03Shape.weightedNode");
	setAttr ($name + $spline + "LengthCXlstr03Cluster.relative") 0;
	parent ($name + $spline + "LengthCXlstr03") ($name + $splineEndMasterC);
	setAttr ($name + $spline + "LengthCXlstr03.v") 0;
	
	//SCALE
	shadingNode -asUtility multiplyDivide -n ($name + $spline + "_HierarchyCompensate_MD");
	setAttr ($name + $spline + "_HierarchyCompensate_MD.operation") 2;
	connectAttr -f ($name + $spline + "LengthInfo.arcLength") ($name + $spline + "_HierarchyCompensate_MD.input1X");
	connectAttr -f ($name + "_MainC.scaleY") ($name + $spline + "_HierarchyCompensate_MD.input2X");
	
	shadingNode -asUtility multiplyDivide -n ($name + $spline + "LengthRatio_MD");
	connectAttr -f ($name + $spline + "_HierarchyCompensate_MD.outputX") ($name + $spline + "LengthRatio_MD.input1X");
	setAttr ($name + $spline + "LengthRatio_MD.operation") 2;
	
	float $SpineLengthValue = `getAttr ($name + $spline + "LengthInfo.arcLength")`;
	setAttr ($name + $spline + "LengthRatio_MD.input2X") $SpineLengthValue;
	
	select ($name + $spline + "??J");
	$spineJ = `ls -sl`;
	string $currentJoint;
	for ($currentJoint in $spineJ)
	{
		connectAttr -f ($name + $spline + "LengthRatio_MD.outputX") ($currentJoint + ".scaleY");
	}
	
	connectAttr -f ($name + $spline + "LengthRatio_MD.outputX") ($name + $spline + "TopJIK.scaleY");
	connectAttr -f ($name + $spline + "LengthRatio_MD.outputX") ($name + $spline + "MidJIK.scaleY");
	connectAttr -f ($name + $spline + "LengthRatio_MD.outputX") ($name + $spline + "Btm01JIK.scaleY");
	
	//INVERSE SCALE
	shadingNode -asUtility multiplyDivide -n ($name + $spline + "LengthRatioInverse_MD");
	connectAttr -f ($name + $spline + "_HierarchyCompensate_MD.outputX") ($name + $spline + "LengthRatioInverse_MD.input2X");
	setAttr ($name + $spline + "LengthRatioInverse_MD.operation") 2;
	
	float $SpineLengthValue = `getAttr ($name + $spline + "LengthInfo.arcLength")`;
	setAttr ($name + $spline + "LengthRatioInverse_MD.input1X") $SpineLengthValue;
	
	shadingNode -asUtility blendColors -n ($name + $spline + "LengthRatioInverse_Blnd");
	setAttr ($name + $spline + "LengthRatioInverse_Blnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + $spline + "LengthRatioInverse_MD.outputX") ($name + $spline + "LengthRatioInverse_Blnd.color1R");

	for ($currentJoint in $spineJ)
	{
		connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($currentJoint + ".scaleX");
		connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($currentJoint + ".scaleZ");
	}
	
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "TopJIK.scaleX");
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "TopJIK.scaleZ");
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "MidJIK.scaleX");
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "MidJIK.scaleZ");
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "Btm01JIK.scaleX");
	connectAttr -f ($name + $spline + "LengthRatioInverse_Blnd.outputR") ($name + $spline + "Btm01JIK.scaleZ");
	
	
	//ADD ATTRIBUTE TO ROOT
	//if (!`objExists ($name + "_SpineTopIKC.SpineAutoVolume")`)
	//{
	//	addAttr -ln "SpineAutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_SpineTopIKC");
	//	setAttr -e-keyable true ($name + "_SpineTopIKC.SpineAutoVolume");
	//	addAttr -ln "SpineCurve"  -at double  -min 0.001 -max 5 -dv 1 ($name + "_SpineTopIKC");
	//	setAttr -e-keyable true ($name + "_SpineTopIKC.SpineCurve");
	//}
	//connectAttr -force ($name + "_ROOTC.SpineAutoVolume") ($name + $spline + "LengthRatioInverse_Blnd.blender");

	////ADD ATTRIBUTE TO SPLINE TOP
	//if (!`objExists ($name + $splineEndMasterC + ".SpineAutoVolume")`)
	//{
	//	addAttr -ln "SpineAutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + $splineEndMasterC);
	//	setAttr -e-keyable true ($name + $splineEndMasterC + ".SpineAutoVolume");
	//	addAttr -ln "SpineCurve"  -at double  -min 0.001 -max 5 -dv 1 ($name + $splineEndMasterC);
	//	setAttr -e-keyable true ($name + $splineEndMasterC + ".SpineCurve");
	//}
	//connectAttr -force ($name + $splineEndMasterC + ".SpineAutoVolume") ($name + $spline + "LengthRatioInverse_Blnd.blender");


	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//
	
	
	//RIBBON SPINE
	
	//CREATE LOCATORS FOR TX
	spaceLocator -n ($name + $spline + "BtmTX_Lctr") -p 0 0 0;
	select -add ($name + $splineStartMasterC);
	parent;
	pointConstraint ($name + $spline + "MidIKC") ($name + $spline + "BtmTX_Lctr");
	
	spaceLocator -n ($name + $spline + "TopTX_Lctr") -p 0 0 0;
	select -add ($name + $splineEndMasterC);
	parent;
	pointConstraint ($name + $spline + "MidIKC") ($name + $spline + "TopTX_Lctr");
	
	//SET DRIVEN KEY
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_lClusterG.scaleY");
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_rClusterG.scaleY");
	setAttr ($name + $spline + "MidIKC.translateX") -4;
	setAttr ($name + $spline + "_ribbonBlend_lClusterG.scaleY") .8;
	setAttr ($name + $spline + "_ribbonBlend_rClusterG.scaleY") 1.2;
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_lClusterG.scaleY");
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_rClusterG.scaleY");
	setAttr ($name + $spline + "MidIKC.translateX") 4;
	setAttr ($name + $spline + "_ribbonBlend_lClusterG.scaleY") 1.2;
	setAttr ($name + $spline + "_ribbonBlend_rClusterG.scaleY") .8;
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_lClusterG.scaleY");
	setDrivenKeyframe -currentDriver ($name + $spline + "MidIKC.translateX") ($name + $spline + "_ribbonBlend_rClusterG.scaleY");
	setAttr ($name + $spline + "MidIKC.translateX") 0;
	setAttr ($name + $spline + "_ribbonBlend_lClusterG.scaleY") 1;
	setAttr ($name + $spline + "_ribbonBlend_rClusterG.scaleY") 1;
	
	selectKey -k ($name + $spline + "_ribbonBlend_lClusterG_scaleY") ($name + $spline + "_ribbonBlend_rClusterG_scaleY") ;
	keyTangent -itt spline -ott spline ;
	
	
	//CONNECT SPINE IK MIDDLE TO TOP AND BOTTOM SPINE IK
	shadingNode -n ($name + $spline + "Mid_Blnd") -asUtility blendColors;
	connectAttr -f ($name + $splineEndMasterC + ".translate") ($name + $spline + "Mid_Blnd.color1");
	if ($splineType == "isSpine")
	{
		connectAttr -f ($name + $splineStartMasterC + ".translate") ($name + $spline + "Mid_Blnd.color2");
	}
	else
	{
		setAttr ($name + $spline + "Mid_Blnd.color2") -type double3 0 0 0 ;
	}
	connectAttr -f ($name + $spline + "Mid_Blnd.output") ($name + $spline + "MidIKCG2.translate");
	
	spaceLocator -n ($name + $spline + "_MidAimLctr");
	spaceLocator -n ($name + $spline + "_MidTargetLctr");
	parent ($name + $spline + "_MidAimLctr") ($name + $spline + "_MidTargetLctr") ($name + "_ROOTC");
	pointConstraint ($name + $splineStartMasterC) ($name + $spline + "_MidAimLctr");
	delete ($name + $spline + "_MidAimLctr_pointConstraint1");
	pointConstraint ($name + $splineEndMasterC) ($name + $spline + "_MidTargetLctr");
	delete ($name + $spline + "_MidTargetLctr_pointConstraint1");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + $spline + "_MidAimLctr") ($name + $spline + "_MidTargetLctr");
	setAttr ($name + $spline + "_MidTargetLctr.v") 0;
	setAttr ($name + $spline + "_MidAimLctr.v") 0;
	
	connectAttr -f ($name + $splineStartMasterC + ".translate") ($name + $spline + "_MidAimLctr.translate");
	if ($splineType == "isSpine")
	{
		connectAttr -f ($name + $splineEndMasterC + ".translate") ($name + $spline + "_MidTargetLctr.translate");
	}
	else
	{
		pointConstraint ($name + $splineEndMasterC) ($name + $spline + "_MidTargetLctr");
	}
		
	
	if ($splineType == "isSpine")
	{
		aimConstraint -mo -weight 1 -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip y ($name + $spline + "_MidTargetLctr") ($name + $spline + "_MidAimLctr");
		connectAttr -f ($name + $spline + "_MidAimLctr.rotateX") ($name + $spline + "MidIKCG2.rotateX");
		connectAttr -f ($name + $spline + "_MidAimLctr.rotateZ") ($name + $spline + "MidIKCG2.rotateZ");
	
		shadingNode -asUtility blendColors -n ($name + $spline + "MidIKCG_Blnd");
		connectAttr -f ($name + $splineEndMasterC + ".rotate") ($name + $spline + "MidIKCG_Blnd.color1");
		connectAttr -f ($name + $splineStartMasterC + ".rotate") ($name + $spline + "MidIKCG_Blnd.color2");
		connectAttr -f ($name + $spline + "MidIKCG_Blnd.outputG") ($name + $spline + "MidIKCG2.rotateY");
	}
	
	//SPINE LENGTH
	addAttr -ln ($spline + "Length")  -at double ($name + $spline + "MidIKC");
	setAttr -e-channelBox true ($name + $spline + "MidIKC." + $spline + "Length");
	addAttr -ln ($spline + "Length")  -at double ($name + $splineStartMasterC);
	setAttr -e-channelBox true ($name + $splineStartMasterC + "." + $spline + "Length");
	addAttr -ln ($spline + "Length")  -at double ($name + $splineEndMasterC);
	setAttr -e-channelBox true ($name + $splineEndMasterC + "." + $spline + "Length");
	
	shadingNode -asUtility multiplyDivide -n ($name + $spline + "Length_MD");
	setAttr ($name + $spline + "Length_MD.operation") 2;
	$spineLength[0] = `getAttr ($name + $spline + "LengthInfo.arcLength")`;
	setAttr ($name + $spline + "Length_MD.input2X") $spineLength[0];
	connectAttr -f ($name + $spline + "LengthInfo.arcLength") ($name + $spline + "Length_MD.input1X");
	
	shadingNode -asUtility multiplyDivide -n ($name + $spline + "LengthCXomp_MD");
	setAttr ($name + $spline + "LengthCXomp_MD.operation") 2;
	connectAttr -force ($name + $spline + "Length_MD.outputX") ($name + $spline + "LengthCXomp_MD.input1X");
	connectAttr -force ($name + "_MainC.scaleY") ($name + $spline + "LengthCXomp_MD.input2X");
	
	connectAttr -f ($name + $spline + "LengthCXomp_MD.outputX") ($name + $spline + "MidIKC." + $spline + "Length");
	connectAttr -f ($name + $spline + "LengthCXomp_MD.outputX") ($name + $splineStartMasterC + "." + $spline + "Length");
	connectAttr -f ($name + $spline + "LengthCXomp_MD.outputX") ($name + $splineEndMasterC + "." + $spline + "Length");
	
	//shadingNode -asUtility blendColors -n ($name + $spline + "Spline_Blnd");
	//connectAttr -f ($name + $spline + "LengthCXomp_MD.outputX") ($name + $spline + "Spline_Blnd.color1R");
	//connectAttr -f ($name + "_ROOTC.SpineCurve") ($name + $spline + "Spline_Blnd.color2R");
	//
	//connectAttr -f ($name + $spline + "Spline_Blnd.outputR") ($name + $spline + "SplineBtm_ClusterG.sy");
	//connectAttr -f ($name + $spline + "Spline_Blnd.outputR") ($name + $spline + "SplineMid_ClusterG.sy");
	//connectAttr -f ($name + $spline + "Spline_Blnd.outputR") ($name + $spline + "SplineTop_ClusterG.sy");

	if (!`objExists ($name + "_ExtraNodes")`)
	{
		group -em -n ($name + "_ExtraNodes"); xform -os -piv 0 0 0;
		setAttr ($name + "_ExtraNodes.inheritsTransform") 0;
	}
		
	parent ($name + $spline + "LengthCX") ($name + $spline + "_hairSystemFollicles") ($name + $spline + "_ribbon") ($name + $spline + "_ribbonBlend") 
	($name + $spline + "_ribbonBlend_lClusterG") ($name + $spline + "_ribbonBlend_rClusterG") $SplineCurveLctrs
	($name + "_ExtraNodes");
	
	//HIDE
	setAttr ($name + $spline + "_ribbon.v") 0;
	setAttr ($name + $spline + "_ribbonBlend.v") 0;
	setAttr ($name + $spline + "_ribbonBlend_rCluster.v") 0;
	setAttr ($name + $spline + "_ribbonBlend_lCluster.v") 0;
	
		setAttr ($name + $spline + "BtmTX_Lctr.v") 0;
		setAttr ($name + $spline + "TopTX_Lctr.v") 0;
		setAttr ($name + $spline + "Btm01JIK.v") 0;
		setAttr ($name + $spline + "MidJIK.v") 0;
		setAttr ($name + $spline + "TopJIK.v") 0;
		setAttr ($name + $spline + "LengthCX.template") 1;
		setAttr ($name + $spline + "SplineTop.v") 0;
		setAttr ($name + $spline + "SplineBtm.v") 0;
		
		select ($name + $spline + "??F");
		$spineF = `ls -sl`;
		string $currentF;
		for ($currentF in $spineF)
		{setAttr ($currentF + ".v") 0;}
		//*/
}


global proc RRA_GenerateRig(string $name)
{
	int $nameSize = `size $name`;
	
	print ("\nBUILDING \"" + $name + "\" RIG...\n");

	string $currentUnit = `currentUnit -query -linear`;
	if ($currentUnit != "cm")
	{
		changeLinearUnit "centimeter";
	}
	
	
	select "RRA_Spine??";
	$allSpineProxies = `ls -sl`;
	int $allSpineProxiesNum = size (`ls -sl`);
	
	select "RRA_Neck??";
	$allNeckProxies = `ls -sl`;
	int $allNeckProxiesNum = size (`ls -sl`);
	
	//TURN OFF REFLECTION!
	symmetricModelling -e -symmetry 0;
	
	
	
	//CREATE LOCATORS FOR FOOT TILTS
	spaceLocator -n ($name + "_lFootInTilt");
	spaceLocator -n ($name + "_lFootOutTilt");
	spaceLocator -n ($name + "_lFootHeelPivot");
	spaceLocator -n ($name + "_rFootInTilt");
	spaceLocator -n ($name + "_rFootOutTilt");
	spaceLocator -n ($name + "_rFootHeelPivot");
	
	delete `parentConstraint RRA_lFootInTilt ($name + "_lFootInTilt")`;
	delete `parentConstraint RRA_lFootOutTilt ($name + "_lFootOutTilt")`;
	delete `parentConstraint RRA_lFootHeelPivot ($name + "_lFootHeelPivot")`;
	delete `parentConstraint RRA_rFootInTilt ($name + "_rFootInTilt")`;
	delete `parentConstraint RRA_rFootOutTilt ($name + "_rFootOutTilt")`;
	delete `parentConstraint RRA_rFootHeelPivot ($name + "_rFootHeelPivot")`;

	
	
	////////////////CREATE JOINTS////////////////////////////////////////////
	select -cl;
	joint -n ($name + "_ROOTJ");
	delete `pointConstraint RRA_ROOT ($name + "_ROOTJ")`;
	
	select ($name + "_ROOTJ");
	joint -n ($name + "_SpineTemp01J");
	delete `pointConstraint RRA_Spine01 ($name + "_SpineTemp01J")`;
	
	select "RRA_Spine0?";
	$spineJoints = `ls -sl`;
	$spineNum = `size $spineJoints`;
	string $each;
	$i = 2;
	int $pre;
	while ($i <= $spineNum)
	{
		$pre = ($i - 1);
		select ($name + "_SpineTemp0" + $pre + "J");
		joint -n ($name + "_SpineTemp0" + $i + "J");
		delete `pointConstraint ("RRA_Spine0" + $i) ($name + "_SpineTemp0" + $i + "J")`;
		select ($name + "_SpineTemp0" + $i + "J");
		$i++;
	}
	select ($name + "_SpineTemp0" + ($i - 1) + "J");
	joint -n ($name + "_SpineTopJ");
	pointConstraint RRA_SpineTop ($name + "_SpineTopJ");

	//NECK
	select ($name + "_SpineTopJ");
	
	joint -n ($name + "_NeckTemp01J");
	delete `pointConstraint RRA_Neck01 ($name + "_NeckTemp01J")`;

	select "RRA_Neck0?";
	$neckJoints = `ls -sl`;
	$neckNum = `size $neckJoints`;
	string $each;
	$i = 2;
	while ($i <= $neckNum)
	{
		$pre = ($i - 1);
		select ($name + "_NeckTemp0" + $pre + "J");
		joint -n ($name + "_NeckTemp0" + $i + "J");
		delete `pointConstraint ("RRA_Neck0" + $i) ($name + "_NeckTemp0" + $i + "J")`;
		select ($name + "_NeckTemp0" + $i + "J");
		$i++;
	}
	select ($name + "_NeckTemp0" + ($i - 1) + "J");
	$neckTop = ($name + "_NeckTemp0" + ($i - 1) + "J");
	
	joint -n ($name + "_HeadJ");
	delete `parentConstraint RRA_Head ($name + "_HeadJ")`;
	
	select ($name + "_HeadJ");
	joint -n ($name + "_HeadTipJ");
	pointConstraint RRA_HeadTip ($name + "_HeadTipJ");
	
	select ($name + "_HeadJ");
	joint -n ($name + "_JawJ");
	pointConstraint RRA_Jaw ($name + "_JawJ");
	
	select ($name + "_JawJ");
	joint -n ($name + "_JawTipJ");
	pointConstraint RRA_JawTip ($name + "_JawTipJ");
	
	select ($name + "_HeadJ");
	joint -n ($name + "_lEyeJ");
	setAttr ($name + "_lEyeJ.segmentScaleCompensate") 0;
	pointConstraint RRA_lEye ($name + "_lEyeJ");
	
	select ($name + "_HeadJ");
	joint -n ($name + "_rEyeJ");
	setAttr ($name + "_rEyeJ.segmentScaleCompensate") 0;
	pointConstraint RRA_rEye ($name + "_rEyeJ");
	
	//////////////////////LEFT ARM//////////////////////
	select ($name + "_SpineTopJ");
	joint -n ($name + "_lClavicleJ");
	delete `parentConstraint RRA_lClavicle ($name + "_lClavicleJ")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_lClavicle
	RRA_lShoulder ($name + "_lClavicleJ")`;
	
	makeIdentity -apply true -r 1 ($name + "_lClavicleJ");
	
	select ($name + "_lClavicleJ");
	joint -n ($name + "_lShoulderJ");
	delete `parentConstraint RRA_lShoulder ($name + "_lShoulderJ")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_lShoulder
	RRA_lElbow ($name + "_lShoulderJ")`;
	makeIdentity -apply true -r 1 ($name + "_lShoulderJ");
	
	select ($name + "_lShoulderJ");
	joint -n ($name + "_lElbowJ");
	delete `parentConstraint RRA_lElbow ($name + "_lElbowJ")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_lElbow
	RRA_lWrist ($name + "_lElbowJ")`;
	makeIdentity -apply true -r 1 ($name + "_lElbowJ");	
	select ($name + "_lElbowJ");
	joint -n ($name + "_lWristJ");
	delete `parentConstraint RRA_lWrist ($name + "_lWristJ")`;
	
	select ($name + "_lElbowJ");
	joint -n ($name + "_lWristJProxy");
	delete `parentConstraint RRA_lWrist ($name + "_lWristJProxy")`;
	makeIdentity -apply true -r 1 ($name + "_lWristJ")  ($name + "_lWristJProxy");
	
	//LEFT THUMB
	if (`objExists RRA_lThumbJ1`)
	{
		select -cl;
		joint -n ($name + "_lThumbJ1");
		delete `parentConstraint RRA_lThumbJ1 ($name + "_lThumbJ1")`;
		
		select ($name + "_lThumbJ1");
		joint -n ($name + "_lThumbJ2");
		delete `parentConstraint RRA_lThumbJ2 ($name + "_lThumbJ2")`;
		
		select ($name + "_lThumbJ2");
		joint -n ($name + "_lThumbJ3");
		delete `parentConstraint RRA_lThumbJ3 ($name + "_lThumbJ3")`;
		
		select ($name + "_lThumbJ3");
		joint -n ($name + "_lThumbJTip");
		delete `parentConstraint RRA_lThumbJTip ($name + "_lThumbJTip")`;
		parent ($name + "_lThumbJ1") ($name + "_lWristJ");
	}
	//LEFT FINGERS
	select "RRA_lFinger?J1";
	$lFingerJoints = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $lFingerJoints)
	{
		select -cl;
		joint -n ($name + "_lFinger" + $i + "J1");
		parentConstraint ("RRA_lFinger" + $i + "J1") ($name + "_lFinger" + $i + "J1");
		
		select ($name + "_lFinger" + $i + "J1");
		joint -n ($name + "_lFinger" + $i + "J2");
		parentConstraint ("RRA_lFinger" + $i + "J2") ($name + "_lFinger" + $i + "J2");
		
		select ($name + "_lFinger" + $i + "J2");
		joint -n ($name + "_lFinger" + $i + "J3");
		parentConstraint ("RRA_lFinger" + $i + "J3") ($name + "_lFinger" + $i + "J3");
		
		select ($name + "_lFinger" + $i + "J3");
		joint -n ($name + "_lFinger" + $i + "JTip");
		parentConstraint ("RRA_lFinger" + $i + "JTip") ($name + "_lFinger" + $i + "JTip");
		parent ($name + "_lFinger" + $i + "J1") ($name + "_lWristJ");
		$i++;
	}
	
	//LEFT HAND JOINT
	select ($name + "_lWristJ");
	joint -n ($name + "_lPalmJ");
	delete `parentConstraint RRA_lPalm ($name + "_lPalmJ")`;
	select ($name + "_lFinger1J1");
	if (`objExists ($name + "_lFinger2J1")`)
		{select -add ($name + "_lFinger2J1");}
	if (`objExists ($name + "_lFinger3J1")`)
		{select -add ($name + "_lFinger3J1");}
	if (`objExists ($name + "_lFinger4J1")`)
		{select -add ($name + "_lFinger4J1");}
	if (`objExists ($name + "_lFinger5J1")`)
		{select -add ($name + "_lFinger5J1");}
	if (`objExists ($name + "_lFinger6J1")`)
		{select -add ($name + "_lFinger6J1");}
	if (`objExists ($name + "_lFinger7J1")`)
		{select -add ($name + "_lFinger7J1");}
	if (`objExists ($name + "_lFinger8J1")`)
		{select -add ($name + "_lFinger8J1");}
	if (`objExists ($name + "_lFinger9J1")`)
		{select -add ($name + "_lFinger9J1");}
	$lFirstFingers = `ls -sl`;
	parent $lFirstFingers ($name + "_lPalmJ");
	select -hi $lFirstFingers;
	$lFingerJoints = `ls -sl`;
	delete -constraints $lFingerJoints;
	makeIdentity -apply true -r 1 ($name + "_lPalmJ");
	
	//LEFT FOREARM JOINT
	select -cl;
	joint -n ($name + "_lForearmJ");
	pointConstraint ($name + "_lWristJ") ($name + "_lElbowJ") ($name + "_lForearmJ");
	delete ($name + "_lForearmJ_pointConstraint1") ;
	parent ($name + "_lForearmJ") ($name + "_lElbowJ");
	
	//////////////////////RIGHT ARM//////////////////////
	select ($name + "_SpineTopJ");
	joint -n ($name + "_rClavicleJ");
	delete `parentConstraint RRA_rClavicle ($name + "_rClavicleJ")`;
	delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_rClavicle
	RRA_rShoulder ($name + "_rClavicleJ")`;

	makeIdentity -apply true -r 1 ($name + "_rClavicleJ");

	select ($name + "_rClavicleJ");
	joint -n ($name + "_rShoulderJ");
	parentConstraint RRA_rShoulder ($name + "_rShoulderJ");
	delete `parentConstraint RRA_rShoulder ($name + "_rShoulderJ")`;
	delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_rShoulder
	RRA_rElbow ($name + "_rShoulderJ")`;
	makeIdentity -apply true -r 1 ($name + "_rShoulderJ");
	
	select ($name + "_rShoulderJ");
	joint -n ($name + "_rElbowJ");
	delete `parentConstraint RRA_rElbow ($name + "_rElbowJ")`;
	delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject RRA_rElbow
	RRA_rWrist ($name + "_rElbowJ")`;
	makeIdentity -apply true -r 1 ($name + "_rElbowJ");
	
	select ($name + "_rElbowJ");
	joint -n ($name + "_rWristJ");
	delete `parentConstraint RRA_rWrist ($name + "_rWristJ")`;
		
	select ($name + "_rElbowJ");
	joint -n ($name + "_rWristJProxy");
	delete `parentConstraint RRA_rWrist ($name + "_rWristJProxy")`;

	rotate -r -os 180 0 0 ($name + "_rWristJ") ($name + "_rWristJProxy");
	makeIdentity -apply true -r 1 ($name + "_rWristJ")  ($name + "_rWristJProxy");
	
	//RIGHT THUMB
	if (`objExists RRA_rThumbJ1`)
	{
		select -cl;
		joint -n ($name + "_rThumbJ1");
		delete `parentConstraint RRA_rThumbJ1 ($name + "_rThumbJ1")`;
		
		select ($name + "_rThumbJ1");
		joint -n ($name + "_rThumbJ2");
		delete `parentConstraint RRA_rThumbJ2 ($name + "_rThumbJ2")`;
		
		select ($name + "_rThumbJ2");
		joint -n ($name + "_rThumbJ3");
		delete `parentConstraint RRA_rThumbJ3 ($name + "_rThumbJ3")`;
		
		select ($name + "_rThumbJ3");
		joint -n ($name + "_rThumbJTip");
		delete `parentConstraint RRA_rThumbJTip ($name + "_rThumbJTip")`;
		parent ($name + "_rThumbJ1") ($name + "_rWristJ");
	}
	
	//RIGHT FINGERS
	select "RRA_rFinger?J1";
	$rFingerJoints = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $rFingerJoints)
	{
		select -cl;
		joint -n ($name + "_rFinger" + $i + "J1");
		parentConstraint ("RRA_rFinger" + $i + "J1") ($name + "_rFinger" + $i + "J1");
		
		select ($name + "_rFinger" + $i + "J1");
		joint -n ($name + "_rFinger" + $i + "J2");
		parentConstraint ("RRA_rFinger" + $i + "J2") ($name + "_rFinger" + $i + "J2");
		
		select ($name + "_rFinger" + $i + "J2");
		joint -n ($name + "_rFinger" + $i + "J3");
		parentConstraint ("RRA_rFinger" + $i + "J3") ($name + "_rFinger" + $i + "J3");
		
		select ($name + "_rFinger" + $i + "J3");
		joint -n ($name + "_rFinger" + $i + "JTip");
		parentConstraint ("RRA_rFinger" + $i + "JTip") ($name + "_rFinger" + $i + "JTip");
		parent ($name + "_rFinger" + $i + "J1") ($name + "_rWristJ");
		$i++;
	}
	
	//RIGHT HAND JOINT
	select ($name + "_rWristJ");
	joint -n ($name + "_rPalmJ");
	delete `parentConstraint RRA_rPalm ($name + "_rPalmJ")`;
	select ($name + "_rFinger1J1");
	if (`objExists ($name + "_rFinger2J1")`)
		{select -add ($name + "_rFinger2J1");}
	if (`objExists ($name + "_rFinger3J1")`)
		{select -add ($name + "_rFinger3J1");}
	if (`objExists ($name + "_rFinger4J1")`)
		{select -add ($name + "_rFinger4J1");}
	if (`objExists ($name + "_rFinger5J1")`)
		{select -add ($name + "_rFinger5J1");}
	if (`objExists ($name + "_rFinger6J1")`)
		{select -add ($name + "_rFinger6J1");}
	if (`objExists ($name + "_rFinger7J1")`)
		{select -add ($name + "_rFinger7J1");}
	if (`objExists ($name + "_rFinger8J1")`)
		{select -add ($name + "_rFinger8J1");}
	if (`objExists ($name + "_rFinger9J1")`)
		{select -add ($name + "_rFinger9J1");}
	$lFirstFingers = `ls -sl`;
	parent $lFirstFingers ($name + "_rPalmJ");
	select -hi $lFirstFingers;
	$lFingerJoints = `ls -sl`;
	delete -constraints $lFingerJoints;
	makeIdentity -apply true -r 1 ($name + "_rPalmJ");
	
	//RIGHT FOREARM JOINT
	select -cl;
	joint -n ($name + "_rForearmJ");
	delete `pointConstraint ($name + "_rWristJ") ($name + "_rElbowJ") ($name + "_rForearmJ")`;
	parent ($name + "_rForearmJ") ($name + "_rElbowJ");
	
	///////////////////////////LEFT LEG/////////////////////////
	select ($name + "_ROOTJ");
	joint -n ($name + "_lHipJ");
	delete `pointConstraint RRA_lHip ($name + "_lHipJ")`;
	
	select ($name + "_lHipJ");
	joint -n ($name + "_lKneeJ");
	delete `pointConstraint RRA_lKnee ($name + "_lKneeJ")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 0 1 -worldUpObject RRA_lKnee
	RRA_lAnkle ($name + "_lKneeJ")`;
	makeIdentity -apply true -r 1 ($name + "_lKneeJ");	
	
	select ($name + "_lKneeJ");
	joint -n ($name + "_lAnkleJ");
	delete `pointConstraint RRA_lAnkle ($name + "_lAnkleJ")`;
	
	select -cl;
	joint -n ($name + "_lBallJ");
	select -add ($name + "_lAnkleJ");
	parent;
	delete `pointConstraint RRA_lBall ($name + "_lBallJ")`;
	
	select ($name + "_lBallJ");
	joint -n ($name + "_lToeJ");
	delete `pointConstraint RRA_lToe ($name + "_lToeJ")`;
	
	///////////////////////////RIGHT LEG/////////////////////////
	select ($name + "_ROOTJ");
	joint -n ($name + "_rHipJ");
	delete `pointConstraint RRA_rHip ($name + "_rHipJ")`;
	
	select ($name + "_rHipJ");
	joint -n ($name + "_rKneeJ");
	delete `pointConstraint RRA_rKnee ($name + "_rKneeJ")`;
	delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 0 1 -worldUpObject RRA_rKnee
	RRA_rAnkle ($name + "_rKneeJ")`;
	makeIdentity -apply true -r 1 ($name + "_rKneeJ");
	
	select ($name + "_rKneeJ");
	joint -n ($name + "_rAnkleJ");
	delete `pointConstraint RRA_rAnkle ($name + "_rAnkleJ")`;
	
	select -cl;
	joint -n ($name + "_rBallJ");
	select -add ($name + "_rAnkleJ");
	parent;
	delete `pointConstraint RRA_rBall ($name + "_rBallJ")`;
	
	select ($name + "_rBallJ");
	joint -n ($name + "_rToeJ");
	delete `pointConstraint RRA_rToe ($name + "_rToeJ")`;
	
	
	//GET ATTRIBUTES OF WRIST ROTATIONS
	$lWristRotation = `xform -q -ro RRA_lWrist`;
	$rWristRotation = `xform -q -ro RRA_rWrist`;
	
	//DELETE ALL CONSTRAINTS
	select ($name + "_ROOTJ");
	select -hi;
	$allJoints = `ls -sl`;
	delete -constraints $allJoints;
	
	parent -w ($name + "_lWristJ") ($name + "_rWristJ");
	makeIdentity -apply true -t 1 -r 1 -s 1; 
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_HeadJ");
	
	
	/////////ORIENT JOINTS////////////
	//select ($name + "_ROOTJ");
	//joint -e -oj xyz -secondaryAxisOrient yup -ch -zso;
	joint -e -oj none -secondaryAxisOrient yup -zso ($name + "_ROOTJ");
	
	//CENTER JOINTS
	select ($name + "_SpineTemp0*J") ($name + "_SpineTopJ") ($name + "_NeckTemp0*") ($name + "_HeadJ");
	joint -e -oj xyz -secondaryAxisOrient zdown -zso;

	//HANDS
	select ($name + "_lPalmJ") ($name + "_rPalmJ");
	joint -e -oj none -secondaryAxisOrient yup -zso;
	
	//THUMBS
	if (`objExists ($name + "_lThumbJ1")`)
	{
		rotate -r -os 0 90 0 ($name + "_lThumbJ1.rotateAxis") ($name + "_lThumbJ2.rotateAxis") ($name + "_lThumbJ3.rotateAxis")
		($name + "_rThumbJ1.rotateAxis") ($name + "_rThumbJ2.rotateAxis") ($name + "_rThumbJ3.rotateAxis");
	}

	//SPINE
	select ($name + "_SpineTopJ") ($name + "_lForearmJ") ($name + "_rForearmJ") ($name + "_lAnkleJ") ($name + "_rAnkleJ") $neckTop;
	joint -e -oj none -secondaryAxisOrient yup -zso;
	
	//HIPS
	select ($name + "_lHipJ") ($name + "_rHipJ") /*($name + "_lKneeJ") ($name + "_rKneeJ")*/;
	joint -e -oj xyz -secondaryAxisOrient zup -zso;
	joint -e -oj xyz -secondaryAxisOrient zup -zso;
	
	//spaceLocator -n ($name + "_lLegOrientLctr");
	//delete `parentConstraint RRA_lKnee ($name + "_lLegOrientLctr")`;
	$lKneeLength = `xform -q -t ($name + "_lKneeJ")`;
	$lAnkleLength = `xform -q -t ($name + "_lAnkleJ")`;
	//$lLegLength[0] = (($lKneeLength[0] + $lAnkleLength[0]) /-3.5);
	//move -r -os 0 0 ($lLegLength[0] * -2) ($name + "_lLegOrientLctr");
	//
	//aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType"scene"
	//-skip y -skip z ($name + "_lLegOrientLctr") ($name + "_lHipJ");
	//delete ($name + "_lHipJ_aimConstraint1");
	//$lHipRotate = `getAttr ($name + "_lHipJ.rotateX")`;
	//setAttr ($name + "_lHipJ.rotateX") 0;
	//
	//aimConstraint -aimVector 0 1 0 -upVector 0 0 1 -worldUpType "none"
	//-skip y -skip z ($name + "_lLegOrientLctr") ($name + "_lKneeJ");
	//delete ($name + "_lKneeJ_aimConstraint1");
	//$lKneeRotate = `getAttr ($name + "_lKneeJ.rotateX")`;
	//setAttr ($name + "_lKneeJ.rotateX") 0;
	//
	//parent -w ($name + "_lKneeJ");
	//parent -w ($name + "_lAnkleJ");
	//$lKneeJOrient = `getAttr  ($name + "_lKneeJ.jointOrientX") `;
	//$lHipJOrient = `getAttr  ($name + "_lHipJ.jointOrientX") `;
	//setAttr ($name + "_lHipJ.jointOrientX") ($lHipJOrient + $lHipRotate);
	//setAttr ($name + "_lKneeJ.jointOrientX") ($lKneeJOrient + $lKneeRotate);
	//
	//parent ($name + "_lKneeJ") ($name + "_lHipJ");
	//parent ($name + "_lAnkleJ") ($name + "_lKneeJ");
	//delete ($name + "_lLegOrientLctr");
	
	///////////////////ORIENT BALL JOINT////////////////////////////////
	select ($name + "_lAnkleJ") ($name + "_rAnkleJ");
	joint -e -oj xyz -secondaryAxisOrient yup -ch -zso;
	
	///////////////////SET JOINT ORIENTATIONS///////////////////
	//setAttr ($name + "_lWristJ.rotateOrder") 1;
	//setAttr ($name + "_lWristJProxy.rotateOrder") 1;
	//setAttr ($name + "_lForearmJ.rotateOrder") 1;
	
	
	//setAttr ($name + "_rWristJ.rotateOrder") 1;
	//setAttr ($name + "_rWristJProxy.rotateOrder") 1;
	//setAttr ($name + "_rForearmJ.rotateOrder") 1;
	
	//FOREARMS
	setAttr (($name + "_lForearmJ.jointOrient"), 0, 0, 0);
	setAttr (($name + "_rForearmJ.jointOrient"), 0, 0, 0);
	
	
	
	
	//////////////////MIRROR RIGHT JOINTS TO PROPER BEHAVIOUR//////////////////
	
	$rClavicleOrient = `getAttr ($name + "_rClavicleJ.jointOrient")`;
	//setAttr ($name + "_rClavicleJ.jointOrientX") ($rClavicleOrient[0] * -1);
	//setAttr ($name + "_rClavicleJ.jointOrientY") ($rClavicleOrient[1] * -1);
	//setAttr ($name + "_rClavicleJ.jointOrientZ") ($rClavicleOrient[2] - 180);
	
	$rHipOrient = `getAttr ($name + "_rHipJ.jointOrient")`;
	setAttr ($name + "_rHipJ.jointOrientX") ($rHipOrient[0] * -1);
	setAttr ($name + "_rHipJ.jointOrientY") ($rHipOrient[1] * -1);
	setAttr ($name + "_rHipJ.jointOrientZ") ($rHipOrient[2] + 180);
	
	select -hi ($name + "_rKneeJ");
	$reOrientJoints = `ls -sl`;
	string $currentJoint;
	for ($currentJoint in $reOrientJoints)
	{
		$currentOrient = `getAttr ($currentJoint + ".jointOrient")`;
		$currentPos = `getAttr ($currentJoint + ".tx")`;
		setAttr ($currentJoint + ".jointOrientX") ($currentOrient[0] * -1);
		setAttr ($currentJoint + ".jointOrientY") ($currentOrient[1] * -1);
		setAttr ($currentJoint + ".tx") ($currentPos * -1);
	}
	
	//FIX WRIST ORIENTATIONS
	orientConstraint ($name + "_lWristJ") ($name + "_lWristJProxy");
	delete ($name + "_lWristJProxy_orientConstraint1");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lWristJProxy");
	
	orientConstraint ($name + "_rWristJ") ($name + "_rWristJProxy");
	delete ($name + "_rWristJProxy_orientConstraint1");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rWristJProxy");
	 
	spaceLocator -n ($name + "_rLegOrientLctr");
	parentConstraint RRA_rKnee ($name + "_rLegOrientLctr");
	delete ($name + "_rLegOrientLctr_parentConstraint1");
	$rKneeLength = `xform -q -t ($name + "_rKneeJ")`;
	$rAnkleLength = `xform -q -t ($name + "_rAnkleJ")`;
	$rLegLength[0] = (($rKneeLength[0] + $rAnkleLength[0]) /-3.5);
	move -r -os 0 0 ($rLegLength[0] * -2) ($name + "_rLegOrientLctr");
	
	delete `aimConstraint -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "scene" -skip y -skip z ($name + "_rLegOrientLctr") ($name + "_rHipJ")`;
	$rHipRotate = `getAttr ($name + "_rHipJ.rotateX")`;
	setAttr ($name + "_rHipJ.rotateX") 0;
	
	aimConstraint -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "none" -skip y -skip z ($name + "_rLegOrientLctr") ($name + "_rKneeJ");
	delete ($name + "_rKneeJ_aimConstraint1");
	$rKneeRotate = `getAttr ($name + "_rKneeJ.rotateX")`;
	setAttr ($name + "_rKneeJ.rotateX") 0;
	
	parent -w ($name + "_rKneeJ");
	parent -w ($name + "_rAnkleJ");
	$rKneeJOrient = `getAttr  ($name + "_rKneeJ.jointOrientX") `;
	$rHipJOrient = `getAttr  ($name + "_rHipJ.jointOrientX") `;
	setAttr ($name + "_rHipJ.jointOrientX") ($rHipJOrient + $rHipRotate);
	setAttr ($name + "_rKneeJ.jointOrientX") ($rKneeJOrient + $rKneeRotate);
	
	parent ($name + "_rKneeJ") ($name + "_rHipJ");
	parent ($name + "_rAnkleJ") ($name + "_rKneeJ");
	delete ($name + "_rLegOrientLctr");
	
	//SEPARATE WRIST FROM ARM//////////////////////////////////////
	//LEFT WRIST
	group -em -n ($name + "_lWristJG1");
	pointConstraint ($name + "_lWristJProxy") ($name + "_lWristJG1");
	delete `orientConstraint ($name + "_lWristJ") ($name + "_lWristJG1")`;
	group -em -n ($name + "_lWristJG2") ;
	delete `pointConstraint ($name + "_lElbowJ") ($name + "_lWristJG2")`;
	delete `orientConstraint ($name + "_lWristJ") ($name + "_lWristJG2")`;	
	parentConstraint -mo ($name + "_lElbowJ") ($name + "_lWristJG2");
	parent ($name + "_lWristJG1") ($name + "_lWristJG2");
	parent ($name + "_lWristJ") ($name + "_lWristJG1");
	//setAttr ($name + "_lWristJG1.rotateOrder") 5;
	
	//RIGHT WRIST
	group -em -n ($name + "_rWristJG1");
	pointConstraint ($name + "_rWristJProxy") ($name + "_rWristJG1");
	delete `orientConstraint ($name + "_rWristJ") ($name + "_rWristJG1")`;
	group -em -n ($name + "_rWristJG2");
	delete `pointConstraint ($name + "_rElbowJ") ($name + "_rWristJG2")`;
	delete `orientConstraint ($name + "_rWristJ") ($name + "_rWristJG2")`;	
	parentConstraint -mo ($name + "_rElbowJ") ($name + "_rWristJG2");
	parent ($name + "_rWristJG1") ($name + "_rWristJG2");
	parent ($name + "_rWristJ") ($name + "_rWristJG1");
	//setAttr ($name + "_rWristJG1.rotateOrder") 5;
	
	////////////////////IK/FK JOINTS////////////////////////////////////
	//LEFT ARM FK
	duplicate -rr -n ($name + "_lShoulderJFK") ($name + "_lShoulderJ");
	select ($name + "_lShoulderJFK");
	pickWalk -d down;
	rename ($name + "_lElbowJFK");
	pickWalk -d down;
	rename ($name + "_lWristJFK");
	pickWalk -d right;
	doDelete;
	
	group -em -n ($name + "_lArmIKFKG");
	delete `parentConstraint ($name + "_lClavicleJ") ($name + "_lArmIKFKG")`;
	parentConstraint -mo ($name + "_lClavicleJ") ($name + "_lArmIKFKG");
	parent ($name + "_lShoulderJFK") ($name + "_lArmIKFKG");
	
	
	//LEFT ARM IK
	duplicate -rr -n ($name + "_lShoulderJIK") ($name + "_lShoulderJFK");
	select ($name + "_lShoulderJIK");
	pickWalk -d down;
	rename ($name + "_lElbowJIK");
	setAttr ($name + "_lElbowJIK.preferredAngleY") -1;
	pickWalk -d down;
	rename ($name + "_lWristJIK");
	
	//RIGHT ARM FK
	duplicate -rr -n ($name + "_rShoulderJFK") ($name + "_rShoulderJ");
	select ($name + "_rShoulderJFK");
	pickWalk -d down;
	rename ($name + "_rElbowJFK");
	pickWalk -d down;
	rename ($name + "_rWristJFK");
	pickWalk -d right;
	doDelete;
	
	group -em -n ($name + "_rArmIKFKG");
	delete `parentConstraint ($name + "_rClavicleJ") ($name + "_rArmIKFKG")`;
	parentConstraint -mo ($name + "_rClavicleJ") ($name + "_rArmIKFKG");
	parent ($name + "_rShoulderJFK") ($name + "_rArmIKFKG");
	
	//RIGHT ARM IK
	duplicate -rr -n ($name + "_rShoulderJIK") ($name + "_rShoulderJFK");
	select ($name + "_rShoulderJIK");
	pickWalk -d down;
	rename ($name + "_rElbowJIK");
	setAttr ($name + "_rElbowJIK.preferredAngleY") -1;
	pickWalk -d down;
	rename ($name + "_rWristJIK");
	
	//LEFT LEG JFK
	duplicate -rr -n ($name + "_lHipJFK") ($name + "_lHipJ");
	select ($name + "_lHipJFK");
	pickWalk -d down;
	rename ($name + "_lKneeJFK");
	pickWalk -d down;
	rename ($name + "_lAnkleJFK");
	pickWalk -d down;
	rename ($name + "_lBallJFK");
	pickWalk -d down;
	rename ($name + "_lToeJFK");
	select -cl;
	group -em -n ($name + "_lLegIKFKG");
	select -add ($name + "_ROOTJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1 ;
	parent -w;
	parentConstraint -mo ($name + "_ROOTJ") ($name + "_lLegIKFKG");
	parent ($name + "_lHipJFK") ($name + "_lLegIKFKG");
	
	//LEFT LEG IK
	duplicate -rr -n ($name + "_lHipJIK") ($name + "_lHipJFK");
	select ($name + "_lHipJIK");
	pickWalk -d down;
	rename ($name + "_lKneeJIK");
	setAttr ($name + "_lKneeJIK.preferredAngleZ") -1;
	pickWalk -d down;
	rename ($name + "_lAnkleJIK");
	pickWalk -d down;
	rename ($name + "_lBallJIK");
	pickWalk -d down;
	rename ($name + "_lToeJIK");
	
	//RIGHT LEG FK
	duplicate -rr -n ($name + "_rHipJFK") ($name + "_rHipJ");
	select ($name + "_rHipJFK");
	pickWalk -d down;
	rename ($name + "_rKneeJFK");
	pickWalk -d down;
	rename ($name + "_rAnkleJFK");
	pickWalk -d down;
	rename ($name + "_rBallJFK");
	pickWalk -d down;
	rename ($name + "_rToeJFK");
	group -em -n ($name + "_rLegIKFKG");
	delete `parentConstraint ($name + "_ROOTJ") ($name + "_rLegIKFKG")`;
	parentConstraint -mo ($name + "_ROOTJ") ($name + "_rLegIKFKG");
	parent ($name + "_rHipJFK") ($name + "_rLegIKFKG");
	
	//RIGHT LEG IK
	duplicate -rr -n ($name + "_rHipJIK") ($name + "_rHipJFK");
	pickWalk -d down;
	rename ($name + "_rKneeJIK");
	setAttr ($name + "_rKneeJIK.preferredAngleZ") -1;
	pickWalk -d down;
	rename ($name + "_rAnkleJIK");
	pickWalk -d down;
	rename ($name + "_rBallJIK");
	pickWalk -d down;
	rename ($name + "_rToeJIK");
	
	//JOINT SIZE
	select -hi ($name + "_lWristJ") ($name + "_rWristJ");
	$fingerJoints = `ls -sl`;
	string $currentJoint;
	for ($currentJoint in $fingerJoints)
		{setAttr ($currentJoint + ".radius") .5;}
	
	///////////////////////////////////////TOES///////////////////////////////////////
	//LEFT TOES
	if (`objExists RRA_lToe01J1`)
	{
		setAttr ($name + "_lToeJ.v") 0;
		select "RRA_lToe??J1";
		$toes = `ls -sl`;
		//$toeNum = `size $toes`;
		int $toeNum = 1;
		string $each;
		for ($each in $toes)
		{
			string $nPad = "0";
			if ($toeNum >= 10)
			{
				$nPad = "";
			}
			select -cl;
			joint -n ($name + "_lToe" + $nPad + $toeNum + "J1"); setAttr ($name + "_lToe" + $nPad + $toeNum + "J1.radius") .5;
			delete `pointConstraint ("RRA_lToe" + $nPad + $toeNum + "J1") ($name + "_lToe" + $nPad + $toeNum + "J1")`;
			
			select ($name + "_lToe" + $nPad + $toeNum + "J1");
			joint -n ($name + "_lToe" + $nPad + $toeNum + "J2"); setAttr ($name + "_lToe" + $nPad + $toeNum + "J2.radius") .5;
			delete `pointConstraint ("RRA_lToe" + $nPad + $toeNum + "J2") ($name + "_lToe" + $nPad + $toeNum + "J2")`;
			
			if ($toeNum == 1)
			{
				select ($name + "_lToe" + $nPad + $toeNum + "J2");
				joint -n ($name + "_lToe" + $nPad + $toeNum + "JTip"); setAttr ($name + "_lToe" + $nPad + $toeNum + "JTip.radius") .5;
				delete `pointConstraint ("RRA_lToe" + $nPad + $toeNum + "JTip") ($name + "_lToe" + $nPad + $toeNum + "JTip")`;
			}
			else
			{
				select ($name + "_lToe" + $nPad + $toeNum + "J2");
				joint -n ($name + "_lToe" + $nPad + $toeNum + "J3"); setAttr ($name + "_lToe" + $nPad + $toeNum + "J3.radius") .5;
				delete `pointConstraint ("RRA_lToe" + $nPad + $toeNum + "J3") ($name + "_lToe" + $nPad + $toeNum + "J3")`;
				
				select ($name + "_lToe" + $nPad + $toeNum + "J3");
				joint -n ($name + "_lToe" + $nPad + $toeNum + "JTip"); setAttr ($name + "_lToe" + $nPad + $toeNum + "JTip.radius") .5;
				delete `pointConstraint ("RRA_lToe" + $nPad + $toeNum + "JTip") ($name + "_lToe" + $nPad + $toeNum + "JTip")`;
			}
			parent ($name + "_lToe" + $nPad + $toeNum + "J1") ($name + "_lBallJ");
			$toeNum++;
		}
	}
	
	//RIGHT TOES
	if (`objExists RRA_rToe01J1`)
	{
		setAttr ($name + "_rToeJ.v") 0;
		select "RRA_rToe??J1";
		$toes = `ls -sl`;
		//$toeNum = `size $toes`;
		int $toeNum = 1;
		string $each;
		for ($each in $toes)
		{
			string $nPad = "0";
			if ($toeNum >= 10)
			{
				$nPad = "";
			}
			select -cl;
			joint -n ($name + "_rToe" + $nPad + $toeNum + "J1"); setAttr ($name + "_rToe" + $nPad + $toeNum + "J1.radius") .5;
			delete `pointConstraint ("RRA_rToe" + $nPad + $toeNum + "J1") ($name + "_rToe" + $nPad + $toeNum + "J1")`;
			
			select ($name + "_rToe" + $nPad + $toeNum + "J1");
			joint -n ($name + "_rToe" + $nPad + $toeNum + "J2"); setAttr ($name + "_rToe" + $nPad + $toeNum + "J2.radius") .5;
			delete `pointConstraint ("RRA_rToe" + $nPad + $toeNum + "J2") ($name + "_rToe" + $nPad + $toeNum + "J2")`;
			
			if ($toeNum == 1)
			{
				select ($name + "_rToe" + $nPad + $toeNum + "J2");
				joint -n ($name + "_rToe" + $nPad + $toeNum + "JTip"); setAttr ($name + "_rToe" + $nPad + $toeNum + "JTip.radius") .5;
				delete `pointConstraint ("RRA_rToe" + $nPad + $toeNum + "JTip") ($name + "_rToe" + $nPad + $toeNum + "JTip")`;
			}
			else
			{
				select ($name + "_rToe" + $nPad + $toeNum + "J2");
				joint -n ($name + "_rToe" + $nPad + $toeNum + "J3"); setAttr ($name + "_rToe" + $nPad + $toeNum + "J3.radius") .5;
				delete `pointConstraint ("RRA_rToe" + $nPad + $toeNum + "J3") ($name + "_rToe" + $nPad + $toeNum + "J3")`;
				
				select ($name + "_rToe" + $nPad + $toeNum + "J3");
				joint -n ($name + "_rToe" + $nPad + $toeNum + "JTip"); setAttr ($name + "_rToe" + $nPad + $toeNum + "JTip.radius") .5;
				delete `pointConstraint ("RRA_rToe" + $nPad + $toeNum + "JTip") ($name + "_rToe" + $nPad + $toeNum + "JTip")`;
			}
			parent ($name + "_rToe" + $nPad + $toeNum + "J1") ($name + "_rBallJ");
			$toeNum++;
		}
	}
	
	//GENERATE CONTROLS

	//MAIN CONTROL
	circle -n ($name + "_MainC") -nr 0 1 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;
	curve -n ($name + "_Arrow1") -d 1 -p 3 0 8 -p 3 0 9 -p 5 0 9 -p 0 0 12 -p -5 0 9 -p -3 0 9 -p -3 0 8 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 ;
	pickWalk -d down;
	rename ($name + "_Arrow1Shape");
	circle -n ($name + "_Outer1") -nr 0 1 0 -sw 48.9 -r 8.545 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0;
	rotate -r 0 110.55 0 ($name + "_Outer1");
	duplicate -rr ($name + "_Arrow1") ($name + "_Outer1");
	rotate -r 0 90 0 ($name + "_Arrow2") ($name + "_Outer2");
	duplicate -rr ($name + "_Arrow1") ($name + "_Outer1");
	rotate -r 0 180 0 ($name + "_Arrow3") ($name + "_Outer3");
	duplicate -rr ($name + "_Arrow1") ($name + "_Outer1");
	rotate -r 0 270 0 ($name + "_Arrow4") ($name + "_Outer4");
	makeIdentity -apply true -r 1 ($name + "_MainC") ($name + "_Arrow1") ($name + "_Outer1") ($name + "_Arrow2") ($name + "_Outer2") ($name + "_Arrow3") ($name + "_Outer3") ($name + "_Arrow4") ($name + "_Outer4") ;
	parent -r -s ($name + "_Arrow1Shape") ($name + "_Outer1Shape") ($name + "_Arrow2Shape") ($name + "_Outer2Shape") ($name + "_Arrow3Shape") ($name + "_Outer3Shape") ($name + "_Arrow4Shape") ($name + "_Outer4Shape") ($name + "_MainC");
	delete ($name + "_Arrow1") ($name + "_Outer1") ($name + "_Arrow2") ($name + "_Outer2") ($name + "_Arrow3") ($name + "_Outer3") ($name + "_Arrow4") ($name + "_Outer4") ;
	move -r 0 0 2 ($name + "_Arrow1Shape.cv[3]") ;
	
	//ADD RAPID RIG TO THE MAIN CONTROL
	textCurves -ch 0 -f "Arial" -t "RRA";
	rename ($name + "_Text_RRA");
	rotate -r -90 0 0 ($name + "_Text_RRA");
	xform -cp ($name + "_Text_RRA");
	
	//FOR OLDER VERSIONS OF MAYA
		$textSize = `xform -q -ws -rp ($name + "_Text_RRA")`;
		if ($textSize[0] > 3)
		{
			scale -r 0.25 0.25 0.25 ($name + "_Text_RRA");
			move -r -4 0 1.2 ($name + "_Text_RRA");
		}
	
	move -r -1.25 0 10.65 ($name + "_Text_RRA");
	scale -r 1.75 1.75 1.75 ($name + "_Text_RRA");
	
	//DEFINE GROUPS
	pickWalk -d down;
	$firstR = `ls -sl`;
	pickWalk -d right;
	$secondR = `ls -sl`;
	pickWalk -d "right";
	$lastA = `ls -sl`;
	$connections = `listConnections $secondR[0]`;
	delete $connections;
	move -r -0.08 0 0 $secondR;
	
	
	//GET CURVES
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_Text_RRA");
	select -hi ($name + "_Text_RRA");
	$RRA_Curves = `ls -sl -type "nurbsCurve"`;
	string $each;
	int $num = 1;
	for ($each in $RRA_Curves)
	{
		rename $each ($name + "RRA_CurveShape" + $num);
		parent -r -s ($name + "RRA_CurveShape" + $num) ($name + "_MainC");
		setAttr ($name + "RRA_CurveShape" + $num + ".overrideEnabled") 1;
		setAttr ($name + "RRA_CurveShape" + $num + ".overrideColor") 14;
		$num++;
	}
	delete ($name + "_Text_RRA");
	
	//ADD VERSION NUMBER TO MAIN CONTROL
	addAttr -ln "versionNumber"  -dt "string"  ($name + "_MainC");
	setAttr -e-keyable true ($name + "_MainC.versionNumber");	
	setAttr -type "string" ($name + "_MainC.versionNumber") "2.0.7";
	setAttr -l true ($name + "_MainC.versionNumber");
	
	$proxyMAINScale = `getAttr RRA_MAIN.scale`;
	
	//delete `scaleConstraint RRA_MAIN ($name + "_MainC")`;
	//scale -r 1.2 1.2 1.2 ($name + "_MainC");
	scale -r (($proxyMAINScale[0] + $proxyMAINScale[2])/2) 1 (($proxyMAINScale[0] + $proxyMAINScale[2])/2) ($name + "_MainC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_MainC");	
	
	circle -n ($name + "_ROOTC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1.25 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	group -n ($name + "_ROOTCG");
	parent ($name + "_ROOTCG") ($name + "_ROOTJ");
	makeIdentity -apply false -t 1 -s 1;
	parent -w ($name + "_ROOTCG");
	delete -ch ($name + "_ROOTC");
	
	//SPINE CONTROL SCALE
	select ($name + "_SpineTemp0*J") ($name + "_NeckTemp0*J") ($name + "_HeadJ");
	$vertebraes = `ls -sl`;
	float $currentLength = 0;
	float $spineControlsLength;
	string $currentVertebrae;
	for ($currentVertebrae in $vertebraes)
	{
		$currentLengthX = `getAttr ($currentVertebrae + ".tx")`;
		$currentLengthY = `getAttr ($currentVertebrae + ".ty")`;
		$currentLength = $currentLengthX + $currentLengthY + $currentLength;
	}
	$spineScale = $currentLength/6;
	$neckScale = $spineScale/2;
	setAttr (($name + "_ROOTCG.scale"), ($spineScale*4), ($spineScale*3.5), ($spineScale*3.5));
	//INCREDIBLES RELEASE DATE!
	setAttr ($name + "_MainC.identification") 1105;
	makeIdentity -apply true -t 0 -r 1 -s 1 ($name + "_ROOTCG");
	
	
	//MAIN HIP CONTROL
	circle -n ($name + "_MainHipC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	move -r 0 -0.95 0 ($name + "_MainHipC.cv[1]") ($name + "_MainHipC.cv[5]");
	move -r -os -wd 0 -0.4 0 ($name + "_MainHipC.cv[3]") ($name + "_MainHipC.cv[7]");
	group -n ($name + "_MainHipCG") ($name + "_MainHipC");
	select -add ($name + "_ROOTJ");
	parent;
	makeIdentity -apply false -t 1 -s 1;
	parent -w;
	setAttr (($name + "_MainHipCG.scale"), ($spineScale*3), ($spineScale*2.75), ($spineScale*2.75));
	makeIdentity -apply true -t 0 -r 1 -s 1;
	
	spaceLocator -n ($name + "_SpineLengthAimLctr");
	spaceLocator -n ($name + "_SpineLengthTargetLctr");
	parent ($name + "_SpineLengthTargetLctr") ($name + "_SpineLengthAimLctr");
	pointConstraint "RRA_ROOT" ($name + "_SpineLengthAimLctr");
	aimConstraint -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "vector" -worldUpVector 1 0 0 -skip y -skip z "RRA_SpineTop" ($name + "_SpineLengthAimLctr");
	pointConstraint "RRA_SpineTop" ($name + "_SpineLengthTargetLctr");
	$spineLength = `getAttr ($name + "_SpineLengthTargetLctr.ty")`;
	$spineLength = ($spineLength/2);
	delete ($name + "_SpineLengthAimLctr");

	spaceLocator -n ($name + "_HeadLengthAimLctr");
	spaceLocator -n ($name + "_HeadLengthTargetLctr");
	parent ($name + "_HeadLengthTargetLctr") ($name + "_HeadLengthAimLctr");
	pointConstraint "RRA_Head" ($name + "_HeadLengthAimLctr");
	aimConstraint -aimVector 0 1 0 -upVector 1 0 0 -worldUpType "vector" -worldUpVector 1 0 0 -skip y -skip z "RRA_HeadTip" ($name + "_HeadLengthAimLctr");
	pointConstraint "RRA_HeadTip" ($name + "_HeadLengthTargetLctr");
	$headLength = `getAttr ($name + "_HeadLengthTargetLctr.ty")`;	
	delete ($name + "_HeadLengthAimLctr");
	
	//            ($splineType, $name, $spline, $splineStart, $splineStartC, $splineStartMasterC, $splineEnd, $splineEndC, $splineEndMasterC, $topControlAttach, $splineScale, $splineProxiesNum, $topControlSize)
	RRA_SplineControls("isSpine",   $name, "_Spine", "_ROOT",       "_ROOTC",     "_MainHipC",      "_SpineTop", "_SpineTopFKC", "_SpineTopIKC",  "_SpineTopJ",      $neckScale, $allSpineProxiesNum, $spineLength);
	
	//INVERTED GROUP FOR HIP ROTATION
	group -em -n ($name + "_MainHipInvG");
	delete `pointConstraint ($name + "_MainHipC") ($name + "_MainHipInvG")`;
	parent ($name + "_MainHipInvG") ($name + "_MainHipC");
	makeIdentity -apply true -t 0 ($name + "_MainHipInvG");
	

	//            ($splineType, $name, $spline, $splineStart, $splineStartC, $splineStartMasterC, $splineEnd, $splineEndC, $splineEndMasterC, $topControlAttach, $splineScale, $splineProxiesNum, $topControlSize)
	RRA_SplineControls("isNeck",    $name, "_Neck", "_SpineTop",  "_SpineTopIKC", "_SpineTopIKC",      "_Head",    "_HeadFKC", "_HeadC",           "_HeadTipJ",        $neckScale, $allNeckProxiesNum, $headLength);
	
	
	//ADD ATTRIBUTE TO SPINE TOP
	if (!`objExists ($name + "_SpineTopIKC.SpineAutoVolume")`)
	{
		addAttr -ln "SpineAutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_SpineTopIKC");
		setAttr -e-keyable true ($name + "_SpineTopIKC.SpineAutoVolume");
		//addAttr -ln "SpineCurve"  -at double  -min 0.001 -max 5 -dv 1 ($name + "_SpineTopIKC");
		//setAttr -e-keyable true ($name + "_SpineTopIKC.SpineCurve");
	}
	connectAttr -force ($name + "_SpineTopIKC.SpineAutoVolume") ($name + "_SpineLengthRatioInverse_Blnd.blender");

	//ADD ATTRIBUTE TO SPINE TOP
	if (!`objExists ($name + "_HeadC.NeckAutoVolume")`)
	{
		addAttr -ln "NeckAutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_HeadC");
		setAttr -e-keyable true ($name + "_HeadC.NeckAutoVolume");
		//addAttr -ln "NeckCurve"  -at double  -min 0.001 -max 5 -dv 1 ($name + "_HeadC");
		//setAttr -e-keyable true ($name + "_HeadC.NeckCurve");
	}
	connectAttr -force ($name + "_HeadC.NeckAutoVolume") ($name + "_NeckLengthRatioInverse_Blnd.blender");

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//JAW CONTROL
	circle -n ($name + "_JawC");
	scale -r 1 0.5 1 ($name + "_JawC");
	move -r -os -wd 0 0 1.2 ($name + "_JawC.cv[1]") ($name + "_JawC.cv[5]");
	move -r -os -wd 0 0 0.58 ($name + "_JawC.cv[0]") ($name + "_JawC.cv[2]") ($name + "_JawC.cv[4]") ($name + "_JawC.cv[6]");
	select ($name + "_JawC") ;
	rotate -r -os 35 0 0 ($name + "_JawC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_JawC");
	group -n ($name + "_JawCG") ($name + "_JawC");
	delete `parentConstraint ($name + "_JawTipJ") ($name + "_JawCG")`;
	spaceLocator -n ($name + "_JawAimLctr");
	spaceLocator -n ($name + "_JawTargetctr");
	parent ($name + "_JawTargetctr") ($name + "_JawAimLctr");
	pointConstraint ($name + "_JawJ") ($name + "_JawAimLctr");
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none" ($name + "_JawTipJ") ($name + "_JawAimLctr");
	pointConstraint ($name + "_JawTipJ") ($name + "_JawTargetctr");
	$JawLength = `getAttr ($name + "_JawTargetctr.tz")`;
	
	setAttr (($name + "_JawC.scale"), ($JawLength * 0.8), ($JawLength * 0.8), ($JawLength * 0.8));
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_JawC");
	delete -ch  ($name + "_JawC");
	delete ($name + "_JawAimLctr");
	
	$JawLoc = `xform -ws -q -rp ($name + "_JawJ")`;
	$HeadLoc = `xform -ws -q -rp ($name + "_HeadJ")`;
	move $JawLoc[0] $JawLoc[1] $JawLoc[2] ($name + "_JawC.scalePivot") ($name + "_JawC.rotatePivot");
	move $HeadLoc[0] $HeadLoc[1] $HeadLoc[2] ($name + "_JawCG.scalePivot") ($name + "_JawCG.rotatePivot");
	
	//EYE IK CONTROL
	circle -n($name + "_EyeAimC");
	scale -r 1.4 0.75 1;
	duplicate -n ($name + "_lEyeAimC");
	select ($name + "_lEyeAimC.cv[1:5]") ;
	move -x 0.1;
	scale -r -p 0cm 0cm 0cm 1 0.95 1 ;
	select ($name + "_lEyeAimC.cv[0:7]") ;
	scale -r -p 0cm 0cm 0cm 0.85 0.85 0.85 ;
	select ($name + "_lEyeAimC");
	duplicate -n ($name + "_rEyeAimC");
	setAttr ($name + "_rEyeAimC.scaleX") -1.4;
	select -add ($name + "_lEyeAimC");
	makeIdentity -apply true -t 1 -r 1 -s 1;
	select -add($name + "_EyeAimC");
	delete -ch;
	parent;
	group -n($name + "_EyeAimCG") ($name + "_EyeAimC");
	delete `pointConstraint RRA_Head ($name + "_EyeAimCG")` ;
	makeIdentity -apply true -t 1 -r 1 -s 1($name + "_EyeAimCG");
	delete `pointConstraint ($name + "_lEyeJ") ($name + "_rEyeJ")($name + "_EyeAimCG")` ;
	//makeIdentity -apply true -t 0 -r 1 -s 1($name + "_EyeAimCG");
	$eyeLoc = `getAttr ($name + "_EyeAimCG.tz")`;
	//$rEyeLoc = `xform -q -ws -t ($name + "_rEyeJ")`;
	setAttr (($name + "_EyeAimCG.scale"), ($eyeLoc/1.25), ($eyeLoc/1.25), ($eyeLoc/1.25));
	setAttr ($name + "_EyeAimCG.translateZ") (($eyeLoc)*4);
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_EyeAimCG");
	
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType"objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") ($name + "_lEyeJ") ($name + "_rEyeJ")($name + "_EyeAimC");
	
	//AUTO ORIENT EYES
	addAttr -ln "AutoAim"  -at bool  ($name + "_EyeAimC");
	setAttr -e-keyable true ($name + "_EyeAimC.AutoAim");
	setAttr ($name + "_EyeAimC.AutoAim") 1;
	connectAttr -f ($name + "_EyeAimC.AutoAim") ($name + "_EyeAimC_aimConstraint1." + $name + "_lEyeJW0");
// Result: Connected test_EyeAimC.AutoAim to test_EyeAimC_aimConstraint1.test_lEyeJW0. // 
connectAttr -f ($name + "_EyeAimC.AutoAim") ($name + "_EyeAimC_aimConstraint1." + $name + "_rEyeJW1");	
	
	
	$lEyeLoc = `xform -q -ws -t ($name + "_lEyeJ")`;
	$rEyeLoc = `xform -q -ws -t ($name + "_rEyeJ")`;
	move -r $lEyeLoc[0] 0 0 ($name + "_lEyeAimC.scalePivot") ($name + "_lEyeAimC.rotatePivot") ;
	move -r $rEyeLoc[0] 0 0 ($name + "_rEyeAimC.scalePivot") ($name + "_rEyeAimC.rotatePivot") ;
	setAttr ($name + "_rEyeAimC.scaleX") -1;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rEyeAimC");
	setAttr ($name + "_rEyeAimC.scaleX") -1;
	
	//EYE CONNECTORS
	curve -n ($name + "_lEyeAimConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lEyeAimConnectorCXShape");
	delete `parentConstraint ($name + "_lEyeAimC") ($name + "_lEyeAimConnectorCX") `;
	parent ($name + "_lEyeAimConnectorCX") ($name + "_lEyeAimC");
	spaceLocator -n ($name + "_lEyeAimAimConnectorLctr");
	spaceLocator -n ($name + "_lEyeAimTargetConnectorLctr");
	parent ($name + "_lEyeAimTargetConnectorLctr") ($name + "_lEyeAimAimConnectorLctr");
	delete `parentConstraint ($name + "_lEyeAimC") ($name + "_lEyeAimAimConnectorLctr")`;
	parent ($name + "_lEyeAimAimConnectorLctr") ($name + "_lEyeAimC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lEyeAimAimConnectorLctr");
	
	pointConstraint ($name + "_lEyeJ") ($name + "_lEyeAimTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lEyeJ") ($name + "_lEyeAimAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lEyeJ") ($name + "_lEyeAimConnectorCX");

	connectAttr -f ($name + "_lEyeAimTargetConnectorLctr.tz") ($name + "_lEyeAimConnectorCX.sz");
	setAttr ($name + "_lEyeAimAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_lEyeAimConnectorCX");
	setAttr -e-keyable true ($name + "_lEyeAimConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_lEyeAimConnectorCX.v");
	setAttr ($name + "_lEyeAimConnectorCX.template") 1;	
	
	curve -n ($name + "_rEyeAimConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rEyeAimConnectorCXShape");
	delete `parentConstraint ($name + "_rEyeAimC") ($name + "_rEyeAimConnectorCX") `;
	parent ($name + "_rEyeAimConnectorCX") ($name + "_rEyeAimC");
	spaceLocator -n ($name + "_rEyeAimAimConnectorLctr");
	spaceLocator -n ($name + "_rEyeAimTargetConnectorLctr");
	parent ($name + "_rEyeAimTargetConnectorLctr") ($name + "_rEyeAimAimConnectorLctr");
	delete `parentConstraint ($name + "_rEyeAimC") ($name + "_rEyeAimAimConnectorLctr")`;
	parent ($name + "_rEyeAimAimConnectorLctr") ($name + "_rEyeAimC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rEyeAimAimConnectorLctr");
	
	pointConstraint ($name + "_rEyeJ") ($name + "_rEyeAimTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rEyeJ") ($name + "_rEyeAimAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rEyeJ") ($name + "_rEyeAimConnectorCX");

	connectAttr -f ($name + "_rEyeAimTargetConnectorLctr.tz") ($name + "_rEyeAimConnectorCX.sz");
	setAttr ($name + "_rEyeAimAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_rEyeAimConnectorCX");
	setAttr -e-keyable true ($name + "_rEyeAimConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_rEyeAimConnectorCX.v");
	setAttr ($name + "_rEyeAimConnectorCX.template") 1;	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////LEFT CONTROLS/////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//LEFT CLAVICLE CONTROL
	circle -n ($name + "_lClavicleC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	move -r 1.35 2 0 ($name + "_lClavicleC.cv[3]") ($name + "_lClavicleC.cv[7]") ;
	move -r 0.5 1.25 0 ($name + "_lClavicleC.cv[2]") ($name + "_lClavicleC.cv[4]") ($name + "_lClavicleC.cv[0]") ($name + "_lClavicleC.cv[6]") ;
	select ($name + "_lClavicleC");
	group -n ($name + "_lClavicleCG");
	select -add ($name + "_lClavicleJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	$lClavicleLength = `xform -q -t ($name + "_lClavicleJ")`;
	$lShoulderLength = `xform -q -t ($name + "_lShoulderJ")`;
	
	spaceLocator -n ($name + "_SpineTopLctr") -p 0 0 0;
	spaceLocator -n ($name + "_lClavicleLctr") -p 0 0 0;
	pointConstraint ($name + "_SpineTopJ") ($name + "_SpineTopLctr");
	
	pointConstraint ($name + "_lClavicleJ") ($name + "_lClavicleLctr");
	
	parent ($name + "_lClavicleLctr") ($name + "_SpineTopLctr");
	$lClavicleLength = `xform -q -t ($name + "_lClavicleLctr")`;
	
	setAttr (($name + "_lClavicleCG.scale"), (($lClavicleLength[0]) * 0.65), (($lClavicleLength[0]) * 0.8), (($lClavicleLength[0])*1.25));
	
	delete ($name + "_SpineTopLctr");
	
	parent -w ($name + "_lClavicleCG");
	makeIdentity -apply true -t 0 -s 1 ($name + "_lClavicleCG");
	
	//LEFT SHOULDER FK CONTROL
	circle -n ($name + "_lShoulderFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_lShoulderFKC");
	group -n ($name + "_lShoulderFKCG") ($name + "_lShoulderFKC");
	delete `parentConstraint ($name + "_lShoulderJ") ($name + "_lShoulderFKCG") `;
	$lElbowLength = `xform -q -t ($name + "_lElbowJ")`;
	$lWristLength = `xform -q -t ($name + "_lWristJProxy")`;
	$lArmLength[0] = (($lElbowLength[0] + $lWristLength[0]) /2);
	
	setAttr (($name + "_lShoulderFKC.scale"), ($lArmLength[0]/2), ($lArmLength[0]/2), ($lArmLength[0]/2));
	makeIdentity -apply true -s 1 ($name + "_lShoulderFKCG");
	
	transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lShoulderFKC");
	transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lShoulderFKC");
	transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lShoulderFKC");

	//LEFT ELBOW FK CONTROL
	select ($name + "_lShoulderFKCG");
	duplicate -n ($name + "_lElbowFKCG");
	select -add ($name + "_lElbowJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	parent -w;
	scale -r 0.8 0.8 0.8 ;
	makeIdentity -apply true -t 0 -s 1;
	pickWalk -d down;
	rename ($name + "_lElbowFKC");
	
	//LEFT WRIST FK CONTROL
	select ($name + "_lShoulderFKCG");
	duplicate -n ($name + "_lWristFKCG");
	select -add ($name + "_lWristJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	parent -w;
	scale -r 0.85 0.85 0.85 ;
	makeIdentity -apply true -t 0 -s 1;
	pickWalk -d down;
	rename ($name + "_lWristFKC");
	transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lWristFKC");
	transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lWristFKC");
	transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lWristFKC");
	
	//DETACH FK ARM JOINTS FOR SCALE COMPENSATION
	parent -w ($name + "_lElbowJFK") ($name + "_lWristJFK");
	group -n ($name + "_lWristJFKG1") ($name + "_lWristJFK");
	group -n ($name + "_lWristJFKG2") ($name + "_lWristJFKG1");
	$lWristLocation = `xform -q -ws -t ($name + "_lWristJ")`;
	move $lWristLocation[0] $lWristLocation[1] $lWristLocation[2] ($name + "_lWristJFKG2.scalePivot") ($name + "_lWristJFKG2.rotatePivot") ;
	pointConstraint ($name + "_lWristFKC") ($name + "_lWristJFKG1");
	parentConstraint -mo ($name + "_lElbowJFK") ($name + "_lWristJFKG2");
	
	group -n ($name + "_lElbowJFKG1") ($name + "_lElbowJFK");
	group -n ($name + "_lElbowJFKG2") ($name + "_lElbowJFKG1");
	$lElbowLocation = `xform -q -ws -t ($name + "_lElbowJ")`;
	move $lElbowLocation[0] $lElbowLocation[1] $lElbowLocation[2] ($name + "_lElbowJFKG2.scalePivot") ($name + "_lElbowJFKG2.rotatePivot") ;
	pointConstraint ($name + "_lElbowFKC") ($name + "_lElbowJFKG1");
	parentConstraint -mo ($name + "_lShoulderJFK") ($name + "_lElbowJFKG2");
	
	//LEFT WRIST IK CONTROL
	circle  -n ($name + "_lWristIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;
	move -r -1.083809 0 0 ($name + "_lWristIKC.cv[12]") ;
	move -r 0 0 0.292629 ($name + "_lWristIKC.cv[13]") ;
	move -r -0.769505 0 -0.130057 ($name + "_lWristIKC.cv[11]") ;
	move -r 0.379333 0 -0.303467 ($name + "_lWristIKC.cv[10]") ;
	move -r 0.541905 0 0 ($name + "_lWristIKC.cv[9]") ;
	move -r -0.834533 0 0 ($name + "_lWristIKC.cv[13]") ;
	move -r 0.346819 0 0.693638 ($name + "_lWristIKC.cv[14]") ;
	move -r 0.357657 0 0 ($name + "_lWristIKC.cv[15]") ;
	move -r 0.2276 0 -0.0216761 ($name + "_lWristIKC.cv[13]") ;
	move -r 0.0216762 0 0.0867047 ($name + "_lWristIKC.cv[7]") ;
	move -r 0.0325143 0 0.0758667 ($name + "_lWristIKC.cv[6]") ;
	move -r 0 0 0.2276 ($name + "_lWristIKC.cv[14]") ;
	move -r 0.173409 0 0.140895 ($name + "_lWristIKC.cv[15]") ;
	move -r 0.270952 0 0.0216762 ($name + "_lWristIKC.cv[0]") ;
	move -r -0.0325143 0 0.0325143 ($name + "_lWristIKC.cv[15]") ;
	move -r -0.0108381 0 -0.173409 ($name + "_lWristIKC.cv[14]") ;
	move -r 0.0975428 0 0.0325143 ($name + "_lWristIKC.cv[0]") ;
	move -r 0.162571 0 0.0216762 ($name + "_lWristIKC.cv[1]") ;
	move -r -0.173409 0 0.119219 ($name + "_lWristIKC.cv[13]") ;
	move -r 0 0 0.0216762 ($name + "_lWristIKC.cv[12]") ;
	move -r -0.0758667 0 0.0867047 ($name + "_lWristIKC.cv[14]") ;
	move -r 0.119219 0 0.520228 ($name + "_lWristIKC.cv[15]") ;
	move -r 0.325143 0 0.140895 ($name + "_lWristIKC.cv[0]") ;
	move -r 0.238438 0 -0.0758667 ($name + "_lWristIKC.cv[1]") ;
	move -r 0.108381 0 -0.0325143 ($name + "_lWristIKC.cv[2]") ;
	move -r 0.0758667 0 0.0541905 ($name + "_lWristIKC.cv[1]") ;
	move -r -0.0141441 0 0 ($name + "_lWristIKC.cv[11:13]") ;
	move -r -0.339459 0 -0.0565766 ($name + "_lWristIKC.cv[10]") ;
	move -r 0.141441 0 -0.113153 ($name + "_lWristIKC.cv[9]") ;
	move -r 0.381892 0 0.099009 ($name + "_lWristIKC.cv[8]") ;
	move -r 0.183874 0 0.155586 ($name + "_lWristIKC.cv[7]") ;
	move -r 0 0 0.0565766 ($name + "_lWristIKC.cv[6]") ;
	move -r 0.127297 0 0.0707207 ($name + "_lWristIKC.cv[0]") ;
	move -r 0.226306 0 -0.0707207 ($name + "_lWristIKC.cv[1]") ;
	move -r 0.155586 0 -0.0707207 ($name + "_lWristIKC.cv[2]") ;
	move -r 0 0 0.247523 ($name + "_lWristIKC.cv[6:14]") ;
	move -r 0 0 0.247523 ($name + "_lWristIKC.cv[5]") ;
	move -r 0 0 0.066006 ($name + "_lWristIKC.cv[4]") ;
	move -r 0 0 0.066006 ($name + "_lWristIKC.cv[1]") ;
	move -r 0 0 0.132012 ($name + "_lWristIKC.cv[8:10]") ;
	move -r -0.0165015 0 0.0825075 ($name + "_lWristIKC.cv[9]") ;
	move -r -0.0825075 0 0.0165015 ($name + "_lWristIKC.cv[8]") ;
	move -r 0.132012 0 0 ($name + "_lWristIKC.cv[15]") ;
	move -r -0.099009 0 0 ($name + "_lWristIKC.cv[9]") ;
	move -r 0.568042 -0.00947902 -0.182223 ($name + "_lWristIKC.cv[0:15]") ;
	move -r 0.4561 0 0 ($name + "_lWristIKC.cv[0:15]") ;
	move -r -os -wd 0 0 0.3 ($name + "_lWristIKC.cv[0:15]") ;
	
	group -n ($name + "_lWristIKCG") ($name + "_lWristIKC");
	delete `parentConstraint ($name + "_lWristJ") ($name + "_lWristIKCG")`;
	select -add ($name + "_lWristJ");
	parent;
	makeIdentity -apply false -t 1 -s 1;
	parent -w;
	
	spaceLocator -n ($name + "_lHandSizeLctr") -p 0 0 0;
	spaceLocator -n ($name + "_lHandAimLctr") -p 0 0 0;
	parent ($name + "_lHandSizeLctr") ($name + "_lHandAimLctr");
	pointConstraint ($name + "_lWristIKCG") ($name + "_lHandAimLctr");
	select ($name + "_lFinger1JTip");
	if (`objExists ($name + "_lFinger2J1")`)
	{select -add ($name + "_lFinger2JTip");}
	if (`objExists ($name + "_lFinger3J1")`)
	{select -add ($name + "_lFinger3JTip");}
	if (`objExists ($name + "_lFinger4J1")`)
	{select -add ($name + "_lFinger4JTip");}
	if (`objExists ($name + "_lFinger5J1")`)
	{select -add ($name + "_lFinger5JTip");}
	if (`objExists ($name + "_lFinger6J1")`)
	{select -add ($name + "_lFinger6JTip");}
	if (`objExists ($name + "_lFinger7J1")`)
	{select -add ($name + "_lFinger7JTip");}
	if (`objExists ($name + "_lFinger8J1")`)
	{select -add ($name + "_lFinger8JTip");}
	if (`objExists ($name + "_lFinger9J1")`)
	{select -add ($name + "_lFinger9JTip");}
	select -add ($name + "_lHandAimLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none"; 
	delete ($name + "_lHandAimLctr_pointConstraint1");
	delete ($name + "_lHandAimLctr_aimConstraint1");
	select ($name + "_lFinger1JTip");
	if (`objExists ($name + "_lFinger2J1")`)
	{select -add ($name + "_lFinger2JTip");}
	if (`objExists ($name + "_lFinger3J1")`)
	{select -add ($name + "_lFinger3JTip");}
	if (`objExists ($name + "_lFinger4J1")`)
	{select -add ($name + "_lFinger4JTip");}
	if (`objExists ($name + "_lFinger5J1")`)
	{select -add ($name + "_lFinger5JTip");}
	if (`objExists ($name + "_lFinger6J1")`)
	{select -add ($name + "_lFinger6JTip");}
	if (`objExists ($name + "_lFinger7J1")`)
	{select -add ($name + "_lFinger7JTip");}
	if (`objExists ($name + "_lFinger8J1")`)
	{select -add ($name + "_lFinger8JTip");}
	if (`objExists ($name + "_lFinger9J1")`)
	{select -add ($name + "_lFinger9JTip");}
	select -add ($name + "_lHandSizeLctr");
	pointConstraint -offset 0 0 0 -skip y -skip z -weight 1;
	$lHandSize = `xform -q -t ($name + "_lHandSizeLctr")`;
	
	setAttr (($name + "_lWristIKCG.scale"), ($lHandSize[0]*.58), ($lHandSize[0]*.58), ($lHandSize[0]*.58));
	setAttr (($name + "_lWristIKCG.rotate"), $lWristRotation[0], $lWristRotation[1], $lWristRotation[2]);
	
	select -cl;
	delete ($name + "_lHandAimLctr");
	makeIdentity -apply true -t 0 -s 1 ($name + "_lWristIKCG");
	delete -ch ($name + "_lWristIKCG");
	
	//LEFT ELBOW IK CONTROL
	curve -n ($name + "_lElbowIKC") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0
	-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0
	-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0	
	-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9
	-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22
	-k 23 -k 24 ;
	pickWalk -d down;
	rename ($name + "_lElbowIKCShape");
	
	move -r 0 0 0.95 ($name + "_lElbowIKC.cv[12]")  ($name + "_lElbowIKC.cv[0]") ($name + "_lElbowIKC.cv[24]") ($name + "_lElbowIKC.cv[18]") ($name + "_lElbowIKC.cv[6]") ;
	move -r 0 0 -0.65 ($name + "_lElbowIKC.cv[3]") ($name + "_lElbowIKC.cv[9]") ($name + "_lElbowIKC.cv[15]") ($name + "_lElbowIKC.cv[21]") ;
	select ($name + "_lElbowIKC");
	group -n ($name + "_lElbowIKCG");
	parentConstraint RRA_lElbow ($name + "_lElbowIKCG");
	delete ($name + "_lElbowIKCG_parentConstraint1");
	setAttr (($name + "_lElbowIKC.scale"), ($lArmLength[0] / 14), ($lArmLength[0] / 14), ($lArmLength[0] / 14));
	setAttr ($name + "_lElbowIKC.tz") ($lArmLength[0] * -2);
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lElbowIKC");
	
	//LEFT ELBOW AIM LOCATOR
	spaceLocator -n ($name + "_lElbowIKC_TargetLctr");
	pointConstraint ($name + "_lElbowJ") ($name + "_lElbowIKC_TargetLctr");
	delete ($name + "_lElbowIKC_TargetLctr_pointConstraint1");
	pointConstraint -mo ($name + "_lShoulderJIK") ($name + "_lWristJIK") ($name + "_lElbowIKC_TargetLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene" ($name + "_lElbowIKC_TargetLctr") ($name + "_lElbowIKC");
	
	//CONNECTOR LINE
	curve -n ($name + "_lElbowIKConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lElbowIKConnectorCXShape");
	delete `parentConstraint ($name + "_lElbowIKC") ($name + "_lElbowIKConnectorCX") `;
	parent ($name + "_lElbowIKConnectorCX") ($name + "_lElbowIKC");
	spaceLocator -n ($name + "_lElbowIKAimConnectorLctr");
	spaceLocator -n ($name + "_lElbowIKTargetConnectorLctr");
	parent ($name + "_lElbowIKTargetConnectorLctr") ($name + "_lElbowIKAimConnectorLctr");
	delete `parentConstraint ($name + "_lElbowIKC") ($name + "_lElbowIKAimConnectorLctr")`;
	parent ($name + "_lElbowIKAimConnectorLctr") ($name + "_lElbowIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lElbowIKAimConnectorLctr");
	
	pointConstraint ($name + "_lElbowJ") ($name + "_lElbowIKTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lElbowJ") ($name + "_lElbowIKAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lElbowJ") ($name + "_lElbowIKConnectorCX");

	connectAttr -f ($name + "_lElbowIKTargetConnectorLctr.tz") ($name + "_lElbowIKConnectorCX.sz");
	setAttr ($name + "_lElbowIKAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_lElbowIKConnectorCX");
	setAttr -e-keyable true ($name + "_lElbowIKConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_lElbowIKConnectorCX.v");
	setAttr ($name + "_lElbowIKConnectorCX.template") 1;

	//IK SCALE
	
	//CREATE PROXY WRIST JOINT
	select ($name + "_lWristJIK");
	duplicate -n ($name + "_lWristJIKProxy");
	parent -w;
	group -n ($name + "_lWristJIKProxyG1");
	group -n ($name + "_lWristJIKProxyG2");
	setAttr ($name + "_lWristJIKProxy.rotateOrder") 1;
	setAttr ($name + "_lWristJIKProxyG1.rotateOrder") 1;

	
	move $lElbowLocation[0] $lElbowLocation[1] $lElbowLocation[2] ($name + "_lWristJIKProxyG2.scalePivot") ($name + "_lWristJIKProxyG2.rotatePivot") ;
	pointConstraint ($name + "_lWristJIK") ($name + "_lWristJIKProxyG1");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($name + "_lWristIKC") ($name + "_lWristJIKProxy");
	setAttr ($name + "_lWristJIKProxy_parentConstraint1.interpType") 2;
	parentConstraint -mo ($name + "_lElbowJIK") ($name + "_lWristJIKProxyG2");
	
	//NODES
	spaceLocator -n ($name + "_lArmLengthOriginLctr");
	pointConstraint ($name + "_lShoulderJIK") ($name + "_lArmLengthOriginLctr");
	
	spaceLocator -n ($name + "_lArmLengthEndLctr");
	parent ($name + "_lArmLengthEndLctr") ($name + "_lArmLengthOriginLctr");
	
	pointConstraint ($name + "_lWristIKC") ($name + "_lArmLengthEndLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lWristIKC") ($name + "_lArmLengthOriginLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lArmLength_MD");
	setAttr ($name + "_lArmLength_MD.operation") 2;
	connectAttr -f ($name + "_lArmLengthEndLctr.translateX") ($name + "_lArmLength_MD.input1X");
	setAttr ($name + "_lArmLength_MD.input2X") ($lArmLength[0]*2);
	
	shadingNode -asUtility condition -n ($name + "_lArmLength_Condition");
	connectAttr -f ($name + "_lArmLength_MD.outputX") ($name + "_lArmLength_Condition.firstTerm");
	setAttr ($name + "_lArmLength_Condition.secondTerm") 1;
	setAttr ($name + "_lArmLength_Condition.operation") 2;
	connectAttr -f ($name + "_lArmLength_MD.outputX") ($name + "_lArmLength_Condition.colorIfTrueR");
	
	shadingNode -asUtility blendColors -n ($name + "_lArmLength_Blnd");
	connectAttr -f ($name + "_lArmLength_Condition.outColorR") ($name + "_lArmLength_Blnd.color1R");
	setAttr ($name + "_lArmLength_Blnd.color2") -type double3 1 0 1 ;
	
	//LEFT ARM IK LOCK
	
	//LEFT ARM IK LOCK LOCATORS
	spaceLocator -n ($name + "_lShoulderIKLockLctr");
	spaceLocator -n ($name + "_lElbowIKLockLctr");
	spaceLocator -n ($name + "_lWristIKLockLctr");
	parent ($name + "_lElbowIKLockLctr") ($name + "_lShoulderIKLockLctr");
	parent ($name + "_lWristIKLockLctr") ($name + "_lElbowIKLockLctr");
	pointConstraint ($name + "_lShoulderJIK") ($name + "_lShoulderIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lElbowIKC") ($name + "_lShoulderIKLockLctr");
	pointConstraint ($name + "_lElbowIKC") ($name + "_lElbowIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lWristIKC") ($name + "_lElbowIKLockLctr");
	pointConstraint ($name + "_lWristIKC") ($name + "_lWristIKLockLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lShoulderLockLength_MD");
	setAttr ($name + "_lShoulderLockLength_MD.operation") 2;
	connectAttr -f ($name + "_lElbowIKLockLctr.translateX") ($name + "_lShoulderLockLength_MD.input1X");
	setAttr ($name + "_lShoulderLockLength_MD.input2X") $lElbowLength[0];
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lElbowLockLength_MD");
	setAttr ($name + "_lElbowLockLength_MD.operation") 2;
	connectAttr -f ($name + "_lWristIKLockLctr.translateX") ($name + "_lElbowLockLength_MD.input1X");
	setAttr ($name + "_lElbowLockLength_MD.input2X") $lWristLength[0];
	
	shadingNode -asUtility blendColors -n ($name + "_lShoulderLock_Blnd");
	connectAttr -f ($name + "_lShoulderLockLength_MD.outputX") ($name + "_lShoulderLock_Blnd.color1R");
	connectAttr -f ($name + "_lArmLength_Blnd.outputR") ($name + "_lShoulderLock_Blnd.color2R");
	
	shadingNode -asUtility blendColors -n ($name + "_lElbowLock_Blnd");
	connectAttr -f ($name + "_lElbowLockLength_MD.outputX") ($name + "_lElbowLock_Blnd.color1R");
	connectAttr -f ($name + "_lArmLength_Blnd.outputR") ($name + "_lElbowLock_Blnd.color2R");
	
	//ADD STRETCH TO LEFT IK WRIST CONTROL
	addAttr -ln "Stretch"  -at double  -min 0 -max 1 -dv 0 ($name + "_lWristIKC");
	setAttr -e-k true ($name + "_lWristIKC.Stretch");
	connectAttr -f ($name + "_lWristIKC.Stretch") ($name + "_lArmLength_Blnd.blender");
	
	//ADD ELBOW LOCK TO LEFT IK WRIST CONTROL
	addAttr -ln "ElbowLock"  -at double  -min 0 -max 1 -dv 0 ($name + "_lWristIKC");
	setAttr -e-k true ($name + "_lWristIKC.ElbowLock");
	connectAttr -f ($name + "_lWristIKC.ElbowLock") ($name + "_lShoulderLock_Blnd.blender");
	connectAttr -f ($name + "_lWristIKC.ElbowLock") ($name + "_lElbowLock_Blnd.blender");
	
	//ADD LEFT ARM SCALE
	addAttr -ln "ArmScale"  -at double  -min 0.01 -dv 1 ($name + "_lWristIKC");
	setAttr -e-k true ($name + "_lWristIKC.ArmScale");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lShoulderScale_MD");
	connectAttr -force ($name + "_lShoulderLock_Blnd.outputR") ($name + "_lShoulderScale_MD.input1X");
	connectAttr -force ($name + "_lWristIKC.ArmScale") ($name + "_lShoulderScale_MD.input2X");
	connectAttr -force ($name + "_lShoulderScale_MD.outputX") ($name + "_lShoulderJIK.scaleX");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lElbowScale_MD");
	connectAttr -force ($name + "_lElbowLock_Blnd.outputR") ($name + "_lElbowScale_MD.input1X");
	connectAttr -force ($name + "_lWristIKC.ArmScale") ($name + "_lElbowScale_MD.input2X");
	connectAttr -force ($name + "_lElbowScale_MD.outputX") ($name + "_lElbowJIK.scaleX");
	
	//ADD DYNAMIC PARENTING CHANNELS
	addAttr -ln "DynamicParenting"  -at double  -min 1 -max 1 -dv 1 ($name + "_lWristIKC");
	setAttr -e-keyable true ($name + "_lWristIKC.DynamicParenting");
	setAttr -lock true ($name + "_lWristIKC.DynamicParenting");
	addAttr -ln "Hips"  -at double  -min 0 -max 1 -dv 0 ($name + "_lWristIKC");
	setAttr -e-keyable true ($name + "_lWristIKC.Hips");
	addAttr -ln "Chest"  -at double  -min 0 -max 1 -dv 0 ($name + "_lWristIKC");
	setAttr -e-keyable true ($name + "_lWristIKC.Chest");
	addAttr -ln "Head"  -at double  -min 0 -max 1 -dv 0 ($name + "_lWristIKC");
	setAttr -e-keyable true ($name + "_lWristIKC.Head");
	
	//////////////////////////////////LEFT HAND IKFK SWITCH CONTROL///////////////////////////////////////////
	curve -n ($name + "_lArmSwitchC") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2
	-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2
	-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10
	-k 11 -k 12 -k 13 -k 14 ;
	pickWalk -d down;
	rename ($name + "_lArmSwitchCShape");
	
	move -r -os -wd 0 0 -8 ($name + "_lArmSwitchC");
	group -n ($name + "_lArmSwitchCG"); xform -os -piv 0 0 0;
	scale -r 0.2 0.2 0.2 ;
	makeIdentity -apply true -t 0 -r 1 -s 1;
	delete `parentConstraint ($name + "_lWristJ") ($name + "_lArmSwitchCG")`;
	
	setAttr (($name + "_lArmSwitchCG.scale"), ($lArmLength[0] / 3.5), ($lArmLength[0] / 3.5), ($lArmLength[0] / 3.5));
	makeIdentity -apply true -t 0 -s 1;
	
	addAttr -ln "SwitchIkFk"  -at double  -min 0 -max 1 -dv 1 ($name + "_lArmSwitchC");
	setAttr -e-k true ($name + "_lArmSwitchC.SwitchIkFk");
	addAttr -ln "AutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_lArmSwitchC");
	setAttr -e-k true ($name + "_lArmSwitchC.AutoVolume");
	
	$RRA_ToonArms = `checkBox -q -v RRA_ToonArms`;
	if ($RRA_ToonArms == 1)
	{
		addAttr -ln "curve"  -at double  -min 0 -max 1 -dv 0 ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.curve");

		addAttr -ln "upperCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.upperCurve");
		addAttr -ln "midCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.midCurve");
		addAttr -ln "lowerCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.lowerCurve");
	}
	
	parentConstraint -mo ($name + "_lWristJ") ($name + "_lArmSwitchCG");
	
	//////////////////////////////////LEFT PALM CONTROL/////////////////////////////
	
	curve -n ($name + "_lPalmC") -d 1 -p 0 0.5 0.5 -p 0 0.5 -0.5 -p 0 -0.5 -0.5 -p 0 -0.5 0.5 -p 0 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 ;
	pickWalk -d down;
	rename ($name + "_lPalmCShape");
	pickWalk -d up;
	//setAttr ($name + "_lPalmC.rotateOrder") 1;
	group -n ($name + "_lPalmCG") ($name + "_lPalmC");
	parent ($name + "_lPalmCG") ($name + "_lWristJG1");
	
	parentConstraint ($name + "_lPalmJ") ($name + "_lPalmCG");
	delete ($name + "_lPalmCG_parentConstraint1");
	$lHandSize2 = `getAttr ($name + "_lPalmJ.translateX")`;
	scale 1 ($lHandSize2*3) ($lHandSize2*1.2) ($name + "_lPalmCG");
	makeIdentity -apply true -t 0 -s 1 ($name + "_lPalmCG");
	
	parent -w ($name + "_lPalmCG");
	scaleConstraint ($name + "_lWristJG1") ($name + "_lPalmC");
	parentConstraint -mo ($name + "_lWristJ") ($name + "_lPalmCG");
	parentConstraint -mo ($name + "_lPalmC") ($name + "_lPalmJ");
	
	/////////////////////////////////////LEFT THUMB/////////////////////////////////
	select ($name + "_lFinger1JTip");
	if (`objExists ($name + "_lThumbJ1")`)
	{select -add ($name + "_lThumbJTip");}
	if (`objExists ($name + "_lFinger2JTip")`)
	{select -add ($name + "_lFinger2JTip");}
	if (`objExists ($name + "_lFinger3JTip")`)
	{select -add ($name + "_lFinger3JTip");}
	if (`objExists ($name + "_lFinger4JTip")`)
	{select -add ($name + "_lFinger4JTip");}
	if (`objExists ($name + "_lFinger5JTip")`)
	{select -add ($name + "_lFinger5JTip");}
	if (`objExists ($name + "_lFinger6JTip")`)
	{select -add ($name + "_lFinger6JTip");}
	if (`objExists ($name + "_lFinger7JTip")`)
	{select -add ($name + "_lFinger7JTip");}
	if (`objExists ($name + "_lFinger8JTip")`)
	{select -add ($name + "_lFinger8JTip");}
	if (`objExists ($name + "_lFinger9JTip")`)
	{select -add ($name + "_lFinger9JTip");}
	
	joint -e -oj xyz -secondaryAxisOrient yup -ch -zso;
	
	if (`objExists ($name + "_lThumbJ1")`)
	{
		//THUMB1
		circle -n ($name + "_lThumbJ1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lThumbJ1C");
		group -n ($name + "_lThumbJ1CRotG") ($name + "_lThumbJ1C");
		group -n ($name + "_lThumbJ1CG") ($name + "_lThumbJ1CRotG");
		delete `parentConstraint ($name + "_lThumbJ1") ($name + "_lThumbJ1CG")`;
		$lThumbJ2Length = `xform -q -t ($name + "_lThumbJ2")`;
		$lThumbJ3Length = `xform -q -t ($name + "_lThumbJ3")`;
		$JointLength[0] = (($lThumbJ2Length[2] + $lThumbJ3Length[2]) /2);
		setAttr (($name + "_lThumbJ1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lThumbJ1C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lThumbJ1C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lThumbJ1C");
		makeIdentity -apply true -s 1 ($name + "_lThumbJ1CG");
		parent ($name + "_lThumbJ1CG") ($name + "_lWristJG1");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_lThumbJ1 RRA_lThumbJ2 ($name + "_lThumbJ1CG")`;
		
		//THUMB2
		circle -n ($name + "_lThumbJ2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lThumbJ2C");
		group -n ($name + "_lThumbJ2CRotG") ($name + "_lThumbJ2C");
		group -n ($name + "_lThumbJ2CG") ($name + "_lThumbJ2CRotG");
		delete `parentConstraint ($name + "_lThumbJ2") ($name + "_lThumbJ2CG")`;
		setAttr (($name + "_lThumbJ2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lThumbJ2C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lThumbJ2C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lThumbJ2C");
		makeIdentity -apply true -s 1 ($name + "_lThumbJ2CG");
		parent ($name + "_lThumbJ2CG") ($name + "_lWristJG1");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_lThumbJ2 RRA_lThumbJ3 ($name + "_lThumbJ2CG")`;
		
		//THUMB3
		circle -n ($name + "_lThumbJ3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lThumbJ3C");
		group -n ($name + "_lThumbJ3CRotG") ($name + "_lThumbJ3C");
		group -n ($name + "_lThumbJ3CG") ($name + "_lThumbJ3CRotG");
		delete `parentConstraint ($name + "_lThumbJ3") ($name + "_lThumbJ3CG")`;
		setAttr (($name + "_lThumbJ3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lThumbJ3C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lThumbJ3C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lThumbJ3C");
		makeIdentity -apply true -s 1 ($name + "_lThumbJ3CG");
		parent ($name + "_lThumbJ3CG") ($name + "_lWristJG1");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_lThumbJ3 RRA_lThumbJTip ($name + "_lThumbJ3CG")`;
		
		parentConstraint -mo ($name + "_lThumbJ1C") ($name + "_lThumbJ2CG");
		parentConstraint -mo ($name + "_lThumbJ2C") ($name + "_lThumbJ3CG");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ2C.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ3C.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ1.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ2.scale");
		connectAttr -f ($name + "_lThumbJ1C.scale") ($name + "_lThumbJ3.scale");

		//ADD ATTRIBUTES TO ARM SWITCH CONTROL
		addAttr -ln "thumbChannels"  -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true -l true ($name + "_lArmSwitchC.thumbChannels");
		
		//CURL
		addAttr -ln "thumbCurl1" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbCurl1");
		addAttr -ln "thumbCurl2" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbCurl2");
		addAttr -ln "thumbCurl3" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbCurl3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lThumbCurl_MD");
		setAttr ($name + "_lThumbCurl_MD.input2X") 10;
		setAttr ($name + "_lThumbCurl_MD.input2Y") 10;
		setAttr ($name + "_lThumbCurl_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.thumbCurl1") ($name + "_lThumbCurl_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.thumbCurl2") ($name + "_lThumbCurl_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.thumbCurl3") ($name + "_lThumbCurl_MD.input1Z");
		
		connectAttr -force ($name + "_lThumbCurl_MD.outputX") ($name + "_lThumbJ1CRotG.rotateZ");
		connectAttr -force ($name + "_lThumbCurl_MD.outputY") ($name + "_lThumbJ2CRotG.rotateZ");
		connectAttr -force ($name + "_lThumbCurl_MD.outputZ") ($name + "_lThumbJ3CRotG.rotateZ");

		//SPLAY
		addAttr -ln "thumbSplay1" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbSplay1");
		addAttr -ln "thumbSplay2" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbSplay2");
		addAttr -ln "thumbSplay3" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbSplay3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lThumbSplay_MD");
		setAttr ($name + "_lThumbSplay_MD.input2X") 10;
		setAttr ($name + "_lThumbSplay_MD.input2Y") 10;
		setAttr ($name + "_lThumbSplay_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.thumbSplay1") ($name + "_lThumbSplay_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.thumbSplay2") ($name + "_lThumbSplay_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.thumbSplay3") ($name + "_lThumbSplay_MD.input1Z");
		
		connectAttr -force ($name + "_lThumbSplay_MD.outputX") ($name + "_lThumbJ1CRotG.rotateY");
		connectAttr -force ($name + "_lThumbSplay_MD.outputY") ($name + "_lThumbJ2CRotG.rotateY");
		connectAttr -force ($name + "_lThumbSplay_MD.outputZ") ($name + "_lThumbJ3CRotG.rotateY");

		//TWIST
		addAttr -ln "thumbTwist1" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbTwist1");
		addAttr -ln "thumbTwist2" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbTwist2");
		addAttr -ln "thumbTwist3" -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.thumbTwist3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lThumbTwist_MD");
		setAttr ($name + "_lThumbTwist_MD.input2X") 10;
		setAttr ($name + "_lThumbTwist_MD.input2Y") 10;
		setAttr ($name + "_lThumbTwist_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.thumbTwist1") ($name + "_lThumbTwist_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.thumbTwist2") ($name + "_lThumbTwist_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.thumbTwist3") ($name + "_lThumbTwist_MD.input1Z");
		
		connectAttr -force ($name + "_lThumbTwist_MD.outputX") ($name + "_lThumbJ1CRotG.rotateX");
		connectAttr -force ($name + "_lThumbTwist_MD.outputY") ($name + "_lThumbJ2CRotG.rotateX");
		connectAttr -force ($name + "_lThumbTwist_MD.outputZ") ($name + "_lThumbJ3CRotG.rotateX");
	}
	
	///////////////////////////////////////LEFT FINGER/////////////////////////////////////
	select ($name + "_lFinger*J1");
	$fingers = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $fingers)
	{
		//JOINT 1
		circle -n ($name + "_lFinger" + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lFinger" + $i + "J1C");
		group -n ($name + "_lFinger" + $i + "J1CRotG") ($name + "_lFinger" + $i + "J1C");
		group -n ($name + "_lFinger" + $i + "J1CG") ($name + "_lFinger" + $i + "J1CRotG");
		delete `parentConstraint ($name + "_lFinger" + $i + "J1") ($name + "_lFinger" + $i + "J1CG")`;
		$lFingerJ2Length = `xform -q -t ($name + "_lFinger" + $i + "J2")`;
		$lFingerJ3Length = `xform -q -t ($name + "_lFinger" + $i + "J3")`;
		$JointLength[0] = (($lFingerJ2Length[0] + $lFingerJ3Length[0]) /2);
		setAttr (($name + "_lFinger" + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lFinger" + $i + "J1C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lFinger" + $i + "J1C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lFinger" + $i + "J1C");
		makeIdentity -apply true -s 1 ($name + "_lFinger" + $i + "J1CG");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_lFinger" + $i + "J1") ("RRA_lFinger" + $i + "J2") ($name + "_lFinger" + $i + "J1CG")`;
		
		//JOINT 2
		circle -n ($name + "_lFinger" + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lFinger" + $i + "J2C");
		group -n ($name + "_lFinger" + $i + "J2CRotG") ($name + "_lFinger" + $i + "J2C");
		group -n ($name + "_lFinger" + $i + "J2CG") ($name + "_lFinger" + $i + "J2CRotG");
		delete `parentConstraint ($name + "_lFinger" + $i + "J2") ($name + "_lFinger" + $i + "J2CG")`;
		setAttr (($name + "_lFinger" + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lFinger" + $i + "J2C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lFinger" + $i + "J2C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lFinger" + $i + "J2C");
		makeIdentity -apply true -s 1 ($name + "_lFinger" + $i + "J2CG");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_lFinger" + $i + "J2") ("RRA_lFinger" + $i + "J3") ($name + "_lFinger" + $i + "J2CG")`;
		
		//JOINT 3
		circle -n ($name + "_lFinger" + $i + "J3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_lFinger" + $i + "J3C");
		group -n ($name + "_lFinger" + $i + "J3CRotG") ($name + "_lFinger" + $i + "J3C");
		group -n ($name + "_lFinger" + $i + "J3CG") ($name + "_lFinger" + $i + "J3CRotG");
		delete `parentConstraint ($name + "_lFinger" + $i + "J3") ($name + "_lFinger" + $i + "J3CG")`;
		setAttr (($name + "_lFinger" + $i + "J3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_lFinger" + $i + "J3C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_lFinger" + $i + "J3C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_lFinger" + $i + "J3C");
		makeIdentity -apply true -s 1 ($name + "_lFinger" + $i + "J3CG");
		delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_lFinger" + $i + "J3") ("RRA_lFinger" + $i + "JTip") ($name + "_lFinger" + $i + "J3CG")`;
		
		parent ($name + "_lFinger" + $i + "J1CG") ($name + "_lFinger" + $i + "J2CG") ($name + "_lFinger" + $i + "J3CG") ($name + "_lPalmC");
		connectAttr -f ($name + "_lFinger" + $i + "J1C.scale") ($name + "_lFinger" + $i + "J2C.scale");
		connectAttr -f ($name + "_lFinger" + $i + "J1C.scale") ($name + "_lFinger" + $i + "J3C.scale");
		connectAttr -f ($name + "_lFinger" + $i + "J1C.scale") ($name + "_lFinger" + $i + "J1.scale");
		connectAttr -f ($name + "_lFinger" + $i + "J1C.scale") ($name + "_lFinger" + $i + "J2.scale");
		connectAttr -f ($name + "_lFinger" + $i + "J1C.scale") ($name + "_lFinger" + $i + "J3.scale");
		
		//ADD ATTRIBUTES TO PALM CONTROL
		addAttr -ln ("finger" + $i + "Channels")  -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true -l true ($name + "_lArmSwitchC.finger" + $i + "Channels");
		
		//CURL
		addAttr -ln ("finger" + $i + "Curl1") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Curl1");
		addAttr -ln ("finger" + $i + "Curl2") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Curl2");
		addAttr -ln ("finger" + $i + "Curl3") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Curl3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lFinger" + $i + "Curl_MD");
		setAttr ($name + "_lFinger" + $i + "Curl_MD.input2X") 10;
		setAttr ($name + "_lFinger" + $i + "Curl_MD.input2Y") 10;
		setAttr ($name + "_lFinger" + $i + "Curl_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Curl1") ($name + "_lFinger" + $i + "Curl_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Curl2") ($name + "_lFinger" + $i + "Curl_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Curl3") ($name + "_lFinger" + $i + "Curl_MD.input1Z");
		
		connectAttr -force ($name + "_lFinger" + $i + "Curl_MD.outputX") ($name + "_lFinger" + $i + "J1CRotG.rotateZ");
		connectAttr -force ($name + "_lFinger" + $i + "Curl_MD.outputY") ($name + "_lFinger" + $i + "J2CRotG.rotateZ");
		connectAttr -force ($name + "_lFinger" + $i + "Curl_MD.outputZ") ($name + "_lFinger" + $i + "J3CRotG.rotateZ");

		//SPLAY
		addAttr -ln ("finger" + $i + "Splay1") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Splay1");
		addAttr -ln ("finger" + $i + "Splay2") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Splay2");
		addAttr -ln ("finger" + $i + "Splay3") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Splay3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lFinger" + $i + "Splay_MD");
		setAttr ($name + "_lFinger" + $i + "Splay_MD.input2X") 10;
		setAttr ($name + "_lFinger" + $i + "Splay_MD.input2Y") 10;
		setAttr ($name + "_lFinger" + $i + "Splay_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Splay1") ($name + "_lFinger" + $i + "Splay_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Splay2") ($name + "_lFinger" + $i + "Splay_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Splay3") ($name + "_lFinger" + $i + "Splay_MD.input1Z");
		
		connectAttr -force ($name + "_lFinger" + $i + "Splay_MD.outputX") ($name + "_lFinger" + $i + "J1CRotG.rotateY");
		connectAttr -force ($name + "_lFinger" + $i + "Splay_MD.outputY") ($name + "_lFinger" + $i + "J2CRotG.rotateY");
		connectAttr -force ($name + "_lFinger" + $i + "Splay_MD.outputZ") ($name + "_lFinger" + $i + "J3CRotG.rotateY");
		
		//CURL
		addAttr -ln ("finger" + $i + "Twist1") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Twist1");
		addAttr -ln ("finger" + $i + "Twist2") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Twist2");
		addAttr -ln ("finger" + $i + "Twist3") -at double ($name + "_lArmSwitchC");
		setAttr -e-keyable true ($name + "_lArmSwitchC.finger" + $i + "Twist3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_lFinger" + $i + "Twist_MD");
		setAttr ($name + "_lFinger" + $i + "Twist_MD.input2X") 10;
		setAttr ($name + "_lFinger" + $i + "Twist_MD.input2Y") 10;
		setAttr ($name + "_lFinger" + $i + "Twist_MD.input2Z") 10;
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Twist1") ($name + "_lFinger" + $i + "Twist_MD.input1X");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Twist2") ($name + "_lFinger" + $i + "Twist_MD.input1Y");
		connectAttr -force ($name + "_lArmSwitchC.finger" + $i + "Twist3") ($name + "_lFinger" + $i + "Twist_MD.input1Z");
		
		connectAttr -force ($name + "_lFinger" + $i + "Twist_MD.outputX") ($name + "_lFinger" + $i + "J1CRotG.rotateX");
		connectAttr -force ($name + "_lFinger" + $i + "Twist_MD.outputY") ($name + "_lFinger" + $i + "J2CRotG.rotateX");
		connectAttr -force ($name + "_lFinger" + $i + "Twist_MD.outputZ") ($name + "_lFinger" + $i + "J3CRotG.rotateX");

		
		$i++;
	}
	
	/////////////////////////////////////LEFT LEG/////////////////////////////////////
	
	//LEFT LEG FK CONTROL
	
	circle -n ($name + "_lHipFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	group -n ($name + "_lHipFKCG");
	setAttr ($name + "_lHipFKCG.rotateOrder") 1;
	parent ($name + "_lHipFKCG") ($name + "_lHipJ");
	makeIdentity -apply false -t 1 -r 1 -s 1 ($name + "_lHipFKCG");
	parent -w ($name + "_lHipFKCG");
	$lAnkle = `xform -q -t ($name + "_lAnkleJ")`;
	$lKnee = `xform -q -t ($name + "_lKneeJ")`;
	$JointLength[0] = (($lKnee[0] + $lAnkle[0]) /2);
	
	setAttr (($name + "_lHipFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	//LEFT KNEE FK CONTROL
	circle -n ($name + "_lKneeFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	group -n ($name + "_lKneeFKCG");
	setAttr ($name + "_lKneeFKCG.rotateOrder") 1;
	delete `parentConstraint ($name + "_lKneeJ") ($name + "_lKneeFKCG")`;
	delete `aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" -skip x -skip y RRA_lKneeLctr ($name + "_lKneeFKCG")`;
	$lAnkle = `xform -q -t ($name + "_lAnkleJ")`;
	$lKnee = `xform -q -t ($name + "_lKneeJ")`;
	$JointLength[0] = (($lKnee[0] + $lAnkle[0]) /2);
	
	setAttr (($name + "_lKneeFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	
	//LEFT ANKLE FK CONTROL
	circle -n ($name + "_lAnkleFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_lAnkleFKC");
	group -n ($name + "_lAnkleFKCG") ($name + "_lAnkleFKC");
	setAttr ($name + "_lAnkleFKCG.rotateOrder") 1;
	parent ($name + "_lAnkleFKCG") ($name + "_lAnkleJ");
	makeIdentity -apply false -t 1 -s 1 ($name + "_lAnkleFKCG");
	parent -w ($name + "_lAnkleFKCG");
	setAttr ($name + "_lAnkleFKCG.rotateX") 90;
	setAttr ($name + "_lAnkleFKCG.rotateY") -90;
	delete `aimConstraint -aimVector 0 1 0 -upVector -1 0 0 -worldUpType "scene" -skip x -skip y ($name + "_lBallJ") ($name + "_lToeJ") ($name + "_lAnkleFKCG")`;
	$lAnkle = `xform -q -t ($name + "_lAnkleJ")`;
	$lKnee = `xform -q -t ($name + "_lKneeJ")`;
	$JointLength[0] = (($lKnee[0] + $lAnkle[0]) /2);
	
	setAttr (($name + "_lAnkleFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lAnkleFKC");
	
	//LEFT BALL FK CONTROL
	circle -n ($name + "_lBallFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_lBallFKC");
	group -n ($name + "_lBallFKCG") ($name + "_lBallFKC");
	setAttr ($name + "_lBallFKCG.rotateOrder") 1;
	delete `parentConstraint ($name + "_lBallJ") ($name + "_lBallFKCG")`;
	$lAnkle = `xform -q -t ($name + "_lAnkleJ")`;
	$lKnee = `xform -q -t ($name + "_lKneeJ")`;
	$JointLength[0] = (($lKnee[0] + $lAnkle[0]) /2);
	
	setAttr (($name + "_lBallFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	//DETACH FK LEG JOINTS FOR SCALE COMPENSATION
	parent -w ($name + "_lKneeJFK") ($name + "_lAnkleJFK");
	group -n ($name + "_lAnkleJFKG1") ($name + "_lAnkleJFK");
	group -n ($name + "_lAnkleJFKG2") ($name + "_lAnkleJFKG1");
	$lAnkleLocation = `xform -q -ws -t ($name + "_lAnkleJ")`;
	move $lAnkleLocation[0] $lAnkleLocation[1] $lAnkleLocation[2] ($name + "_lAnkleJFKG1.scalePivot") ($name + "_lAnkleJFKG1.rotatePivot") ;
	$lKneeLocation = `xform -q -ws -t ($name + "_lKneeJ")`;
	move $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($name + "_lAnkleJFKG2.scalePivot") ($name + "_lAnkleJFKG2.rotatePivot") ;
	pointConstraint ($name + "_lAnkleFKC") ($name + "_lAnkleJFKG1");
	parentConstraint -mo ($name + "_lKneeJFK") ($name + "_lAnkleJFKG2");
	
	group -n ($name + "_lKneeJFKG1") ($name + "_lKneeJFK");
	group -n ($name + "_lKneeJFKG2") ($name + "_lKneeJFKG1");
	$lHipLocation = `xform -q -ws -t ($name + "_lHipJ")`;
	move $lKneeLocation[0] $lKneeLocation[1] $lKneeLocation[2] ($name + "_lKneeJFKG1.scalePivot") ($name + "_lKneeJFKG1.rotatePivot") ;
	move $lHipLocation[0] $lHipLocation[1] $lHipLocation[2] ($name + "_lKneeJFKG2.scalePivot") ($name + "_lKneeJFKG2.rotatePivot") ;
	pointConstraint ($name + "_lKneeFKC") ($name + "_lKneeJFKG1");
	parentConstraint -mo ($name + "_lHipJFK") ($name + "_lKneeJFKG2");
	
	
	//LEFT KNEE IK CONTROL
	curve -n ($name + "_lKneeIKC") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0
	-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0
	-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0	
	-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9
	-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22
	-k 23 -k 24 ;
	pickWalk -d down;
	rename ($name + "_lKneeIKCShape");
	
	move -r 0 0 0.95 ($name + "_lKneeIKC.cv[12]")  ($name + "_lKneeIKC.cv[0]") ($name + "_lKneeIKC.cv[24]") ($name + "_lKneeIKC.cv[18]") ($name + "_lKneeIKC.cv[6]") ;
	move -r 0 0 -0.65 ($name + "_lKneeIKC.cv[3]") ($name + "_lKneeIKC.cv[9]") ($name + "_lKneeIKC.cv[15]") ($name + "_lKneeIKC.cv[21]") ;
	
	group -n ($name + "_lKneeIKCG")  ($name + "_lKneeIKC");
	delete `parentConstraint RRA_lKnee ($name + "_lKneeIKCG")`;
	$lKneeLength = `xform -q -t ($name + "_lKneeJ")`;
	$lAnkleLength = `xform -q -t ($name + "_lAnkleJ")`;
	$lLegLength[0] = (($lKneeLength[0] + $lAnkleLength[0]) /-3.5);
	setAttr ($name + "_lKneeIKC.tz") ($lLegLength[0] * -2);
	setAttr (($name + "_lKneeIKC.scale"), ($lLegLength[0] / 14), ($lLegLength[0] / 14), ($lLegLength[0] / 14));
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lKneeIKC");
	
	//LEFT KNEE AIM LOCATOR
	spaceLocator -n ($name + "_lKneeIKC_TargetLctr");
	delete `pointConstraint ($name + "_lKneeJ") ($name + "_lKneeIKC_TargetLctr")`;
	pointConstraint -mo ($name + "_lHipJIK") ($name + "_lAnkleJIK") ($name + "_lKneeIKC_TargetLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "scene" ($name + "_lKneeIKC_TargetLctr") ($name + "_lKneeIKC");
	
	//CONNECTOR LINE
	curve -n ($name + "_lKneeIKConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_lKneeIKConnectorCXShape");
	delete `parentConstraint ($name + "_lKneeIKC") ($name + "_lKneeIKConnectorCX") `;
	parent ($name + "_lKneeIKConnectorCX") ($name + "_lKneeIKC");
	spaceLocator -n ($name + "_lKneeIKAimConnectorLctr");
	spaceLocator -n ($name + "_lKneeIKTargetConnectorLctr");
	parent ($name + "_lKneeIKTargetConnectorLctr") ($name + "_lKneeIKAimConnectorLctr");
	delete `parentConstraint ($name + "_lKneeIKC") ($name + "_lKneeIKAimConnectorLctr")`;
	parent ($name + "_lKneeIKAimConnectorLctr") ($name + "_lKneeIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lKneeIKAimConnectorLctr");
	
	pointConstraint ($name + "_lKneeJ") ($name + "_lKneeIKTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lKneeJ") ($name + "_lKneeIKAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_lKneeJ") ($name + "_lKneeIKConnectorCX");

	connectAttr -f ($name + "_lKneeIKTargetConnectorLctr.tz") ($name + "_lKneeIKConnectorCX.sz");
	setAttr ($name + "_lKneeIKAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_lKneeIKConnectorCX");
	setAttr -e-keyable true ($name + "_lKneeIKConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_lKneeIKConnectorCX.v");
	setAttr ($name + "_lKneeIKConnectorCX.template") 1;

	//LEFT CONTROLS
		//LEFT IK//
			//LEFT FOOT IK CONTROL
	circle  -n ($name + "_lFootIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 2.5 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;
	move -r -0.203244 0 0.472547  ($name + "_lFootIKC.cv[1]") ;
	move -r 0.108438 0 0.70882 ($name + "_lFootIKC.cv[2]") ;
	move -r 0.892819 0 1.009532 ($name + "_lFootIKC.cv[3]") ;
	move -r 2.01238 0 0.902135 ($name + "_lFootIKC.cv[4]") ;
	move -r 2.200896 0 0.601079 ($name + "_lFootIKC.cv[5]") ;
	move -r 1.450752 0 0.3308 ($name + "_lFootIKC.cv[6]") ;
	move -r 0.406025 0 0.214794 ($name + "_lFootIKC.cv[7]") ;
	move -r -0.0357198 0 0.902544 ($name + "_lFootIKC.cv[8]") ;
	move -r -0.085452 0 0.808986 ($name + "_lFootIKC.cv[9]") ;
	move -r -0.39679 0 0.70882 ($name + "_lFootIKC.cv[10]") ;
	move -r -0.649352 0 0.590683 ($name + "_lFootIKC.cv[11]") ;
	move -r -0.986916 0 0.590683 ($name + "_lFootIKC.cv[12]") ;
	move -r -1.629254 0 0.579944 ($name + "_lFootIKC.cv[13]") ;
	move -r -1.472333 0 0.590683 ($name + "_lFootIKC.cv[14]") ;
	move -r -0.7637 0 0.590683 ($name + "_lFootIKC.cv[15]") ;
	move -r -0.353831 0 0.440328 ($name + "_lFootIKC.cv[0]") ;
	move -r -os -wd 0 0.333 0 ($name + "_lFootIKC.cv[4:5]") ($name + "_lFootIKC.cv[13:14]") ;
	move -r -os -wd 0 0 1 ($name + "_lFootIKC.cv[0:15]") ;
	move -r 0 0 -0.2 ($name + "_lFootIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lFootIKC");
	delete -ch ($name + "_lFootIKC");
	group -n ($name + "_lFootIKCG") ($name + "_lFootIKC"); xform -os -piv 0 0 0;
	setAttr ($name + "_lFootIKC.rotateOrder") 1;
	
	//LEFT TOE CONTROL
	circle -n ($name + "_lToeIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_lToeIKC");
	move -r -0.25107 1.330277 2.206782 ($name + "_lToeIKC.cv[1]") ;
	move -r 0.254402 1.084741 1.162191 ($name + "_lToeIKC.cv[0]") ;
	move -r 0.0513063 0.450871 -0.204969 ($name + "_lToeIKC.cv[7]") ;
	move -r 0.187803 0.259426 -0.108661 ($name + "_lToeIKC.cv[6]") ;
	move -r -0.276837 0.154413 0.307813 ($name + "_lToeIKC.cv[5]") ;
	move -r -0.395115 0.259426 -0.0326967 ($name + "_lToeIKC.cv[4]") ;
	move -r 0.00260226 0.47359 -0.204969 ($name + "_lToeIKC.cv[3]") ;
	move -r -0.369241 1.189888 1.331089 ($name + "_lToeIKC.cv[2]") ;
	move -r -os -wd 0 0 0.9 ($name + "_lToeIKC.cv[0:7]") ;
	move -r -.001 0 1.85 ($name + "_lToeIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lToeIKC");
	group -n ($name + "_lToeIKCG") ($name + "_lToeIKC");
	parent ($name + "_lToeIKCG") ($name + "_lFootIKCG");
	
	
	delete `pointConstraint -skip y ($name + "_lAnkleJ") ($name + "_lFootIKCG")`;
	delete `aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "none"
	-skip x -skip z ($name + "_lToeJ") ($name + "_lBallJ") ($name + "_lFootIKCG")`;
	$lAnklePosition = `xform -ws -q -rp ($name + "_lAnkleJ")`;
	$lBallLocation = `xform  -q -t ($name + "_lBallJ")`;
	$lToeLocation = `xform -q -t ($name + "_lToeJ")`;
	setAttr (($name + "_lFootIKCG.scale"), (($lBallLocation[0]+$lToeLocation[0])/3.5), (($lBallLocation[0]+$lToeLocation[0])/3.5), (($lBallLocation[0]+$lToeLocation[0])/3.5));
	makeIdentity -apply true -t 0 -s 1 ($name + "_lFootIKCG");
	
	
	//////////////////////////////////LEFT LEG IKFK SWITCH CONTROL///////////////////////////////////////////
	curve -n ($name + "_lLegSwitchC") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2
	-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2
	-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10
	-k 11 -k 12 -k 13 -k 14 ;
	pickWalk -d down;
	rename ($name + "_lLegSwitchCShape");

	move 0 0 -1.5 ($name + "_lLegSwitchC");
	
	scale -r 0.2 0.2 0.2 ($name + "_lLegSwitchC");
	makeIdentity -apply true -t 1 -r 1 -s 1;
	group -n ($name + "_lLegSwitchCG"); xform -os -piv 0 0 0;
	delete `pointConstraint ($name + "_lAnkleJ") ($name + "_lLegSwitchCG")`;
	
	
	delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType "none"
	-skip x -skip z ($name + "_lBallJ") ($name + "_lLegSwitchCG")`;
	$lKneeLength = `xform -q -t ($name + "_lKneeJ")`;
	$lAnkleLength = `xform -q -t ($name + "_lAnkleJ")`;
	$lLegLength[0] = (($lKneeLength[0] + $lAnkleLength[0]) /2);
	
	setAttr (($name + "_lLegSwitchCG.scale"), (($lBallLocation[0]+$lToeLocation[0])/4), (($lBallLocation[0]+$lToeLocation[0])/4), (($lBallLocation[0]+$lToeLocation[0])/4));
	makeIdentity -apply true -s 1 ($name + "_lLegSwitchCG");
	
	addAttr -ln "SwitchIkFk"  -at double  -min 0 -max 1 -dv 0 ($name + "_lLegSwitchC");
	setAttr -e-k true ($name + "_lLegSwitchC.SwitchIkFk");
	addAttr -ln "AutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_lLegSwitchC");
	setAttr -e-k true ($name + "_lLegSwitchC.AutoVolume");
	
	$RRA_ToonLegs = `checkBox -q -v RRA_ToonLegs`;
	if ($RRA_ToonLegs == 1)
	{
		addAttr -ln "curve"  -at double  -min 0 -max 1 -dv 0 ($name + "_lLegSwitchC");
		setAttr -e-keyable true ($name + "_lLegSwitchC.curve");

		addAttr -ln "upperCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lLegSwitchC");
		setAttr -e-keyable true ($name + "_lLegSwitchC.upperCurve");
		addAttr -ln "midCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lLegSwitchC");
		setAttr -e-keyable true ($name + "_lLegSwitchC.midCurve");
		addAttr -ln "lowerCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_lLegSwitchC");
		setAttr -e-keyable true ($name + "_lLegSwitchC.lowerCurve");
	}

	parentConstraint -mo ($name + "_lAnkleJ") ($name + "_lLegSwitchCG");

	//MOVE TOE CTRL PIVOT
	$limbJointLoc = `xform -ws -q -t ($name + "_lToeJ")`;
	move $limbJointLoc[0]  $limbJointLoc[1] $limbJointLoc[2] ($name + "_lToeIKC.scalePivot") ($name + "_lToeIKC.rotatePivot") ;
	move $lAnklePosition[0] $lAnklePosition[1] $lAnklePosition[2] ($name + "_lFootIKC.scalePivot") ($name + "_lFootIKC.rotatePivot") ;
	
	makeIdentity -apply true -t 0 -s 1 ($name + "_lHipFKCG");
	
	///////////////////////////////////////LEFT TOES/////////////////////////////////////
	if (`objExists ($name + "_lToe01J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe01J1");}
	if (`objExists ($name + "_lToe02J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe02J1");}
	if (`objExists ($name + "_lToe03J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe03J1");}
	if (`objExists ($name + "_lToe04J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe04J1");}
	if (`objExists ($name + "_lToe05J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe05J1");}
	if (`objExists ($name + "_lToe06J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe06J1");}
	if (`objExists ($name + "_lToe07J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe07J1");}
	if (`objExists ($name + "_lToe08J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe08J1");}
	if (`objExists ($name + "_lToe09J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe09J1");}
	if (`objExists ($name + "_lToe10J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_lToe10J1");}
	
	
	///////////////////////////////////////LEFT TOE CONTROLS/////////////////////////////////////

	if (`objExists ($name + "_lToe01J1")`)
	{
		select ($name + "_lToe??J1");
		$toes = `ls -sl`;
		string $each;
		string $nPad = "0";
		$i = 1;
		for ($each in $toes)
		{
			if 	($i >= 10)
			{
				$nPad = "";
			}
			if ($i == 1)
			{
				//JOINT 1
				circle -n ($name + "_lToe" + $nPad + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
				delete -ch ($name + "_lToe" + $nPad + $i + "J1C");
				group -n ($name + "_lToe" + $nPad + $i + "J1CRotG") ($name + "_lToe" + $nPad + $i + "J1C");
				group -n ($name + "_lToe" + $nPad + $i + "J1CG") ($name + "_lToe" + $nPad + $i + "J1CRotG");
				delete `parentConstraint ($name + "_lToe" + $nPad + $i + "J1") ($name + "_lToe" + $nPad + $i + "J1CG")`;
				$lToeJ2Length = `xform -q -t ($name + "_lToe" + $nPad + $i + "J2")`;
				$lToeJTipLength = `xform -q -t ($name + "_lToe" + $nPad + $i + "JTip")`;
				$JointLength[0] = (($lToeJ2Length[0] + $lToeJTipLength[0]) /2);
				setAttr (($name + "_lToe" + $nPad + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_lToe" + $nPad + $i + "J1CG");
				delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_lToe" + $nPad + $i + "J1") ("RRA_lToe" + $nPad + $i + "J2") ($name + "_lToe" + $nPad + $i + "J1CG")`;
				parentConstraint ($name + "_lToe" + $nPad + $i + "J1C") ($name + "_lToe" + $nPad + $i + "J1");
				parentConstraint -mo ($name + "_lBallJ") ($name + "_lToe" + $nPad + $i + "J1CG");
				
				//JOINT 2
				circle -n ($name + "_lToe" + $nPad + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_lToe" + $nPad + $i + "J2C");
				group -n ($name + "_lToe" + $nPad + $i + "J2CRotG") ($name + "_lToe" + $nPad + $i + "J2C");
				group -n ($name + "_lToe" + $nPad + $i + "J2CG") ($name + "_lToe" + $nPad + $i + "J2CRotG");
				delete `parentConstraint ($name + "_lToe" + $nPad + $i + "J2") ($name + "_lToe" + $nPad + $i + "J2CG")`;
				setAttr (($name + "_lToe" + $nPad + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_lToe" + $nPad + $i + "J2CG");
				delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_lToe" + $nPad + $i + "J2") ("RRA_lToe" + $nPad + $i + "JTip") ($name + "_lToe" + $nPad + $i + "J2CG")`;
				parentConstraint ($name + "_lToe" + $nPad + $i + "J2C") ($name + "_lToe" + $nPad + $i + "J2");
				parentConstraint -mo ($name + "_lToe" + $nPad + $i + "J1C") ($name + "_lToe" + $nPad + $i + "J2CG");


				//ADD ATTRIBUTES TO ARM SWITCH CONTROL
				addAttr -ln ("toe" + $nPad + $i + "Channels")  -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true -l true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Channels");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Curl1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl1");
				addAttr -ln ("toe" + $nPad + $i + "Curl2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Curl_MD");
				setAttr ($name + "_lToe" + $nPad + $i + "Curl_MD.input2X") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Curl_MD.input2Y") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Curl_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl1") ($name + "_lToe" + $nPad + $i + "Curl_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl2") ($name + "_lToe" + $nPad + $i + "Curl_MD.input1Y");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Curl_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateZ");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Curl_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateZ");
		
				//SPLAY
				addAttr -ln ("toe" + $nPad + $i + "Splay1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay1");
				addAttr -ln ("toe" + $nPad + $i + "Splay2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Splay_MD");
				setAttr ($name + "_lToe" + $nPad + $i + "Splay_MD.input2X") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Splay_MD.input2Y") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Splay_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay1") ($name + "_lToe" + $nPad + $i + "Splay_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay2") ($name + "_lToe" + $nPad + $i + "Splay_MD.input1Y");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Splay_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateY");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Splay_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateY");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Twist1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist1");
				addAttr -ln ("toe" + $nPad + $i + "Twist2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Twist_MD");
				setAttr ($name + "_lToe" + $nPad + $i + "Twist_MD.input2X") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Twist_MD.input2Y") 10;
				setAttr ($name + "_lToe" + $nPad + $i + "Twist_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist1") ($name + "_lToe" + $nPad + $i + "Twist_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist2") ($name + "_lToe" + $nPad + $i + "Twist_MD.input1Y");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Twist_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateX");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Twist_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateX");
			}
		
			else
			{
				//JOINT 1
				circle -n ($name + "_lToe" + $nPad + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
				delete -ch ($name + "_lToe" + $nPad + $i + "J1C");
				group -n ($name + "_lToe" + $nPad + $i + "J1CRotG") ($name + "_lToe" + $nPad + $i + "J1C");
				group -n ($name + "_lToe" + $nPad + $i + "J1CG") ($name + "_lToe" + $nPad + $i + "J1CRotG");
				delete `parentConstraint ($name + "_lToe" + $nPad + $i + "J1") ($name + "_lToe" + $nPad + $i + "J1CG")`;
				$lToeJ2Length = `xform -q -t ($name + "_lToe" + $nPad + $i + "J2")`;
				$lToeJ3Length = `xform -q -t ($name + "_lToe" + $nPad + $i + "J3")`;
				$JointLength[0] = (($lToeJ2Length[0] + $lToeJ3Length[0]) /2);
				setAttr (($name + "_lToe" + $nPad + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_lToe" + $nPad + $i + "J1CG");
				delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_lToe" + $nPad + $i + "J1") ("RRA_lToe" + $nPad + $i + "J2") ($name + "_lToe" + $nPad + $i + "J1CG")`;
				parentConstraint ($name + "_lToe" + $nPad + $i + "J1C") ($name + "_lToe" + $nPad + $i + "J1");
				parentConstraint -mo ($name + "_lBallJ") ($name + "_lToe" + $nPad + $i + "J1CG");
			
				//JOINT 2
				circle -n ($name + "_lToe" + $nPad + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_lToe" + $nPad + $i + "J2C");
				group -n ($name + "_lToe" + $nPad + $i + "J2CRotG") ($name + "_lToe" + $nPad + $i + "J2C");
				group -n ($name + "_lToe" + $nPad + $i + "J2CG") ($name + "_lToe" + $nPad + $i + "J2CRotG");
				delete `parentConstraint ($name + "_lToe" + $nPad + $i + "J2") ($name + "_lToe" + $nPad + $i + "J2CG")`;
				setAttr (($name + "_lToe" + $nPad + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_lToe" + $nPad + $i + "J2CG");
				delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_lToe" + $nPad + $i + "J2") ("RRA_lToe" + $nPad + $i + "J3") ($name + "_lToe" + $nPad + $i + "J2CG")`;
				parentConstraint ($name + "_lToe" + $nPad + $i + "J2C") ($name + "_lToe" + $nPad + $i + "J2");
				parentConstraint -mo ($name + "_lToe" + $nPad + $i + "J1C") ($name + "_lToe" + $nPad + $i + "J2CG");
			
				//JOINT 3
				circle -n ($name + "_lToe" + $nPad + $i + "J3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_lToe" + $nPad + $i + "J3C");
				group -n ($name + "_lToe" + $nPad + $i + "J3CRotG") ($name + "_lToe" + $nPad + $i + "J3C");
				group -n ($name + "_lToe" + $nPad + $i + "J3CG") ($name + "_lToe" + $nPad + $i + "J3CRotG");
				delete `parentConstraint ($name + "_lToe" + $nPad + $i + "J3") ($name + "_lToe" + $nPad + $i + "J3CG")`;
				setAttr (($name + "_lToe" + $nPad + $i + "J3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_lToe" + $nPad + $i + "J3CG");
				delete `aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_lToe" + $nPad + $i + "J3") ("RRA_lToe" + $nPad + $i + "JTip") ($name + "_lToe" + $nPad + $i + "J3CG")`;
				parentConstraint ($name + "_lToe" + $nPad + $i + "J3C") ($name + "_lToe" + $nPad + $i + "J3");
				parentConstraint -mo ($name + "_lToe" + $nPad + $i + "J2C") ($name + "_lToe" + $nPad + $i + "J3CG");


				//ADD ATTRIBUTES TO ARM SWITCH CONTROL
				addAttr -ln ("toe" + $nPad + $i + "Channels")  -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true -l true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Channels");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Curl1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl1");
				addAttr -ln ("toe" + $nPad + $i + "Curl2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl2");
				addAttr -ln ("toe" + $nPad + $i + "Curl3") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Curl_MD");
				setAttr ($name + "_lThumbCurl_MD.input2X") 10;
				setAttr ($name + "_lThumbCurl_MD.input2Y") 10;
				setAttr ($name + "_lThumbCurl_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl1") ($name + "_lToe" + $nPad + $i + "Curl_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl2") ($name + "_lToe" + $nPad + $i + "Curl_MD.input1Y");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Curl3") ($name + "_lToe" + $nPad + $i + "Curl_MD.input1Z");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Curl_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateZ");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Curl_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateZ");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Curl_MD.outputZ") ($name + "_lToe" + $nPad + $i + "J3CRotG.rotateZ");
		
				//SPLAY
				addAttr -ln ("toe" + $nPad + $i + "Splay1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay1");
				addAttr -ln ("toe" + $nPad + $i + "Splay2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay2");
				addAttr -ln ("toe" + $nPad + $i + "Splay3") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Splay_MD");
				setAttr ($name + "_lThumbSplay_MD.input2X") 10;
				setAttr ($name + "_lThumbSplay_MD.input2Y") 10;
				setAttr ($name + "_lThumbSplay_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay1") ($name + "_lToe" + $nPad + $i + "Splay_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay2") ($name + "_lToe" + $nPad + $i + "Splay_MD.input1Y");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Splay3") ($name + "_lToe" + $nPad + $i + "Splay_MD.input1Z");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Splay_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateY");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Splay_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateY");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Splay_MD.outputZ") ($name + "_lToe" + $nPad + $i + "J3CRotG.rotateY");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Twist1") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist1");
				addAttr -ln ("toe" + $nPad + $i + "Twist2") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist2");
				addAttr -ln ("toe" + $nPad + $i + "Twist3") -at double ($name + "_lLegSwitchC");
				setAttr -e-keyable true ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_lToe" + $nPad + $i + "Twist_MD");
				setAttr ($name + "_lThumbTwist_MD.input2X") 10;
				setAttr ($name + "_lThumbTwist_MD.input2Y") 10;
				setAttr ($name + "_lThumbTwist_MD.input2Z") 10;
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist1") ($name + "_lToe" + $nPad + $i + "Twist_MD.input1X");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist2") ($name + "_lToe" + $nPad + $i + "Twist_MD.input1Y");
				connectAttr -force ($name + "_lLegSwitchC.toe" + $nPad + $i + "Twist3") ($name + "_lToe" + $nPad + $i + "Twist_MD.input1Z");
				
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Twist_MD.outputX") ($name + "_lToe" + $nPad + $i + "J1CRotG.rotateX");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Twist_MD.outputY") ($name + "_lToe" + $nPad + $i + "J2CRotG.rotateX");
				connectAttr -force ($name + "_lToe" + $nPad + $i + "Twist_MD.outputZ") ($name + "_lToe" + $nPad + $i + "J3CRotG.rotateX");
			}

			$i++;
		}
	}
	
	//FK SCALE
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1 ($name + "_MainHipC") ($name + "_lHipFKCG");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($name + "_MainHipC") ($name + "_MainC") ($name + "_lHipFKCG");
	addAttr -ln "HipOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_lHipFKC");
	setAttr -e-k true ($name + "_lHipFKC.HipOrient");
	setAttr ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lHipFKC.HipOrient") ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainHipCW0");
	setDrivenKeyframe -currentDriver ($name + "_lHipFKC.HipOrient") ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainCW1");
	setAttr ($name + "_lHipFKC.HipOrient") 0;
	setAttr ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainHipCW0") 0;
	setAttr ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lHipFKC.HipOrient") ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainHipCW0");
	setDrivenKeyframe -currentDriver ($name + "_lHipFKC.HipOrient") ($name + "_lHipFKCG_parentConstraint2." + $name + "_MainCW1");
	setAttr ($name + "_lHipFKC.HipOrient") 1;
	
	selectKey -k -f 0 -f 1 ($name + "_lHipFKCG_parentConstraint2_" + $name + "_MainHipCW0") ;
	selectKey -add -k -f 0 -f 1 ($name + "_lHipFKCG_parentConstraint2_" + $name + "_MainCW1") ;
	keyTangent -itt spline -ott spline ;
	
	
	parentConstraint -mo ($name + "_lShoulderFKC") ($name + "_lShoulderJFK");
	parentConstraint -mo ($name + "_lShoulderFKC") ($name + "_lElbowFKCG");

	pointConstraint -mo ($name + "_lShoulderFKC") ($name + "_lShoulderJIK");
	pointConstraint -mo ($name + "_lShoulderFKC") ($name + "_lShoulderJ");

	
	parentConstraint -mo ($name + "_lElbowFKC") ($name + "_lElbowJFK");
	parentConstraint -mo ($name + "_lElbowFKC") ($name + "_lWristFKCG");
	
	parentConstraint -mo ($name + "_lWristFKC") ($name + "_lWristJFK");
	setAttr ($name + "_lWristJFK_parentConstraint1.interpType") 2;
	
	//CONNECT SCALE TO FK CONTROLS
	connectAttr -f ($name + "_lHipFKC.scaleX") ($name + "_lHipJFK.scaleX");
	connectAttr -f ($name + "_lHipFKC.scaleX") ($name + "_lKneeFKC.scaleX");
	connectAttr -f ($name + "_lHipFKC.scaleX") ($name + "_lKneeJFK.scaleX");
	
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////RIGHT CONTROLS/////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//RIGHT CLAVICLE CONTROL
	circle -n ($name + "_rClavicleC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	move -r 1.35 2 0 ($name + "_rClavicleC.cv[3]") ($name + "_rClavicleC.cv[7]") ;
	move -r 0.5 1.25 0 ($name + "_rClavicleC.cv[2]") ($name + "_rClavicleC.cv[4]") ($name + "_rClavicleC.cv[0]") ($name + "_rClavicleC.cv[6]");
	select ($name + "_rClavicleC");
	group -n ($name + "_rClavicleCG"); xform -os -piv 0 0 0;
	rotate -r 180 180 0 ($name + "_rClavicleC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rClavicleC");
	//select -add ($name + "_rClavicleJ");
	//parent;
	//makeIdentity -apply false -t 1 -r 1 -s 1;
	$rClavicleLength = `xform -q -t ($name + "_rClavicleJ")`;
	$rShoulderLength = `xform -q -t ($name + "_rShoulderJ")`;
	
	spaceLocator -n ($name + "_SpineTopLctr") -p 0 0 0;
	spaceLocator -n ($name + "_rClavicleLctr") -p 0 0 0;
	pointConstraint ($name + "_SpineTopJ") ($name + "_SpineTopLctr");
	
	pointConstraint ($name + "_rClavicleJ") ($name + "_rClavicleLctr");
	
	parent  ($name + "_rClavicleLctr") ($name + "_SpineTopLctr");
	$rClavicleLength = `xform -q -t ($name + "_rClavicleLctr")`;
	
	setAttr (($name + "_rClavicleCG.scale"), (($rClavicleLength[0])*-0.65), (($rClavicleLength[0])*-0.85), (($rClavicleLength[0])*-1.25));
	
	delete ($name + "_SpineTopLctr");
	
	//parent -w ($name + "_rClavicleCG");
	makeIdentity -apply true -s 1 ($name + "_rClavicleCG");
	//$ClavCG_RX =`getAttr ($name + "_rClavicleCG.rx")`;
	//setAttr ($name + "_rClavicleCG.rx") ($ClavCG_RX * -1);
	delete `pointConstraint ($name + "_rClavicleJ") ($name + "_rClavicleCG")`;
	delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation" -worldUpObject RRA_rClavicle
	RRA_rShoulder ($name + "_rClavicleCG")`;
	
	
	//RIGHT SHOULDER FK CONTROL
	circle -n ($name + "_rShoulderFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch  ($name + "_rShoulderFKC");
	group -n ($name + "_rShoulderFKCG")  ($name + "_rShoulderFKC");
	delete `parentConstraint ($name + "_rShoulderJ") ($name + "_rShoulderFKCG")`;
	$rElbowLength = `xform -q -t ($name + "_rElbowJ")`;
	$rWristLength = `xform -q -t ($name + "_rWristJProxy")`;
	$rArmLength[0] = (($rElbowLength[0] + $rWristLength[0]) /2);
	
	setAttr (($name + "_rShoulderFKC.scale"), ($rArmLength[0]/2), ($rArmLength[0]/2), ($rArmLength[0]/2));
	makeIdentity -apply true -s 1 ($name + "_rShoulderFKCG");
	
	transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rShoulderFKC");
	transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rShoulderFKC");
	transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rShoulderFKC");
	
	//RIGHT ELBOW FK CONTROL
	select ($name + "_rShoulderFKCG");
	duplicate -n ($name + "_rElbowFKCG");
	select -add ($name + "_rElbowJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	parent -w;
	scale -r 0.8 0.8 0.8 ;
	makeIdentity -apply true -t 0 -s 1;
	pickWalk -d down;
	rename ($name + "_rElbowFKC");
	
	//RIGHT WRIST FK CONTROL
	select ($name + "_rShoulderFKCG");
	duplicate -n ($name + "_rWristFKCG");
	select -add ($name + "_rWristJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	parent -w;
	scale -r 0.85 0.85 0.85 ;
	makeIdentity -apply true -t 0 -s 1;
	pickWalk -d down;
	rename ($name + "_rWristFKC");
	transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rWristFKC");
	transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rWristFKC");
	transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rWristFKC");
	
	//DETACH FK ARM JOINTS FOR SCALE COMPENSATION
	parent -w ($name + "_rElbowJFK") ($name + "_rWristJFK");
	group -n ($name + "_rWristJFKG1") ($name + "_rWristJFK");
	group -n ($name + "_rWristJFKG2") ($name + "_rWristJFKG1");
	$rWristLocation = `xform -q -ws -t ($name + "_rWristJ")`;
	move $rWristLocation[0] $rWristLocation[1] $rWristLocation[2] ($name + "_rWristJFKG2.scalePivot") ($name + "_rWristJFKG2.rotatePivot") ;
	pointConstraint ($name + "_rWristFKC") ($name + "_rWristJFKG1");
	parentConstraint -mo ($name + "_rElbowJFK") ($name + "_rWristJFKG2");
	
	group -n ($name + "_rElbowJFKG1") ($name + "_rElbowJFK");
	group -n ($name + "_rElbowJFKG2") ($name + "_rElbowJFKG1");
	$rElbowLocation = `xform -q -ws -t ($name + "_rElbowJ")`;
	move $rElbowLocation[0] $rElbowLocation[1] $rElbowLocation[2] ($name + "_rElbowJFKG2.scalePivot") ($name + "_rElbowJFKG2.rotatePivot") ;
	pointConstraint ($name + "_rElbowFKC") ($name + "_rElbowJFKG1");
	parentConstraint -mo ($name + "_rShoulderJFK") ($name + "_rElbowJFKG2");
	
	
	//RIGHT WRIST IK CONTROL
	circle  -n ($name + "_rWristIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;
	move -r -1.083809 0 0 ($name + "_rWristIKC.cv[12]") ;
	move -r 0 0 0.292629 ($name + "_rWristIKC.cv[13]") ;
	move -r -0.769505 0 -0.130057 ($name + "_rWristIKC.cv[11]") ;
	move -r 0.379333 0 -0.303467 ($name + "_rWristIKC.cv[10]") ;
	move -r 0.541905 0 0 ($name + "_rWristIKC.cv[9]") ;
	move -r -0.834533 0 0 ($name + "_rWristIKC.cv[13]") ;
	move -r 0.346819 0 0.693638 ($name + "_rWristIKC.cv[14]") ;
	move -r 0.357657 0 0 ($name + "_rWristIKC.cv[15]") ;
	move -r 0.2276 0 -0.0216761 ($name + "_rWristIKC.cv[13]") ;
	move -r 0.0216762 0 0.0867047 ($name + "_rWristIKC.cv[7]") ;
	move -r 0.0325143 0 0.0758667 ($name + "_rWristIKC.cv[6]") ;
	move -r 0 0 0.2276 ($name + "_rWristIKC.cv[14]") ;
	move -r 0.173409 0 0.140895 ($name + "_rWristIKC.cv[15]") ;
	move -r 0.270952 0 0.0216762 ($name + "_rWristIKC.cv[0]") ;
	move -r -0.0325143 0 0.0325143 ($name + "_rWristIKC.cv[15]") ;
	move -r -0.0108381 0 -0.173409 ($name + "_rWristIKC.cv[14]") ;
	move -r 0.0975428 0 0.0325143 ($name + "_rWristIKC.cv[0]") ;
	move -r 0.162571 0 0.0216762 ($name + "_rWristIKC.cv[1]") ;
	move -r -0.173409 0 0.119219 ($name + "_rWristIKC.cv[13]") ;
	move -r 0 0 0.0216762 ($name + "_rWristIKC.cv[12]") ;
	move -r -0.0758667 0 0.0867047 ($name + "_rWristIKC.cv[14]") ;
	move -r 0.119219 0 0.520228 ($name + "_rWristIKC.cv[15]") ;
	move -r 0.325143 0 0.140895 ($name + "_rWristIKC.cv[0]") ;
	move -r 0.238438 0 -0.0758667 ($name + "_rWristIKC.cv[1]") ;
	move -r 0.108381 0 -0.0325143 ($name + "_rWristIKC.cv[2]") ;
	move -r 0.0758667 0 0.0541905 ($name + "_rWristIKC.cv[1]") ;
	move -r -0.0141441 0 0 ($name + "_rWristIKC.cv[11:13]") ;
	move -r -0.339459 0 -0.0565766 ($name + "_rWristIKC.cv[10]") ;
	move -r 0.141441 0 -0.113153 ($name + "_rWristIKC.cv[9]") ;
	move -r 0.381892 0 0.099009 ($name + "_rWristIKC.cv[8]") ;
	move -r 0.183874 0 0.155586 ($name + "_rWristIKC.cv[7]") ;
	move -r 0 0 0.0565766 ($name + "_rWristIKC.cv[6]") ;
	move -r 0.127297 0 0.0707207 ($name + "_rWristIKC.cv[0]") ;
	move -r 0.226306 0 -0.0707207 ($name + "_rWristIKC.cv[1]") ;
	move -r 0.155586 0 -0.0707207 ($name + "_rWristIKC.cv[2]") ;
	move -r 0 0 0.247523 ($name + "_rWristIKC.cv[6:14]") ;
	move -r 0 0 0.247523 ($name + "_rWristIKC.cv[5]") ;
	move -r 0 0 0.066006 ($name + "_rWristIKC.cv[4]") ;
	move -r 0 0 0.066006 ($name + "_rWristIKC.cv[1]") ;
	move -r 0 0 0.132012 ($name + "_rWristIKC.cv[8:10]") ;
	move -r -0.0165015 0 0.0825075 ($name + "_rWristIKC.cv[9]") ;
	move -r -0.0825075 0 0.0165015 ($name + "_rWristIKC.cv[8]") ;
	move -r 0.132012 0 0 ($name + "_rWristIKC.cv[15]") ;
	move -r -0.099009 0 0 ($name + "_rWristIKC.cv[9]") ;
	move -r 0.568042 -0.00947902 -0.182223 ($name + "_rWristIKC.cv[0:15]") ;
	move -r 0.4561 0 0 ($name + "_rWristIKC.cv[0:15]") ;
	move -r -os -wd 0 0 0.3 ($name + "_rWristIKC.cv[0:15]") ;
	
	select ($name + "_rWristIKC");
	group -n ($name + "_rWristIKCG");
	select -add ($name + "_rWristJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	parent -w;
	rotate -r -os -180 0 0 ($name + "_rWristIKCG");
	scale -r -1 1 1  ($name + "_rWristIKC");
	makeIdentity -apply true  ($name + "_rWristIKC");
	
	spaceLocator -n ($name + "_rHandSizeLctr") -p 0 0 0;
	spaceLocator -n ($name + "_rHandAimLctr") -p 0 0 0;
	parent ($name + "_rHandSizeLctr") ($name + "_rHandAimLctr");
	pointConstraint ($name + "_rWristIKCG") ($name + "_rHandAimLctr");
	
	select ($name + "_rFinger1JTip");
	if (`objExists ($name + "_rFinger2J1")`)
	{select -add ($name + "_rFinger2JTip");}
	if (`objExists ($name + "_rFinger3J1")`)
	{select -add ($name + "_rFinger3JTip");}
	if (`objExists ($name + "_rFinger4J1")`)
	{select -add ($name + "_rFinger4JTip");}
	if (`objExists ($name + "_rFinger5J1")`)
	{select -add ($name + "_rFinger5JTip");}
	if (`objExists ($name + "_rFinger6J1")`)
	{select -add ($name + "_rFinger6JTip");}
	if (`objExists ($name + "_rFinger7J1")`)
	{select -add ($name + "_rFinger7JTip");}
	if (`objExists ($name + "_rFinger8J1")`)
	{select -add ($name + "_rFinger8JTip");}
	if (`objExists ($name + "_rFinger9J1")`)
	{select -add ($name + "_rFinger9JTip");}
	select -add ($name + "_rHandAimLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none";
	delete ($name + "_rHandAimLctr_pointConstraint1");
	delete ($name + "_rHandAimLctr_aimConstraint1");
	select ($name + "_rFinger1JTip");
	if (`objExists ($name + "_rFinger2J1")`)
	{select -add ($name + "_rFinger2JTip");}
	if (`objExists ($name + "_rFinger3J1")`)
	{select -add ($name + "_rFinger3JTip");}
	if (`objExists ($name + "_rFinger4J1")`)
	{select -add ($name + "_rFinger4JTip");}
	if (`objExists ($name + "_rFinger5J1")`)
	{select -add ($name + "_rFinger5JTip");}
	if (`objExists ($name + "_rFinger6J1")`)
	{select -add ($name + "_rFinger6JTip");}
	if (`objExists ($name + "_rFinger7J1")`)
	{select -add ($name + "_rFinger7JTip");}
	if (`objExists ($name + "_rFinger8J1")`)
	{select -add ($name + "_rFinger8JTip");}
	if (`objExists ($name + "_rFinger9J1")`)
	{select -add ($name + "_rFinger9JTip");}
	select -add ($name + "_rHandSizeLctr");
	pointConstraint -offset 0 0 0 -skip y -skip z -weight 1;
	$rHandSize = `xform -q -t ($name + "_rHandSizeLctr")`;
	
	setAttr (($name + "_rWristIKCG.scale"), ($rHandSize[0] * .58), ($rHandSize[0] * -.58), ($rHandSize[0] * .58));
	
	select -cl;
	delete ($name + "_rHandAimLctr");
	delete -ch ($name + "_rWristIKCG");
	makeIdentity -apply true -t 0 -r 0 -s 1 ($name + "_rWristIKCG");
	
			//RIGHT ELBOW IK CONTROL
	curve -n ($name + "_rElbowIKC") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0
	-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0
	-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0	
	-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9
	-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22
	-k 23 -k 24 ;
	pickWalk -d down;
	rename ($name + "_rElbowIKCShape");
	pickWalk -d up;
	
	move -r 0 0 -0.95 ($name + "_rElbowIKC.cv[12]")  ($name + "_rElbowIKC.cv[0]") ($name + "_rElbowIKC.cv[24]") ($name + "_rElbowIKC.cv[18]") ($name + "_rElbowIKC.cv[6]") ;
	move -r 0 0 0.65 ($name + "_rElbowIKC.cv[3]") ($name + "_rElbowIKC.cv[9]") ($name + "_rElbowIKC.cv[15]") ($name + "_rElbowIKC.cv[21]") ;
	select ($name + "_rElbowIKC");
	group -n ($name + "_rElbowIKCG");
	parentConstraint RRA_rElbow ($name + "_rElbowIKCG");
	delete ($name + "_rElbowIKCG_parentConstraint1");
	setAttr ($name + "_rElbowIKC.tz") ($rArmLength[0] * 2);
	setAttr (($name + "_rElbowIKC.scale"), ($rArmLength[0] / 14), ($rArmLength[0] / 14), ($rArmLength[0] / 14));
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rElbowIKC");
	
	//RIGHT ELBOW AIM LOCATOR
	spaceLocator -n ($name + "_rElbowIKC_TargetLctr");
	pointConstraint ($name + "_rElbowJ") ($name + "_rElbowIKC_TargetLctr");
	delete ($name + "_rElbowIKC_TargetLctr_pointConstraint1");
	pointConstraint -mo ($name + "_rShoulderJIK") ($name + "_rWristJIK") ($name + "_rElbowIKC_TargetLctr");
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene" ($name + "_rElbowIKC_TargetLctr") ($name + "_rElbowIKC");
	
	//CONNECTOR LINE
	curve -n ($name + "_rElbowIKConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rElbowIKConnectorCXShape");
	delete `parentConstraint ($name + "_rElbowIKC") ($name + "_rElbowIKConnectorCX") `;
	parent ($name + "_rElbowIKConnectorCX") ($name + "_rElbowIKC");
	spaceLocator -n ($name + "_rElbowIKAimConnectorLctr");
	spaceLocator -n ($name + "_rElbowIKTargetConnectorLctr");
	parent ($name + "_rElbowIKTargetConnectorLctr") ($name + "_rElbowIKAimConnectorLctr");
	delete `parentConstraint ($name + "_rElbowIKC") ($name + "_rElbowIKAimConnectorLctr")`;
	parent ($name + "_rElbowIKAimConnectorLctr") ($name + "_rElbowIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rElbowIKAimConnectorLctr");
	
	pointConstraint ($name + "_rElbowJ") ($name + "_rElbowIKTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rElbowJ") ($name + "_rElbowIKAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rElbowJ") ($name + "_rElbowIKConnectorCX");

	connectAttr -f ($name + "_rElbowIKTargetConnectorLctr.tz") ($name + "_rElbowIKConnectorCX.sz");
	setAttr ($name + "_rElbowIKAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_rElbowIKConnectorCX");
	setAttr -e-keyable true ($name + "_rElbowIKConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_rElbowIKConnectorCX.v");
	setAttr ($name + "_rElbowIKConnectorCX.template") 1;

	//IK SCALE
	
	//CREATE PROXY WRIST JOINT
	select ($name + "_rWristJIK");
	duplicate -n ($name + "_rWristJIKProxy");
	parent -w;
	group -n ($name + "_rWristJIKProxyG1");
	group -n ($name + "_rWristJIKProxyG2");
	setAttr ($name + "_rWristJIKProxy.rotateOrder") 1;
	setAttr ($name + "_rWristJIKProxyG1.rotateOrder") 1;
	
	move $rElbowLocation[0] $rElbowLocation[1] $rElbowLocation[2] ($name + "_rWristJIKProxyG2.scalePivot") ($name + "_rWristJIKProxyG2.rotatePivot") ;
	pointConstraint ($name + "_rWristJIK") ($name + "_rWristJIKProxyG1");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($name + "_rWristIKC") ($name + "_rWristJIKProxy");
	setAttr ($name + "_rWristJIKProxy_parentConstraint1.interpType") 2;
	parentConstraint -mo ($name + "_rElbowJIK") ($name + "_rWristJIKProxyG2");
	
	//NODES
	spaceLocator -n ($name + "_rArmLengthOriginLctr");
	pointConstraint ($name + "_rShoulderJIK") ($name + "_rArmLengthOriginLctr");
	
	spaceLocator -n ($name + "_rArmLengthEndLctr");
	parent ($name + "_rArmLengthEndLctr") ($name + "_rArmLengthOriginLctr");
	
	pointConstraint ($name + "_rWristIKC") ($name + "_rArmLengthEndLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rWristIKC") ($name + "_rArmLengthOriginLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rArmLength_MD");
	setAttr ($name + "_rArmLength_MD.operation") 2;
	connectAttr -f ($name + "_rArmLengthEndLctr.translateX") ($name + "_rArmLength_MD.input1X");
	setAttr ($name + "_rArmLength_MD.input2X") ($rArmLength[0]* -2);
	
	shadingNode -asUtility condition -n ($name + "_rArmLength_Condition");
	connectAttr -f ($name + "_rArmLength_MD.outputX") ($name + "_rArmLength_Condition.firstTerm");
	setAttr ($name + "_rArmLength_Condition.secondTerm") 1;
	setAttr ($name + "_rArmLength_Condition.operation") 2;
	connectAttr -f ($name + "_rArmLength_MD.outputX") ($name + "_rArmLength_Condition.colorIfTrueR");
	
	shadingNode -asUtility blendColors -n ($name + "_rArmLength_Blnd");
	connectAttr -f ($name + "_rArmLength_Condition.outColorR") ($name + "_rArmLength_Blnd.color1R");
	setAttr ($name + "_rArmLength_Blnd.color2") -type double3 1 0 1 ;
	
	//RIGHT IK LOCK
	
	//RIGHT ARM IK LOCK LOCATORS
	spaceLocator -n ($name + "_rShoulderIKLockLctr");
	spaceLocator -n ($name + "_rElbowIKLockLctr");
	spaceLocator -n ($name + "_rWristIKLockLctr");
	parent ($name + "_rElbowIKLockLctr") ($name + "_rShoulderIKLockLctr");
	parent ($name + "_rWristIKLockLctr") ($name + "_rElbowIKLockLctr");
	pointConstraint ($name + "_rShoulderJIK") ($name + "_rShoulderIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rElbowIKC") ($name + "_rShoulderIKLockLctr");
	pointConstraint ($name + "_rElbowIKC") ($name + "_rElbowIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rWristIKC") ($name + "_rElbowIKLockLctr");
	pointConstraint ($name + "_rWristIKC") ($name + "_rWristIKLockLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rShoulderLockLength_MD");
	setAttr ($name + "_rShoulderLockLength_MD.operation") 2;
	connectAttr -f ($name + "_rElbowIKLockLctr.translateX") ($name + "_rShoulderLockLength_MD.input1X");
	setAttr ($name + "_rShoulderLockLength_MD.input2X") ($rElbowLength[0]*-1);
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rElbowLockLength_MD");
	setAttr ($name + "_rElbowLockLength_MD.operation") 2;
	connectAttr -f ($name + "_rWristIKLockLctr.translateX") ($name + "_rElbowLockLength_MD.input1X");
	setAttr ($name + "_rElbowLockLength_MD.input2X") ($rWristLength[0]*-1);
	
	shadingNode -asUtility blendColors -n ($name + "_rShoulderLock_Blnd");
	connectAttr -f ($name + "_rShoulderLockLength_MD.outputX") ($name + "_rShoulderLock_Blnd.color1R");
	connectAttr -f ($name + "_rArmLength_Blnd.outputR") ($name + "_rShoulderLock_Blnd.color2R");
	
	shadingNode -asUtility blendColors -n ($name + "_rElbowLock_Blnd");
	connectAttr -f ($name + "_rElbowLockLength_MD.outputX") ($name + "_rElbowLock_Blnd.color1R");
	connectAttr -f ($name + "_rArmLength_Blnd.outputR") ($name + "_rElbowLock_Blnd.color2R");
	
	//ADD STRETCH TO RIGHT IK WRIST CONTROL
	addAttr -ln "Stretch"  -at double  -min 0 -max 1 -dv 0 ($name + "_rWristIKC");
	setAttr -e-k true ($name + "_rWristIKC.Stretch");
	connectAttr -f ($name + "_rWristIKC.Stretch") ($name + "_rArmLength_Blnd.blender");
	
	//ADD ELBOW LOCK TO RIGHT IK WRIST CONTROL
	addAttr -ln "ElbowLock"  -at double  -min 0 -max 1 -dv 0 ($name + "_rWristIKC");
	setAttr -e-k true ($name + "_rWristIKC.ElbowLock");
	connectAttr -f ($name + "_rWristIKC.ElbowLock") ($name + "_rShoulderLock_Blnd.blender");
	connectAttr -f ($name + "_rWristIKC.ElbowLock") ($name + "_rElbowLock_Blnd.blender");
	
	connectAttr -f ($name + "_rShoulderLock_Blnd.outputR") ($name + "_rShoulderJIK.scaleX");
	connectAttr -f ($name + "_rElbowLock_Blnd.outputR") ($name + "_rElbowJIK.scaleX");
	
	//ADD RIGHT ARM SCALE
	addAttr -ln "ArmScale"  -at double  -min 0.01 -dv 1 ($name + "_rWristIKC");
	setAttr -e-k true ($name + "_rWristIKC.ArmScale");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rShoulderScale_MD");
	connectAttr -force ($name + "_rShoulderLock_Blnd.outputR") ($name + "_rShoulderScale_MD.input1X");
	connectAttr -force ($name + "_rWristIKC.ArmScale") ($name + "_rShoulderScale_MD.input2X");
	connectAttr -force ($name + "_rShoulderScale_MD.outputX") ($name + "_rShoulderJIK.scaleX");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rElbowScale_MD");
	connectAttr -force ($name + "_rElbowLock_Blnd.outputR") ($name + "_rElbowScale_MD.input1X");
	connectAttr -force ($name + "_rWristIKC.ArmScale") ($name + "_rElbowScale_MD.input2X");
	connectAttr -force ($name + "_rElbowScale_MD.outputX") ($name + "_rElbowJIK.scaleX");
	
	//ADD DYNAMIC PARENTING CHANNELS
	addAttr -ln "DynamicParenting"  -at double  -min 1 -max 1 -dv 1 ($name + "_rWristIKC");
	setAttr -e-keyable true ($name + "_rWristIKC.DynamicParenting");
	setAttr -lock true ($name + "_rWristIKC.DynamicParenting");
	addAttr -ln "Hips"  -at double  -min 0 -max 1 -dv 0 ($name + "_rWristIKC");
	setAttr -e-keyable true ($name + "_rWristIKC.Hips");
	addAttr -ln "Chest"  -at double  -min 0 -max 1 -dv 0 ($name + "_rWristIKC");
	setAttr -e-keyable true ($name + "_rWristIKC.Chest");
	addAttr -ln "Head"  -at double  -min 0 -max 1 -dv 0 ($name + "_rWristIKC");
	setAttr -e-keyable true ($name + "_rWristIKC.Head");
	
	//////////////////////////////////RIGHT HAND IKFK SWITCH CONTROL///////////////////////////////////////////
	curve -n ($name + "_rArmSwitchC") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2
	-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2
	-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10
	-k 11 -k 12 -k 13 -k 14 ;
	pickWalk -d down;
	rename ($name + "_rArmSwitchCShape");

	move -r -os -wd 0 0 -8 ($name + "_rArmSwitchC");
	group -n ($name + "_rArmSwitchCG"); xform -os -piv 0 0 0;
	scale -r 0.2 0.2 0.2 ($name + "_rArmSwitchCG");
	makeIdentity -apply true -t 0 -r 1 -s 1  ($name + "_rArmSwitchCG");
	delete `parentConstraint ($name + "_rWristJ") ($name + "_rArmSwitchCG")`;
	//parent ($name + "_rArmSwitchCG") ($name + "_rWristIKCG");
	//makeIdentity -apply false -r 1 ($name + "_rArmSwitchCG");
	//parent -w ($name + "_rArmSwitchCG");
	rotate -r -os 180 0 0 ($name + "_rArmSwitchCG");
	
	setAttr (($name + "_rArmSwitchCG.scale"), ($rArmLength[0] / 3.5), ($rArmLength[0] / 3.5), ($rArmLength[0] / -3.5));
	makeIdentity -apply true -t 1 -s 1 ($name + "_rArmSwitchCG");
	
	addAttr -ln "SwitchIkFk"  -at double  -min 0 -max 1 -dv 1 ($name + "_rArmSwitchC");
	setAttr -e-k true ($name + "_rArmSwitchC.SwitchIkFk");
	addAttr -ln "AutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_rArmSwitchC");
	setAttr -e-k true ($name + "_rArmSwitchC.AutoVolume");
	
	if ($RRA_ToonArms == 1)
	{
		addAttr -ln "curve"  -at double  -min 0 -max 1 -dv 0 ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.curve");

		addAttr -ln "upperCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.upperCurve");
		addAttr -ln "midCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.midCurve");
		addAttr -ln "lowerCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.lowerCurve");
	}
	
	parentConstraint -mo ($name + "_rWristJ") ($name + "_rArmSwitchCG");
	
	//////////////////////////////////RIGHT PALM CONTROL/////////////////////////////
	
	curve -n ($name + "_rPalmC") -d 1 -p 0 0.5 0.5 -p 0 0.5 -0.5 -p 0 -0.5 -0.5 -p 0 -0.5 0.5 -p 0 0.5 0.5 -k 0 -k 1 -k 2 -k 3 -k 4 ;
	pickWalk -d down;
	rename ($name + "_rPalmCShape");

	setAttr ($name + "_rPalmC.rotateOrder") 1;
	group -n ($name + "_rPalmCG") ($name + "_rPalmC");
	parent ($name + "_rPalmCG") ($name + "_rWristJG1");
	
	parentConstraint ($name + "_rPalmJ") ($name + "_rPalmCG");
	delete ($name + "_rPalmCG_parentConstraint1");
	$rHandSize2 = `getAttr ($name + "_rPalmJ.translateX")`;
	scale 1 ($rHandSize2*3) ($rHandSize2*1.2) ($name + "_rPalmCG");
	makeIdentity -apply true -t 0 -s 1 ($name + "_rPalmCG");
	
	parent -w ($name + "_rPalmCG");
	scaleConstraint ($name + "_rWristJG1") ($name + "_rPalmC");
	parentConstraint -mo ($name + "_rWristJ") ($name + "_rPalmCG");
	parentConstraint -mo ($name + "_rPalmC") ($name + "_rPalmJ");
	
	///////////////////////////////////////RIGHT THUMB/////////////////////////////////////
	select ($name + "_rFinger1JTip");
	if (`objExists ($name + "_rThumbJ1")`)
	{select -add ($name + "_rThumbJ1");}
	if (`objExists ($name + "_rFinger2JTip")`)
	{select -add ($name + "_rFinger2JTip");}
	if (`objExists ($name + "_rFinger3JTip")`)
	{select -add ($name + "_rFinger3JTip");}
	if (`objExists ($name + "_rFinger4JTip")`)
	{select -add ($name + "_rFinger4JTip");}
	if (`objExists ($name + "_rFinger5JTip")`)
	{select -add ($name + "_rFinger5JTip");}
	if (`objExists ($name + "_rFinger6JTip")`)
	{select -add ($name + "_rFinger6JTip");}
	if (`objExists ($name + "_rFinger7JTip")`)
	{select -add ($name + "_rFinger7JTip");}
	if (`objExists ($name + "_rFinger8JTip")`)
	{select -add ($name + "_rFinger8JTip");}
	if (`objExists ($name + "_rFinger9JTip")`)
	{select -add ($name + "_rFinger9JTip");}
	
	joint -e -oj xyz -secondaryAxisOrient yup -ch -zso;
	
	if (`objExists ($name + "_rThumbJ1")`)
	{
		//THUMB1
		circle -n ($name + "_rThumbJ1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rThumbJ1C");
		group -n ($name + "_rThumbJ1CRotG") ($name + "_rThumbJ1C");
		group -n ($name + "_rThumbJ1CG") ($name + "_rThumbJ1CRotG");
		delete `parentConstraint ($name + "_rThumbJ1") ($name + "_rThumbJ1CG")`;
		$rThumbJ2Length = `xform -q -t ($name + "_rThumbJ2")`;
		$rThumbJ3Length = `xform -q -t ($name + "_rThumbJ3")`;
		$JointLength[0] = (($rThumbJ2Length[0] + $rThumbJ3Length[0]) /2);
		setAttr (($name + "_rThumbJ1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rThumbJ1C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rThumbJ1C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rThumbJ1C");
		makeIdentity -apply true -s 1 ($name + "_rThumbJ1CG");
		parent ($name + "_rThumbJ1CG") ($name + "_rWristJG1");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_rThumbJ1 RRA_rThumbJ2 ($name + "_rThumbJ1CG")`;

		//THUMB2
		circle -n ($name + "_rThumbJ2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rThumbJ2C");
		group -n ($name + "_rThumbJ2CRotG") ($name + "_rThumbJ2C");
		group -n ($name + "_rThumbJ2CG") ($name + "_rThumbJ2CRotG");
		delete `parentConstraint ($name + "_rThumbJ2") ($name + "_rThumbJ2CG")`;
		setAttr (($name + "_rThumbJ2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rThumbJ2C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rThumbJ2C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rThumbJ2C");
		makeIdentity -apply true -s 1 ($name + "_rThumbJ2CG");
		parent ($name + "_rThumbJ2CG") ($name + "_rWristJG1");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_rThumbJ2 RRA_rThumbJ3 ($name + "_rThumbJ2CG")`;
		
		//THUMB3
		circle -n ($name + "_rThumbJ3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rThumbJ3C");
		group -n ($name + "_rThumbJ3CRotG") ($name + "_rThumbJ3C");
		group -n ($name + "_rThumbJ3CG") ($name + "_rThumbJ3CRotG");
		delete `parentConstraint ($name + "_rThumbJ3") ($name + "_rThumbJ3CG")`;
		setAttr (($name + "_rThumbJ3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rThumbJ3C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rThumbJ3C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rThumbJ3C");
		makeIdentity -apply true -s 1 ($name + "_rThumbJ3CG");
		parent ($name + "_rThumbJ3CG") ($name + "_rWristJG1");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject RRA_rThumbJ3 RRA_rThumbJTip ($name + "_rThumbJ3CG")`;
		
		parentConstraint -mo ($name + "_rThumbJ1C") ($name + "_rThumbJ2CG");
		parentConstraint -mo ($name + "_rThumbJ2C") ($name + "_rThumbJ3CG");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ2C.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ3C.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ1.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ2.scale");
		connectAttr -f ($name + "_rThumbJ1C.scale") ($name + "_rThumbJ3.scale");

		//ADD ATTRIBUTES TO ARM SWITCH CONTROL
		addAttr -ln "thumbChannels"  -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true -l true ($name + "_rArmSwitchC.thumbChannels");
		
		//CURL
		addAttr -ln "thumbCurl1" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbCurl1");
		addAttr -ln "thumbCurl2" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbCurl2");
		addAttr -ln "thumbCurl3" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbCurl3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rThumbCurl_MD");
		setAttr ($name + "_rThumbCurl_MD.input2X") 10;
		setAttr ($name + "_rThumbCurl_MD.input2Y") 10;
		setAttr ($name + "_rThumbCurl_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.thumbCurl1") ($name + "_rThumbCurl_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.thumbCurl2") ($name + "_rThumbCurl_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.thumbCurl3") ($name + "_rThumbCurl_MD.input1Z");
		
		connectAttr -force ($name + "_rThumbCurl_MD.outputX") ($name + "_rThumbJ1CRotG.rotateZ");
		connectAttr -force ($name + "_rThumbCurl_MD.outputY") ($name + "_rThumbJ2CRotG.rotateZ");
		connectAttr -force ($name + "_rThumbCurl_MD.outputZ") ($name + "_rThumbJ3CRotG.rotateZ");

		//SPLAY
		addAttr -ln "thumbSplay1" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbSplay1");
		addAttr -ln "thumbSplay2" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbSplay2");
		addAttr -ln "thumbSplay3" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbSplay3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rThumbSplay_MD");
		setAttr ($name + "_rThumbSplay_MD.input2X") 10;
		setAttr ($name + "_rThumbSplay_MD.input2Y") 10;
		setAttr ($name + "_rThumbSplay_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.thumbSplay1") ($name + "_rThumbSplay_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.thumbSplay2") ($name + "_rThumbSplay_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.thumbSplay3") ($name + "_rThumbSplay_MD.input1Z");
		
		connectAttr -force ($name + "_rThumbSplay_MD.outputX") ($name + "_rThumbJ1CRotG.rotateY");
		connectAttr -force ($name + "_rThumbSplay_MD.outputY") ($name + "_rThumbJ2CRotG.rotateY");
		connectAttr -force ($name + "_rThumbSplay_MD.outputZ") ($name + "_rThumbJ3CRotG.rotateY");

		//TWIST
		addAttr -ln "thumbTwist1" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbTwist1");
		addAttr -ln "thumbTwist2" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbTwist2");
		addAttr -ln "thumbTwist3" -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.thumbTwist3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rThumbTwist_MD");
		setAttr ($name + "_rThumbTwist_MD.input2X") 10;
		setAttr ($name + "_rThumbTwist_MD.input2Y") 10;
		setAttr ($name + "_rThumbTwist_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.thumbTwist1") ($name + "_rThumbTwist_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.thumbTwist2") ($name + "_rThumbTwist_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.thumbTwist3") ($name + "_rThumbTwist_MD.input1Z");
		
		connectAttr -force ($name + "_rThumbTwist_MD.outputX") ($name + "_rThumbJ1CRotG.rotateX");
		connectAttr -force ($name + "_rThumbTwist_MD.outputY") ($name + "_rThumbJ2CRotG.rotateX");
		connectAttr -force ($name + "_rThumbTwist_MD.outputZ") ($name + "_rThumbJ3CRotG.rotateX");
	}
	
	///////////////////////////////////////RIGHT FINGER/////////////////////////////////////
	select ($name + "_rFinger*J1");
	$fingers = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $fingers)
	{
		//JOINT 1
		circle -n ($name + "_rFinger" + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rFinger" + $i + "J1C");
		group -n ($name + "_rFinger" + $i + "J1CRotG") ($name + "_rFinger" + $i + "J1C");
		group -n ($name + "_rFinger" + $i + "J1CG") ($name + "_rFinger" + $i + "J1CRotG");
		delete `parentConstraint ($name + "_rFinger" + $i + "J1") ($name + "_rFinger" + $i + "J1CG")`;
		$rFingerJ2Length = `xform -q -t ($name + "_rFinger" + $i + "J2")`;
		$rFingerJ3Length = `xform -q -t ($name + "_rFinger" + $i + "J3")`;
		$JointLength[0] = (($rFingerJ2Length[0] + $rFingerJ3Length[0]) /-2);
		setAttr (($name + "_rFinger" + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rFinger" + $i + "J1C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rFinger" + $i + "J1C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rFinger" + $i + "J1C");
		makeIdentity -apply true -s 1 ($name + "_rFinger" + $i + "J1CG");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_rFinger" + $i + "J1") ("RRA_rFinger" + $i + "J2") ($name + "_rFinger" + $i + "J1CG")`;
		
		//JOINT 2
		circle -n ($name + "_rFinger" + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rFinger" + $i + "J2C");
		group -n ($name + "_rFinger" + $i + "J2CRotG") ($name + "_rFinger" + $i + "J2C");
		group -n ($name + "_rFinger" + $i + "J2CG") ($name + "_rFinger" + $i + "J2CRotG");
		delete `parentConstraint ($name + "_rFinger" + $i + "J2") ($name + "_rFinger" + $i + "J2CG")`;
		setAttr (($name + "_rFinger" + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rFinger" + $i + "J2C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rFinger" + $i + "J2C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rFinger" + $i + "J2C");
		makeIdentity -apply true -s 1 ($name + "_rFinger" + $i + "J2CG");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_rFinger" + $i + "J2") ("RRA_rFinger" + $i + "J3") ($name + "_rFinger" + $i + "J2CG")`;
		
		//JOINT 3
		circle -n ($name + "_rFinger" + $i + "J3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
		delete -ch ($name + "_rFinger" + $i + "J3C");
		group -n ($name + "_rFinger" + $i + "J3CRotG") ($name + "_rFinger" + $i + "J3C");
		group -n ($name + "_rFinger" + $i + "J3CG") ($name + "_rFinger" + $i + "J3CRotG");
		delete `parentConstraint ($name + "_rFinger" + $i + "J3") ($name + "_rFinger" + $i + "J3CG")`;
		setAttr (($name + "_rFinger" + $i + "J3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
		transformLimits -sx 0.01 1 -esx 1 0 ($name + "_rFinger" + $i + "J3C");
		transformLimits -sy 0.01 1 -esy 1 0 ($name + "_rFinger" + $i + "J3C");
		transformLimits -sz 0.01 1 -esz 1 0 ($name + "_rFinger" + $i + "J3C");
		makeIdentity -apply true -s 1 ($name + "_rFinger" + $i + "J3CG");
		delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
		-worldUpVector 0 1 0 -worldUpObject ("RRA_rFinger" + $i + "J3") ("RRA_rFinger" + $i + "JTip") ($name + "_rFinger" + $i + "J3CG")`;
		
		parent ($name + "_rFinger" + $i + "J1CG") ($name + "_rFinger" + $i + "J2CG") ($name + "_rFinger" + $i + "J3CG") ($name + "_rPalmC");
		connectAttr -f ($name + "_rFinger" + $i + "J1C.scale") ($name + "_rFinger" + $i + "J2C.scale");
		connectAttr -f ($name + "_rFinger" + $i + "J1C.scale") ($name + "_rFinger" + $i + "J3C.scale");
		connectAttr -f ($name + "_rFinger" + $i + "J1C.scale") ($name + "_rFinger" + $i + "J1.scale");
		connectAttr -f ($name + "_rFinger" + $i + "J1C.scale") ($name + "_rFinger" + $i + "J2.scale");
		connectAttr -f ($name + "_rFinger" + $i + "J1C.scale") ($name + "_rFinger" + $i + "J3.scale");
		
		//ADD ATTRIBUTES TO PALM CONTROL
		addAttr -ln ("finger" + $i + "Channels")  -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true -l true ($name + "_rArmSwitchC.finger" + $i + "Channels");
		
		//CURL
		addAttr -ln ("finger" + $i + "Curl1") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Curl1");
		addAttr -ln ("finger" + $i + "Curl2") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Curl2");
		addAttr -ln ("finger" + $i + "Curl3") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Curl3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rFinger" + $i + "Curl_MD");
		setAttr ($name + "_rFinger" + $i + "Curl_MD.input2X") 10;
		setAttr ($name + "_rFinger" + $i + "Curl_MD.input2Y") 10;
		setAttr ($name + "_rFinger" + $i + "Curl_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Curl1") ($name + "_rFinger" + $i + "Curl_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Curl2") ($name + "_rFinger" + $i + "Curl_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Curl3") ($name + "_rFinger" + $i + "Curl_MD.input1Z");
		
		connectAttr -force ($name + "_rFinger" + $i + "Curl_MD.outputX") ($name + "_rFinger" + $i + "J1CRotG.rotateZ");
		connectAttr -force ($name + "_rFinger" + $i + "Curl_MD.outputY") ($name + "_rFinger" + $i + "J2CRotG.rotateZ");
		connectAttr -force ($name + "_rFinger" + $i + "Curl_MD.outputZ") ($name + "_rFinger" + $i + "J3CRotG.rotateZ");

		//SPLAY
		addAttr -ln ("finger" + $i + "Splay1") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Splay1");
		addAttr -ln ("finger" + $i + "Splay2") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Splay2");
		addAttr -ln ("finger" + $i + "Splay3") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Splay3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rFinger" + $i + "Splay_MD");
		setAttr ($name + "_rFinger" + $i + "Splay_MD.input2X") 10;
		setAttr ($name + "_rFinger" + $i + "Splay_MD.input2Y") 10;
		setAttr ($name + "_rFinger" + $i + "Splay_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Splay1") ($name + "_rFinger" + $i + "Splay_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Splay2") ($name + "_rFinger" + $i + "Splay_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Splay3") ($name + "_rFinger" + $i + "Splay_MD.input1Z");
		
		connectAttr -force ($name + "_rFinger" + $i + "Splay_MD.outputX") ($name + "_rFinger" + $i + "J1CRotG.rotateY");
		connectAttr -force ($name + "_rFinger" + $i + "Splay_MD.outputY") ($name + "_rFinger" + $i + "J2CRotG.rotateY");
		connectAttr -force ($name + "_rFinger" + $i + "Splay_MD.outputZ") ($name + "_rFinger" + $i + "J3CRotG.rotateY");
		
		//CURL
		addAttr -ln ("finger" + $i + "Twist1") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Twist1");
		addAttr -ln ("finger" + $i + "Twist2") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Twist2");
		addAttr -ln ("finger" + $i + "Twist3") -at double ($name + "_rArmSwitchC");
		setAttr -e-keyable true ($name + "_rArmSwitchC.finger" + $i + "Twist3");
		
		shadingNode -asUtility multiplyDivide -n ($name + "_rFinger" + $i + "Twist_MD");
		setAttr ($name + "_rFinger" + $i + "Twist_MD.input2X") 10;
		setAttr ($name + "_rFinger" + $i + "Twist_MD.input2Y") 10;
		setAttr ($name + "_rFinger" + $i + "Twist_MD.input2Z") 10;
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Twist1") ($name + "_rFinger" + $i + "Twist_MD.input1X");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Twist2") ($name + "_rFinger" + $i + "Twist_MD.input1Y");
		connectAttr -force ($name + "_rArmSwitchC.finger" + $i + "Twist3") ($name + "_rFinger" + $i + "Twist_MD.input1Z");
		
		connectAttr -force ($name + "_rFinger" + $i + "Twist_MD.outputX") ($name + "_rFinger" + $i + "J1CRotG.rotateX");
		connectAttr -force ($name + "_rFinger" + $i + "Twist_MD.outputY") ($name + "_rFinger" + $i + "J2CRotG.rotateX");
		connectAttr -force ($name + "_rFinger" + $i + "Twist_MD.outputZ") ($name + "_rFinger" + $i + "J3CRotG.rotateX");

		
		$i++;
	}
	
	/////////////////////////////////////RIGHT LEG/////////////////////////////////////
	
	//RIGHT LEG FK CONTROL
	circle -n ($name + "_rHipFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_rHipFKC");
	group -n ($name + "_rHipFKCG");
	setAttr ($name + "_rHipFKCG.rotateOrder") 1;
	delete `parentConstraint ($name + "_rHipJ") ($name + "_rHipFKCG")`;
	$rAnkle = `xform -q -t ($name + "_rAnkleJ")`;
	$rKnee = `xform -q -t ($name + "_rKneeJ")`;
	$JointLength[0] = (($rKnee[0] + $rAnkle[0]) /2);
	
	setAttr (($name + "_rHipFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	//RIGHT KNEE FK CONTROL
	circle -n ($name + "_rKneeFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch;
	group -n ($name + "_rKneeFKCG");
	setAttr ($name + "_rKneeFKCG.rotateOrder") 1;
	delete `parentConstraint ($name + "_rKneeJ") ($name + "_rKneeFKCG")`;
	delete `aimConstraint -aimVector 0 -1 0 -upVector 0 1 0 -worldUpType "none" -skip x -skip y RRA_rKneeLctr ($name + "_rKneeFKCG")`;
	$rAnkle = `xform -q -t ($name + "_rAnkleJ")`;
	$rKnee = `xform -q -t ($name + "_rKneeJ")`;
	$JointLength[0] = (($rKnee[0] + $rAnkle[0]) /2);
	
	setAttr (($name + "_rKneeFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	
	//RIGHT ANKLE FK CONTROL
	circle -n ($name + "_rAnkleFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_rAnkleFKC");
	group -n ($name + "_rAnkleFKCG") ($name + "_rAnkleFKC");
	setAttr ($name + "_rAnkleFKCG.rotateOrder") 1;
	parent ($name + "_rAnkleFKCG") ($name + "_rAnkleJ");
	makeIdentity -apply false -t 1 -s 1 ($name + "_rAnkleFKCG");
	parent -w ($name + "_rAnkleFKCG");
	setAttr ($name + "_rAnkleFKCG.rotateX") -90;
	setAttr ($name + "_rAnkleFKCG.rotateY") -90;
	delete `aimConstraint -aimVector 0 -1 0 -upVector -1 0 0 -worldUpType "scene" -skip x -skip y ($name + "_rBallJ") ($name + "_rToeJ") ($name + "_rAnkleFKCG")`;
	$rAnkle = `xform -q -t ($name + "_rAnkleJ")`;
	$rKnee = `xform -q -t ($name + "_rKneeJ")`;
	$JointLength[0] = (($rKnee[0] + $rAnkle[0]) /2);
	
	setAttr (($name + "_rAnkleFKC.scale"), ($JointLength[0] / -4), ($JointLength[0] / -4), ($JointLength[0] / -4));
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rAnkleFKC");
	
	//RIGHT BALL FK CONTROL
	circle -n ($name + "_rBallFKC") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	delete -ch ($name + "_rBallFKC");
	group -n ($name + "_rBallFKCG") ($name + "_rBallFKC");
	setAttr ($name + "_rBallFKCG.rotateOrder") 1;
	delete `parentConstraint ($name + "_rBallJ") ($name + "_rBallFKCG")`;
	$rAnkle = `xform -q -t ($name + "_rAnkleJ")`;
	$rKnee = `xform -q -t ($name + "_rKneeJ")`;
	$JointLength[0] = (($rKnee[0] + $rAnkle[0]) /2);
	
	setAttr (($name + "_rBallFKC.scale"), ($JointLength[0] / 4), ($JointLength[0] / 4), ($JointLength[0] / 4));
	
	//DETACH FK LEG JOINTS FOR SCALE COMPENSATION
	parent -w ($name + "_rKneeJFK") ($name + "_rAnkleJFK");
	group -n ($name + "_rAnkleJFKG1") ($name + "_rAnkleJFK");
	group -n ($name + "_rAnkleJFKG2") ($name + "_rAnkleJFKG1");
	$rAnkleLocation = `xform -q -ws -t ($name + "_rAnkleJ")`;
	move $rAnkleLocation[0] $rAnkleLocation[1] $rAnkleLocation[2] ($name + "_rAnkleJFKG1.scalePivot") ($name + "_rAnkleJFKG1.rotatePivot") ;
	$rKneeLocation = `xform -q -ws -t ($name + "_rKneeJ")`;
	move $rKneeLocation[0] $rKneeLocation[1] $rKneeLocation[2] ($name + "_rAnkleJFKG2.scalePivot") ($name + "_rAnkleJFKG2.rotatePivot") ;
	pointConstraint ($name + "_rAnkleFKC") ($name + "_rAnkleJFKG1");
	parentConstraint -mo ($name + "_rKneeJFK") ($name + "_rAnkleJFKG2");
	
	group -n ($name + "_rKneeJFKG1") ($name + "_rKneeJFK");
	group -n ($name + "_rKneeJFKG2") ($name + "_rKneeJFKG1");
	$rHipLocation = `xform -q -ws -t ($name + "_rHipJ")`;
	move $rKneeLocation[0] $rKneeLocation[1] $rKneeLocation[2] ($name + "_rKneeJFKG1.scalePivot") ($name + "_rKneeJFKG1.rotatePivot") ;
	move $rHipLocation[0] $rHipLocation[1] $rHipLocation[2] ($name + "_rKneeJFKG2.scalePivot") ($name + "_rKneeJFKG2.rotatePivot") ;
	pointConstraint ($name + "_rKneeFKC") ($name + "_rKneeJFKG1");
	parentConstraint -mo ($name + "_rHipJFK") ($name + "_rKneeJFKG2");
	
	//RIGHT KNEE IK CONTROL
	curve -n ($name + "_rKneeIKC") -d 1 -p 0 -5 0 -p -2 -3 0 -p -1 -3 0 -p -1 -1 0 -p -3 -1 0 -p -3 -2 0
	-p -5 0 0 -p -3 2 0 -p -3 1 0 -p -1 1 0 -p -1 3 0 -p -2 3 0 -p 0 5 0 -p 2 3 0
	-p 1 3 0 -p 1 1 0 -p 3 1 0 -p 3 2 0 -p 5 0 0 -p 3 -2 0 -p 3 -1 0 -p 1 -1 0	
	-p 1 -3 0 -p 2 -3 0 -p 0 -5 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9
	-k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22
	-k 23 -k 24 ;
	pickWalk -d down;
	rename ($name + "_rKneeIKCShape");
	
	move -r 0 0 0.95 ($name + "_rKneeIKC.cv[12]")  ($name + "_rKneeIKC.cv[0]") ($name + "_rKneeIKC.cv[24]") ($name + "_rKneeIKC.cv[18]") ($name + "_rKneeIKC.cv[6]") ;
	move -r 0 0 -0.65 ($name + "_rKneeIKC.cv[3]") ($name + "_rKneeIKC.cv[9]") ($name + "_rKneeIKC.cv[15]") ($name + "_rKneeIKC.cv[21]");
	
	group -n ($name + "_rKneeIKCG") ($name + "_rKneeIKC");
	delete `parentConstraint RRA_rKnee ($name + "_rKneeIKCG")`;
	$rKneeLength = `xform -q -t ($name + "_rKneeJ")`;
	$rAnkleLength = `xform -q -t ($name + "_rAnkleJ")`;
	$rLegLength[0] = (($rKneeLength[0] + $rAnkleLength[0]) /-3.5);
	setAttr ($name + "_rKneeIKC.tz") ($rLegLength[0] * 2);
	setAttr (($name + "_rKneeIKC.scale"), ($rLegLength[0] / 14), ($rLegLength[0] / 14), ($rLegLength[0] / 14));
	
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rKneeIKC");
	
	//RIGHT KNEE AIM LOCATOR
	spaceLocator -n ($name + "_rKneeIKC_TargetLctr");
	delete `pointConstraint ($name + "_rKneeJ") ($name + "_rKneeIKC_TargetLctr")`;
	pointConstraint -mo ($name + "_rHipJIK") ($name + "_rAnkleJIK") ($name + "_rKneeIKC_TargetLctr");
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene" ($name + "_rKneeIKC_TargetLctr") ($name + "_rKneeIKC");
	
	//CONNECTOR LINE
	curve -n ($name + "_rKneeIKConnectorCX") -d 1 -p 0 0 0 -p 0 0 1 -k 0 -k 1 ;
	pickWalk -d down;
	rename ($name + "_rKneeIKConnectorCXShape");
	delete `parentConstraint ($name + "_rKneeIKC") ($name + "_rKneeIKConnectorCX") `;
	parent ($name + "_rKneeIKConnectorCX") ($name + "_rKneeIKC");
	spaceLocator -n ($name + "_rKneeIKAimConnectorLctr");
	spaceLocator -n ($name + "_rKneeIKTargetConnectorLctr");
	parent ($name + "_rKneeIKTargetConnectorLctr") ($name + "_rKneeIKAimConnectorLctr");
	delete `parentConstraint ($name + "_rKneeIKC") ($name + "_rKneeIKAimConnectorLctr")`;
	parent ($name + "_rKneeIKAimConnectorLctr") ($name + "_rKneeIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rKneeIKAimConnectorLctr");
	
	pointConstraint ($name + "_rKneeJ") ($name + "_rKneeIKTargetConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rKneeJ") ($name + "_rKneeIKAimConnectorLctr");
	aimConstraint -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "none"
	($name + "_rKneeJ") ($name + "_rKneeIKConnectorCX");

	connectAttr -f ($name + "_rKneeIKTargetConnectorLctr.tz") ($name + "_rKneeIKConnectorCX.sz");
	setAttr ($name + "_rKneeIKAimConnectorLctr.v") 0;

	addAttr -ln "nonControl"  -dt "string" ($name + "_rKneeIKConnectorCX");
	setAttr -e-keyable true ($name + "_rKneeIKConnectorCX.nonControl");
	
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.tx");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.ty");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.tz");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.rx");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.ry");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.rz");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.sx");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.sy");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.sz");
	setAttr -lock true -keyable false ($name + "_rKneeIKConnectorCX.v");
	setAttr ($name + "_rKneeIKConnectorCX.template") 1;

	//RIGHT CONTROLS
		//RIGHT IK//
			//RIGHT FOOT IK CONTROL
	circle  -n ($name + "_rFootIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 2.5 -d 3 -ut 0 -tol 0.01 -s 16 -ch 1;
	move -r -0.203244 0 0.472547  ($name + "_rFootIKC.cv[1]") ;
	move -r 0.108438 0 0.70882 ($name + "_rFootIKC.cv[2]") ;
	move -r 0.892819 0 1.009532 ($name + "_rFootIKC.cv[3]") ;
	move -r 2.01238 0 0.902135 ($name + "_rFootIKC.cv[4]") ;
	move -r 2.200896 0 0.601079 ($name + "_rFootIKC.cv[5]") ;
	move -r 1.450752 0 0.3308 ($name + "_rFootIKC.cv[6]") ;
	move -r 0.406025 0 0.214794 ($name + "_rFootIKC.cv[7]") ;
	move -r -0.0357198 0 0.902544 ($name + "_rFootIKC.cv[8]") ;
	move -r -0.085452 0 0.808986 ($name + "_rFootIKC.cv[9]") ;
	move -r -0.39679 0 0.70882 ($name + "_rFootIKC.cv[10]") ;
	move -r -0.649352 0 0.590683 ($name + "_rFootIKC.cv[11]") ;
	move -r -0.986916 0 0.590683 ($name + "_rFootIKC.cv[12]") ;
	move -r -1.629254 0 0.579944 ($name + "_rFootIKC.cv[13]") ;
	move -r -1.472333 0 0.590683 ($name + "_rFootIKC.cv[14]") ;
	move -r -0.7637 0 0.590683 ($name + "_rFootIKC.cv[15]") ;
	move -r -0.353831 0 0.440328 ($name + "_rFootIKC.cv[0]") ;
	move -r -os -wd 0 0.333 0 ($name + "_rFootIKC.cv[4:5]") ($name + "_rFootIKC.cv[13:14]") ;
	move -r -os -wd 0 0 1 ($name + "_rFootIKC.cv[0:15]") ;
	move -r 0 0 -0.2 ($name + "_rFootIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rFootIKC");
	delete -ch ($name + "_rFootIKC");
	group -em -n ($name + "_rFootIKCG");
	parent ($name + "_rFootIKC") ($name + "_rFootIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rFootIKC");
	setAttr ($name + "_rFootIKC.rotateOrder") 1;
	
	//RIGHT TOE CONTROL
	circle -n ($name + "_rToeIKC") -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rToeIKC");
	delete -ch ($name + "_rToeIKC");
	move -r -0.25107 1.330277 2.206782 ($name + "_rToeIKC.cv[1]") ;
	move -r 0.254402 1.084741 1.162191 ($name + "_rToeIKC.cv[0]") ;
	move -r 0.0513063 0.450871 -0.204969 ($name + "_rToeIKC.cv[7]") ;
	move -r 0.187803 0.259426 -0.108661 ($name + "_rToeIKC.cv[6]") ;
	move -r -0.276837 0.154413 0.307813 ($name + "_rToeIKC.cv[5]") ;
	move -r -0.395115 0.259426 -0.0326967 ($name + "_rToeIKC.cv[4]") ;
	move -r 0.00260226 0.47359 -0.204969 ($name + "_rToeIKC.cv[3]") ;
	move -r -0.369241 1.189888 1.331089 ($name + "_rToeIKC.cv[2]") ;
	move -r -os -wd 0 0 0.9 ($name + "_rToeIKC.cv[0:7]") ;
	move -r -.001 0 1.85 ($name + "_rToeIKC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rToeIKC");
	group -em -n ($name + "_rToeIKCG");
	rotate -r 180 0 0 ($name + "_rToeIKCG");
	parent ($name + "_rToeIKC") ($name + "_rToeIKCG");
	parent ($name + "_rToeIKCG") ($name + "_rFootIKC");
	makeIdentity -apply true -t 0 -r 1 -s 1 ($name + "_rToeIKCG");
	
	delete `pointConstraint -skip y ($name + "_rAnkleJ") ($name + "_rFootIKCG")`;
	delete `aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene"
	-skip x -skip z ($name + "_rToeJ") ($name + "_rBallJ") ($name + "_rFootIKCG")`;
	
	$rAnkleJPosition = `xform -ws -q -rp ($name + "_rAnkleJ")`;
	$rBallLocation = `xform  -q -t ($name + "_rBallJ")`;
	$rToeLocation = `xform -q -t ($name + "_rToeJ")`;
	setAttr (($name + "_rFootIKCG.scale"), (($rBallLocation[0] + $rToeLocation[0])/3.5), (($rBallLocation[0]+$rToeLocation[0])/-3.5), (($rBallLocation[0]+$rToeLocation[0])/-3.5));
	makeIdentity -apply true -t 0 -s 1 ($name + "_rFootIKCG");
	
	//////////////////////////////////RIGHT LEG IKFK SWITCH CONTROL///////////////////////////////////////////
	curve -n ($name + "_rLegSwitchC") -d 1 -p 0 0 0 -p -2 0 -2 -p -1 0 -2 -p -1 0 -5 -p 1 0 -5 -p 1 0 -2
	-p 2 0 -2 -p 0 0 0 -p 0 2 -2 -p 0 1 -2 -p 0 1 -5 -p 0 -1 -5 -p 0 -1 -2
	-p 0 -2 -2 -p 0 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10
	-k 11 -k 12 -k 13 -k 14 ;
	pickWalk -d down;
	rename ($name + "_rLegSwitchCShape");

	move 0 0 -1.5 ($name + "_rLegSwitchC");
	
	scale -r 0.2 0.2 0.2  ($name + "_rLegSwitchC");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rLegSwitchC");
	group -n ($name + "_rLegSwitchCG") ($name + "_rLegSwitchC"); xform -os -piv 0 0 0;
	delete `pointConstraint ($name + "_rAnkleJ") ($name + "_rLegSwitchCG")`;
	
	delete `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 1 0 0 -worldUpType "none"
	-skip x -skip z ($name + "_rBallJ") ($name + "_rLegSwitchCG")`;
	$rKneeLength = `xform -q -t ($name + "_rKneeJ")`;
	$rAnkleLength = `xform -q -t ($name + "_rAnkleJ")`;
	$rLegLength[0] = (($rKneeLength[0] + $rAnkleLength[0]) /2);
	
	setAttr (($name + "_rLegSwitchCG.scale"), (($rBallLocation[0]+$rToeLocation[0])/4), (($rBallLocation[0]+$rToeLocation[0])/4), (($rBallLocation[0]+$rToeLocation[0])/4));
	rotate -r 0 180 0 ($name + "_rLegSwitchCG");
	makeIdentity -apply true -t 0 -s 1 ($name + "_rLegSwitchCG");
	
	addAttr -ln "SwitchIkFk"  -at double  -min 0 -max 1 -dv 0 ($name + "_rLegSwitchC");
	setAttr -e-k true ($name + "_rLegSwitchC.SwitchIkFk");
	addAttr -ln "AutoVolume"  -at double  -min 0 -max 1 -dv 1 ($name + "_rLegSwitchC");
	setAttr -e-k true ($name + "_rLegSwitchC.AutoVolume");
	
	if ($RRA_ToonLegs == 1)
	{
		addAttr -ln "curve"  -at double  -min 0 -max 1 -dv 0 ($name + "_rLegSwitchC");
		setAttr -e-keyable true ($name + "_rLegSwitchC.curve");

		addAttr -ln "upperCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rLegSwitchC");
		setAttr -e-keyable true ($name + "_rLegSwitchC.upperCurve");
		addAttr -ln "midCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rLegSwitchC");
		setAttr -e-keyable true ($name + "_rLegSwitchC.midCurve");
		addAttr -ln "lowerCurve"  -at double  -min 0 -max 1 -dv 1 ($name + "_rLegSwitchC");
		setAttr -e-keyable true ($name + "_rLegSwitchC.lowerCurve");
	}

	parentConstraint -mo ($name + "_rAnkleJ") ($name + "_rLegSwitchCG");

	//MOVE TOE CTRL PIVOT
	$limbJointLoc = `xform -ws -q -t ($name + "_rToeJ")`;
	move $limbJointLoc[0]  $limbJointLoc[1] $limbJointLoc[2] ($name + "_rToeIKC.scalePivot") ($name + "_rToeIKC.rotatePivot") ;
	move $rAnkleJPosition[0] $rAnkleJPosition[1] $rAnkleJPosition[2] ($name + "_rFootIKC.scalePivot") ($name + "_rFootIKC.rotatePivot") ;
	parentConstraint -mo ($name + "_rFootIKC") ($name + "_rToeIKCG");
	
	makeIdentity -apply true -t 0 -s 1 ($name + "_rHipFKCG");
	
	///////////////////////////////////////RIGHT TOES/////////////////////////////////////
	if (`objExists ($name + "_rToe01J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe01J1");}
	if (`objExists ($name + "_rToe02J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe02J1");}
	if (`objExists ($name + "_rToe03J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe03J1");}
	if (`objExists ($name + "_rToe04J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe04J1");}
	if (`objExists ($name + "_rToe05J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe05J1");}
	if (`objExists ($name + "_rToe06J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe06J1");}
	if (`objExists ($name + "_rToe07J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe07J1");}
	if (`objExists ($name + "_rToe08J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe08J1");}
	if (`objExists ($name + "_rToe09J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe09J1");}
	if (`objExists ($name + "_rToe10J1")`)
	{joint -e -oj xyz -secondaryAxisOrient yup -ch -zso ($name + "_rToe10J1");}
	
	
	
	///////////////////////////////////////RIGHT TOE CONTROLS/////////////////////////////////////
	if (`objExists ($name + "_lToe01J1")`)
	{
		select ($name + "_lToe??J1");
		$toes = `ls -sl`;
		string $each;
		string $nPad = "0";
		$i = 1;
		for ($each in $toes)
		{
			if 	($i >= 10)
			{
				$nPad = "";
			}
			if ($i == 1)
			{
				//JOINT 1
				circle -n ($name + "_rToe" + $nPad + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
				delete -ch ($name + "_rToe" + $nPad + $i + "J1C");
				group -n ($name + "_rToe" + $nPad + $i + "J1CRotG") ($name + "_rToe" + $nPad + $i + "J1C");
				group -n ($name + "_rToe" + $nPad + $i + "J1CG") ($name + "_rToe" + $nPad + $i + "J1CRotG");
				delete `parentConstraint ($name + "_rToe" + $nPad + $i + "J1") ($name + "_rToe" + $nPad + $i + "J1CG")`;
				$rToeJ2Length = `xform -q -t ($name + "_rToe" + $nPad + $i + "J2")`;
				$rToeJTipLength = `xform -q -t ($name + "_rToe" + $nPad + $i + "JTip")`;
				$JointLength[0] = (($rToeJ2Length[0] + $rToeJTipLength[0]) /2);
				setAttr (($name + "_rToe" + $nPad + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_rToe" + $nPad + $i + "J1CG");
				delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_rToe" + $nPad + $i + "J1") ("RRA_rToe" + $nPad + $i + "J2") ($name + "_rToe" + $nPad + $i + "J1CG")`;
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J1C") ($name + "_rToe" + $nPad + $i + "J1");
				parentConstraint -mo ($name + "_rBallJ") ($name + "_rToe" + $nPad + $i + "J1CG");
				
				//JOINT 2
				circle -n ($name + "_rToe" + $nPad + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_rToe" + $nPad + $i + "J2C");
				group -n ($name + "_rToe" + $nPad + $i + "J2CRotG") ($name + "_rToe" + $nPad + $i + "J2C");
				group -n ($name + "_rToe" + $nPad + $i + "J2CG") ($name + "_rToe" + $nPad + $i + "J2CRotG");
				delete `parentConstraint ($name + "_rToe" + $nPad + $i + "J2") ($name + "_rToe" + $nPad + $i + "J2CG")`;
				setAttr (($name + "_rToe" + $nPad + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_rToe" + $nPad + $i + "J2CG");
				delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_rToe" + $nPad + $i + "J2") ("RRA_rToe" + $nPad + $i + "JTip") ($name + "_rToe" + $nPad + $i + "J2CG")`;
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J2C") ($name + "_rToe" + $nPad + $i + "J2");
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J1C") ($name + "_rToe" + $nPad + $i + "J2CG");


				//ADD ATTRIBUTES TO ARM SWITCH CONTROL
				addAttr -ln ("toe" + $nPad + $i + "Channels")  -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true -l true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Channels");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Curl1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl1");
				addAttr -ln ("toe" + $nPad + $i + "Curl2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Curl_MD");
				setAttr ($name + "_rToe" + $nPad + $i + "Curl_MD.input2X") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Curl_MD.input2Y") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Curl_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl1") ($name + "_rToe" + $nPad + $i + "Curl_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl2") ($name + "_rToe" + $nPad + $i + "Curl_MD.input1Y");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Curl_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateZ");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Curl_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateZ");
		
				//SPLAY
				addAttr -ln ("toe" + $nPad + $i + "Splay1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay1");
				addAttr -ln ("toe" + $nPad + $i + "Splay2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Splay_MD");
				setAttr ($name + "_rToe" + $nPad + $i + "Splay_MD.input2X") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Splay_MD.input2Y") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Splay_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay1") ($name + "_rToe" + $nPad + $i + "Splay_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay2") ($name + "_rToe" + $nPad + $i + "Splay_MD.input1Y");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Splay_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateY");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Splay_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateY");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Twist1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist1");
				addAttr -ln ("toe" + $nPad + $i + "Twist2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist2");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Twist_MD");
				setAttr ($name + "_rToe" + $nPad + $i + "Twist_MD.input2X") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Twist_MD.input2Y") 10;
				setAttr ($name + "_rToe" + $nPad + $i + "Twist_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist1") ($name + "_rToe" + $nPad + $i + "Twist_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist2") ($name + "_rToe" + $nPad + $i + "Twist_MD.input1Y");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Twist_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateX");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Twist_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateX");
			}
		
			else
			{
				//JOINT 1
				circle -n ($name + "_rToe" + $nPad + $i + "J1C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.01 -s 8 -ch 1;
				delete -ch ($name + "_rToe" + $nPad + $i + "J1C");
				group -n ($name + "_rToe" + $nPad + $i + "J1CRotG") ($name + "_rToe" + $nPad + $i + "J1C");
				group -n ($name + "_rToe" + $nPad + $i + "J1CG") ($name + "_rToe" + $nPad + $i + "J1CRotG");
				delete `parentConstraint ($name + "_rToe" + $nPad + $i + "J1") ($name + "_rToe" + $nPad + $i + "J1CG")`;
				$rToeJ2Length = `xform -q -t ($name + "_rToe" + $nPad + $i + "J2")`;
				$rToeJ3Length = `xform -q -t ($name + "_rToe" + $nPad + $i + "J3")`;
				$JointLength[0] = (($rToeJ2Length[0] + $rToeJ3Length[0]) /2);
				setAttr (($name + "_rToe" + $nPad + $i + "J1C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_rToe" + $nPad + $i + "J1CG");
				delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_rToe" + $nPad + $i + "J1") ("RRA_rToe" + $nPad + $i + "J2") ($name + "_rToe" + $nPad + $i + "J1CG")`;
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J1C") ($name + "_rToe" + $nPad + $i + "J1");
				parentConstraint -mo ($name + "_rBallJ") ($name + "_rToe" + $nPad + $i + "J1CG");
			
				//JOINT 2
				circle -n ($name + "_rToe" + $nPad + $i + "J2C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_rToe" + $nPad + $i + "J2C");
				group -n ($name + "_rToe" + $nPad + $i + "J2CRotG") ($name + "_rToe" + $nPad + $i + "J2C");
				group -n ($name + "_rToe" + $nPad + $i + "J2CG") ($name + "_rToe" + $nPad + $i + "J2CRotG");
				delete `parentConstraint ($name + "_rToe" + $nPad + $i + "J2") ($name + "_rToe" + $nPad + $i + "J2CG")`;
				setAttr (($name + "_rToe" + $nPad + $i + "J2C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_rToe" + $nPad + $i + "J2CG");
				delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_rToe" + $nPad + $i + "J2") ("RRA_rToe" + $nPad + $i + "J3") ($name + "_rToe" + $nPad + $i + "J2CG")`;
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J2C") ($name + "_rToe" + $nPad + $i + "J2");
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J1C") ($name + "_rToe" + $nPad + $i + "J2CG");
			
				//JOINT 3
				circle -n ($name + "_rToe" + $nPad + $i + "J3C") -c 0 0 0 -nr 1 0 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.02 -s 8 -ch 1;
				delete -ch ($name + "_rToe" + $nPad + $i + "J3C");
				group -n ($name + "_rToe" + $nPad + $i + "J3CRotG") ($name + "_rToe" + $nPad + $i + "J3C");
				group -n ($name + "_rToe" + $nPad + $i + "J3CG") ($name + "_rToe" + $nPad + $i + "J3CRotG");
				delete `parentConstraint ($name + "_rToe" + $nPad + $i + "J3") ($name + "_rToe" + $nPad + $i + "J3CG")`;
				setAttr (($name + "_rToe" + $nPad + $i + "J3C.scale"), ($JointLength[0] / 1.1), ($JointLength[0] / 1.1), ($JointLength[0] / 2));
				makeIdentity -apply true -s 1 ($name + "_rToe" + $nPad + $i + "J3CG");
				delete `aimConstraint -aimVector -1 0 0 -upVector 0 -1 0 -worldUpType "objectrotation"
				-worldUpVector 0 1 0 -worldUpObject ("RRA_rToe" + $nPad + $i + "J3") ("RRA_rToe" + $nPad + $i + "JTip") ($name + "_rToe" + $nPad + $i + "J3CG")`;
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J3C") ($name + "_rToe" + $nPad + $i + "J3");
				parentConstraint -mo ($name + "_rToe" + $nPad + $i + "J2C") ($name + "_rToe" + $nPad + $i + "J3CG");


				//ADD ATTRIBUTES TO ARM SWITCH CONTROL
				addAttr -ln ("toe" + $nPad + $i + "Channels")  -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true -l true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Channels");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Curl1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl1");
				addAttr -ln ("toe" + $nPad + $i + "Curl2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl2");
				addAttr -ln ("toe" + $nPad + $i + "Curl3") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Curl_MD");
				setAttr ($name + "_rThumbCurl_MD.input2X") 10;
				setAttr ($name + "_rThumbCurl_MD.input2Y") 10;
				setAttr ($name + "_rThumbCurl_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl1") ($name + "_rToe" + $nPad + $i + "Curl_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl2") ($name + "_rToe" + $nPad + $i + "Curl_MD.input1Y");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Curl3") ($name + "_rToe" + $nPad + $i + "Curl_MD.input1Z");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Curl_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateZ");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Curl_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateZ");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Curl_MD.outputZ") ($name + "_rToe" + $nPad + $i + "J3CRotG.rotateZ");
		
				//SPLAY
				addAttr -ln ("toe" + $nPad + $i + "Splay1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay1");
				addAttr -ln ("toe" + $nPad + $i + "Splay2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay2");
				addAttr -ln ("toe" + $nPad + $i + "Splay3") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Splay_MD");
				setAttr ($name + "_rThumbSplay_MD.input2X") 10;
				setAttr ($name + "_rThumbSplay_MD.input2Y") 10;
				setAttr ($name + "_rThumbSplay_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay1") ($name + "_rToe" + $nPad + $i + "Splay_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay2") ($name + "_rToe" + $nPad + $i + "Splay_MD.input1Y");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Splay3") ($name + "_rToe" + $nPad + $i + "Splay_MD.input1Z");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Splay_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateY");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Splay_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateY");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Splay_MD.outputZ") ($name + "_rToe" + $nPad + $i + "J3CRotG.rotateY");
				
				//CURL
				addAttr -ln ("toe" + $nPad + $i + "Twist1") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist1");
				addAttr -ln ("toe" + $nPad + $i + "Twist2") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist2");
				addAttr -ln ("toe" + $nPad + $i + "Twist3") -at double ($name + "_rLegSwitchC");
				setAttr -e-keyable true ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist3");
				
				shadingNode -asUtility multiplyDivide -n ($name + "_rToe" + $nPad + $i + "Twist_MD");
				setAttr ($name + "_rThumbTwist_MD.input2X") 10;
				setAttr ($name + "_rThumbTwist_MD.input2Y") 10;
				setAttr ($name + "_rThumbTwist_MD.input2Z") 10;
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist1") ($name + "_rToe" + $nPad + $i + "Twist_MD.input1X");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist2") ($name + "_rToe" + $nPad + $i + "Twist_MD.input1Y");
				connectAttr -force ($name + "_rLegSwitchC.toe" + $nPad + $i + "Twist3") ($name + "_rToe" + $nPad + $i + "Twist_MD.input1Z");
				
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Twist_MD.outputX") ($name + "_rToe" + $nPad + $i + "J1CRotG.rotateX");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Twist_MD.outputY") ($name + "_rToe" + $nPad + $i + "J2CRotG.rotateX");
				connectAttr -force ($name + "_rToe" + $nPad + $i + "Twist_MD.outputZ") ($name + "_rToe" + $nPad + $i + "J3CRotG.rotateX");
			}

			$i++;
		}
	}

	//FK SCALE
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($name + "_MainHipC") ($name + "_rHipFKCG");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($name + "_MainHipC") ($name + "_MainC") ($name + "_rHipFKCG");
	addAttr -ln "HipOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_rHipFKC");
	setAttr -e-k true ($name + "_rHipFKC.HipOrient");
	setAttr ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rHipFKC.HipOrient") ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainHipCW0");
	setDrivenKeyframe -currentDriver ($name + "_rHipFKC.HipOrient") ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainCW1");
	setAttr ($name + "_rHipFKC.HipOrient") 0;
	setAttr ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainHipCW0") 0;
	setAttr ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rHipFKC.HipOrient") ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainHipCW0");
	setDrivenKeyframe -currentDriver ($name + "_rHipFKC.HipOrient") ($name + "_rHipFKCG_parentConstraint2." + $name + "_MainCW1");
	setAttr ($name + "_rHipFKC.HipOrient") 1;
	
	selectKey -k -f 0 -f 1 ($name + "_rHipFKCG_parentConstraint2_" + $name + "_MainHipCW0") ;
	selectKey -add -k -f 0 -f 1 ($name + "_rHipFKCG_parentConstraint2_" + $name + "_MainCW1") ;
	keyTangent -itt spline -ott spline ;
	
	parentConstraint -mo ($name + "_rShoulderFKC") ($name + "_rShoulderJFK");
	parentConstraint -mo ($name + "_rShoulderFKC") ($name + "_rElbowFKCG");
	
	pointConstraint -mo ($name + "_rShoulderFKC") ($name + "_rShoulderJIK");
	pointConstraint -mo ($name + "_rShoulderFKC") ($name + "_rShoulderJ");

	parentConstraint -mo ($name + "_rElbowFKC") ($name + "_rElbowJFK");
	parentConstraint -mo ($name + "_rElbowFKC") ($name + "_rWristFKCG");
	
	parentConstraint -mo ($name + "_rWristFKC") ($name + "_rWristJFK");
	setAttr ($name + "_rWristJFK_parentConstraint1.interpType") 2;
	
	//CONNECT SCALE TO FK CONTROLS
	connectAttr -f ($name + "_rHipFKC.scaleX") ($name + "_rHipJFK.scaleX");
	connectAttr -f ($name + "_rHipFKC.scaleX") ($name + "_rKneeFKC.scaleX");
	connectAttr -f ($name + "_rHipFKC.scaleX") ($name + "_rKneeJFK.scaleX");
	
	//EXTRA ATTRIBUTE TOGGLES IN MAIN CONTROL
	addAttr -ln "spineIK"  -at bool  ($name + "_MainC");
	setAttr -e-k true ($name + "_MainC.spineIK");
	connectAttr -f ($name + "_MainC.spineIK") ($name + "_SpineMidIKC.v");
	
	addAttr -ln "spineMicro"  -at bool  ($name + "_MainC");
	setAttr -e-k true ($name + "_MainC.spineMicro");
	select ($name + "_Spine??CurveCG");
	$spineCurveCG = `ls -sl`;
	string $currentCG;
	for ($currentCG in $spineCurveCG)
	{
		connectAttr -f ($name + "_MainC.spineMicro") ($currentCG + ".v");
	}
	
	addAttr -ln "neckIK"  -at bool  ($name + "_MainC");
	setAttr -e-k true ($name + "_MainC.neckIK");
	connectAttr -f ($name + "_MainC.neckIK") ($name + "_NeckMidIKC.v");
	
	addAttr -ln "neckMicro"  -at bool  ($name + "_MainC");
	setAttr -e-k true ($name + "_MainC.neckMicro");
	select ($name + "_Neck??CurveCG");
	$neckCurveCG = `ls -sl`;
	string $currentCG;
	for ($currentCG in $neckCurveCG)
	{
		connectAttr -f ($name + "_MainC.neckMicro") ($currentCG + ".v");
	}	
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////CONNECT CONTROLS///////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	

	//CENTER JOINTS
	parentConstraint -mo ($name + "_MainC") ($name + "_ROOTCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_MainHipC") ($name + "_SpineTopIKC") ($name + "_HeadC") ($name + "_lWristIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_lWristIKC") ($name + "_lClavicleC") ($name + "_lElbowIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_lFootIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_MainHipC") ($name + "_lKneeIKCG");
	
	parentConstraint -mo ($name + "_MainC") ($name + "_MainHipC") ($name + "_SpineTopIKC") ($name + "_HeadC") ($name + "_rWristIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_rWristIKC") ($name + "_rClavicleC") ($name + "_rElbowIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_rFootIKCG");
	parentConstraint -mo ($name + "_MainC") ($name + "_MainHipC") ($name + "_rKneeIKCG");
	
	parentConstraint -mo ($name + "_MainC") ($name + "_ROOTCG");
	
	parentConstraint -mo ($name + "_ROOTC") ($name + "_MainHipCG");
	
	
	parentConstraint -mo ($name + "_Spine01FKC") ($name + "_SpineTemp01J");
	parentConstraint -mo ($name + "_ROOTC") ($name + "_Spine01FKCG");
	
	parentConstraint -mo ($name + "_Neck01FKC") ($name + "_NeckTemp01J");
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($name + "_SpineTopIKC") ($name + "_Neck01FKCG");
	
	//CREATE LOCATOR FOR ANGLED OFFSET
	spaceLocator -n ($name + "_Neck01FKCG_OrientLctr");
	delete `orientConstraint  ($name + "_SpineTopIKC") ($name + "_Neck01FKCG_OrientLctr")`;
	parentConstraint -mo ($name + "_MainC") ($name + "_Neck01FKCG_OrientLctr");
	setAttr ($name + "_Neck01FKCG_OrientLctr.v") 0;
	parent ($name + "_Neck01FKCG_OrientLctr")  ($name + "_MainC");
	
	orientConstraint -mo ($name + "_Neck01FKCG_OrientLctr") ($name + "_SpineTopIKC") ($name + "_Neck01FKCG");
	
	select ($name + "_SpineTemp??J");
	$spineJoints = `ls -sl`;
	$spineNum = `size $spineJoints`;
	string $each;
	int $i = 1;
	while ($i < $spineNum)
	{
		parentConstraint -mo ($name + "_Spine0" + ($i + 1) + "FKC") ($name + "_SpineTemp0" + ($i + 1) + "J");
		parentConstraint -mo ($name + "_Spine0" + $i + "FKC") ($name + "_Spine0" + ($i + 1) + "FKCG");
		$i++;
	}
	
	
	parentConstraint -mo ($name + "_Spine0" + $i + "FKC") ($name + "_SpineTopFKC");


	select ($name + "_NeckTemp??J");
	$neckJoints = `ls -sl`;
	$neckNum = `size $neckJoints`;
	string $each;
	int $i = 1;
	while ($i < $neckNum)
	{
		parentConstraint -mo ($name + "_Neck0" + $i + "FKC") ($name + "_Neck0" + ($i + 1) + "FKCG");
		$i++;
	}
	
	
	parentConstraint -mo ($name + "_Neck0" + $i + "FKC") ($name + "_HeadFKC");
	
	parentConstraint -mo ($name + "_JawC") ($name + "_JawJ");
	parentConstraint -mo ($name + "_HeadC") ($name + "_JawCG");
	
	parentConstraint -mo ($name + "_MainC") ($name + "_HeadC")($name + "_EyeAimCG");
	
	//EYES
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") ($name + "_lEyeAimC") ($name + "_lEyeJ");
	
	aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation"
	-worldUpVector 0 1 0 -worldUpObject ($name + "_HeadC") ($name + "_rEyeAimC") ($name + "_rEyeJ");
	
	//HEAD SCALE
	setAttr -l 0 -k 1 ($name + "_JawCG.sx");
	setAttr -l 0 -k 1 ($name + "_JawCG.sy");
	setAttr -l 0 -k 1 ($name + "_JawCG.sz");
	scaleConstraint ($name + "_HeadC") ($name + "_JawCG");
	transformLimits -sx 0.1 1 -esx 1 0 ($name + "_HeadC");
	transformLimits -sy 0.1 1 -esy 1 0 ($name + "_HeadC");
	transformLimits -sz 0.1 1 -esz 1 0 ($name + "_HeadC");
	connectAttr -f ($name + "_HeadC.scaleY") ($name + "_HeadJ.scaleX");
	connectAttr -f ($name + "_HeadC.scaleX") ($name + "_HeadJ.scaleZ");
	connectAttr -f ($name + "_HeadC.scaleZ") ($name + "_HeadJ.scaleY");
	
	////////////////////////////////////LEFT SIDE////////////////////////////////////
	//LEFT ARM
	parentConstraint -mo ($name + "_SpineTopIKC") ($name + "_lClavicleCG");
	
	//FK
	parentConstraint -mo ($name + "_lClavicleC") ($name + "_lClavicleJ");
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($name + "_lClavicleC") ($name + "_lShoulderFKCG");
	group -n ($name + "_lShoulderFKCG2") ($name + "_lShoulderFKCG");
	$lShoulderLocation = `xform -q -ws -t ($name + "_lShoulderFKCG")`;
	move $lShoulderLocation[0] $lShoulderLocation[1] $lShoulderLocation[2] ($name + "_lShoulderFKCG2.scalePivot") ($name + "_lShoulderFKCG2.rotatePivot") ;
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z
	($name + "_SpineTopIKC") ($name + "_lClavicleC") ($name + "_MainC") ($name + "_lShoulderFKCG2");
	setAttr ($name + "_lShoulderFKCG2_parentConstraint1.interpType") 2;
	
	
	//SHOULDER ORIENT
	addAttr -ln "ShoulderOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_lShoulderFKC");
	setAttr -e-k true ($name + "_lShoulderFKC.ShoulderOrient");

	setAttr ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_MainCW2") 0;
	setDrivenKeyframe -currentDriver ($name + "_lShoulderFKC.ShoulderOrient") ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_MainCW2");
	setAttr ($name + "_lShoulderFKC.ShoulderOrient") 0;
	setAttr ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_MainCW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_lShoulderFKC.ShoulderOrient") ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_MainCW2");
	setAttr ($name + "_lShoulderFKC.ShoulderOrient") 1;
	
	//CHEST & CLAVICLE INFLUENCE
	addAttr -ln "ClavicleInfluence"  -at double  -min 0 -max 1 -dv 0 ($name + "_lShoulderFKC");
	setAttr -e-keyable true ($name + "_lShoulderFKC.ClavicleInfluence");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lShoulderFK_Inf_MD");
	connectAttr -force ($name + "_lShoulderFKC.ClavicleInfluence") ($name + "_lShoulderFK_Inf_MD.input1Y");
	setAttr ($name + "_lShoulderFK_Inf_MD.input1X") 1;
	setDrivenKeyframe -currentDriver ($name + "_lShoulderFKC.ClavicleInfluence") ($name + "_lShoulderFK_Inf_MD.input1X");
	setAttr ($name + "_lShoulderFKC.ClavicleInfluence") 1;
	setAttr ($name + "_lShoulderFK_Inf_MD.input1X") 0;
	setDrivenKeyframe -currentDriver ($name + "_lShoulderFKC.ClavicleInfluence") ($name + "_lShoulderFK_Inf_MD.input1X");
	setAttr ($name + "_lShoulderFKC.ClavicleInfluence") 0;
	
	connectAttr -force  ($name + "_lShoulderFKC.ShoulderOrient") ($name + "_lShoulderFK_Inf_MD.input2X");
	connectAttr -force  ($name + "_lShoulderFKC.ShoulderOrient") ($name + "_lShoulderFK_Inf_MD.input2Y");
	connectAttr -force  ($name + "_lShoulderFK_Inf_MD.outputX") ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_SpineTopIKCW0");
	connectAttr -force  ($name + "_lShoulderFK_Inf_MD.outputY") ($name + "_lShoulderFKCG2_parentConstraint1." + $name + "_lClavicleCW1");
	
	selectKey -k -f 0 -f 1 ($name + "_lShoulderFKCG2_parentConstraint1_" + $name + "_MainCW2") ;
	selectKey -add -k -f 0 -f 1 ($name + "_lShoulderFK_Inf_MD_input1X") ;
	keyTangent -itt spline -ott spline ;
	
	//parentConstraint -mo ($name + "_lShoulderFKC") ($name + "_lShoulderJFK");
	//parentConstraint -mo ($name + "_lShoulderFKC") ($name + "_lElbowFKCG");
	//
	//parentConstraint -mo ($name + "_lElbowFKC") ($name + "_lElbowJFK");
	//parentConstraint -mo ($name + "_lElbowFKC") ($name + "_lWristFKCG");
	//
	//parentConstraint -mo ($name + "_lWristFKC") ($name + "_lWristJFK");
	//setAttr ($name + "_lWristJFK_parentConstraint1.interpType") 2;
	//
	//CONNECT SCALE TO FK CONTROLS
	connectAttr -f ($name + "_lShoulderFKC.scaleX") ($name + "_lShoulderJFK.scaleX");
	connectAttr -f ($name + "_lShoulderFKC.scaleX") ($name + "_lElbowFKC.scaleX");
	connectAttr -f ($name + "_lShoulderFKC.scaleX") ($name + "_lElbowJFK.scaleX");
	
	//IK
	select ($name + "_lShoulderJIK.rotatePivot") ($name + "_lWristJIK.rotatePivot") ;
	ikHandle -n ($name + "_lArmIKHandle") -sol ikRPsolver;
	poleVectorConstraint ($name + "_lElbowIKC") ($name + "_lArmIKHandle") ;
	pointConstraint ($name + "_lWristIKC") ($name + "_lArmIKHandle");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z -weight 1 ($name + "_lWristIKC") ($name + "_lWristJIK");
	setAttr ($name + "_lWristJIK_parentConstraint1.interpType") 2;
	
	//LEFT IK WRIST DYNAMIC CONSTRAINTS
	connectAttr -f ($name + "_lWristIKC.Hips") ($name + "_lWristIKCG_parentConstraint1." + $name + "_MainHipCW1");
	connectAttr -f ($name + "_lWristIKC.Chest") ($name + "_lWristIKCG_parentConstraint1." + $name + "_SpineTopIKCW2");
	connectAttr -f ($name + "_lWristIKC.Head") ($name + "_lWristIKCG_parentConstraint1." + $name + "_HeadCW3");
	
	shadingNode -asUtility plusMinusAverage -n ($name + "_lWristIKParent_PMA");
	connectAttr -f ($name + "_lWristIKC.Hips") ($name + "_lWristIKParent_PMA.input1D[0]");
	connectAttr -f ($name + "_lWristIKC.Chest") ($name + "_lWristIKParent_PMA.input1D[1]");
	connectAttr -f ($name + "_lWristIKC.Head") ($name + "_lWristIKParent_PMA.input1D[2]");
	
	shadingNode -asUtility condition -n ($name + "_lWristIKParent_Condition");
	setAttr ($name + "_lWristIKParent_Condition.operation") 4;
	setAttr ($name + "_lWristIKParent_Condition.secondTerm") 1;
	connectAttr -f ($name + "_lWristIKParent_PMA.output1D") ($name + "_lWristIKParent_Condition.firstTerm");
	connectAttr -force ($name + "_lWristIKParent_PMA.output1D") ($name + "_lWristIKParent_Condition.colorIfTrueR");
	
	shadingNode -asUtility reverse -n ($name + "_lWristIKParent_Reverse");
	connectAttr -f ($name + "_lWristIKParent_Condition.outColorR") ($name + "_lWristIKParent_Reverse.inputX");
	connectAttr -f ($name + "_lWristIKParent_Reverse.outputX") ($name + "_lWristIKCG_parentConstraint1." + $name + "_MainCW0");
	
	
	//LEFT FINGERS
	if (`objExists ($name + "_lThumbJ1")`)
	{
		parentConstraint -mo ($name + "_lWristJ") ($name + "_lThumbJ1CG");
		
		parentConstraint -mo ($name + "_lThumbJ1C") ($name + "_lThumbJ1");
		parentConstraint -mo ($name + "_lThumbJ1C") ($name + "_lThumbJ2CG");
		
		parentConstraint -mo ($name + "_lThumbJ2C") ($name + "_lThumbJ2");
		parentConstraint -mo ($name + "_lThumbJ2C") ($name + "_lThumbJ3CG");
		
		parentConstraint -mo ($name + "_lThumbJ3C") ($name + "_lThumbJ3");
	}
	
	select ($name + "_lFinger*J1");
	$fingers = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $fingers)
	{
		parentConstraint -mo ($name + "_lWristJG1") ($name + "_lPalmC") ($name + "_lFinger" + $i + "J1CG");
		parentConstraint -mo ($name + "_lFinger" + $i + "J1C") ($name + "_lFinger" + $i + "J1");
		parentConstraint -mo ($name + "_lFinger" + $i + "J1C") ($name + "_lFinger" + $i + "J2CG");
		parentConstraint -mo ($name + "_lFinger" + $i + "J2C") ($name + "_lFinger" + $i + "J2");
		parentConstraint -mo ($name + "_lFinger" + $i + "J2C") ($name + "_lFinger" + $i + "J3CG");
		parentConstraint -mo ($name + "_lFinger" + $i + "J3C") ($name + "_lFinger" + $i + "J3");
		//PALM INFLUENCE
		addAttr -ln "palmInfluence"  -at double  -min 0 -max 1 -dv 1 ($name + "_lFinger" + $i + "J1C");
		setAttr -e-keyable true ($name + "_lFinger" + $i + "J1C.palmInfluence");

		connectAttr -force ($name + "_lFinger" + $i + "J1C.palmInfluence") ($name + "_lFinger" + $i + "J1CG_parentConstraint1." + $name + "_lPalmCW1");
		shadingNode -asUtility reverse -n ($name + "_lFinger" + $i + "_PalmInfRev");
		connectAttr -force ($name + "_lFinger" + $i + "J1C.palmInfluence") ($name + "_lFinger" + $i + "_PalmInfRev.inputX");
		connectAttr -force ($name + "_lFinger" + $i + "_PalmInfRev.outputX") ($name + "_lFinger" + $i + "J1CG_parentConstraint1." + $name + "_lWristJG1W0");
		
		$i++;
	}
	
	//LEFT LEG
	parentConstraint -mo ($name + "_MainHipC") ($name + "_ROOTJ");
	parentConstraint -mo ($name + "_MainHipC") ($name + "_lHipFKCG");
	
	parentConstraint -mo ($name + "_lHipFKC") ($name + "_lHipJFK");
	parentConstraint -mo ($name + "_lHipFKC") ($name + "_lKneeFKCG");
	
	pointConstraint -mo ($name + "_lHipFKC") ($name + "_lHipJIK");
	pointConstraint -mo ($name + "_lHipFKC") ($name + "_lHipJ");

	
	parentConstraint -mo ($name + "_lKneeFKC") ($name + "_lKneeJFK");
	parentConstraint -mo ($name + "_lKneeFKC") ($name + "_lAnkleFKCG");
	
	parentConstraint -mo ($name + "_lAnkleFKC") ($name + "_lAnkleJFK");
	parentConstraint -mo ($name + "_lAnkleFKC") ($name + "_lBallFKCG");
	
	parentConstraint -mo ($name + "_lBallFKC") ($name + "_lBallJFK");
	
	
	//IK
	spaceLocator -n ($name + "_lFootBallPivot");
	select -add ($name + "_lBallJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	rotate -r 0 90 0;
	parent -w;
	setAttr ($name + "_lFootBallPivot.rx") 0;
	duplicate -rr -n ($name + "_lFootToePivot");
	
	select ($name + "_lAnkleJIK.rotatePivot") ($name + "_lBallJIK.rotatePivot") ; 
	ikHandle -n ($name + "_lBallIKHandle") -sol ikSCsolver;
	parent ($name + "_lBallIKHandle") ($name + "_lFootBallPivot");
	select ($name + "_lBallJIK.rotatePivot") ($name + "_lToeJIK.rotatePivot") ; 
	ikHandle -n ($name + "_lToeIKHandle") -sol ikSCsolver;
	parent ($name + "_lToeIKHandle") ($name + "_lFootToePivot");
	
	spaceLocator -n ($name + "_lBallSwivel");
	pointConstraint ($name + "_lBallJ") ($name + "_lBallSwivel");
	delete ($name + "_lBallSwivel_pointConstraint1");
	parent ($name + "_lBallSwivel") ($name + "_lToeIKC");
	makeIdentity -apply false -r 1 ($name + "_lBallSwivel");
	
	parent ($name + "_lFootInTilt") ($name + "_lBallSwivel");
	parent ($name + "_lFootOutTilt") ($name + "_lFootInTilt");
	parent ($name + "_lFootHeelPivot") ($name + "_lFootOutTilt");
	parent ($name + "_lFootBallPivot") ($name + "_lFootToePivot") ($name + "_lFootHeelPivot");
	makeIdentity -apply true -t 1 -r 0 -s 1 ($name + "_lFootInTilt");
	parentConstraint -mo ($name + "_lFootIKC") ($name + "_lToeIKCG");
	
	setAttr -l 1 -k 1 ($name + "_lHipJIK.rx");
	setAttr -l 1 -k 1 ($name + "_lHipJIK.ry");
	setAttr -l 1 -k 1 ($name + "_lHipJIK.rz");
	setAttr -l 1 -k 1 ($name + "_lKneeJIK.rx");
	setAttr -l 1 -k 1 ($name + "_lKneeJIK.ry");
	setAttr -l 1 -k 1 ($name + "_lKneeJIK.rz");
	select ($name + "_lHipJIK.rotatePivot") ($name + "_lAnkleJIK.rotatePivot") ;
	ikHandle -n ($name + "_lLegIKHandle") -sol ikRPsolver;
	setAttr -l 0 -k 1 ($name + "_lHipJIK.rx");
	setAttr -l 0 -k 1 ($name + "_lHipJIK.ry");
	setAttr -l 0 -k 1 ($name + "_lHipJIK.rz");
	setAttr -l 0 -k 1 ($name + "_lKneeJIK.rx");
	setAttr -l 0 -k 1 ($name + "_lKneeJIK.ry");
	setAttr -l 0 -k 1 ($name + "_lKneeJIK.rz");
	select ($name + "_lKneeIKC") ($name + "_lLegIKHandle") ;
	poleVectorConstraint;
	parent ($name + "_lLegIKHandle") ($name + "_lFootBallPivot");
	
	//LEFT LEG IK LOCK LOCATORS
	spaceLocator -n ($name + "_lHipIKLockLctr");
	spaceLocator -n ($name + "_lKneeIKLockLctr");
	spaceLocator -n ($name + "_lAnkleIKLockLctr");
	spaceLocator -n ($name + "_lKneeTargetLockLctr");
	parent ($name + "_lKneeIKLockLctr") ($name + "_lHipIKLockLctr");
	parent ($name + "_lAnkleIKLockLctr") ($name + "_lKneeIKLockLctr");
	parent ($name + "_lKneeTargetLockLctr") ($name + "_lFootBallPivot");
	pointConstraint ($name + "_lHipJIK") ($name + "_lHipIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lKneeIKC") ($name + "_lHipIKLockLctr");
	pointConstraint ($name + "_lKneeIKC") ($name + "_lKneeIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lKneeTargetLockLctr") ($name + "_lKneeIKLockLctr");
	pointConstraint ($name + "_lFootIKC") ($name + "_lAnkleIKLockLctr");
	delete ($name + "_lAnkleIKLockLctr_pointConstraint1");
	parentConstraint -mo ($name + "_lFootBallPivot") ($name + "_lAnkleIKLockLctr");
	pointConstraint ($name + "_lFootIKC") ($name + "_lKneeTargetLockLctr");
	delete ($name + "_lKneeTargetLockLctr_pointConstraint1");
	parentConstraint -mo ($name + "_lFootBallPivot") ($name + "_lKneeTargetLockLctr");

	//NODES
	spaceLocator -n ($name + "_lLegLengthOriginLctr");
	pointConstraint ($name + "_lHipJIK") ($name + "_lLegLengthOriginLctr");
	
	spaceLocator -n ($name + "_lLegLengthEndLctr");
	parent ($name + "_lLegLengthEndLctr") ($name + "_lLegLengthOriginLctr");
	
	pointConstraint ($name + "_lFootIKC") ($name + "_lLegLengthEndLctr");
	delete ($name + "_lLegLengthEndLctr_pointConstraint1");
	parentConstraint -mo ($name + "_lFootBallPivot") ($name + "_lLegLengthEndLctr");
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" ($name + "_lKneeTargetLockLctr") ($name + "_lLegLengthOriginLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lLegLength_MD");
	setAttr ($name + "_lLegLength_MD.operation") 2;
	connectAttr -f ($name + "_lLegLengthEndLctr.translateY") ($name + "_lLegLength_MD.input1X");
	setAttr ($name + "_lLegLength_MD.input2X") ($lLegLength[0]*2);
	
	shadingNode -asUtility condition -n ($name + "_lLegLength_Condition");
	connectAttr -f ($name + "_lLegLength_MD.outputX") ($name + "_lLegLength_Condition.firstTerm");
	setAttr ($name + "_lLegLength_Condition.secondTerm") 1;
	setAttr ($name + "_lLegLength_Condition.operation") 2;
	connectAttr -f ($name + "_lLegLength_MD.outputX") ($name + "_lLegLength_Condition.colorIfTrueR");
	
	shadingNode -asUtility blendColors -n ($name + "_lLegLength_Blnd");
	connectAttr -f ($name + "_lLegLength_Condition.outColorR") ($name + "_lLegLength_Blnd.color1R");
	setAttr ($name + "_lLegLength_Blnd.color2") -type double3 1 0 1 ;
	
	
	//LEFT LEG IK LOCK
	shadingNode -asUtility multiplyDivide -n ($name + "_lHipLockLength_MD");
	setAttr ($name + "_lHipLockLength_MD.operation") 2;
	connectAttr -f ($name + "_lKneeIKLockLctr.translateX") ($name + "_lHipLockLength_MD.input1X");
	setAttr ($name + "_lHipLockLength_MD.input2X") $lKneeLength[0];
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lKneeLockLength_MD");
	setAttr ($name + "_lKneeLockLength_MD.operation") 2;
	connectAttr -f ($name + "_lAnkleIKLockLctr.translateX") ($name + "_lKneeLockLength_MD.input1X");
	setAttr ($name + "_lKneeLockLength_MD.input2X") $lAnkleLength[0];
	
	shadingNode -asUtility blendColors -n ($name + "_lHipLock_Blnd");
	connectAttr -f ($name + "_lHipLockLength_MD.outputX") ($name + "_lHipLock_Blnd.color1R");
	connectAttr -f ($name + "_lLegLength_Blnd.outputR") ($name + "_lHipLock_Blnd.color2R");
	
	shadingNode -asUtility blendColors -n ($name + "_lKneeLock_Blnd");
	connectAttr -f ($name + "_lKneeLockLength_MD.outputX") ($name + "_lKneeLock_Blnd.color1R");
	connectAttr -f ($name + "_lLegLength_Blnd.outputR") ($name + "_lKneeLock_Blnd.color2R");
	
	//ADD STRETCH TO IK FOOT CONTROL
	addAttr -ln "Stretch"  -at double  -min 0 -max 1 -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.Stretch");
	connectAttr -f ($name + "_lFootIKC.Stretch") ($name + "_lLegLength_Blnd.blender");
	
	//ADD KNEE LOCK TO IK FOOT CONTROL
	addAttr -ln "KneeLock"  -at double  -min 0 -max 1 -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.KneeLock");
	connectAttr -f ($name + "_lFootIKC.KneeLock") ($name + "_lHipLock_Blnd.blender");
	connectAttr -f ($name + "_lFootIKC.KneeLock") ($name + "_lKneeLock_Blnd.blender");
	
	
	//ADD LEFT LEG SCALE
	addAttr -ln "LegScale"  -at double  -min 0.01 -dv 1 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.LegScale");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lHipScale_MD");
	connectAttr -force ($name + "_lHipLock_Blnd.outputR") ($name + "_lHipScale_MD.input1X");
	connectAttr -force ($name + "_lFootIKC.LegScale") ($name + "_lHipScale_MD.input2X");
	connectAttr -force ($name + "_lHipScale_MD.outputX") ($name + "_lHipJIK.scaleX");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lKneeScale_MD");
	connectAttr -force ($name + "_lKneeLock_Blnd.outputR") ($name + "_lKneeScale_MD.input1X");
	connectAttr -force ($name + "_lFootIKC.LegScale") ($name + "_lKneeScale_MD.input2X");
	connectAttr -force ($name + "_lKneeScale_MD.outputX") ($name + "_lKneeJIK.scaleX");
	
	
	////////////////////////////////////RIGHT SIDE////////////////////////////////////
	
	
	//RIGHT ARM
	parentConstraint -mo ($name + "_SpineTopIKC") ($name + "_rClavicleCG");
	
	//FK
	parentConstraint -mo ($name + "_rClavicleC") ($name + "_rClavicleJ");
	parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z ($name + "_rClavicleC") ($name + "_rShoulderFKCG");
	group -n ($name + "_rShoulderFKCG2") ($name + "_rShoulderFKCG");
	$lShoulderLocation = `xform -q -ws -t ($name + "_rShoulderFKCG")`;
	move $lShoulderLocation[0] $lShoulderLocation[1] $lShoulderLocation[2] ($name + "_rShoulderFKCG2.scalePivot") ($name + "_rShoulderFKCG2.rotatePivot") ;
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z
	($name + "_SpineTopIKC") ($name + "_rClavicleC") ($name + "_MainC") ($name + "_rShoulderFKCG2");
	setAttr ($name + "_rShoulderFKCG2_parentConstraint1.interpType") 1;
	
	
	//SHOULDER ORIENT
	addAttr -ln "ShoulderOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_rShoulderFKC");
	setAttr -e-k true ($name + "_rShoulderFKC.ShoulderOrient");

	setAttr ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_MainCW2") 0;
	setDrivenKeyframe -currentDriver ($name + "_rShoulderFKC.ShoulderOrient") ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_MainCW2");
	setAttr ($name + "_rShoulderFKC.ShoulderOrient") 0;
	setAttr ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_MainCW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_rShoulderFKC.ShoulderOrient") ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_MainCW2");
	setAttr ($name + "_rShoulderFKC.ShoulderOrient") 1;
	
	//CHEST & CLAVICLE INFLUENCE
	addAttr -ln "ClavicleInfluence"  -at double  -min 0 -max 1 -dv 0 ($name + "_rShoulderFKC");
	setAttr -e-keyable true ($name + "_rShoulderFKC.ClavicleInfluence");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rShoulderFK_Inf_MD");
	connectAttr -force ($name + "_rShoulderFKC.ClavicleInfluence") ($name + "_rShoulderFK_Inf_MD.input1Y");
	setAttr ($name + "_rShoulderFK_Inf_MD.input1X") 1;
	setDrivenKeyframe -currentDriver ($name + "_rShoulderFKC.ClavicleInfluence") ($name + "_rShoulderFK_Inf_MD.input1X");
	setAttr ($name + "_rShoulderFKC.ClavicleInfluence") 1;
	setAttr ($name + "_rShoulderFK_Inf_MD.input1X") 0;
	setDrivenKeyframe -currentDriver ($name + "_rShoulderFKC.ClavicleInfluence") ($name + "_rShoulderFK_Inf_MD.input1X");
	setAttr ($name + "_rShoulderFKC.ClavicleInfluence") 0;
	
	connectAttr -force  ($name + "_rShoulderFKC.ShoulderOrient") ($name + "_rShoulderFK_Inf_MD.input2X");
	connectAttr -force  ($name + "_rShoulderFKC.ShoulderOrient") ($name + "_rShoulderFK_Inf_MD.input2Y");
	connectAttr -force  ($name + "_rShoulderFK_Inf_MD.outputX") ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_SpineTopIKCW0");
	connectAttr -force  ($name + "_rShoulderFK_Inf_MD.outputY") ($name + "_rShoulderFKCG2_parentConstraint1." + $name + "_rClavicleCW1");
	
	selectKey -k -f 0 -f 1 ($name + "_rShoulderFKCG2_parentConstraint1_" + $name + "_MainCW2") ;
	selectKey -add -k -f 0 -f 1 ($name + "_rShoulderFK_Inf_MD_input1X") ;
	keyTangent -itt spline -ott spline ;
	
	//CONNECT SCALE TO FK CONTROLS
	connectAttr -f ($name + "_rShoulderFKC.scaleX") ($name + "_rShoulderJFK.scaleX");
	connectAttr -f ($name + "_rShoulderFKC.scaleX") ($name + "_rElbowFKC.scaleX");
	connectAttr -f ($name + "_rShoulderFKC.scaleX") ($name + "_rElbowJFK.scaleX");

	//IK
	select ($name + "_rShoulderJIK.rotatePivot") ($name + "_rWristJIK.rotatePivot") ;
	ikHandle -n ($name + "_rArmIKHandle") -sol ikRPsolver;
	poleVectorConstraint ($name + "_rElbowIKC") ($name + "_rArmIKHandle") ;
	pointConstraint ($name + "_rWristIKC") ($name + "_rArmIKHandle");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($name + "_rWristIKC") ($name + "_rWristJIK");
	setAttr ($name + "_rWristJIK_parentConstraint1.interpType") 2;
	
	//RIGHT IK WRIST DYNAMIC CONSTRAINTS
	connectAttr -f ($name + "_rWristIKC.Hips") ($name + "_rWristIKCG_parentConstraint1." + $name + "_MainHipCW1");
	connectAttr -f ($name + "_rWristIKC.Chest") ($name + "_rWristIKCG_parentConstraint1." + $name + "_SpineTopIKCW2");
	connectAttr -f ($name + "_rWristIKC.Head") ($name + "_rWristIKCG_parentConstraint1." + $name + "_HeadCW3");
	
	shadingNode -asUtility plusMinusAverage -n ($name + "_rWristIKParent_PMA");
	connectAttr -f ($name + "_rWristIKC.Hips") ($name + "_rWristIKParent_PMA.input1D[0]");
	connectAttr -f ($name + "_rWristIKC.Chest") ($name + "_rWristIKParent_PMA.input1D[1]");
	connectAttr -f ($name + "_rWristIKC.Head") ($name + "_rWristIKParent_PMA.input1D[2]");
	
	shadingNode -asUtility condition -n ($name + "_rWristIKParent_Condition");
	setAttr ($name + "_rWristIKParent_Condition.operation") 4;
	setAttr ($name + "_rWristIKParent_Condition.secondTerm") 1;
	connectAttr -f ($name + "_rWristIKParent_PMA.output1D") ($name + "_rWristIKParent_Condition.firstTerm");
	connectAttr -force ($name + "_rWristIKParent_PMA.output1D") ($name + "_rWristIKParent_Condition.colorIfTrueR");
	
	shadingNode -asUtility reverse -n ($name + "_rWristIKParent_Reverse");
	connectAttr -f ($name + "_rWristIKParent_Condition.outColorR") ($name + "_rWristIKParent_Reverse.inputX");
	connectAttr -f ($name + "_rWristIKParent_Reverse.outputX") ($name + "_rWristIKCG_parentConstraint1." + $name + "_MainCW0");
	
	//RIGHT FINGERS
	if (`objExists ($name + "_rThumbJ1")`)
	{
		parentConstraint -mo ($name + "_rWristJ") ($name + "_rThumbJ1CG");
		
		parentConstraint -mo ($name + "_rThumbJ1C") ($name + "_rThumbJ1");
		parentConstraint -mo ($name + "_rThumbJ1C") ($name + "_rThumbJ2CG");
		
		parentConstraint -mo ($name + "_rThumbJ2C") ($name + "_rThumbJ2");
		parentConstraint -mo ($name + "_rThumbJ2C") ($name + "_rThumbJ3CG");
		
		parentConstraint -mo ($name + "_rThumbJ3C") ($name + "_rThumbJ3");
	}
	
	select ($name + "_rFinger*J1");
	$fingers = `ls -sl`;
	string $each;
	$i = 1;
	for ($each in $fingers)
	{
		parentConstraint -mo ($name + "_rWristJG1") ($name + "_rPalmC") ($name + "_rFinger" + $i + "J1CG");
		parentConstraint -mo ($name + "_rFinger" + $i + "J1C") ($name + "_rFinger" + $i + "J1");
		parentConstraint -mo ($name + "_rFinger" + $i + "J1C") ($name + "_rFinger" + $i + "J2CG");
		parentConstraint -mo ($name + "_rFinger" + $i + "J2C") ($name + "_rFinger" + $i + "J2");
		parentConstraint -mo ($name + "_rFinger" + $i + "J2C") ($name + "_rFinger" + $i + "J3CG");
		parentConstraint -mo ($name + "_rFinger" + $i + "J3C") ($name + "_rFinger" + $i + "J3");
		//PALM INFLUENCE
		addAttr -ln "palmInfluence"  -at double  -min 0 -max 1 -dv 1 ($name + "_rFinger" + $i + "J1C");
		setAttr -e-keyable true ($name + "_rFinger" + $i + "J1C.palmInfluence");

		connectAttr -force ($name + "_rFinger" + $i + "J1C.palmInfluence") ($name + "_rFinger" + $i + "J1CG_parentConstraint1." + $name + "_rPalmCW1");
		shadingNode -asUtility reverse -n ($name + "_rFinger" + $i + "_PalmInfRev");
		connectAttr -force ($name + "_rFinger" + $i + "J1C.palmInfluence") ($name + "_rFinger" + $i + "_PalmInfRev.inputX");
		connectAttr -force ($name + "_rFinger" + $i + "_PalmInfRev.outputX") ($name + "_rFinger" + $i + "J1CG_parentConstraint1." + $name + "_rWristJG1W0");
		
		$i++;
	}

	//RIGHT LEG
	parentConstraint -mo ($name + "_MainHipC") ($name + "_rHipFKCG");
	
	parentConstraint -mo ($name + "_rHipFKC") ($name + "_rHipJFK");
	parentConstraint -mo ($name + "_rHipFKC") ($name + "_rKneeFKCG");
	
	pointConstraint -mo ($name + "_rHipFKC") ($name + "_rHipJIK");
	pointConstraint -mo ($name + "_rHipFKC") ($name + "_rHipJ");

	parentConstraint -mo ($name + "_rKneeFKC") ($name + "_rKneeJFK");
	parentConstraint -mo ($name + "_rKneeFKC") ($name + "_rAnkleFKCG");
	
	parentConstraint -mo ($name + "_rAnkleFKC") ($name + "_rAnkleJFK");
	parentConstraint -mo ($name + "_rAnkleFKC") ($name + "_rBallFKCG");
	
	parentConstraint -mo ($name + "_rBallFKC") ($name + "_rBallJFK");
	
	
	//IK
	spaceLocator -n ($name + "_rFootBallPivot");
	select -add ($name + "_rBallJ");
	parent;
	makeIdentity -apply false -t 1 -r 1 -s 1;
	rotate -r 0 90 0;
	parent -w;
	duplicate -rr -n ($name + "_rFootToePivot");
	
	select ($name + "_rAnkleJIK.rotatePivot") ($name + "_rBallJIK.rotatePivot") ; 
	ikHandle -n ($name + "_rBallIKHandle") -sol ikSCsolver;
	select ($name + "_rBallJIK.rotatePivot") ($name + "_rToeJIK.rotatePivot") ; 
	ikHandle -n ($name + "_rToeIKHandle") -sol ikSCsolver;
	
	spaceLocator -n ($name + "_rBallSwivel");
	pointConstraint ($name + "_rBallJ") ($name + "_rBallSwivel");
	delete ($name + "_rBallSwivel_pointConstraint1");
	parent ($name + "_rBallSwivel") ($name + "_rToeIKC");
	makeIdentity -apply false -r 1 ($name + "_rBallSwivel");
	
	parent ($name + "_rFootInTilt") ($name + "_rBallSwivel");
	parent ($name + "_rFootOutTilt") ($name + "_rFootInTilt");
	parent ($name + "_rFootHeelPivot") ($name + "_rFootOutTilt");
	parent ($name + "_rFootBallPivot") ($name + "_rFootToePivot") ($name + "_rFootHeelPivot");
	makeIdentity -apply true -t 1 -s 1 ($name + "_rFootInTilt");
	makeIdentity -apply false -r 1 ($name + "_rFootToePivot") ($name + "_rFootBallPivot");
	parent ($name + "_rToeIKHandle") ($name + "_rFootToePivot");
	parent ($name + "_rBallIKHandle") ($name + "_rFootBallPivot");
	parentConstraint -mo ($name + "_rFootIKC") ($name + "_rToeIKCG");
	
	select ($name + "_rHipJIK.rotatePivot") ($name + "_rAnkleJIK.rotatePivot") ;
	ikHandle -n ($name + "_rLegIKHandle") -sol ikRPsolver;
	select ($name + "_rKneeIKC") ($name + "_rLegIKHandle") ;
	poleVectorConstraint;
	parent ($name + "_rLegIKHandle") ($name + "_rFootBallPivot");

	
	//RIGHT LEG IK LOCK LOCATORS
	spaceLocator -n ($name + "_rHipIKLockLctr");
	spaceLocator -n ($name + "_rKneeIKLockLctr");
	spaceLocator -n ($name + "_rAnkleIKLockLctr");
	spaceLocator -n ($name + "_rKneeTargetLockLctr");
	parent ($name + "_rKneeIKLockLctr") ($name + "_rHipIKLockLctr");
	parent ($name + "_rAnkleIKLockLctr") ($name + "_rKneeIKLockLctr");
	parent ($name + "_rKneeTargetLockLctr") ($name + "_rFootBallPivot");
	pointConstraint ($name + "_rHipJIK") ($name + "_rHipIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rKneeIKC") ($name + "_rHipIKLockLctr");
	pointConstraint ($name + "_rKneeIKC") ($name + "_rKneeIKLockLctr");
	aimConstraint -aimVector 1 0 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rKneeTargetLockLctr") ($name + "_rKneeIKLockLctr");
	pointConstraint ($name + "_rFootIKC") ($name + "_rAnkleIKLockLctr");
	delete ($name + "_rAnkleIKLockLctr_pointConstraint1");
	parentConstraint -mo ($name + "_rFootBallPivot") ($name + "_rAnkleIKLockLctr");
	pointConstraint ($name + "_rFootIKC") ($name + "_rKneeTargetLockLctr");
	delete ($name + "_rKneeTargetLockLctr_pointConstraint1");
	parentConstraint -mo ($name + "_rFootBallPivot") ($name + "_rKneeTargetLockLctr");
	

	//NODES
	spaceLocator -n ($name + "_rLegLengthOriginLctr");
	pointConstraint ($name + "_rHipJIK") ($name + "_rLegLengthOriginLctr");
	
	spaceLocator -n ($name + "_rLegLengthEndLctr");
	parent ($name + "_rLegLengthEndLctr") ($name + "_rLegLengthOriginLctr");
	
	pointConstraint ($name + "_rFootIKC") ($name + "_rLegLengthEndLctr");
	delete ($name + "_rLegLengthEndLctr_pointConstraint1");
	parentConstraint -mo ($name + "_rFootBallPivot") ($name + "_rLegLengthEndLctr");
	aimConstraint -aimVector 0 1 0 -upVector 0 1 0 -worldUpType "none" ($name + "_rKneeTargetLockLctr") ($name + "_rLegLengthOriginLctr");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rLegLength_MD");
	setAttr ($name + "_rLegLength_MD.operation") 2;
	connectAttr -f ($name + "_rLegLengthEndLctr.translateY") ($name + "_rLegLength_MD.input1X");
	setAttr ($name + "_rLegLength_MD.input2X") ($rLegLength[0]* -2);
	
	shadingNode -asUtility condition -n ($name + "_rLegLength_Condition");
	connectAttr -f ($name + "_rLegLength_MD.outputX") ($name + "_rLegLength_Condition.firstTerm");
	setAttr ($name + "_rLegLength_Condition.secondTerm") 1;
	setAttr ($name + "_rLegLength_Condition.operation") 2;
	connectAttr -f ($name + "_rLegLength_MD.outputX") ($name + "_rLegLength_Condition.colorIfTrueR");
	
	shadingNode -asUtility blendColors -n ($name + "_rLegLength_Blnd");
	connectAttr -f ($name + "_rLegLength_Condition.outColorR") ($name + "_rLegLength_Blnd.color1R");
	setAttr ($name + "_rLegLength_Blnd.color2") -type double3 1 0 1 ;
	
	//RIGHT LEG IK LOCK
	shadingNode -asUtility multiplyDivide -n ($name + "_rHipLockLength_MD");
	setAttr ($name + "_rHipLockLength_MD.operation") 2;
	connectAttr -f ($name + "_rKneeIKLockLctr.translateX ")($name + "_rHipLockLength_MD.input1X");
	setAttr ($name + "_rHipLockLength_MD.input2X") ($rKneeLength[0]*-1);
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rKneeLockLength_MD");
	setAttr ($name + "_rKneeLockLength_MD.operation") 2;
	connectAttr -f ($name + "_rAnkleIKLockLctr.translateX") ($name + "_rKneeLockLength_MD.input1X");
	setAttr ($name + "_rKneeLockLength_MD.input2X") ($rAnkleLength[0] * -1);
	
	shadingNode -asUtility blendColors -n ($name + "_rHipLock_Blnd");
	connectAttr -f ($name + "_rHipLockLength_MD.outputX") ($name + "_rHipLock_Blnd.color1R");
	connectAttr -f ($name + "_rLegLength_Blnd.outputR") ($name + "_rHipLock_Blnd.color2R");
	
	shadingNode -asUtility blendColors -n ($name + "_rKneeLock_Blnd");
	connectAttr -f ($name + "_rKneeLockLength_MD.outputX") ($name + "_rKneeLock_Blnd.color1R");
	connectAttr -f ($name + "_rLegLength_Blnd.outputR") ($name + "_rKneeLock_Blnd.color2R");
	
	//ADD STRETCH TO IK FOOT CONTROL
	addAttr -ln "Stretch"  -at double  -min 0 -max 1 -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.Stretch");
	connectAttr -f ($name + "_rFootIKC.Stretch") ($name + "_rLegLength_Blnd.blender");
	
	//ADD KNEE LOCK TO IK FOOT CONTROL
	addAttr -ln "KneeLock"  -at double  -min 0 -max 1 -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.KneeLock");
	connectAttr -f ($name + "_rFootIKC.KneeLock") ($name + "_rHipLock_Blnd.blender");
	connectAttr -f ($name + "_rFootIKC.KneeLock") ($name + "_rKneeLock_Blnd.blender");
	
	//ADD RIGHT LEG SCALE
	addAttr -ln "LegScale"  -at double  -min 0.01 -dv 1 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.LegScale");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rHipScale_MD");
	connectAttr -force ($name + "_rHipLock_Blnd.outputR") ($name + "_rHipScale_MD.input1X");
	connectAttr -force ($name + "_rFootIKC.LegScale") ($name + "_rHipScale_MD.input2X");
	connectAttr -force ($name + "_rHipScale_MD.outputX") ($name + "_rHipJIK.scaleX");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rKneeScale_MD");
	connectAttr -force ($name + "_rKneeLock_Blnd.outputR") ($name + "_rKneeScale_MD.input1X");
	connectAttr -force ($name + "_rFootIKC.LegScale") ($name + "_rKneeScale_MD.input2X");
	connectAttr -force ($name + "_rKneeScale_MD.outputX") ($name + "_rKneeJIK.scaleX");
	
	
	//CONNECT IK AND FK JOINTS TO ORIGINALS
	//LEFT SHOULDER
	shadingNode -asUtility blendColors -n ($name + "_lShoulderJIKFK_BlndScale");
	connectAttr -f ($name + "_lShoulderJFK.scale") ($name + "_lShoulderJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_lShoulderJIK.scale") ($name + "_lShoulderJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lShoulderJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lShoulderVolume_MD");
	setAttr ($name + "_lShoulderVolume_MD.input1X") 1;
	setAttr ($name + "_lShoulderVolume_MD.operation") 2;
	connectAttr -f ($name + "_lShoulderJIKFK_BlndScale.outputR") ($name + "_lShoulderVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_lShoulderJIKFK_AutoBlnd");
	setAttr ($name + "_lShoulderJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_lShoulderVolume_MD.outputX") ($name + "_lShoulderJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_lShoulderJIKFK_AutoBlnd.outputR") ($name + "_lShoulderJ.scaleY");
	connectAttr -f ($name + "_lShoulderJIKFK_AutoBlnd.outputR") ($name + "_lShoulderJ.scaleZ");
	connectAttr -f ($name + "_lArmSwitchC.AutoVolume") ($name + "_lShoulderJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n  ($name + "_lShoulderJIKFK_BlndRotate");
	connectAttr -f ($name + "_lShoulderJFK.rotate") ($name + "_lShoulderJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lShoulderJIK.rotate") ($name + "_lShoulderJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lShoulderJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lShoulderJIKFK_BlndScale.outputR") ($name + "_lShoulderJ.scaleX");
	connectAttr -f ($name + "_lShoulderJIKFK_BlndRotate.output") ($name + "_lShoulderJ.rotate");
	
	
	//LEFT ELBOW
	shadingNode -asUtility blendColors -n ($name + "_lElbowJIKFK_BlndScale");
	connectAttr -f ($name + "_lElbowJFK.scale") ($name + "_lElbowJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_lElbowJIK.scale") ($name + "_lElbowJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lElbowJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lElbowVolume_MD");
	setAttr ($name + "_lElbowVolume_MD.input1X") 1;
	setAttr ($name + "_lElbowVolume_MD.operation") 2;
	connectAttr -f ($name + "_lElbowJIKFK_BlndScale.outputR") ($name + "_lElbowVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_lElbowJIKFK_AutoBlnd");
	setAttr ($name + "_lElbowJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_lElbowVolume_MD.outputX") ($name + "_lElbowJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_lElbowJIKFK_AutoBlnd.outputR") ($name + "_lElbowJ.scaleY");
	connectAttr -f ($name + "_lElbowJIKFK_AutoBlnd.outputR") ($name + "_lElbowJ.scaleZ");
	connectAttr -f ($name + "_lArmSwitchC.AutoVolume") ($name + "_lElbowJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n ($name + "_lElbowJIKFK_BlndRotate");
	connectAttr -f ($name + "_lElbowJFK.rotate") ($name + "_lElbowJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lElbowJIK.rotate") ($name + "_lElbowJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lElbowJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lElbowJIKFK_BlndScale.outputR") ($name + "_lElbowJ.scaleX");
	connectAttr -f ($name + "_lElbowJIKFK_BlndRotate.output") ($name + "_lElbowJ.rotate");
	
	
	//LEFT FOREARM
	connectAttr -f ($name + "_lElbowJIKFK_BlndScale.outputR") ($name + "_lForearmJ.scaleX");
	connectAttr -f ($name + "_lElbowVolume_MD.outputX") ($name + "_lForearmJ.scaleY");
	connectAttr -f ($name + "_lElbowVolume_MD.outputX") ($name + "_lForearmJ.scaleZ");
	connectAttr -f ($name + "_lWristJG1.rotateX") ($name + "_lForearmJ.rotateX");
	
	//LEFT WRIST
	orientConstraint -mo ($name + "_lWristJFK") ($name + "_lWristJIKProxy") ($name + "_lWristJG1");
	setAttr ($name + "_lWristJG1_orientConstraint1.interpType") 2;
	setAttr ($name + "_lArmSwitchC.SwitchIkFk") 0;
	setAttr ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJIKProxyW1") 0;
	setAttr ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJFKW0") 0;
	setAttr ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJIKProxyW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJFKW0");
	setDrivenKeyframe -currentDriver ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJIKProxyW1");
	setAttr ($name + "_lArmSwitchC.SwitchIkFk") 1;
	setAttr ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJFKW0") 1;
	setAttr ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJIKProxyW1") 0;
		setDrivenKeyframe -currentDriver ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJFKW0");
	setDrivenKeyframe -currentDriver ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lWristJG1_orientConstraint1." + $name + "_lWristJIKProxyW1");
	
	selectKey -k -f 0 -f 1 ($name + "_lWristJG1_orientConstraint1_" + $name + "_lWristJIKProxyW1") ;
	selectKey -add -k -f 0 -f 1 ($name + "_lWristJG1_orientConstraint1_" + $name + "_lWristJFKW0") ;
	keyTangent -itt spline -ott spline ;
	
	
	//LEFT HIP
	shadingNode -asUtility blendColors -n ($name + "_lHipJIKFK_BlndScale");
	connectAttr -f ($name + "_lHipJFK.scale") ($name + "_lHipJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_lHipJIK.scale") ($name + "_lHipJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lHipJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lHipVolume_MD");
	setAttr ($name + "_lHipVolume_MD.input1X") 1;
	setAttr ($name + "_lHipVolume_MD.operation") 2;
	connectAttr -f ($name + "_lHipJIKFK_BlndScale.outputR") ($name + "_lHipVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_lHipJIKFK_AutoBlnd");
	setAttr ($name + "_lHipJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_lHipVolume_MD.outputX") ($name + "_lHipJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_lHipJIKFK_AutoBlnd.outputR") ($name + "_lHipJ.scaleY");
	connectAttr -f ($name + "_lHipJIKFK_AutoBlnd.outputR") ($name + "_lHipJ.scaleZ");
	connectAttr -f ($name + "_lLegSwitchC.AutoVolume") ($name + "_lHipJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n  ($name + "_lHipJIKFK_BlndRotate");
	connectAttr -f ($name + "_lHipJFK.rotate") ($name + "_lHipJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lHipJIK.rotate") ($name + "_lHipJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lHipJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lHipJIKFK_BlndScale.outputR") ($name + "_lHipJ.scaleX");
	connectAttr -f ($name + "_lHipJIKFK_BlndRotate.output") ($name + "_lHipJ.rotate");
	
	//LEFT KNEE
	shadingNode -asUtility blendColors -n ($name + "_lKneeJIKFK_BlndScale");
	connectAttr -f ($name + "_lKneeJFK.scale") ($name + "_lKneeJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_lKneeJIK.scale") ($name + "_lKneeJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lKneeJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_lKneeVolume_MD");
	setAttr ($name + "_lKneeVolume_MD.input1X") 1;
	setAttr ($name + "_lKneeVolume_MD.operation") 2;
	connectAttr -f ($name + "_lKneeJIKFK_BlndScale.outputR") ($name + "_lKneeVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_lKneeJIKFK_AutoBlnd");
	setAttr ($name + "_lKneeJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_lKneeVolume_MD.outputX") ($name + "_lKneeJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_lKneeJIKFK_AutoBlnd.outputR") ($name + "_lKneeJ.scaleY");
	connectAttr -f ($name + "_lKneeJIKFK_AutoBlnd.outputR") ($name + "_lKneeJ.scaleZ");
	connectAttr -f ($name + "_lLegSwitchC.AutoVolume") ($name + "_lKneeJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n ($name + "_lKneeJIKFK_BlndRotate");
	connectAttr -f ($name + "_lKneeJFK.rotate") ($name + "_lKneeJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lKneeJIK.rotate") ($name + "_lKneeJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lKneeJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lKneeJIKFK_BlndScale.outputR") ($name + "_lKneeJ.scaleX");
	connectAttr -f ($name + "_lKneeJIKFK_BlndRotate.output") ($name + "_lKneeJ.rotate");
	
	//LEFT ANKLE
	shadingNode -asUtility blendColors -n ($name + "_lAnkleJIKFK_BlndRotate");
	connectAttr -f ($name + "_lAnkleJFK.rotate") ($name + "_lAnkleJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lAnkleJIK.rotate") ($name + "_lAnkleJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lAnkleJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lAnkleJIKFK_BlndRotate.output") ($name + "_lAnkleJ.rotate");
	
	//LEFT BALL
	shadingNode -asUtility blendColors -n ($name + "_lBallJIKFK_BlndRotate");
	connectAttr -f ($name + "_lBallJFK.rotate") ($name + "_lBallJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_lBallJIK.rotate") ($name + "_lBallJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lBallJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_lBallJIKFK_BlndRotate.output") ($name + "_lBallJ.rotate");
	
	
	///////////////////////////////////////////////////////////////////////////////////////////
	//RIGHT SHOULDER
	shadingNode -asUtility blendColors -n ($name + "_rShoulderJIKFK_BlndScale");
	connectAttr -f ($name + "_rShoulderJFK.scale") ($name + "_rShoulderJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_rShoulderJIK.scale") ($name + "_rShoulderJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rShoulderJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rShoulderVolume_MD");
	setAttr ($name + "_rShoulderVolume_MD.input1X") 1;
	setAttr ($name + "_rShoulderVolume_MD.operation") 2;
	connectAttr -f ($name + "_rShoulderJIKFK_BlndScale.outputR") ($name + "_rShoulderVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_rShoulderJIKFK_AutoBlnd");
	setAttr ($name + "_rShoulderJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_rShoulderVolume_MD.outputX") ($name + "_rShoulderJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_rShoulderJIKFK_AutoBlnd.outputR") ($name + "_rShoulderJ.scaleY");
	connectAttr -f ($name + "_rShoulderJIKFK_AutoBlnd.outputR") ($name + "_rShoulderJ.scaleZ");
	connectAttr -f ($name + "_rArmSwitchC.AutoVolume") ($name + "_rShoulderJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n  ($name + "_rShoulderJIKFK_BlndRotate");
	connectAttr -f ($name + "_rShoulderJFK.rotate") ($name + "_rShoulderJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rShoulderJIK.rotate") ($name + "_rShoulderJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rShoulderJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rShoulderJIKFK_BlndScale.outputR") ($name + "_rShoulderJ.scaleX");
	connectAttr -f ($name + "_rShoulderJIKFK_BlndRotate.output") ($name + "_rShoulderJ.rotate");
	
	//RIGHT ELBOW
	shadingNode -asUtility blendColors -n ($name + "_rElbowJIKFK_BlndScale");
	connectAttr -f ($name + "_rElbowJFK.scale") ($name + "_rElbowJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_rElbowJIK.scale") ($name + "_rElbowJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rElbowJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rElbowVolume_MD");
	setAttr ($name + "_rElbowVolume_MD.input1X") 1;
	setAttr ($name + "_rElbowVolume_MD.operation") 2;
	connectAttr -f ($name + "_rElbowJIKFK_BlndScale.outputR") ($name + "_rElbowVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_rElbowJIKFK_AutoBlnd");
	setAttr ($name + "_rElbowJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_rElbowVolume_MD.outputX") ($name + "_rElbowJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_rElbowJIKFK_AutoBlnd.outputR") ($name + "_rElbowJ.scaleY");
	connectAttr -f ($name + "_rElbowJIKFK_AutoBlnd.outputR") ($name + "_rElbowJ.scaleZ");
	connectAttr -f ($name + "_rArmSwitchC.AutoVolume") ($name + "_rElbowJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n ($name + "_rElbowJIKFK_BlndRotate");
	connectAttr -f ($name + "_rElbowJFK.rotate") ($name + "_rElbowJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rElbowJIK.rotate") ($name + "_rElbowJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rElbowJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rElbowJIKFK_BlndScale.outputR") ($name + "_rElbowJ.scaleX");
	connectAttr -f ($name + "_rElbowJIKFK_BlndRotate.output") ($name + "_rElbowJ.rotate");
	
	
	//RIGHT FOREARM
	connectAttr -f ($name + "_rElbowJIKFK_BlndScale.outputR") ($name + "_rForearmJ.scaleX");
	connectAttr -f ($name + "_rElbowVolume_MD.outputX") ($name + "_rForearmJ.scaleY");
	connectAttr -f ($name + "_rElbowVolume_MD.outputX") ($name + "_rForearmJ.scaleZ");
	connectAttr -f ($name + "_rWristJG1.rotateX") ($name + "_rForearmJ.rotateX");
	
	//RIGHT WRIST
	orientConstraint -mo ($name + "_rWristJFK") ($name + "_rWristJIKProxy") ($name + "_rWristJG1");
	setAttr ($name + "_rWristJG1_orientConstraint1.interpType") 0;
	setAttr ($name + "_rArmSwitchC.SwitchIkFk") 0;
	setAttr ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJIKProxyW1") 0;
	setAttr ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJFKW0") 0;
	setAttr ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJIKProxyW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJFKW0");
	setDrivenKeyframe -currentDriver ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJIKProxyW1");
	setAttr ($name + "_rArmSwitchC.SwitchIkFk") 1;
	setAttr ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJFKW0") 1;
	setAttr ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJIKProxyW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJFKW0");
	setDrivenKeyframe -currentDriver ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rWristJG1_orientConstraint1." + $name + "_rWristJIKProxyW1");
	
	selectKey -k -f 0 -f 1 ($name + "_rWristJG1_orientConstraint1_" + $name + "_rWristJIKProxyW1") ;
	selectKey -add -k -f 0 -f 1 ($name + "_rWristJG1_orientConstraint1_" + $name + "_rWristJFKW0") ;
	keyTangent -itt spline -ott spline ;
	
	//RIGHT HIP
	shadingNode -asUtility blendColors -n ($name + "_rHipJIKFK_BlndScale");
	connectAttr -f ($name + "_rHipJFK.scale") ($name + "_rHipJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_rHipJIK.scale") ($name + "_rHipJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rHipJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rHipVolume_MD");
	setAttr ($name + "_rHipVolume_MD.input1X") 1;
	setAttr ($name + "_rHipVolume_MD.operation") 2;
	connectAttr -f ($name + "_rHipJIKFK_BlndScale.outputR") ($name + "_rHipVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_rHipJIKFK_AutoBlnd");
	setAttr ($name + "_rHipJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_rHipVolume_MD.outputX") ($name + "_rHipJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_rHipJIKFK_AutoBlnd.outputR") ($name + "_rHipJ.scaleY");
	connectAttr -f ($name + "_rHipJIKFK_AutoBlnd.outputR") ($name + "_rHipJ.scaleZ");
	connectAttr -f ($name + "_rLegSwitchC.AutoVolume") ($name + "_rHipJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n  ($name + "_rHipJIKFK_BlndRotate");
	connectAttr -f ($name + "_rHipJFK.rotate") ($name + "_rHipJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rHipJIK.rotate") ($name + "_rHipJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rHipJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rHipJIKFK_BlndScale.outputR") ($name + "_rHipJ.scaleX");
	connectAttr -f ($name + "_rHipJIKFK_BlndRotate.output") ($name + "_rHipJ.rotate");
	
	//RIGHT KNEE
	shadingNode -asUtility blendColors -n ($name + "_rKneeJIKFK_BlndScale");
	connectAttr -f ($name + "_rKneeJFK.scale") ($name + "_rKneeJIKFK_BlndScale.color1");
	connectAttr -f ($name + "_rKneeJIK.scale") ($name + "_rKneeJIKFK_BlndScale.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rKneeJIKFK_BlndScale.blender");
	
	shadingNode -asUtility multiplyDivide -n ($name + "_rKneeVolume_MD");
	setAttr ($name + "_rKneeVolume_MD.input1X") 1;
	setAttr ($name + "_rKneeVolume_MD.operation") 2;
	connectAttr -f ($name + "_rKneeJIKFK_BlndScale.outputR") ($name + "_rKneeVolume_MD.input2X");
	
	shadingNode -asUtility blendColors -n ($name + "_rKneeJIKFK_AutoBlnd");
	setAttr ($name + "_rKneeJIKFK_AutoBlnd.color2") -type double3 1 1 1 ;
	connectAttr -f ($name + "_rKneeVolume_MD.outputX") ($name + "_rKneeJIKFK_AutoBlnd.color1R");
	connectAttr -f ($name + "_rKneeJIKFK_AutoBlnd.outputR") ($name + "_rKneeJ.scaleY");
	connectAttr -f ($name + "_rKneeJIKFK_AutoBlnd.outputR") ($name + "_rKneeJ.scaleZ");
	connectAttr -f ($name + "_rLegSwitchC.AutoVolume") ($name + "_rKneeJIKFK_AutoBlnd.blender");
	
	shadingNode -asUtility blendColors -n ($name + "_rKneeJIKFK_BlndRotate");
	connectAttr -f ($name + "_rKneeJFK.rotate") ($name + "_rKneeJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rKneeJIK.rotate") ($name + "_rKneeJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rKneeJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rKneeJIKFK_BlndScale.outputR") ($name + "_rKneeJ.scaleX");
	connectAttr -f ($name + "_rKneeJIKFK_BlndRotate.output") ($name + "_rKneeJ.rotate");
	
	//RIGHT ANKLE
	shadingNode -asUtility blendColors -n ($name + "_rAnkleJIKFK_BlndRotate");
	connectAttr -f ($name + "_rAnkleJFK.rotate") ($name + "_rAnkleJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rAnkleJIK.rotate") ($name + "_rAnkleJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rAnkleJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rAnkleJIKFK_BlndRotate.output") ($name + "_rAnkleJ.rotate");
	
	//RIGHT BALL
	shadingNode -asUtility blendColors -n ($name + "_rBallJIKFK_BlndRotate");
	connectAttr -f ($name + "_rBallJFK.rotate") ($name + "_rBallJIKFK_BlndRotate.color1");
	connectAttr -f ($name + "_rBallJIK.rotate") ($name + "_rBallJIKFK_BlndRotate.color2");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rBallJIKFK_BlndRotate.blender");
	
	connectAttr -f ($name + "_rBallJIKFK_BlndRotate.output") ($name + "_rBallJ.rotate");
	
	
	//LFOOTC ATTRIBUTES
	addAttr -ln "footTilt"  -at double  -min -10 -max 10 -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.footTilt");
	addAttr -ln "heelBall"  -at double  -min -10 -max 10 -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.heelBall");
	addAttr -ln "toeUpDn"  -at double  -min -10 -max 10 -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.toeUpDn");
	addAttr -ln "ballSwivel"  -at double -dv 0 ($name + "_lFootIKC");
	setAttr -e-k true ($name + "_lFootIKC.ballSwivel");
	
	//UNLOCK LOCATORS
	setAttr -l false -k true ($name + "_lFootHeelPivot.rx");
	setAttr -l false -k true ($name + "_lFootInTilt.rz");
	setAttr -l false -k true ($name + "_lFootOutTilt.rz");
	setAttr -l false -k true ($name + "_rFootHeelPivot.rx");
	setAttr -l false -k true ($name + "_rFootInTilt.rz");
	setAttr -l false -k true ($name + "_rFootOutTilt.rz");
	
	//SDK TILT
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.footTilt") ($name + "_lFootInTilt.rotateZ");
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.footTilt") ($name + "_lFootOutTilt.rotateZ");
	setAttr ($name + "_lFootIKC.footTilt") -10;
	setAttr ($name + "_lFootInTilt.rotateZ") 90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.footTilt") ($name + "_lFootInTilt.rotateZ");
	setAttr ($name + "_lFootIKC.footTilt") 10;
	setAttr ($name + "_lFootOutTilt.rotateZ") -90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.footTilt") ($name + "_lFootOutTilt.rotateZ");
	setAttr ($name + "_lFootIKC.footTilt") 0;
	//SDK HEEL BALL
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.heelBall") ($name + "_lFootHeelPivot.rotateX");
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.heelBall") ($name + "_lFootBallPivot.rotateX");
	setAttr ($name + "_lFootIKC.heelBall") -10;
	setAttr ($name + "_lFootHeelPivot.rotateX") -90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.heelBall") ($name + "_lFootHeelPivot.rotateX");
	setAttr ($name + "_lFootIKC.heelBall") 10;
	setAttr ($name + "_lFootBallPivot.rotateX") 90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.heelBall") ($name + "_lFootBallPivot.rotateX");
	setAttr ($name + "_lFootIKC.heelBall") 0;
	//SDK TOE UP DN
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.toeUpDn") ($name + "_lFootToePivot.rotateX");
	setAttr ($name + "_lFootIKC.toeUpDn") -10;
	setAttr ($name + "_lFootToePivot.rotateX") 90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.toeUpDn") ($name + "_lFootToePivot.rotateX");
	setAttr ($name + "_lFootIKC.toeUpDn") 10;
	setAttr ($name + "_lFootToePivot.rotateX") -90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.toeUpDn") ($name + "_lFootToePivot.rotateX");
	setAttr ($name + "_lFootIKC.toeUpDn") 0;
	//SDK BALL SWIVEL		
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.ballSwivel") ($name + "_lBallSwivel.rotateY");
	setAttr ($name + "_lFootIKC.ballSwivel") -10;
	setAttr ($name + "_lBallSwivel.rotateY") 90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.ballSwivel") ($name + "_lBallSwivel.rotateY");
	setAttr ($name + "_lFootIKC.ballSwivel") 10;
	setAttr ($name + "_lBallSwivel.rotateY") -90;
	setDrivenKeyframe -currentDriver ($name + "_lFootIKC.ballSwivel") ($name + "_lBallSwivel.rotateY");
	setAttr ($name + "_lFootIKC.ballSwivel") 0;

	selectKey -add -k ($name + "_lFootInTilt_rotateZ") ;
	selectKey -add -k ($name + "_lFootOutTilt_rotateZ") ;
	selectKey -add -k ($name + "_lFootHeelPivot_rotateX") ;
	selectKey -add -k ($name + "_lFootToePivot_rotateX") ;
	selectKey -add -k ($name + "_lFootBallPivot_rotateX") ;
	selectKey -add -k ($name + "_lBallSwivel.rotateY");
	keyTangent -itt spline -ott spline ;

	setInfinity -pri linear graphEditor1FromOutliner ($name + "_lBallSwivel.ry");
	setInfinity -poi linear graphEditor1FromOutliner ($name + "_lBallSwivel.ry");

	//RFOOTC ATTRIBUTES
	addAttr -ln "footTilt"  -at double  -min -10 -max 10 -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.footTilt");
	addAttr -ln "heelBall"  -at double  -min -10 -max 10 -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.heelBall");
	addAttr -ln "toeUpDn"  -at double  -min -10 -max 10 -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.toeUpDn");
	addAttr -ln "ballSwivel"  -at double -dv 0 ($name + "_rFootIKC");
	setAttr -e-k true ($name + "_rFootIKC.ballSwivel");

	//SDK TILT
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.footTilt") ($name + "_rFootInTilt.rotateZ");
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.footTilt") ($name + "_rFootOutTilt.rotateZ");
	setAttr ($name + "_rFootIKC.footTilt") -10;
	setAttr ($name + "_rFootOutTilt.rotateZ") 90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.footTilt") ($name + "_rFootOutTilt.rotateZ");
	setAttr ($name + "_rFootIKC.footTilt") 10;
	setAttr ($name + "_rFootInTilt.rotateZ") -90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.footTilt") ($name + "_rFootInTilt.rotateZ");
	setAttr ($name + "_rFootIKC.footTilt") 0;
	setAttr ($name + "_rBallSwivel.v") 0;
	//SDK HEEL BALL
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.heelBall") ($name + "_rFootHeelPivot.rotateX");
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.heelBall") ($name + "_rFootBallPivot.rotateX");
	setAttr ($name + "_rFootIKC.heelBall") -10;
	setAttr ($name + "_rFootHeelPivot.rotateX") -90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.heelBall") ($name + "_rFootHeelPivot.rotateX");
	setAttr ($name + "_rFootIKC.heelBall") 10;
	setAttr ($name + "_rFootBallPivot.rotateX") 90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.heelBall") ($name + "_rFootBallPivot.rotateX");
	setAttr ($name + "_rFootIKC.heelBall") 0;
	setAttr ($name + "_rFootBallPivot.v") 0;	
	//SDK TOE UP DN
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.toeUpDn") ($name + "_rFootToePivot.rotateX");
	setAttr ($name + "_rFootIKC.toeUpDn") -10;
	setAttr ($name + "_rFootToePivot.rotateX") 90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.toeUpDn") ($name + "_rFootToePivot.rotateX");
	setAttr ($name + "_rFootIKC.toeUpDn") 10;
	setAttr ($name + "_rFootToePivot.rotateX") -90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.toeUpDn") ($name + "_rFootToePivot.rotateX");
	setAttr ($name + "_rFootIKC.toeUpDn") 0;
	//SDK BALL SWIVEL		
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.ballSwivel") ($name + "_rBallSwivel.rotateY");
	setAttr ($name + "_rFootIKC.ballSwivel") -10;
	setAttr ($name + "_rBallSwivel.rotateY") 90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.ballSwivel") ($name + "_rBallSwivel.rotateY");
	setAttr ($name + "_rFootIKC.ballSwivel") 10;
	setAttr ($name + "_rBallSwivel.rotateY") -90;
	setDrivenKeyframe -currentDriver ($name + "_rFootIKC.ballSwivel") ($name + "_rBallSwivel.rotateY");
	setAttr ($name + "_rFootIKC.ballSwivel") 0;
	
	selectKey -add -k ($name + "_rFootInTilt_rotateZ") ;
	selectKey -add -k ($name + "_rFootOutTilt_rotateZ") ;
	selectKey -add -k ($name + "_rFootHeelPivot_rotateX") ;
	selectKey -add -k ($name + "_rFootToePivot_rotateX") ;
	selectKey -add -k ($name + "_rFootBallPivot_rotateX") ;
	selectKey -add -k ($name + "_rBallSwivel_rotateY") ;
	keyTangent -itt spline -ott spline ;

	setInfinity -pri linear graphEditor1FromOutliner ($name + "_rBallSwivel.ry");
	setInfinity -poi linear graphEditor1FromOutliner ($name + "_rBallSwivel.ry");
	
	//LEFT ELBOWIKC FOLLOW
	addAttr -ln "Follow"  -at "enum" -en "Main:Wrist:Shoulder:Wrist and Shoulder:" ($name + "_lElbowIKC");
	setAttr -e-keyable true ($name + "_lElbowIKC.Follow");
	setAttr ($name + "_lElbowIKC.Follow") 0;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2") 0;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2");
	
	setAttr ($name + "_lElbowIKC.Follow") 1;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_MainCW0") 0;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2");
	
	setAttr ($name + "_lElbowIKC.Follow") 2;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2") 1;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2");
	
	setAttr ($name + "_lElbowIKC.Follow") 3;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1") 1;
	setAttr ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_lElbowIKC.Follow") ($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2");
	
	setAttr ($name + "_lElbowIKC.Follow") 0;
	
	//SET SDK'S TO LINEAR
	selectKey  -k ($name + "_lElbowIKCG_parentConstraint1." + $name + "_MainCW0")
	($name + "_lElbowIKCG_parentConstraint1." + $name + "_lWristIKCW1")
	($name + "_lElbowIKCG_parentConstraint1." + $name + "_lClavicleCW2") ;
	keyTangent -itt linear -ott linear;
	select -cl;

	
	//RIGHT ELBOWIKC FOLLOW
	addAttr -ln "Follow"  -at "enum" -en "Main:Wrist:Shoulder:Wrist and Shoulder:" ($name + "_rElbowIKC");
	setAttr -e-keyable true ($name + "_rElbowIKC.Follow");
	setAttr ($name + "_rElbowIKC.Follow") 0;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2") 0;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2");
	
	setAttr ($name + "_rElbowIKC.Follow") 1;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0") 0;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2");
	
	setAttr ($name + "_rElbowIKC.Follow") 2;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1") 0;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2");
	
	setAttr ($name + "_rElbowIKC.Follow") 3;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1") 1;
	setAttr ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1");
	setDrivenKeyframe -currentDriver ($name + "_rElbowIKC.Follow") ($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2");
	
	setAttr ($name + "_rElbowIKC.Follow") 0;
	
	//SET SDK'S TO LINEAR
	selectKey  -k ($name + "_rElbowIKCG_parentConstraint1." + $name + "_MainCW0")
	($name + "_rElbowIKCG_parentConstraint1." + $name + "_rWristIKCW1")
	($name + "_rElbowIKCG_parentConstraint1." + $name + "_rClavicleCW2") ;
	keyTangent -itt linear -ott linear;
	select -cl;

	//LEFT KNEEIKC FOLLOW
	parentConstraint -mo ($name + "_lBallSwivel") ($name + "_lKneeIKCG");
	
	addAttr -ln "Follow"  -at "enum" -en "Main:Foot:Hips:Foot and Hips:" ($name + "_lKneeIKC");
	setAttr -e-keyable true ($name + "_lKneeIKC.Follow");
	setAttr ($name + "_lKneeIKC.Follow") 0;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2") 0;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2");
	
	setAttr ($name + "_lKneeIKC.Follow") 1;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0") 0;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2");
	
	setAttr ($name + "_lKneeIKC.Follow") 2;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2") 0;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2");
	
	setAttr ($name + "_lKneeIKC.Follow") 3;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2") 1;
	setAttr ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_lKneeIKC.Follow") ($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2");
	
	setAttr ($name + "_lKneeIKC.Follow") 0;
	
	//SET SDK'S TO LINEAR
	selectKey  -k ($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainCW0")
	($name + "_lKneeIKCG_parentConstraint1." + $name + "_MainHipCW1")
	($name + "_lKneeIKCG_parentConstraint1." + $name + "_lBallSwivelW2") ;
	keyTangent -itt linear -ott linear;
	select -cl;

	//RIGHT KNEEIKC FOLLOW
	parentConstraint -mo ($name + "_rBallSwivel") ($name + "_rKneeIKCG");
	
	addAttr -ln "Follow"  -at "enum" -en "Main:Foot:Hips:Foot and Hips:" ($name + "_rKneeIKC");
	setAttr -e-keyable true ($name + "_rKneeIKC.Follow");
	setAttr ($name + "_rKneeIKC.Follow") 0;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2") 0;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2");
	
	setAttr ($name + "_rKneeIKC.Follow") 1;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0") 0;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2") 1;
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2");
	
	setAttr ($name + "_rKneeIKC.Follow") 2;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2") 0;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2");
	
	setAttr ($name + "_rKneeIKC.Follow") 3;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2") 1;
	setAttr ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1");
	setDrivenKeyframe -currentDriver ($name + "_rKneeIKC.Follow") ($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2");
	
	setAttr ($name + "_rKneeIKC.Follow") 0;
	
	//SET SDK'S TO LINEAR
	selectKey  -k ($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainCW0")
	($name + "_rKneeIKCG_parentConstraint1." + $name + "_MainHipCW1")
	($name + "_rKneeIKCG_parentConstraint1." + $name + "_rBallSwivelW2") ;
	keyTangent -itt linear -ott linear;
	select -cl;

	//LEFT HAND SCALE
	connectAttr -f ($name + "_lWristFKC.sx") ($name + "_lWristFKC.sy");
	connectAttr -f ($name + "_lWristFKC.sx") ($name + "_lWristFKC.sz");
	connectAttr -f ($name + "_lWristIKC.sx") ($name + "_lWristIKC.sy");
	connectAttr -f ($name + "_lWristIKC.sx") ($name + "_lWristIKC.sz");
	shadingNode -asUtility blendColors -n ($name + "_lHandIKFK_BlndScale");
	connectAttr -f ($name + "_lWristFKC.sx") ($name + "_lHandIKFK_BlndScale.color1R");
	connectAttr -f ($name + "_lWristIKC.sx") ($name + "_lHandIKFK_BlndScale.color2R");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lHandIKFK_BlndScale.blender");
	connectAttr -force ($name + "_lHandIKFK_BlndScale.outputR") ($name + "_lWristJG1.sx");
	connectAttr -force ($name + "_lHandIKFK_BlndScale.outputR") ($name + "_lWristJG1.sy");
	connectAttr -force ($name + "_lHandIKFK_BlndScale.outputR") ($name + "_lWristJG1.sz");
	
	//RIGHT HAND SCALE
	connectAttr -f ($name + "_rWristFKC.sx") ($name + "_rWristFKC.sy");
	connectAttr -f ($name + "_rWristFKC.sx") ($name + "_rWristFKC.sz");
	connectAttr -f ($name + "_rWristIKC.sx") ($name + "_rWristIKC.sy");
	connectAttr -f ($name + "_rWristIKC.sx") ($name + "_rWristIKC.sz");
	shadingNode -asUtility blendColors -n ($name + "_rHandIKFK_BlndScale");
	connectAttr -f ($name + "_rWristFKC.sx") ($name + "_rHandIKFK_BlndScale.color1R");
	connectAttr -f ($name + "_rWristIKC.sx") ($name + "_rHandIKFK_BlndScale.color2R");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rHandIKFK_BlndScale.blender");
	connectAttr -force ($name + "_rHandIKFK_BlndScale.outputR") ($name + "_rWristJG1.sx");
	connectAttr -force ($name + "_rHandIKFK_BlndScale.outputR") ($name + "_rWristJG1.sy");
	connectAttr -force ($name + "_rHandIKFK_BlndScale.outputR") ($name + "_rWristJG1.sz");
	
	//EYES
	addAttr -ln "LocalGlobal"  -at double  -min 0 -max 1 -dv 0($name + "_EyeAimC");
	setAttr -e -k true ($name + "_EyeAimC.LocalGlobal");
	connectAttr -f ($name + "_EyeAimC.LocalGlobal") ($name + "_EyeAimCG_parentConstraint1." + $name + "_MainCW0");
	setDrivenKeyframe -currentDriver ($name + "_EyeAimC.LocalGlobal") ($name + "_EyeAimCG_parentConstraint1." + $name + "_HeadCW1");
	setAttr ($name + "_EyeAimC.LocalGlobal") 1;
	setAttr ($name + "_EyeAimCG_parentConstraint1." + $name + "_HeadCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_EyeAimC.LocalGlobal") ($name + "_EyeAimCG_parentConstraint1." + $name + "_HeadCW1");
	selectKey -k ($name + "_EyeAimCG_parentConstraint1_" + $name + "_HeadCW1") ;
	keyTangent -itt spline -ott spline ;

	
	//VISIBILITY TOGGLES////////////////////////////////////////////////////////////////////
	
	
	//SPINE TOP ORIENT
	addAttr -ln "SpineTopOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_SpineTopIKC");
	setAttr -e-k true ($name + "_SpineTopIKC.SpineTopOrient");
	setAttr ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopIKC_OrientLctrW0") 0;
	setAttr ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopFKCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_SpineTopIKC.SpineTopOrient") ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopIKC_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_SpineTopIKC.SpineTopOrient") ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopFKCW1");
	setAttr ($name + "_SpineTopIKC.SpineTopOrient") 0;
	setAttr ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopIKC_OrientLctrW0") 1;
	setAttr ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopFKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_SpineTopIKC.SpineTopOrient") ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopIKC_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_SpineTopIKC.SpineTopOrient") ($name + "_SpineTopIKCG_orientConstraint1." + $name + "_SpineTopFKCW1");
	setAttr ($name + "_SpineTopIKC.SpineTopOrient") 1;
	
	selectKey -k -f 0 -f 1 ($name + "_SpineTopIKCG_orientConstraint1_" + $name + "_SpineTopIKC_OrientLctrW0") ;
	selectKey -add -k -f 0 -f 1 ($name + "_SpineTopIKCG_orientConstraint1_" + $name + "_SpineTopFKCW1") ;
	keyTangent -itt spline -ott spline ;
	
	//NECK ORIENT
	addAttr -ln "NeckOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_Neck01FKC");
	setAttr -e-k true ($name + "_Neck01FKC.NeckOrient");
	setAttr ($name + "_Neck01FKCG_orientConstraint1." + $name + "_Neck01FKCG_OrientLctrW0") 0;
	setAttr ($name + "_Neck01FKCG_orientConstraint1." + $name + "_SpineTopIKCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_Neck01FKC.NeckOrient") ($name + "_Neck01FKCG_orientConstraint1." + $name + "_Neck01FKCG_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_Neck01FKC.NeckOrient") ($name + "_Neck01FKCG_orientConstraint1." + $name + "_SpineTopIKCW1");
	setAttr ($name + "_Neck01FKC.NeckOrient") 0;
	setAttr ($name + "_Neck01FKCG_orientConstraint1." + $name + "_Neck01FKCG_OrientLctrW0") 1;
	setAttr ($name + "_Neck01FKCG_orientConstraint1." + $name + "_SpineTopIKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_Neck01FKC.NeckOrient") ($name + "_Neck01FKCG_orientConstraint1." + $name + "_Neck01FKCG_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_Neck01FKC.NeckOrient") ($name + "_Neck01FKCG_orientConstraint1." + $name + "_SpineTopIKCW1");
	setAttr ($name + "_Neck01FKC.NeckOrient") 1;
	
	selectKey -k -f 0 -f 1 ($name + "_Neck01FKCG_orientConstraint1_" + $name + "_Neck01FKCG_OrientLctrW0") ;
	selectKey -add -k -f 0 -f 1 ($name + "_Neck01FKCG_orientConstraint1_" + $name + "_SpineTopIKCW1") ;
	keyTangent -itt spline -ott spline ;

	//HEAD ORIENT
	addAttr -ln "HeadOrient"  -at double  -min 0 -max 1 -dv 1 ($name + "_HeadC");
	setAttr -e-k true ($name + "_HeadC.HeadOrient");
	setAttr ($name + "_HeadCG_orientConstraint1." + $name + "_HeadC_OrientLctrW0") 0;
	setAttr ($name + "_HeadCG_orientConstraint1." + $name + "_HeadFKCW1") 1;
	setDrivenKeyframe -currentDriver ($name + "_HeadC.HeadOrient") ($name + "_HeadCG_orientConstraint1." + $name + "_HeadC_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_HeadC.HeadOrient") ($name + "_HeadCG_orientConstraint1." + $name + "_HeadFKCW1");
	setAttr ($name + "_HeadC.HeadOrient") 0;
	setAttr ($name + "_HeadCG_orientConstraint1." + $name + "_HeadC_OrientLctrW0") 1;
	setAttr ($name + "_HeadCG_orientConstraint1." + $name + "_HeadFKCW1") 0;
	setDrivenKeyframe -currentDriver ($name + "_HeadC.HeadOrient") ($name + "_HeadCG_orientConstraint1." + $name + "_HeadC_OrientLctrW0");
	setDrivenKeyframe -currentDriver ($name + "_HeadC.HeadOrient") ($name + "_HeadCG_orientConstraint1." + $name + "_HeadFKCW1");
	setAttr ($name + "_HeadC.HeadOrient") 1;
	
	selectKey -k -f 0 -f 1 ($name + "_HeadCG_orientConstraint1_" + $name + "_HeadC_OrientLctrW0") ;
	selectKey -add -k -f 0 -f 1 ($name + "_HeadCG_orientConstraint1_" + $name + "_HeadFKCW1") ;
	keyTangent -itt spline -ott spline ;
	
	//LEFT ARM
	shadingNode -asUtility condition -n ($name + "_lArmIKViz");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lArmIKViz.firstTerm");
	setAttr ($name + "_lArmIKViz.secondTerm") 0.7;
	setAttr ($name + "_lArmIKViz.operation") 3;
	connectAttr -f ($name + "_lArmIKViz.outColorR") ($name + "_lElbowIKC.v");
	connectAttr -f ($name + "_lArmIKViz.outColorR") ($name + "_lWristIKC.v");
	
	shadingNode -asUtility condition -n ($name + "_lArmFKViz");
	connectAttr -f ($name + "_lArmSwitchC.SwitchIkFk") ($name + "_lArmFKViz.firstTerm");
	setAttr ($name + "_lArmFKViz.secondTerm") 0.3;
	setAttr ($name + "_lArmFKViz.operation") 5;
	//connectAttr -f ($name + "_lArmFKViz.outColorR") ($name + "_lShoulderFKC.v");
	connectAttr -f ($name + "_lArmFKViz.outColorR") ($name + "_lElbowFKC.v");
	connectAttr -f ($name + "_lArmFKViz.outColorR") ($name + "_lWristFKC.v");
	
	//LEFT LEG
	shadingNode -asUtility condition -n ($name + "_lLegIKViz");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lLegIKViz.firstTerm");
	setAttr ($name + "_lLegIKViz.secondTerm") 0.7;
	setAttr ($name + "_lLegIKViz.operation") 3;
	connectAttr -f ($name + "_lLegIKViz.outColorR") ($name + "_lKneeIKC.v");
	connectAttr -f ($name + "_lLegIKViz.outColorR") ($name + "_lFootIKC.v");
	connectAttr -f ($name + "_lLegIKViz.outColorR") ($name + "_lToeIKC.v");
	
	shadingNode -asUtility condition -n ($name + "_lLegFKViz");
	connectAttr -f ($name + "_lLegSwitchC.SwitchIkFk") ($name + "_lLegFKViz.firstTerm");
	setAttr ($name + "_lLegFKViz.secondTerm") 0.3;
	setAttr ($name + "_lLegFKViz.operation") 5;
	//connectAttr -f ($name + "_lLegFKViz.outColorR") ($name + "_lHipFKC.v");
	connectAttr -f ($name + "_lLegFKViz.outColorR") ($name + "_lKneeFKC.v");
	connectAttr -f ($name + "_lLegFKViz.outColorR") ($name + "_lAnkleFKC.v");
	connectAttr -f ($name + "_lLegFKViz.outColorR") ($name + "_lBallFKC.v");
	
	//RIGHT ARM
	shadingNode -asUtility condition -n ($name + "_rArmIKViz");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rArmIKViz.firstTerm");
	setAttr ($name + "_rArmIKViz.secondTerm") 0.7;
	setAttr ($name + "_rArmIKViz.operation") 3;
	connectAttr -f ($name + "_rArmIKViz.outColorR") ($name + "_rElbowIKC.v");
	connectAttr -f ($name + "_rArmIKViz.outColorR") ($name + "_rWristIKC.v");
	
	shadingNode -asUtility condition -n ($name + "_rArmFKViz");
	connectAttr -f ($name + "_rArmSwitchC.SwitchIkFk") ($name + "_rArmFKViz.firstTerm");
	setAttr ($name + "_rArmFKViz.secondTerm") 0.3;
	setAttr ($name + "_rArmFKViz.operation") 5;
	//connectAttr -f ($name + "_rArmFKViz.outColorR") ($name + "_rShoulderFKC.v");
	connectAttr -f ($name + "_rArmFKViz.outColorR") ($name + "_rElbowFKC.v");
	connectAttr -f ($name + "_rArmFKViz.outColorR") ($name + "_rWristFKC.v");
	
	//RIGHT LEG
	shadingNode -asUtility condition -n ($name + "_rLegIKViz");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rLegIKViz.firstTerm");
	setAttr ($name + "_rLegIKViz.secondTerm") 0.7;
	setAttr ($name + "_rLegIKViz.operation") 3;
	connectAttr -f ($name + "_rLegIKViz.outColorR") ($name + "_rKneeIKC.v");
	connectAttr -f ($name + "_rLegIKViz.outColorR") ($name + "_rFootIKC.v");
	connectAttr -f ($name + "_rLegIKViz.outColorR") ($name + "_rToeIKC.v");
	
	shadingNode -asUtility condition -n ($name + "_rLegFKViz");
	connectAttr -f ($name + "_rLegSwitchC.SwitchIkFk") ($name + "_rLegFKViz.firstTerm");
	setAttr ($name + "_rLegFKViz.secondTerm") 0.3;
	setAttr ($name + "_rLegFKViz.operation") 5;
	//connectAttr -f ($name + "_rLegFKViz.outColorR") ($name + "_rHipFKC.v");
	connectAttr -f ($name + "_rLegFKViz.outColorR") ($name + "_rKneeFKC.v");
	connectAttr -f ($name + "_rLegFKViz.outColorR") ($name + "_rAnkleFKC.v");
	connectAttr -f ($name + "_rLegFKViz.outColorR") ($name + "_rBallFKC.v");
	
	setAttr ($name + "_lBallSwivel.v") 0;
	
	//////////////////////////////////LOCK & HIDE//////////////////////////////////
	connectAttr -f ($name + "_MainC.scaleY") ($name + "_MainC.sx");
	connectAttr -f ($name + "_MainC.scaleY") ($name + "_MainC.sz");
	setAttr -l 1 -k 0 ($name + "_MainC.sx");
	setAttr -l 1 -k 0 ($name + "_MainC.sz");
	setAttr -l 1 -k 0 ($name + "_MainC.v");
	
	setAttr ($name + "_SpineTopFKC.v") 0;
	setAttr ($name + "_HeadFKC.v") 0;
	

	//setAttr ($name + "_SpineBtmTX_Lctr.v") 0;
	//setAttr ($name + "_SpineTopTX_Lctr.v") 0;
	//setAttr ($name + "_SpineBtm01JIK.v") 0;
	//setAttr ($name + "_SpineMidJIK.v") 0;
	//setAttr ($name + "_SpineTopJIK.v") 0;
	//setAttr ($name + "_SpineLengthCX.template") 1;
	//setAttr ($name + "_SpineSplineTop.v") 0;
	//setAttr ($name + "_SpineSplineBtm.v") 0;
	
	//setAttr ($name + "_NeckCurve.template") 1;
	//setAttr ($name + "_NeckUpLctr.v") 0;
	//setAttr ($name + "_NeckLengthAimLctr.v") 0;
	//setAttr ($name + "_NeckBtmClstr.v") 0;
	//setAttr ($name + "_HeadClstr.v") 0;
	
	//select ($name + "_Spine??F");
	//$spineF = `ls -sl`;
	//string $currentF;
	//for ($currentF in $spineF)
	//{setAttr ($currentF + ".v") 0;}
	
	setAttr ($name + "_rLegLengthOriginLctr.v") 0;
	setAttr ($name + "_lAnkleJFKG2.v") 0;
	setAttr ($name + "_lKneeJFKG2.v") 0;
	setAttr ($name + "_rWristJFKG2.v") 0;
	setAttr ($name + "_rElbowJFKG2.v") 0;
	setAttr ($name + "_rWristJIKProxyG2.v") 0;
	setAttr ($name + "_rArmLengthOriginLctr.v") 0;
	setAttr ($name + "_lArmLengthOriginLctr.v") 0;
	setAttr ($name + "_rAnkleJFKG2.v") 0;
	setAttr ($name + "_rKneeJFKG2.v") 0;
	setAttr ($name + "_lLegLengthOriginLctr.v") 0;
	setAttr ($name + "_lWristJIKProxyG2.v") 0;
	setAttr ($name + "_lWristJFKG2.v") 0;
	setAttr ($name + "_lElbowJFKG2.v") 0;
	
	setAttr ($name + "_rElbowIKC_TargetLctr.v") 0;
	setAttr ($name + "_lKneeIKC_TargetLctr.v") 0;
	setAttr ($name + "_rKneeIKC_TargetLctr.v") 0;
	setAttr ($name + "_lElbowIKC_TargetLctr.v") 0;
	
	setAttr -l 1 -k 0 ($name + "_SpineTopIKC.sx");
	setAttr -l 1 -k 0 ($name + "_SpineMidIKC.sx");
	setAttr -l 1 -k 0 ($name + "_SpineTopIKC.sy");
	setAttr -l 1 -k 0 ($name + "_SpineMidIKC.sy");
	setAttr -l 1 -k 0 ($name + "_SpineTopIKC.sz");
	setAttr -l 1 -k 0 ($name + "_SpineMidIKC.sz");
	setAttr -l 1 -k 0 ($name + "_SpineTopIKC.v");
	setAttr -l 1 -k 0 ($name + "_SpineMidIKC.v");
	
	select ($name + "_Spine??CurveC")  ($name + "_Neck??CurveC");
	$splineCurveC = `ls -sl`;
	for ($currentC in $splineCurveC)
	{
		setAttr -l 1 -k 0 ($currentC + ".sx");
		setAttr -l 1 -k 0 ($currentC + ".sy");
		setAttr -l 1 -k 0 ($currentC + ".sz");
		setAttr -l 1 -k 0 ($currentC + ".v");
	}
	

	for ($currentCG in $spineCurveCG)
	{
		setAttr -l 1 -k 0 ($currentCG + ".tx");
		setAttr -l 1 -k 0 ($currentCG + ".ty");
		setAttr -l 1 -k 0 ($currentCG + ".tz");
		setAttr -l 1 -k 0 ($currentCG + ".rx");
		setAttr -l 1 -k 0 ($currentCG + ".ry");
		setAttr -l 1 -k 0 ($currentCG + ".rz");
		setAttr -l 1 -k 0 ($currentCG + ".sx");
		setAttr -l 1 -k 0 ($currentCG + ".sy");
		setAttr -l 1 -k 0 ($currentCG + ".sz");
		setAttr -l 1 -k 0 ($currentCG + ".v");
	}

	
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.tx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.ty");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.tz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.rx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.ry");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.rz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.sx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.sy");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.sz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidTargetLctr.v");
                                
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.tx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.ty");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.tz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.rx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.ry");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.rz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.sx");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.sy");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.sz");
	setAttr -l 1 -k 0 ($name + "_Spine_MidAimLctr.v");

	
	setAttr -l 1 -k 0 ($name + "_NeckMidIKC.sx");
	setAttr -l 1 -k 0 ($name + "_NeckMidIKC.sy");
	setAttr -l 1 -k 0 ($name + "_NeckMidIKC.sz");
	setAttr -l 1 -k 0 ($name + "_NeckMidIKC.v");

	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.tx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.ty");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.tz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.rx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.ry");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.rz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.sx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.sy");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.sz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidTargetLctr.v");
                                
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.tx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.ty");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.tz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.rx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.ry");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.rz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.sx");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.sy");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.sz");
	setAttr -l 1 -k 0 ($name + "_Neck_MidAimLctr.v");
                                
	setAttr -l 1 -k 0 ($name + "_ROOTC.sx");
	setAttr -l 1 -k 0 ($name + "_ROOTC.sy");
	setAttr -l 1 -k 0 ($name + "_ROOTC.sz");
	setAttr -l 1 -k 0 ($name + "_ROOTC.v");
	
	select ($name + "_Spine??FKC")  ($name + "_Neck??FKC");
	$SplineFKC = `ls -sl`;
	string $currentControl;
	for ($currentControl in $SplineFKC)
	{
		setAttr -l 1 -k 0 ($currentControl + ".sx");
		setAttr -l 1 -k 0 ($currentControl + ".sz");
		setAttr -l 1 -k 0 ($currentControl + ".v");
	}
	
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.tx");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.ty");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.tz");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.rx");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.ry");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.rz");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.sx");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.sy");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.sz");
	setAttr -l 1 -k 0 ($name + "_SpineTopFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_HeadFKC.tx");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.ty");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.tz");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.rx");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.ry");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.rz");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.sx");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.sy");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.sz");
	setAttr -l 1 -k 0 ($name + "_HeadFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_HeadC.v");
	
	setAttr -l 1 -k 0 ($name + "_JawC.sx");
	setAttr -l 1 -k 0 ($name + "_JawC.sy");
	setAttr -l 1 -k 0 ($name + "_JawC.sz");
	setAttr -l 1 -k 0 ($name + "_JawC.v");
	
	setAttr -l 1 -k 0 ($name + "_MainHipC.sx");
	setAttr -l 1 -k 0 ($name + "_MainHipC.sy");
	setAttr -l 1 -k 0 ($name + "_MainHipC.sz");
	setAttr -l 1 -k 0 ($name + "_MainHipC.v");
	
	setAttr -l 1 -k 0($name + "_EyeAimC.rx");
	setAttr -l 1 -k 0($name + "_EyeAimC.ry");
	setAttr -l 1 -k 0($name + "_EyeAimC.rz");
	setAttr -l 1 -k 0($name + "_EyeAimC.sx");
	setAttr -l 1 -k 0($name + "_EyeAimC.sy");
	setAttr -l 1 -k 0($name + "_EyeAimC.sz");
	setAttr -l 1 -k 0($name + "_EyeAimC.v");
	
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.rx");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.ry");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.rz");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.sx");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.sy");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.sz");
	setAttr -l 1 -k 0 ($name + "_lEyeAimC.v");
	
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.rx");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.ry");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.rz");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.sx");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.sy");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.sz");
	setAttr -l 1 -k 0 ($name + "_rEyeAimC.v");
	
	//LEFT ARM
	//setAttr -l 1 -k 0 ($name + "_lClavicleC.tx");
	//setAttr -l 1 -k 0 ($name + "_lClavicleC.ty");
	//setAttr -l 1 -k 0 ($name + "_lClavicleC.tz");
	setAttr -l 1 -k 0 ($name + "_lClavicleC.sx");
	setAttr -l 1 -k 0 ($name + "_lClavicleC.sy");
	setAttr -l 1 -k 0 ($name + "_lClavicleC.sz");
	setAttr -l 1 -k 0 ($name + "_lClavicleC.v");
	
	//setAttr -l 1 -k 0 ($name + "_lShoulderFKC.tx");
	//setAttr -l 1 -k 0 ($name + "_lShoulderFKC.ty");
	//setAttr -l 1 -k 0 ($name + "_lShoulderFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lShoulderFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lShoulderFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lShoulderFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.rx");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.rz");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.tx");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.ty");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.sx");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lElbowFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lWristFKC.tx");
	setAttr -l 1 -k 0 ($name + "_lWristFKC.ty");
	setAttr -l 1 -k 0 ($name + "_lWristFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lWristFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lWristFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lWristFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.rx");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.ry");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.rz");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.sx");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.sy");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.sz");
	setAttr -l 1 -k 0 ($name + "_lElbowIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lWristIKC.sy");
	setAttr -l 1 -k 0 ($name + "_lWristIKC.sz");
	setAttr -l 1 -k 0 ($name + "_lWristIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lPalmC.tx");
	setAttr -l 1 -k 0 ($name + "_lPalmC.ty");
	setAttr -l 1 -k 0 ($name + "_lPalmC.tz");
	setAttr -l 1 -k 0 ($name + "_lPalmC.sx");
	setAttr -l 1 -k 0 ($name + "_lPalmC.sy");
	setAttr -l 1 -k 0 ($name + "_lPalmC.sz");
	setAttr -l 1 -k 0 ($name + "_lPalmC.v");
	
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.tx");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.ty");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.tz");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.rx");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.ry");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.rz");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.sx");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.sy");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.sz");
	setAttr -l 1 -k 0 ($name + "_lArmSwitchC.v");
	
	//HANDS
	select -cl;
	if (`objExists ($name + "_lThumbJ1")`)
	{select ($name + "_lThumbJ1C") ($name + "_lThumbJ2C") ($name + "_lThumbJ3C") ($name + "_rThumbJ1C") ($name + "_rThumbJ2C") ($name + "_rThumbJ3C");}
	
	select -add ($name + "_lFinger1J1C") ($name + "_lFinger1J2C") ($name + "_lFinger1J3C") ($name + "_rFinger1J1C") ($name + "_rFinger1J2C") ($name + "_rFinger1J3C");
	
	if (`objExists ($name + "_lFinger2J1")`)
	{select -add ($name + "_lFinger2J1C") ($name + "_lFinger2J2C") ($name + "_lFinger2J3C") ($name + "_rFinger2J1C") ($name + "_rFinger2J2C") ($name + "_rFinger2J3C");}
	
	if (`objExists ($name + "_lFinger3J1")`)
	{select -add ($name + "_lFinger3J1C") ($name + "_lFinger3J2C") ($name + "_lFinger3J3C") ($name + "_rFinger3J1C") ($name + "_rFinger3J2C") ($name + "_rFinger3J3C");}
	
	if (`objExists ($name + "_lFinger4J1")`)
	{select -add ($name + "_lFinger4J1C") ($name + "_lFinger4J2C") ($name + "_lFinger4J3C") ($name + "_rFinger4J1C") ($name + "_rFinger4J2C") ($name + "_rFinger4J3C");}
	
	if (`objExists ($name + "_lFinger5J1")`)
	{select -add ($name + "_lFinger5J1C") ($name + "_lFinger5J2C") ($name + "_lFinger5J3C") ($name + "_rFinger5J1C") ($name + "_rFinger5J2C") ($name + "_rFinger5J3C");}
	
	if (`objExists ($name + "_lFinger6J1")`)
	{select -add ($name + "_lFinger6J1C") ($name + "_lFinger6J2C") ($name + "_lFinger6J3C") ($name + "_rFinger6J1C") ($name + "_rFinger6J2C") ($name + "_rFinger6J3C");}
	
	if (`objExists ($name + "_lFinger7J1")`)
	{select -add ($name + "_lFinger7J1C") ($name + "_lFinger7J2C") ($name + "_lFinger7J3C") ($name + "_rFinger7J1C") ($name + "_rFinger7J2C") ($name + "_rFinger7J3C");}
	
	if (`objExists ($name + "_lFinger8J1")`)
	{select -add ($name + "_lFinger8J1C") ($name + "_lFinger8J2C") ($name + "_lFinger8J3C") ($name + "_rFinger8J1C") ($name + "_rFinger8J2C") ($name + "_rFinger8J3C");}
	
	if (`objExists ($name + "_lFinger9J1")`)
	{select -add ($name + "_lFinger9J1C") ($name + "_lFinger9J2C") ($name + "_lFinger9J3C") ($name + "_rFinger9J1C") ($name + "_rFinger9J2C") ($name + "_rFinger9J3C");}
	
	$selectedFingers = `ls -sl`;
	string $currentObject;
	for ($currentObject in $selectedFingers)
		
	{
		setAttr -l true -k false ($currentObject + ".tx");
		setAttr -l true -k false ($currentObject + ".ty");
		setAttr -l true -k false ($currentObject + ".tz");
		setAttr -l true -k false ($currentObject + ".sx");
		setAttr -l true -k false ($currentObject + ".sy");
		setAttr -l true -k false ($currentObject + ".sz");
		setAttr -l true -k false ($currentObject + ".v");
	}
	
	pickWalk -d up;
	$fingerRotGroups = `ls -sl`;
	pickWalk -d up;
	$fingerGroups = `ls -sl`;
	select $fingerRotGroups $fingerGroups ($name + "_lPalmCG") ($name + "_rPalmCG");
	$bothFingerGroups = `ls -sl`;
	string $currentObject;
	for ($currentObject in $bothFingerGroups)
	{
		setAttr -l true -k false ($currentObject + ".tx");
		setAttr -l true -k false ($currentObject + ".ty");
		setAttr -l true -k false ($currentObject + ".tz");
		setAttr -l true -k false ($currentObject + ".rx");
		setAttr -l true -k false ($currentObject + ".ry");
		setAttr -l true -k false ($currentObject + ".rz");
		setAttr -l true -k false ($currentObject + ".sx");
		setAttr -l true -k false ($currentObject + ".sy");
		setAttr -l true -k false ($currentObject + ".sz");
		setAttr -l true -k false ($currentObject + ".v");
	}
	select -cl;
	
	//TOES
	if (`objExists ($name + "_lToe01J1")`)
	select ($name + "_lToe01J1C") ($name + "_lToe01J2C") ($name + "_rToe01J1C") ($name + "_rToe01J2C");
	
	if (`objExists ($name + "_lToe02J1")`)
	{select -add ($name + "_lToe02J1C") ($name + "_lToe02J2C") ($name + "_lToe02J3C") ($name + "_rToe02J1C") ($name + "_rToe02J2C") ($name + "_rToe02J3C");}
	
	if (`objExists ($name + "_lToe03J1")`)
	{select -add ($name + "_lToe03J1C") ($name + "_lToe03J2C") ($name + "_lToe03J3C") ($name + "_rToe03J1C") ($name + "_rToe03J2C") ($name + "_rToe03J3C");}
	
	if (`objExists ($name + "_lToe04J1")`)
	{select -add ($name + "_lToe04J1C") ($name + "_lToe04J2C") ($name + "_lToe04J3C") ($name + "_rToe04J1C") ($name + "_rToe04J2C") ($name + "_rToe04J3C");}
	
	if (`objExists ($name + "_lToe05J1")`)
	{select -add ($name + "_lToe05J1C") ($name + "_lToe05J2C") ($name + "_lToe05J3C") ($name + "_rToe05J1C") ($name + "_rToe05J2C") ($name + "_rToe05J3C");}
	
	if (`objExists ($name + "_lToe06J1")`)
	{select -add ($name + "_lToe06J1C") ($name + "_lToe06J2C") ($name + "_lToe06J3C") ($name + "_rToe06J1C") ($name + "_rToe06J2C") ($name + "_rToe06J3C");}
	
	if (`objExists ($name + "_lToe07J1")`)
	{select -add ($name + "_lToe07J1C") ($name + "_lToe07J2C") ($name + "_lToe07J3C") ($name + "_rToe07J1C") ($name + "_rToe07J2C") ($name + "_rToe07J3C");}
	
	if (`objExists ($name + "_lToe08J1")`)
	{select -add ($name + "_lToe08J1C") ($name + "_lToe08J2C") ($name + "_lToe08J3C") ($name + "_rToe08J1C") ($name + "_rToe08J2C") ($name + "_rToe08J3C");}
	
	if (`objExists ($name + "_lToe09J1")`)
	{select -add ($name + "_lToe09J1C") ($name + "_lToe09J2C") ($name + "_lToe09J3C") ($name + "_rToe09J1C") ($name + "_rToe09J2C") ($name + "_rToe09J3C");}
	
	if (`objExists ($name + "_lToe10J1")`)
	{select -add ($name + "_lToe10J1C") ($name + "_lToe10J2C") ($name + "_lToe10J3C") ($name + "_rToe10J1C") ($name + "_rToe10J2C") ($name + "_rToe10J3C");}
	
	$toes = `ls -sl`;
	string $currentObject;
	for ($currentObject in $toes)
	{
		setAttr -l true -k false ($currentObject + ".tx");
		setAttr -l true -k false ($currentObject + ".ty");
		setAttr -l true -k false ($currentObject + ".tz");
		setAttr -l true -k false ($currentObject + ".sx");
		setAttr -l true -k false ($currentObject + ".sy");
		setAttr -l true -k false ($currentObject + ".sz");
		setAttr -l true -k false ($currentObject + ".v");
	}
	
	int $numToes = `size $toes`;
	if ($numToes > 0)
	{
		pickWalk -d up;
		$toeRotGroups = `ls -sl`;
		pickWalk -d up;
		$toeGroups = `ls -sl`;
		select $toeRotGroups $toeGroups ($name + "_lToeIKCG") ($name + "_rToeIKCG");
		$bothToeGroups = `ls -sl`;
		string $currentObject;
		for ($currentObject in $bothToeGroups)
		{
			setAttr -l true -k false ($currentObject + ".tx");
			setAttr -l true -k false ($currentObject + ".ty");
			setAttr -l true -k false ($currentObject + ".tz");
			setAttr -l true -k false ($currentObject + ".rx");
			setAttr -l true -k false ($currentObject + ".ry");
			setAttr -l true -k false ($currentObject + ".rz");
			setAttr -l true -k false ($currentObject + ".sx");
			setAttr -l true -k false ($currentObject + ".sy");
			setAttr -l true -k false ($currentObject + ".sz");
			setAttr -l true -k false ($currentObject + ".v");
		}
		parent $toeGroups ($name + "_MainC");
	}
	
	//LEFT LEG
	//setAttr -l 1 -k 0 ($name + "_lHipFKC.tx");
	//setAttr -l 1 -k 0 ($name + "_lHipFKC.ty");
	//setAttr -l 1 -k 0 ($name + "_lHipFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lHipFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lHipFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lHipFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.rx");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.ry");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.tx");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.ty");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.sx");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lKneeFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.tx");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.ty");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.sx");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lAnkleFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lBallFKC.tx");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.ty");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.tz");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.sx");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.sy");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.sz");
	setAttr -l 1 -k 0 ($name + "_lBallFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.rx");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.ry");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.rz");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.sx");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.sy");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.sz");
	setAttr -l 1 -k 0 ($name + "_lKneeIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lFootIKC.sx");
	setAttr -l 1 -k 0 ($name + "_lFootIKC.sy");
	setAttr -l 1 -k 0 ($name + "_lFootIKC.sz");
	setAttr -l 1 -k 0 ($name + "_lFootIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lToeIKC.tx");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.ty");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.tz");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.sx");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.sy");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.sz");
	setAttr -l 1 -k 0 ($name + "_lToeIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.rx");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.ry");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.rz");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.tx");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.ty");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.tz");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.sx");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.sy");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.sz");
	setAttr -l 1 -k 0 ($name + "_lLegSwitchC.v");
	
	//RIGHT ARM
	//setAttr -l 1 -k 0 ($name + "_rClavicleC.tx");
	//setAttr -l 1 -k 0 ($name + "_rClavicleC.ty");
	//setAttr -l 1 -k 0 ($name + "_rClavicleC.tz");
	setAttr -l 1 -k 0 ($name + "_rClavicleC.sx");
	setAttr -l 1 -k 0 ($name + "_rClavicleC.sy");
	setAttr -l 1 -k 0 ($name + "_rClavicleC.sz");
	setAttr -l 1 -k 0 ($name + "_rClavicleC.v");
	
	//setAttr -l 1 -k 0 ($name + "_rShoulderFKC.tx");
	//setAttr -l 1 -k 0 ($name + "_rShoulderFKC.ty");
	//setAttr -l 1 -k 0 ($name + "_rShoulderFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rShoulderFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rShoulderFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rShoulderFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.rx");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.rz");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.tx");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.ty");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.sx");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rElbowFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rWristFKC.tx");
	setAttr -l 1 -k 0 ($name + "_rWristFKC.ty");
	setAttr -l 1 -k 0 ($name + "_rWristFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rWristFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rWristFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rWristFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.rx");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.ry");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.rz");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.sx");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.sy");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.sz");
	setAttr -l 1 -k 0 ($name + "_rElbowIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rWristIKC.sy");
	setAttr -l 1 -k 0 ($name + "_rWristIKC.sz");
	setAttr -l 1 -k 0 ($name + "_rWristIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rPalmC.tx");
	setAttr -l 1 -k 0 ($name + "_rPalmC.ty");
	setAttr -l 1 -k 0 ($name + "_rPalmC.tz");
	setAttr -l 1 -k 0 ($name + "_rPalmC.sx");
	setAttr -l 1 -k 0 ($name + "_rPalmC.sy");
	setAttr -l 1 -k 0 ($name + "_rPalmC.sz");
	setAttr -l 1 -k 0 ($name + "_rPalmC.v");
	
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.tx");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.ty");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.tz");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.rx");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.ry");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.rz");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.sx");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.sy");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.sz");
	setAttr -l 1 -k 0 ($name + "_rArmSwitchC.v");
	
	//RIGHT LEG
	//setAttr -l 1 -k 0 ($name + "_rHipFKC.tx");
	//setAttr -l 1 -k 0 ($name + "_rHipFKC.ty");
	//setAttr -l 1 -k 0 ($name + "_rHipFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rHipFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rHipFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rHipFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.rx");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.ry");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.tx");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.ty");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.sx");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rKneeFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.tx");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.ty");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.sx");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rAnkleFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rBallFKC.tx");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.ty");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.tz");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.sx");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.sy");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.sz");
	setAttr -l 1 -k 0 ($name + "_rBallFKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.rx");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.ry");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.rz");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.sx");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.sy");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.sz");
	setAttr -l 1 -k 0 ($name + "_rKneeIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rFootIKC.sx");
	setAttr -l 1 -k 0 ($name + "_rFootIKC.sy");
	setAttr -l 1 -k 0 ($name + "_rFootIKC.sz");
	setAttr -l 1 -k 0 ($name + "_rFootIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rToeIKC.tx");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.ty");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.tz");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.sx");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.sy");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.sz");
	setAttr -l 1 -k 0 ($name + "_rToeIKC.v");
	
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.rx");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.ry");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.rz");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.tx");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.ty");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.tz");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.sx");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.sy");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.sz");
	setAttr -l 1 -k 0 ($name + "_rLegSwitchC.v");
	
	setAttr ($name + "_lShoulderJIK.v") 0;
	setAttr ($name + "_lShoulderJFK.v") 0;
	setAttr ($name + "_rShoulderJIK.v") 0;
	setAttr ($name + "_rShoulderJFK.v") 0;
	setAttr ($name + "_rHipJFK.v") 0;
	setAttr ($name + "_lHipJIK.v") 0;
	setAttr ($name + "_lHipJFK.v") 0;
	setAttr ($name + "_rHipJIK.v") 0;
	setAttr ($name + "_lArmIKHandle.v") 0;
	setAttr ($name + "_rArmIKHandle.v") 0;
	
	//LOCK GROUPS
	select ($name + "_lFinger1J1CG") ($name + "_lFinger1J2CG") ($name + "_lFinger1J3CG");
	if (`objExists ($name + "_lThumbJ1")`)
		{select -add ($name + "_lThumbJ1CG") ($name + "_lThumbJ2CG") ($name + "_lThumbJ3CG");}
	if (`objExists ($name + "_lFinger2J1")`)
		{select -add ($name + "_lFinger2J1CG") ($name + "_lFinger2J2CG") ($name + "_lFinger2J3CG");}
	if (`objExists ($name + "_lFinger3J1")`)
		{select -add ($name + "_lFinger3J1CG") ($name + "_lFinger3J2CG") ($name + "_lFinger3J3CG");}
	if (`objExists ($name + "_lFinger4J1")`)
		{select -add ($name + "_lFinger4J1CG") ($name + "_lFinger4J2CG") ($name + "_lFinger4J3CG");}
	if (`objExists ($name + "_lFinger5J1")`)
		{select -add ($name + "_lFinger5J1CG") ($name + "_lFinger5J2CG") ($name + "_lFinger5J3CG");}
	if (`objExists ($name + "_lFinger6J1")`)
		{select -add ($name + "_lFinger6J1CG") ($name + "_lFinger6J2CG") ($name + "_lFinger6J3CG");}
	if (`objExists ($name + "_lFinger7J1")`)
		{select -add ($name + "_lFinger7J1CG") ($name + "_lFinger7J2CG") ($name + "_lFinger7J3CG");}
	if (`objExists ($name + "_lFinger8J1")`)
		{select -add ($name + "_lFinger8J1CG") ($name + "_lFinger8J2CG") ($name + "_lFinger8J3CG");}
	if (`objExists ($name + "_lFinger9J1")`)
		{select -add ($name + "_lFinger9J1CG") ($name + "_lFinger9J2CG") ($name + "_lFinger9J3CG");}
	string $lFingersCG[] = `ls -sl`;
	
	select ($name + "_rFinger1J1CG") ($name + "_rFinger1J2CG") ($name + "_rFinger1J3CG");
	if (`objExists ($name + "_rThumbJ1")`)
		{select -add ($name + "_rThumbJ1CG") ($name + "_rThumbJ2CG") ($name + "_rThumbJ3CG");}
	if (`objExists ($name + "_rFinger2J1")`)
		{select -add ($name + "_rFinger2J1CG") ($name + "_rFinger2J2CG") ($name + "_rFinger2J3CG");}
	if (`objExists ($name + "_rFinger3J1")`)
		{select -add ($name + "_rFinger3J1CG") ($name + "_rFinger3J2CG") ($name + "_rFinger3J3CG");}
	if (`objExists ($name + "_rFinger4J1")`)
		{select -add ($name + "_rFinger4J1CG") ($name + "_rFinger4J2CG") ($name + "_rFinger4J3CG");}
	if (`objExists ($name + "_rFinger5J1")`)
		{select -add ($name + "_rFinger5J1CG") ($name + "_rFinger5J2CG") ($name + "_rFinger5J3CG");}
	if (`objExists ($name + "_rFinger6J1")`)
		{select -add ($name + "_rFinger6J1CG") ($name + "_rFinger6J2CG") ($name + "_rFinger6J3CG");}
	if (`objExists ($name + "_rFinger7J1")`)
		{select -add ($name + "_rFinger7J1CG") ($name + "_rFinger7J2CG") ($name + "_rFinger7J3CG");}
	if (`objExists ($name + "_rFinger8J1")`)
		{select -add ($name + "_rFinger8J1CG") ($name + "_rFinger8J2CG") ($name + "_rFinger8J3CG");}
	if (`objExists ($name + "_rFinger9J1")`)
		{select -add ($name + "_rFinger9J1CG") ($name + "_rFinger9J2CG") ($name + "_rFinger9J3CG");}
	string $rFingersCG[] = `ls -sl`;
	select -cl;
	
	if (`objExists ($name + "_lToe01J1")`)
		{select ($name + "_lToe01J1CG") ($name + "_lToe01J2CG");}
	if (`objExists ($name + "_lToe02J1")`)
		{select -add ($name + "_lToe02J1CG") ($name + "_lToe02J2CG") ($name + "_lToe02J3CG");}
	if (`objExists ($name + "_lToe03J1")`)
		{select -add ($name + "_lToe03J1CG") ($name + "_lToe03J2CG") ($name + "_lToe03J3CG");}
	if (`objExists ($name + "_lToe04J1")`)
		{select -add ($name + "_lToe04J1CG") ($name + "_lToe04J2CG") ($name + "_lToe04J3CG");}
	if (`objExists ($name + "_lToe05J1")`)
		{select -add ($name + "_lToe05J1CG") ($name + "_lToe05J2CG") ($name + "_lToe05J3CG");}
	if (`objExists ($name + "_lToe06J1")`)
		{select -add ($name + "_lToe06J1CG") ($name + "_lToe06J2CG") ($name + "_lToe06J3CG");}
	if (`objExists ($name + "_lToe07J1")`)
		{select -add ($name + "_lToe07J1CG") ($name + "_lToe07J2CG") ($name + "_lToe07J3CG");}
	if (`objExists ($name + "_lToe08J1")`)
		{select -add ($name + "_lToe08J1CG") ($name + "_lToe08J2CG") ($name + "_lToe08J3CG");}
	if (`objExists ($name + "_lToe09J1")`)
		{select -add ($name + "_lToe09J1CG") ($name + "_lToe09J2CG") ($name + "_lToe09J3CG");}
	if (`objExists ($name + "_lToe10J1")`)
		{select -add ($name + "_lToe10J1CG") ($name + "_lToe10J2CG") ($name + "_lToe10J3CG");}
	string $lToesCG[] = `ls -sl`;
	select -cl;
	
	if (`objExists ($name + "_rToe01J1")`)
		{select ($name + "_rToe01J1CG") ($name + "_rToe01J2CG");}
	if (`objExists ($name + "_rToe02J1")`)
		{select -add ($name + "_rToe02J1CG") ($name + "_rToe02J2CG") ($name + "_rToe02J3CG");}
	if (`objExists ($name + "_rToe03J1")`)
		{select -add ($name + "_rToe03J1CG") ($name + "_rToe03J2CG") ($name + "_rToe03J3CG");}
	if (`objExists ($name + "_rToe04J1")`)
		{select -add ($name + "_rToe04J1CG") ($name + "_rToe04J2CG") ($name + "_rToe04J3CG");}
	if (`objExists ($name + "_rToe05J1")`)
		{select -add ($name + "_rToe05J1CG") ($name + "_rToe05J2CG") ($name + "_rToe05J3CG");}
	if (`objExists ($name + "_rToe06J1")`)
		{select -add ($name + "_rToe06J1CG") ($name + "_rToe06J2CG") ($name + "_rToe06J3CG");}
	if (`objExists ($name + "_rToe07J1")`)
		{select -add ($name + "_rToe07J1CG") ($name + "_rToe07J2CG") ($name + "_rToe07J3CG");}
	if (`objExists ($name + "_rToe08J1")`)
		{select -add ($name + "_rToe08J1CG") ($name + "_rToe08J2CG") ($name + "_rToe08J3CG");}
	if (`objExists ($name + "_rToe09J1")`)
		{select -add ($name + "_rToe09J1CG") ($name + "_rToe09J2CG") ($name + "_rToe09J3CG");}
	if (`objExists ($name + "_rToe10J1")`)
		{select -add ($name + "_rToe10J1CG") ($name + "_rToe10J2CG") ($name + "_rToe10J3CG");}
	string $rToesCG[] = `ls -sl`;
	
	select -add ($name + "_ROOTCG") ($name + "_rLegSwitchCG") ($name + "_lLegSwitchCG")
	($name + "_rFootIKCG") ($name + "_rKneeIKCG") ($name + "_rBallFKCG") ($name + "_rAnkleFKCG")
	($name + "_rKneeFKCG") ($name + "_rHipFKCG") ($name + "_rArmSwitchCG")
	($name + "_rElbowIKCG") ($name + "_rWristJG1") ($name + "_rWristJG2")
	($name + "_rWristIKCG") ($name + "_rWristFKCG") ($name + "_rElbowFKCG")
	($name + "_rShoulderFKCG") ($name + "_rClavicleCG") ($name + "_lFootIKCG")
	($name + "_lKneeIKCG") ($name + "_lBallFKCG") ($name + "_lAnkleFKCG") ($name + "_lKneeFKCG")
	($name + "_lToeIKCG") ($name + "_rToeIKCG")
	($name + "_lHipFKCG") ($name + "_lArmSwitchCG") ($name + "_lElbowIKCG")
	($name + "_lWristJG1") ($name + "_lWristJG2") ($name + "_lWristIKCG")
	($name + "_lWristFKCG") ($name + "_lElbowFKCG") ($name + "_lShoulderFKCG")
	($name + "_lClavicleCG")($name + "_EyeAimCG") ($name + "_JawCG")
	($name + "_SpineTopFKCG") ($name + "_Spine??FKCG") ($name + "_lArmIKFKG")
	($name + "_rArmIKFKG") ($name + "_lLegIKFKG") ($name + "_rLegIKFKG")
	($name + "_MainHipCG") ($name + "_SpineMidIKCG") ($name + "_SpineTopIKCG") ($name + "_SpineMidIKCG2")
	($name + "_HeadFKCG") ($name + "_HeadCG2") ($name + "_HeadCG")
	($name + "_NeckMidIKCG") ($name + "_Neck??CurveCG") ($name + "_SpineTopIKCG2")
	
	($name + "_rLegLengthOriginLctr") 
	($name + "_lWristJFKG1") ($name + "_lWristJFKG2") ($name + "_lElbowJFKG1") ($name + "_lElbowJFKG2") ($name + "_lWristJIKProxyG2") ($name + "_lArmLengthOriginLctr") ($name + "_lAnkleJFKG2") 
	($name + "_lKneeJFKG2") ($name + "_rWristJFKG1") ($name + "_rWristJFKG2") ($name + "_rElbowJFKG1") ($name + "_rElbowJFKG2") ($name + "_rWristJIKProxyG2") ($name + "_rArmLengthOriginLctr") 
	($name + "_rAnkleJFKG2") ($name + "_rKneeJFKG2") ($name + "_lLegLengthOriginLctr") ($name + "_rShoulderFKCG2") ($name + "_lShoulderFKCG2")
	($name + "_SpineSplineBtm") ($name + "_SpineSplineTop") ($name + "_NeckSplineBtm") ($name + "_NeckSplineTop") ($name + "_Neck??FKCG")
	($name + "_ExtraNodes");
	
	string $selectedList[] = `ls -sl`;
	
	string $currentObject;
	
	for ($currentObject in $selectedList)
		
	{
		setAttr -l true -k false ($currentObject + ".tx");
		setAttr -l true -k false ($currentObject + ".ty");
		setAttr -l true -k false ($currentObject + ".tz");
		setAttr -l true -k false ($currentObject + ".rx");
		setAttr -l true -k false ($currentObject + ".ry");
		setAttr -l true -k false ($currentObject + ".rz");
		setAttr -l true -k false ($currentObject + ".sx");
		setAttr -l true -k false ($currentObject + ".sy");
		setAttr -l true -k false ($currentObject + ".sz");
		setAttr -l true -k false ($currentObject + ".v");
	}
	
	select "*Finger*J1C";
	if (`objExists ($name + "_lThumbJ1C")`)
		{select -add ($name + "_lThumbJ1C") ($name + "_rThumbJ1C");}
	string $selectedList[] = `ls -sl`;			
	string $currentObject;			
	for ($currentObject in $selectedList)		
	{
		setAttr -lock false -keyable true ($currentObject + ".sx");
		setAttr -lock false -keyable true ($currentObject + ".sy");
		setAttr -lock false -keyable true ($currentObject + ".sz");
	}
	
	//LOCK MOTION PATHS
	select ($name + "*MP");
	$motionPaths = `ls -sl`;
	for ($currentObject in $motionPaths)
	{
		setAttr -lock true -keyable false -channelBox false ($currentObject + ".u");
		setAttr -lock true -keyable false -channelBox false ($currentObject + ".ft");
		setAttr -lock true -keyable false -channelBox false ($currentObject + ".ut");
		setAttr -lock true -keyable false -channelBox false ($currentObject + ".st");
	}
	
	/////////////////////////////////SNAP ASSETS/////////////////////////////////
	select -cl;
	//LEFT WRIST IK TO FK LOCATOR
	spaceLocator -n ($name + "_lWristIKtoFKLctr");
	parentConstraint ($name + "_lWristIKCG") ($name + "_lWristIKtoFKLctr");
	delete ($name + "_lWristIKtoFKLctr_parentConstraint1");
	//makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lWristIKtoFKLctr");
	parent ($name + "_lWristIKtoFKLctr") ($name + "_lWristIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lWristIKtoFKLctr");
	parentConstraint ($name + "_lWristFKC") ($name + "_lWristIKtoFKLctr");
	
	//LEFT WRIST FK TO IK LOCATOR
	spaceLocator -n ($name + "_lWristFKtoIKLctr");
	parentConstraint ($name + "_lWristFKCG") ($name + "_lWristFKtoIKLctr");
	delete ($name + "_lWristFKtoIKLctr_parentConstraint1");
	parent ($name + "_lWristFKtoIKLctr") ($name + "_lWristFKCG");
	orientConstraint -mo ($name + "_lWristIKC") ($name + "_lWristFKtoIKLctr");
	setAttr ($name + "_lWristFKtoIKLctr_orientConstraint1.interpType") 2;
	
	//LEFT ELBOW IK TO FK LOCATOR
	spaceLocator -n ($name + "_lElbowIKtoFKAimLctr");
	parentConstraint ($name + "_lElbowIKC") ($name + "_lElbowIKtoFKAimLctr");
	delete ($name + "_lElbowIKtoFKAimLctr_parentConstraint1");
	parent ($name + "_lElbowIKtoFKAimLctr") ($name + "_lElbowIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lElbowIKtoFKAimLctr");
	parentConstraint -mo ($name + "_lElbowFKC") ($name + "_lShoulderFKC") ($name + "_lElbowIKtoFKAimLctr");
	
	//LEFT SHOULDER FK TO IK LOCATOR
	spaceLocator -n ($name + "_lShoulderFKtoIKOrientLctr");
	parentConstraint ($name + "_lShoulderJ") ($name + "_lShoulderFKtoIKOrientLctr");
	delete ($name + "_lShoulderFKtoIKOrientLctr_parentConstraint1");
	parent ($name + "_lShoulderFKtoIKOrientLctr") ($name + "_lShoulderFKCG");
	orientConstraint ($name + "_lShoulderJIK") ($name + "_lShoulderFKtoIKOrientLctr");
	
	//RIGHT WRIST IK TO FK LOCATOR
	spaceLocator -n ($name + "_rWristIKtoFKLctr");
	spaceLocator -n ($name + "_rWristIKtoFKLctrTarget");
	group -n ($name + "_rWristIKtoFKLctrTargetG") ($name + "_rWristIKtoFKLctrTarget"); xform -os -piv 0 0 0;
	parent ($name + "_rWristIKtoFKLctr") ($name + "_rWristIKCG");
	parent ($name + "_rWristIKtoFKLctrTargetG") ($name + "_rWristFKC");
	makeIdentity -apply false -t 1 -r 1 -s 1 ($name + "_rWristIKtoFKLctrTargetG");
	rotate -r -os -180 0 0 ($name + "_rWristIKtoFKLctrTargetG");
	delete `parentConstraint ($name + "_rWristIKCG") ($name + "_rWristIKtoFKLctr")`;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rWristIKtoFKLctr");
	parentConstraint ($name + "_rWristIKtoFKLctrTarget") ($name + "_rWristIKtoFKLctr");
	
	//RIGHT WRIST FK TO IK LOCATOR
	spaceLocator -n ($name + "_rWristFKtoIKLctr");
	delete `parentConstraint ($name + "_rWristFKCG") ($name + "_rWristFKtoIKLctr")`;
	parent ($name + "_rWristFKtoIKLctr") ($name + "_rWristFKCG");
	parentConstraint -mo ($name + "_rWristIKC") ($name + "_rWristFKtoIKLctr");
	setAttr ($name + "_rWristFKtoIKLctr_parentConstraint1.interpType") 2;
	
	//RIGHT ELBOW IK TO FK LOCATOR
	spaceLocator -n ($name + "_rElbowIKtoFKAimLctr");
	parentConstraint ($name + "_rElbowIKC") ($name + "_rElbowIKtoFKAimLctr");
	delete ($name + "_rElbowIKtoFKAimLctr_parentConstraint1");
	parent ($name + "_rElbowIKtoFKAimLctr") ($name + "_rElbowIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rElbowIKtoFKAimLctr");
	parentConstraint -mo ($name + "_rElbowFKC") ($name + "_rShoulderFKC") ($name + "_rElbowIKtoFKAimLctr");
	
	//LEFT SHOULDER FK TO IK LOCATOR
	spaceLocator -n ($name + "_rShoulderFKtoIKOrientLctr");
	parentConstraint ($name + "_rShoulderJ") ($name + "_rShoulderFKtoIKOrientLctr");
	delete ($name + "_rShoulderFKtoIKOrientLctr_parentConstraint1");
	parent ($name + "_rShoulderFKtoIKOrientLctr") ($name + "_rShoulderFKCG");
	orientConstraint ($name + "_rShoulderJIK") ($name + "_rShoulderFKtoIKOrientLctr");
	
	//LEFT ANKLE IK TO FK LOCATOR
	spaceLocator -n ($name + "_lAnkleIKtoFKLctr");
	setAttr ($name + "_lAnkleIKtoFKLctr.rotateOrder") 1;
	group -n ($name + "_lAnkleIKtoFKLctrG") ($name + "_lAnkleIKtoFKLctr");
	parentConstraint ($name + "_lFootIKC") ($name + "_lAnkleIKtoFKLctrG");
	delete ($name + "_lAnkleIKtoFKLctrG_parentConstraint1");
	parentConstraint -mo ($name + "_lAnkleFKC") ($name + "_lAnkleIKtoFKLctr");
	
	//LEFT ANKLE FK TO IK LOCATOR
	spaceLocator -n ($name + "_lAnkleFKtoIKLctr");
	setAttr ($name + "_lAnkleFKtoIKLctr.rotateOrder") 1;
	group -n ($name + "_lAnkleFKtoIKLctrG") ($name + "_lAnkleFKtoIKLctr");
	setAttr ($name + "_lAnkleFKtoIKLctrG.rotateOrder") 1;
	pointConstraint ($name + "_lAnkleJ") ($name + "_lAnkleFKtoIKLctrG");
	delete ($name + "_lAnkleFKtoIKLctrG_pointConstraint1");
	aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene" -skip x -skip z ($name + "_lBallJ") ($name + "_lToeJ") ($name + "_lAnkleFKtoIKLctrG");
	delete ($name + "_lAnkleFKtoIKLctrG_aimConstraint1");
	parentConstraint -mo ($name + "_lAnkleFKCG") ($name + "_lAnkleFKtoIKLctrG");
	orientConstraint -mo ($name + "_lFootIKC") ($name + "_lAnkleFKtoIKLctr");
	setAttr ($name + "_lAnkleFKtoIKLctr_orientConstraint1.interpType") 2;
	
	//LEFT KNEE IK TO FK LOCATOR
	spaceLocator -n ($name + "_lKneeIKtoFKAimLctr");
	parentConstraint ($name + "_lKneeIKC") ($name + "_lKneeIKtoFKAimLctr");
	delete ($name + "_lKneeIKtoFKAimLctr_parentConstraint1");
	parent ($name + "_lKneeIKtoFKAimLctr") ($name + "_lKneeIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lKneeIKtoFKAimLctr");
	parentConstraint -mo ($name + "_lKneeFKC") ($name + "_lHipFKC") ($name + "_lKneeIKtoFKAimLctr");
	
	//LEFT HIP FK TO IK LOCATOR
	spaceLocator -n ($name + "_lHipFKtoIKOrientLctr");
	parentConstraint ($name + "_lHipFKCG") ($name + "_lHipFKtoIKOrientLctr");
	delete ($name + "_lHipFKtoIKOrientLctr_parentConstraint1");
	parent ($name + "_lHipFKtoIKOrientLctr") ($name + "_lHipFKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_lHipFKtoIKOrientLctr");
	orientConstraint -mo ($name + "_lHipJIK") ($name + "_lHipFKtoIKOrientLctr");
	
	////RIGHT ANKLE IK TO FK LOCATOR
	spaceLocator -n ($name + "_rAnkleIKtoFKLctr");
	setAttr ($name + "_rAnkleIKtoFKLctr.rotateOrder") 1;
	spaceLocator -n ($name + "_rAnkleIKtoFKLctrTarget");
	setAttr ($name + "_rAnkleIKtoFKLctrTarget.rotateOrder") 1;
	group -n ($name + "_rAnkleIKtoFKLctrTargetG") ($name + "_rAnkleIKtoFKLctrTarget"); xform -os -piv 0 0 0;
	parent ($name + "_rAnkleIKtoFKLctr") ($name + "_rFootIKCG");
	parent ($name + "_rAnkleIKtoFKLctrTargetG") ($name + "_rAnkleFKC");
	makeIdentity -apply false -t 1 -r 1 -s 1 ($name + "_rAnkleIKtoFKLctrTargetG");
	rotate -r -os 0 90 -90 ($name + "_rAnkleIKtoFKLctrTargetG");
	delete `parentConstraint ($name + "_rFootIKCG") ($name + "_rAnkleIKtoFKLctr")`;
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rAnkleIKtoFKLctr");
	delete `parentConstraint ($name + "_rAnkleIKtoFKLctrTarget") ($name + "_rAnkleIKtoFKLctr")`;
	makeIdentity -apply true -t 1 -r 1 ($name + "_rAnkleIKtoFKLctr");
	parentConstraint -mo ($name + "_rAnkleIKtoFKLctrTarget") ($name + "_rAnkleIKtoFKLctr");

	//RIGHT ANKLE FK TO IK LOCATOR
	spaceLocator -n ($name + "_rAnkleFKtoIKLctr");
	setAttr ($name + "_rAnkleFKtoIKLctr.rotateOrder") 1;
	group -n ($name + "_rAnkleFKtoIKLctrG") ($name + "_rAnkleFKtoIKLctr");
	setAttr ($name + "_rAnkleFKtoIKLctrG.rotateOrder") 1;
	delete `pointConstraint ($name + "_rAnkleJ") ($name + "_rAnkleFKtoIKLctrG")`;
	delete `aimConstraint -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "scene" -skip x -skip z ($name + "_rBallJ") ($name + "_rToeJ") ($name + "_rAnkleFKtoIKLctrG")`;
	setAttr ($name + "_rAnkleFKtoIKLctrG.rx") 180;
	int $rAnkleLctrG_ry = `getAttr ($name + "_rAnkleFKtoIKLctrG.ry")`;
	setAttr ($name + "_rAnkleFKtoIKLctrG.ry") ($rAnkleLctrG_ry * -1); 
	parentConstraint -mo ($name + "_rAnkleFKCG") ($name + "_rAnkleFKtoIKLctrG");
	parentConstraint -mo -skipTranslate x -skipTranslate y -skipTranslate z ($name + "_rFootIKC") ($name + "_rAnkleFKtoIKLctr");
	//setAttr ($name + "_rAnkleFKtoIKLctr_orientConstraint1.offsetX") 180;
	//setAttr ($name + "_rAnkleFKtoIKLctr_orientConstraint1.interpType") 2;
	
	//spaceLocator -n ($name + "_rWristFKtoIKLctr");
	//delete `parentConstraint ($name + "_rWristFKCG") ($name + "_rWristFKtoIKLctr")`;
	//parent ($name + "_rWristFKtoIKLctr") ($name + "_rWristFKCG");
	//parentConstraint -mo ($name + "_rWristIKC") ($name + "_rWristFKtoIKLctr");
	//setAttr ($name + "_rWristFKtoIKLctr_parentConstraint1.interpType") 2;

	//RIGHT KNEE IK TO FK LOCATOR
	spaceLocator -n ($name + "_rKneeIKtoFKAimLctr");
	parentConstraint ($name + "_rKneeIKC") ($name + "_rKneeIKtoFKAimLctr");
	delete ($name + "_rKneeIKtoFKAimLctr_parentConstraint1");
	parent ($name + "_rKneeIKtoFKAimLctr") ($name + "_rKneeIKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rKneeIKtoFKAimLctr");
	parentConstraint -mo ($name + "_rKneeFKC") ($name + "_rHipFKC") ($name + "_rKneeIKtoFKAimLctr");
	
	//LEFT HIP FK TO IK LOCATOR
	spaceLocator -n ($name + "_rHipFKtoIKOrientLctr");
	parentConstraint ($name + "_rHipFKCG") ($name + "_rHipFKtoIKOrientLctr");
	delete ($name + "_rHipFKtoIKOrientLctr_parentConstraint1");
	parent ($name + "_rHipFKtoIKOrientLctr") ($name + "_rHipFKCG");
	makeIdentity -apply true -t 1 -r 1 -s 1 ($name + "_rHipFKtoIKOrientLctr");
	orientConstraint -mo ($name + "_rHipJIK") ($name + "_rHipFKtoIKOrientLctr");
	
	//HIDE SNAP LOCATORS
	setAttr ($name + "_lShoulderFKtoIKOrientLctr.v") 0;
	setAttr ($name + "_rShoulderFKtoIKOrientLctr.v") 0;
	setAttr ($name + "_lElbowIKtoFKAimLctr.v") 0;
	setAttr ($name + "_rElbowIKtoFKAimLctr.v") 0;
	setAttr ($name + "_lWristFKtoIKLctr.v") 0;
	setAttr ($name + "_lWristIKtoFKLctr.v") 0;
	setAttr ($name + "_rWristFKtoIKLctr.v") 0;
	setAttr ($name + "_rWristIKtoFKLctr.v") 0;
	setAttr ($name + "_rWristIKtoFKLctrTarget.v") 0;

	setAttr ($name + "_lKneeIKtoFKAimLctr.v") 0;
	setAttr ($name + "_rKneeIKtoFKAimLctr.v") 0;
	setAttr ($name + "_rAnkleIKtoFKLctr.v") 0;
	setAttr ($name + "_lAnkleFKtoIKLctr.v") 0;
	setAttr ($name + "_lAnkleIKtoFKLctr.v") 0;
	setAttr ($name + "_rAnkleFKtoIKLctr.v") 0;
	setAttr ($name + "_rAnkleIKtoFKLctrTarget.v") 0;
	
	setAttr ($name + "_lShoulderIKLockLctr.v") 0;
	setAttr ($name + "_rShoulderIKLockLctr.v") 0;
	setAttr ($name + "_lHipIKLockLctr.v") 0;
	setAttr ($name + "_rHipIKLockLctr.v") 0;
	setAttr ($name + "_lHipFKtoIKOrientLctr.v") 0;
	setAttr ($name + "_rHipFKtoIKOrientLctr.v") 0;
	
	//EXTRA NODES
	parent ($name + "_SpineSplineBtm") ($name + "_SpineSplineTop") ($name + "_NeckSplineBtm") ($name + "_NeckSplineTop") ($name + "_ExtraNodes");
	
	//PARENT TO MAIN CONTROL
	parent
	($name + "_ROOTJ") ($name + "_Spine??J") ($name + "_SpineTopJ")
	($name + "_Neck??J")
	($name + "_Spine??CurveCG") ($name + "_Neck??CurveCG")
	($name + "_SpineSplineBtm_ClusterG") ($name + "_SpineSplineMid_ClusterG") ($name + "_SpineSplineTop_ClusterG")
	($name + "_NeckSplineBtm_ClusterG") ($name + "_NeckSplineMid_ClusterG") ($name + "_NeckSplineTop_ClusterG")
	//($name + "_Neck02J")  ($name + "_NeckBtmClstrG")  ($name + "_HeadClstrG") ($name + "_HeadCG2")
	($name + "_Neck??FKCG")
	($name + "_HeadJ")
	($name + "_ROOTCG") ($name + "_MainHipCG") ($name + "_SpineMidIKCG") ($name + "_SpineTopIKCG") ($name + "_Spine??FKCG") ($name + "_SpineTopFKCG")
	($name + "_HeadFKCG") ($name + "_HeadCG2") ($name + "_NeckMidIKCG") ($name + "_SpineTopIKCG2")
	($name + "_Spine_ribbonSpineG") ($name + "_Neck_ribbonSpineG") ($name + "_EyeAimCG") ($name + "_JawCG")
	
	($name + "_lLegSwitchCG") ($name + "_lArmIKHandle") ($name + "_lFootIKCG") ($name + "_lKneeIKCG") ($name + "_lKneeIKC_TargetLctr") ($name + "_lBallFKCG") ($name + "_lAnkleFKCG") ($name + "_lKneeFKCG")
	($name + "_lHipFKCG") ($name + "_lArmSwitchCG") ($name + "_lElbowIKCG") ($name + "_lElbowIKC_TargetLctr") ($name + "_lWristIKCG") ($name + "_lWristFKCG") ($name + "_lElbowFKCG") ($name + "_lShoulderFKCG2")
	($name + "_lClavicleCG") ($name + "_lArmIKFKG") ($name + "_lLegIKFKG") ($name + "_lWristJG2") ($name + "_lWristJFKG2") ($name + "_lElbowJFKG2") ($name + "_lWristJIKProxyG2")
	($name + "_lPalmCG") ($name + "_lArmLengthOriginLctr") ($name + "_lAnkleJFKG2") ($name + "_lKneeJFKG2") ($name + "_lLegLengthOriginLctr")
	($name + "_lAnkleIKtoFKLctrG") ($name + "_lToeIKCG") ($name + "_lShoulderIKLockLctr") ($name + "_lHipIKLockLctr") ($name + "_lAnkleFKtoIKLctrG")
	
	($name + "_rLegSwitchCG") ($name + "_rArmIKHandle") ($name + "_rFootIKCG") ($name + "_rKneeIKCG") ($name + "_rKneeIKC_TargetLctr") ($name + "_rBallFKCG") ($name + "_rAnkleFKCG") ($name + "_rKneeFKCG")
	($name + "_rHipFKCG") ($name + "_rArmSwitchCG") ($name + "_rElbowIKCG") ($name + "_rElbowIKC_TargetLctr") ($name + "_rWristIKCG") ($name + "_rWristFKCG") ($name + "_rElbowFKCG") ($name + "_rShoulderFKCG2")
	($name + "_rClavicleCG") ($name + "_rArmIKFKG") ($name + "_rLegIKFKG") ($name + "_rWristJG2") ($name + "_rWristJFKG2") ($name + "_rElbowJFKG2") ($name + "_rWristJIKProxyG2")
	($name + "_rPalmCG") ($name + "_rArmLengthOriginLctr") ($name + "_rAnkleJFKG2") ($name + "_rKneeJFKG2") ($name + "_rLegLengthOriginLctr")
	//($name + "_rAnkleIKtoFKLctrG")
	($name + "_rToeIKCG") ($name + "_rShoulderIKLockLctr") ($name + "_rHipIKLockLctr") ($name + "_rAnkleFKtoIKLctrG")
	
	($name + "_ExtraNodes")
	
	($name + "_MainC");
	
	group -n $name ($name + "_MainC");
	//TOY STORY RELEASE DATE!
	setAttr ($name + ".identification") 1122;
			

	//CREATE LAYERS
	select ($name + "_ROOTJ") ($name + "_Spine??J") ($name + "_Neck??J") ($name + "_SpineTopJ")
	//($name + "_Neck02J")
	($name + "_HeadJ") ($name + "_lWristJ") ($name + "_rWristJ") ($name + "_SpineLengthCXShapeOrig") ($name + "_NeckLengthCXShapeOrig");
	createDisplayLayer -n ($name + "_JointsLayer") -number 1 -nr;
	//layerEditorLayerButtonTypeChange ($name + "_JointsLayer");
	//layerEditorLayerButtonTypeChange ($name + "_JointsLayer");
	
	select ($name + "_rLegSwitchC") ($name + "_lLegSwitchC") ($name + "_rFootIKC") ($name + "_rToeIKC") ($name + "_rKneeIKC") ($name + "_rBallFKC")
	($name + "_rAnkleFKC") ($name + "_rKneeFKC") ($name + "_rHipFKC") ($name + "_rArmSwitchC") ($name + "_rElbowIKC") ($name + "_rWristIKC") ($name + "_rWristFKC") ($name + "_rElbowFKC")
	($name + "_rShoulderFKC") ($name + "_rClavicleC") ($name + "_lFootIKC") ($name + "_lToeIKC") ($name + "_lKneeIKC") ($name + "_lBallFKC") ($name + "_lAnkleFKC") ($name + "_lKneeFKC")
	($name + "_lHipFKC") ($name + "_lArmSwitchC") ($name + "_lElbowIKC") ($name + "_lWristIKC") ($name + "_lWristFKC") ($name + "_lElbowFKC") ($name + "_lShoulderFKC")
	($name + "_lClavicleC")($name + "_EyeAimC") ($name + "_rEyeAimC") ($name + "_lEyeAimC") ($name + "_JawC") ($name + "_HeadC")
	//($name + "_Neck01C") ($name + "_Neck02C") ($name + "_NeckCurve")
	($name + "_SpineTopFKC") ($name + "_Spine??FKC") ($name + "_Spine??CurveC")
	($name + "_Neck??FKC") ($name + "_Neck??CurveC")
	($name + "_MainHipC") ($name + "_ROOTC") ($name + "_SpineMidIKC")
	($name + "_SpineTopIKC") ($name + "_SpineLengthCX") ($name + "_NeckLengthCX") $lFingersCG $rFingersCG $lToesCG $rToesCG ($name + "_lPalmC") ($name + "_rPalmC");
	createDisplayLayer -n ($name + "_ControlsLayer") -number 1 -nr;
	
	
	//ASSIGN COLOURS TO CONTROLS
	RRA_AssignColors;
	
	if ($RRA_ToonArms == 1)
	{
		RRA_CreateToonArms;
		select ($name + "_lShoulderCurveJ") ($name + "_lElbowCurveJ") ($name + "_lUpperArmCurveJ?") ($name + "_lLowerArmCurveJ?")
		($name + "_rShoulderCurveJ") ($name + "_rElbowCurveJ") ($name + "_rUpperArmCurveJ?") ($name + "_rLowerArmCurveJ?");
		$armCurveJ = `ls -sl`;
		string $each;
		for ($each in $armCurveJ)
		{
			//setAttr (($each + ".jointOrient"), 0,0,0); 
			//$rotation = `getAttr ($each + ".rotate")`;
			//setAttr (($each + ".jointOrient"), $rotation[0], $rotation[1], $rotation[2]);
		}
	}
	
	if ($RRA_ToonLegs == 1)
	{
		RRA_CreateToonLegs;
		select ($name + "_lHipCurveJ") ($name + "_lKneeCurveJ") ($name + "_lUpperLegCurveJ?") ($name + "_lLowerLegCurveJ?")
		($name + "_lHipCurveJ") ($name + "_lKneeCurveJ") ($name + "_lUpperLegCurveJ?") ($name + "_lLowerLegCurveJ?");
		$legCurveJ = `ls -sl`;
		string $each;
		for ($each in $legCurveJ)
		{
			//setAttr (($each + ".jointOrient"), 0,0,0); 
			//$rotation = `getAttr ($each + ".rotate")`;
			//setAttr (($each + ".jointOrient"), $rotation[0], $rotation[1], $rotation[2]);
		}
	}
	

	
	//SET ALL CONSTRAINTS TO SHORTEST INTERPOLATION
	select ($name + "*_parentConstraint1");
	
	string $selectedParentConstraints[] = `ls -sl`;
	string $currentParentConstraint;
	for ($currentParentConstraint in $selectedParentConstraints)
	{setAttr ($currentParentConstraint + ".interpType") 2;}
	
	setAttr ($name + "_lWristIKCG_parentConstraint1.interpType") 0;
	setAttr ($name + "_rElbowIKCG_parentConstraint1.interpType") 0;
	setAttr ($name + "_rWristIKCG_parentConstraint1.interpType") 0;
	setAttr ($name + "_lElbowIKCG_parentConstraint1.interpType") 0;
	setAttr ($name + "_rKneeIKCG_parentConstraint1.interpType") 0;
	setAttr ($name + "_lKneeIKCG_parentConstraint1.interpType") 0;
	
	if (`objExists ($name + "_lShoulderCurveJ")`)
	{
		//setAttr ($name + "_rElbowTwist75Lctr_parentConstraint1.interpType") 0;
		//setAttr ($name + "_rElbowTwist25Lctr_parentConstraint1.interpType") 0;
		//setAttr ($name + "_rElbowTwist50Lctr_parentConstraint1.interpType") 0;
	}
	
	$createMesh = `checkBox -q -v RRA_RapidMesh`;
	if ($createMesh == 1)
	{
		RRA_RapidMesh;
	}
	
	if (`objExists ($name + "_geoSkinG")`)
	{
		select ($name + "_geoSkinG") ($name + "_scaleGeoG");
		createDisplayLayer -name ($name + "_GeoLayer") -number 1 -nr;
		//layerEditorLayerButtonTypeChange ($name + "_GeoLayer");
		//layerEditorLayerButtonTypeChange ($name + "_GeoLayer");
	}
	
	//LOCK CHANNELS ON CONSTRAINTS
	select -hi $name;
	string $constraints[] = `ls -sl -type "constraint"`;
	int $i;
	int $iCheck;
	for ($each in $constraints)
	{
		setAttr -lock true ($each + ".nds");
		if (`objExists ($each + ".int")`)
		{
			setAttr -lock true ($each + ".int");
		}
		if (`objExists ($each + ".ox")`)
		{
			setAttr -lock true ($each + ".ox");
			setAttr -lock true ($each + ".oy");
			setAttr -lock true ($each + ".oz");
		}
		
		$i = 0;
		$iCheck = 1;
		while ($i != $iCheck)
		{
			if (`objExists ($each + ".w" + $i)`)
			{
				setAttr -lock true ($each + ".w" + $i);
				$iCheck++;
			}
			$i++;
		}
	}

	select -cl;
	delete ($name + "_SpineTemp01J") ($name + "_NeckTemp01J") ($name + "_SpineStartLctr") ($name + "_NeckStartLctr");

	select -cl;
	print "CONGRATULATIONS! RIG COMPLETED!\n";
	//*/
	changeLinearUnit $currentUnit;
	
	RRA_SingleHierarchyInterface;
}
	
global proc RRA_GenerateRigUI(string $name)
{
	
	//CHARACTER NAME
	if (`objExists  RRA_MAIN`)
	{
		//CHECK IF NODE EDITOR IS OPEN
		string $nodeEditor[] = `getPanel -scriptType nodeEditorPanel `;
		
		for ( $editor in $nodeEditor )
		{
			string $tokens[];
			string $control = `scriptedPanel -q -ctl $editor`;
		
			if ( $control != "" )
			{
				if ( 0 < `tokenize $control "|" $tokens` )
				{
					print ( "Window for Node Editor: " + $tokens[0] + "\n" );
				  
					string $NodeEditorUI = `confirmDialog
						-title "Close Node Editor Before Proceeding?"
						-message "The Node Editor is open.\nGenerating a rig with the node editor opened will cause the rig to take much longer to generate \n"
						-button "Close Node Editor"
						-button "Ignore"
						-defaultButton "Close Node Editor"
						-dismissString "Ignore"
						-cancelButton "Ignore"`;
						//-icon "critical"`;
						
					if ($NodeEditorUI == "Close Node Editor")
					{
						deleteUI -window nodeEditorPanel2Window;
					}
				}
		  	}
		}

		string $returnVal_Generate = `confirmDialog
		-title "Warning: Have you saved your file?"
		-message "Generating the rig may not be undoable.\n\n-Click \"Go Back\"to cancel and save your scene first\n\n-\"Generate Rig Only\" builds the rig without saving a proxy text file\n\n-\"Save Proxies and Generate Rig\" allows you to save a text file containing your proxies' positions, then generates the rig"
		-button "Go Back"
		-button "Generate Rig Only"
		-button "Save Proxies and Generate Rig"
		-defaultButton "Save Proxies and Generate Rig"
		-cancelButton "Go Back"`;
	
		if ($returnVal_Generate == "Generate Rig Only")
		{
			//PREPARE SELECTION SET
			string $preName[];
			if (`objExists ($name + "_*")`)
			{//CHECK TO SEE IF THERE IS ANYTHING IN THE SCENE WITH THE SAME NAMING CONVENTION
				select ($name + "_*");
				$preName = `ls -sl`;
			}
			
			RRA_GenerateRig($name);
			
			//ADD CUSTOM ATTRIBUTES
			select ($name + "_*C");
			select -d $preName;	
			$controls = `ls -sl`;
			
			//ADD RIG NAME
			string $each;
			for ($each in $controls)
			{
				addAttr -ln "RRARigName"  -dt "string"  $each;
				setAttr -e-keyable true ($each + ".RRARigName");	
				setAttr -type "string" ($each + ".RRARigName") $name;
				setAttr -l true ($each + ".RRARigName");
			}
			//ADD RIG CONNECTION
			addAttr -ln "RRARigConnection"  -dt "string"  $name;
			setAttr -e-keyable true ($name + ".RRARigConnection");	
			setAttr -type "string" ($name + ".RRARigConnection") $name;
			setAttr -l true ($each + ".RRARigName");
				
			for ($each in $controls)
			{
				addAttr -ln "RRARigConnection"  -dt "string"  $each;
				setAttr -e-keyable true ($each + ".RRARigName");	

				connectAttr -f ($name + ".RRARigConnection") ($each + ".RRARigConnection");
			}
			
			////CREATE SELECTION SET
			//select ($name + "_*");
			//select -d $preName;
			//if (`objExists ($name + "_Spine02Geo")`)
			//{
			//	select -d ($name + "_Spine02Geo.vtx[*]") ($name + "_RootGeo.vtx[*]")
			//	($name + "_Spine01Geo.vtx[*]") ($name + "_Spine03Geo.vtx[*]")
			//	($name + "_SpineTopGeoShape.vtx[*]") ($name + $spline + "_ribbon.cv[*][*]");
			//}
			//$set = `ls -sl`;
			//sets -name ($name + "_QSS") -text "gCharacterSet";
			//select -cl;

			//TURN OFF PROXY LAYER
			if (`objExists ProxiesLayer`)
			{
				setAttr ProxiesLayer.visibility 0;
			}
		}
		
		else if ($returnVal_Generate == "Save Proxies & Generate Rig")
		{
			RRA_WritePathProx;
			
			//PREPARE SELECTION SET
			string $preName[];
			if (`objExists ($name + "_*")`)
			{//CHECK TO SEE IF THERE IS ANYTHING IN THE SCENE WITH THE SAME NAMING CONVENTION
				select ($name + "_*");
				$preName = `ls -sl`;
			}
			
			RRA_GenerateRig($name);
			
			//ADD CUSTOM ATTRIBUTES
			select ($name + "_*C");
			select -d $preName;	
			$controls = `ls -sl`;
			
			//ADD RIG NAME
			string $each;
			for ($each in $controls)
			{
				addAttr -ln "RRARigName"  -dt "string"  $each;
				setAttr -e-keyable true ($each + ".RRARigName");	
				setAttr -type "string" ($each + ".RRARigName") $name;
				setAttr -l true ($each + ".RRARigName");
			}
			
			////CREATE SELECTION SET
			//select ($name + "_*");
			//select -d $preName;
			//select -d ($name + "_Spine02Geo.vtx[*]") ($name + "_RootGeo.vtx[*]")
			//($name + "_Spine01Geo.vtx[*]") ($name + "_Spine03Geo.vtx[*]")
			//($name + "_SpineTopGeoShape.vtx[*]") ($name + $spline + "_ribbon.cv[*][*]");
			//$set = `ls -sl`;
			//sets -name ($name + "_QSS") -text "gCharacterSet";
			//select -cl;
			
			//TURN OFF PROXY LAYER
			if (`objExists ProxiesLayer`)
			{
				setAttr ProxiesLayer.visibility 0;
			}

		}
		textFieldButtonGrp -e -tx $name RRA_LoadRigTextFieldButtonGrp;
	}
	else
	{
		error "NEED A PROXY RIG FIRST. NO ACTION TAKEN.\n";
	}
}

global proc RRA_DeleteProxies()
{
	if (`objExists RRA_MAIN`)
	{
		string $returnVal_Delete = `confirmDialog
		-title "Delete Proxy Rig"
		-message "Are you sure you want to delete your proxy rig?"
		-button "Delete Proxies"
		-button "Cancel"
		-defaultButton "Delete Proxies"
		-cancelButton "Cancel"`;
	
		if ($returnVal_Delete == "Delete Proxies")
		{
			select -hi RRA_MAIN ;
			select -add RRA_rKneeParentUp_MD RRA_lElbowParentUp_MD
			RRA_rElbowParentUp_MD RRA_lKneeParentUp_MD;
			$allProxies = `ls -sl`;
			string $selectedProxy;
			for ($selectedProxy in $allProxies)
			{
				lockNode -lock off $selectedProxy;
			}
			select -cl;
			delete RRA_MAIN RRA_rKneeParentUp_MD RRA_lElbowParentUp_MD
			RRA_rElbowParentUp_MD RRA_lKneeParentUp_MD ;
			print "PROXY RIG DELETED!\n";
			
			if (`objExists "ProxiesLayer"`)
			{
				delete "ProxiesLayer";
			}
		}
	}
	else
	{warning "NO PROXY RIG TO DELETE!\n";}
}


global proc RRA_SelectStandardJoints(string $name)
{
	//string $name = `textField -q -text RRA_CharName`;

	select ($name + "_lFinger1J1") ($name + "_lFinger1J2") ($name + "_lFinger1J3") ($name + "_rFinger1J1") ($name + "_rFinger1J2") ($name + "_rFinger1J3");
	if (`objExists ($name + "_lThumbJ1")`)
		{select -add ($name + "_lThumbJ1") ($name + "_lThumbJ2") ($name + "_lThumbJ3");}
	if (`objExists ($name + "_lFinger2J1")`)
		{select -add ($name + "_lFinger2J1") ($name + "_lFinger2J2") ($name + "_lFinger2J3");}
	if (`objExists ($name + "_lFinger3J1")`)
		{select -add ($name + "_lFinger3J1") ($name + "_lFinger3J2") ($name + "_lFinger3J3");}
	if (`objExists ($name + "_lFinger4J1")`)
		{select -add ($name + "_lFinger4J1") ($name + "_lFinger4J2") ($name + "_lFinger4J3");}
	if (`objExists ($name + "_lFinger5J1")`)
		{select -add ($name + "_lFinger5J1") ($name + "_lFinger5J2") ($name + "_lFinger5J3");}
	if (`objExists ($name + "_lFinger6J1")`)
		{select -add ($name + "_lFinger6J1") ($name + "_lFinger6J2") ($name + "_lFinger6J3");}
	if (`objExists ($name + "_lFinger7J1")`)
		{select -add ($name + "_lFinger7J1") ($name + "_lFinger7J2") ($name + "_lFinger7J3");}
	if (`objExists ($name + "_lFinger8J1")`)
		{select -add ($name + "_lFinger8J1") ($name + "_lFinger8J2") ($name + "_lFinger8J3");}
	if (`objExists ($name + "_lFinger9J1")`)
		{select -add ($name + "_lFinger9J1") ($name + "_lFinger9J2") ($name + "_lFinger9J3");}
	
	if (`objExists ($name + "_rThumbJ1")`)
		{select -add ($name + "_rThumbJ1") ($name + "_rThumbJ2") ($name + "_rThumbJ3");}
	if (`objExists ($name + "_rFinger2J1")`)
		{select -add ($name + "_rFinger2J1") ($name + "_rFinger2J2") ($name + "_rFinger2J3");}
	if (`objExists ($name + "_rFinger3J1")`)
		{select -add ($name + "_rFinger3J1") ($name + "_rFinger3J2") ($name + "_rFinger3J3");}
	if (`objExists ($name + "_rFinger4J1")`)
		{select -add ($name + "_rFinger4J1") ($name + "_rFinger4J2") ($name + "_rFinger4J3");}
	if (`objExists ($name + "_rFinger5J1")`)
		{select -add ($name + "_rFinger5J1") ($name + "_rFinger5J2") ($name + "_rFinger5J3");}
	if (`objExists ($name + "_rFinger6J1")`)
		{select -add ($name + "_rFinger6J1") ($name + "_rFinger6J2") ($name + "_rFinger6J3");}
	if (`objExists ($name + "_rFinger7J1")`)
		{select -add ($name + "_rFinger7J1") ($name + "_rFinger7J2") ($name + "_rFinger7J3");}
	if (`objExists ($name + "_rFinger8J1")`)
		{select -add ($name + "_rFinger8J1") ($name + "_rFinger8J2") ($name + "_rFinger8J3");}
	if (`objExists ($name + "_rFinger9J1")`)
		{select -add ($name + "_rFinger9J1") ($name + "_rFinger9J2") ($name + "_rFinger9J3");}
	
	
	string $fingers[] = `ls -sl`;
	
	if (`objExists ($name + "_lToe01J1")`)
		{select ($name + "_lToe01J1") ($name + "_lToe01J2");}
	if (`objExists ($name + "_lToe02J1")`)
		{select -add ($name + "_lToe02J1") ($name + "_lToe02J2") ($name + "_lToe02J3");}
	if (`objExists ($name + "_lToe03J1")`)
		{select -add ($name + "_lToe03J1") ($name + "_lToe03J2") ($name + "_lToe03J3");}
	if (`objExists ($name + "_lToe04J1")`)
		{select -add ($name + "_lToe04J1") ($name + "_lToe04J2") ($name + "_lToe04J3");}
	if (`objExists ($name + "_lToe05J1")`)
		{select -add ($name + "_lToe05J1") ($name + "_lToe05J2") ($name + "_lToe05J3");}
	if (`objExists ($name + "_lToe06J1")`)
		{select -add ($name + "_lToe06J1") ($name + "_lToe06J2") ($name + "_lToe06J3");}
	if (`objExists ($name + "_lToe07J1")`)
		{select -add ($name + "_lToe07J1") ($name + "_lToe07J2") ($name + "_lToe07J3");}
	if (`objExists ($name + "_lToe08J1")`)
		{select -add ($name + "_lToe08J1") ($name + "_lToe08J2") ($name + "_lToe08J3");}
	if (`objExists ($name + "_lToe09J1")`)
		{select -add ($name + "_lToe09J1") ($name + "_lToe09J2") ($name + "_lToe09J3");}
	if (`objExists ($name + "_lToe10J1")`)
		{select -add ($name + "_lToe10J1") ($name + "_lToe10J2") ($name + "_lToe10J3");}
	
	if (`objExists ($name + "_rToe01J1")`)
		{select -add ($name + "_rToe01J1") ($name + "_rToe01J2");}
	if (`objExists ($name + "_rToe02J1")`)
		{select -add ($name + "_rToe02J1") ($name + "_rToe02J2") ($name + "_rToe02J3");}
	if (`objExists ($name + "_rToe03J1")`)
		{select -add ($name + "_rToe03J1") ($name + "_rToe03J2") ($name + "_rToe03J3");}
	if (`objExists ($name + "_rToe04J1")`)
		{select -add ($name + "_rToe04J1") ($name + "_rToe04J2") ($name + "_rToe04J3");}
	if (`objExists ($name + "_rToe05J1")`)
		{select -add ($name + "_rToe05J1") ($name + "_rToe05J2") ($name + "_rToe05J3");}
	if (`objExists ($name + "_rToe06J1")`)
		{select -add ($name + "_rToe06J1") ($name + "_rToe06J2") ($name + "_rToe06J3");}
	if (`objExists ($name + "_rToe07J1")`)
		{select -add ($name + "_rToe07J1") ($name + "_rToe07J2") ($name + "_rToe07J3");}
	if (`objExists ($name + "_rToe08J1")`)
		{select -add ($name + "_rToe08J1") ($name + "_rToe08J2") ($name + "_rToe08J3");}
	if (`objExists ($name + "_rToe09J1")`)
		{select -add ($name + "_rToe09J1") ($name + "_rToe09J2") ($name + "_rToe09J3");}
	if (`objExists ($name + "_rToe10J1")`)
		{select -add ($name + "_rToe10J1") ($name + "_rToe10J2") ($name + "_rToe10J3");}
	
	string $toes[] = `ls -sl`;
	
	select -add ($name + "_lAnkleJ") ($name + "_lBallJ") ($name + "_rAnkleJ") ($name + "_rBallJ")
	($name + "_Spine??J") ($name + "_SpineTopJ") ($name + "_Neck??J") ($name + "_HeadJ") ($name + "_JawJ") ($name + "_lClavicleJ")
	($name + "_rClavicleJ") ($name + "_lWristJ") ($name + "_rWristJ") ($name + "_lPalmJ") ($name + "_rPalmJ") $fingers
	$toes ($name + "_ROOTJ");
	
	if (`objExists ($name + "_lShoulderCurveJ")`)
	{
		select -add ($name + "_lShoulderCurveJ") ($name + "_lLowerArmCurveJ1") ($name + "_lLowerArmCurveJ2") ($name + "_lLowerArmCurveJ3")
		($name + "_lElbowCurveJ") ($name + "_lUpperArmCurveJ1") ($name + "_lUpperArmCurveJ2") ($name + "_lUpperArmCurveJ3")
		($name + "_rShoulderCurveJ") ($name + "_rLowerArmCurveJ1") ($name + "_rLowerArmCurveJ2") ($name + "_rLowerArmCurveJ3")
		($name + "_rElbowCurveJ") ($name + "_rUpperArmCurveJ1") ($name + "_rUpperArmCurveJ2") ($name + "_rUpperArmCurveJ3");
	}
	else
	{
		select -add ($name + "_lShoulderJ") ($name + "_lElbowJ") ($name + "_lForearmJ") ($name + "_rShoulderJ") ($name + "_rElbowJ") ($name + "_rForearmJ");
	}
	
	if (`objExists ($name + "_lHipCurveJ")`)
	{
		select -add ($name + "_lLowerLegCurveJ1") ($name + "_lLowerLegCurveJ2") ($name + "_lLowerLegCurveJ3") ($name + "_lKneeCurveJ")
		($name + "_lUpperLegCurveJ1") ($name + "_lUpperLegCurveJ2") ($name + "_lUpperLegCurveJ3") ($name + "_lHipCurveJ")
		($name + "_rLowerLegCurveJ1") ($name + "_rLowerLegCurveJ2") ($name + "_rLowerLegCurveJ3") ($name + "_rKneeCurveJ")
		($name + "_rUpperLegCurveJ1") ($name + "_rUpperLegCurveJ2") ($name + "_rUpperLegCurveJ3") ($name + "_rHipCurveJ");
	}
	else
	{
		select -add ($name + "_lHipJ") ($name + "_lKneeJ") ($name + "_rHipJ") ($name + "_rKneeJ");
	}
}

global proc RRA_SelectSingleHierarchyJoints(string $name)
{
	//string $name = `textField -q -text RRA_CharName`;

	select ($name + "_SH_lFinger1J1") ($name + "_SH_lFinger1J2") ($name + "_SH_lFinger1J3") ($name + "_SH_rFinger1J1") ($name + "_SH_rFinger1J2") ($name + "_SH_rFinger1J3");
	if (`objExists ($name + "_SH_lThumbJ1")`)
		{select -add ($name + "_SH_lThumbJ1") ($name + "_SH_lThumbJ2") ($name + "_SH_lThumbJ3");}
	if (`objExists ($name + "_SH_lFinger2J1")`)
		{select -add ($name + "_SH_lFinger2J1") ($name + "_SH_lFinger2J2") ($name + "_SH_lFinger2J3");}
	if (`objExists ($name + "_SH_lFinger3J1")`)
		{select -add ($name + "_SH_lFinger3J1") ($name + "_SH_lFinger3J2") ($name + "_SH_lFinger3J3");}
	if (`objExists ($name + "_SH_lFinger4J1")`)
		{select -add ($name + "_SH_lFinger4J1") ($name + "_SH_lFinger4J2") ($name + "_SH_lFinger4J3");}
	if (`objExists ($name + "_SH_lFinger5J1")`)
		{select -add ($name + "_SH_lFinger5J1") ($name + "_SH_lFinger5J2") ($name + "_SH_lFinger5J3");}
	if (`objExists ($name + "_SH_lFinger6J1")`)
		{select -add ($name + "_SH_lFinger6J1") ($name + "_SH_lFinger6J2") ($name + "_SH_lFinger6J3");}
	if (`objExists ($name + "_SH_lFinger7J1")`)
		{select -add ($name + "_SH_lFinger7J1") ($name + "_SH_lFinger7J2") ($name + "_SH_lFinger7J3");}
	if (`objExists ($name + "_SH_lFinger8J1")`)
		{select -add ($name + "_SH_lFinger8J1") ($name + "_SH_lFinger8J2") ($name + "_SH_lFinger8J3");}
	if (`objExists ($name + "_SH_lFinger9J1")`)
		{select -add ($name + "_SH_lFinger9J1") ($name + "_SH_lFinger9J2") ($name + "_SH_lFinger9J3");}
	
	if (`objExists ($name + "_SH_rThumbJ1")`)
		{select -add ($name + "_SH_rThumbJ1") ($name + "_SH_rThumbJ2") ($name + "_SH_rThumbJ3");}
	if (`objExists ($name + "_SH_rFinger2J1")`)
		{select -add ($name + "_SH_rFinger2J1") ($name + "_SH_rFinger2J2") ($name + "_SH_rFinger2J3");}
	if (`objExists ($name + "_SH_rFinger3J1")`)
		{select -add ($name + "_SH_rFinger3J1") ($name + "_SH_rFinger3J2") ($name + "_SH_rFinger3J3");}
	if (`objExists ($name + "_SH_rFinger4J1")`)
		{select -add ($name + "_SH_rFinger4J1") ($name + "_SH_rFinger4J2") ($name + "_SH_rFinger4J3");}
	if (`objExists ($name + "_SH_rFinger5J1")`)
		{select -add ($name + "_SH_rFinger5J1") ($name + "_SH_rFinger5J2") ($name + "_SH_rFinger5J3");}
	if (`objExists ($name + "_SH_rFinger6J1")`)
		{select -add ($name + "_SH_rFinger6J1") ($name + "_SH_rFinger6J2") ($name + "_SH_rFinger6J3");}
	if (`objExists ($name + "_SH_rFinger7J1")`)
		{select -add ($name + "_SH_rFinger7J1") ($name + "_SH_rFinger7J2") ($name + "_SH_rFinger7J3");}
	if (`objExists ($name + "_SH_rFinger8J1")`)
		{select -add ($name + "_SH_rFinger8J1") ($name + "_SH_rFinger8J2") ($name + "_SH_rFinger8J3");}
	if (`objExists ($name + "_SH_rFinger9J1")`)
		{select -add ($name + "_SH_rFinger9J1") ($name + "_SH_rFinger9J2") ($name + "_SH_rFinger9J3");}
	
	
	string $fingers[] = `ls -sl`;
	
	if (`objExists ($name + "_SH_lToe01J1")`)
		{select ($name + "_SH_lToe01J1") ($name + "_SH_lToe01J2");}
	if (`objExists ($name + "_SH_lToe02J1")`)
		{select -add ($name + "_SH_lToe02J1") ($name + "_SH_lToe02J2") ($name + "_SH_lToe02J3");}
	if (`objExists ($name + "_SH_lToe03J1")`)
		{select -add ($name + "_SH_lToe03J1") ($name + "_SH_lToe03J2") ($name + "_SH_lToe03J3");}
	if (`objExists ($name + "_SH_lToe04J1")`)
		{select -add ($name + "_SH_lToe04J1") ($name + "_SH_lToe04J2") ($name + "_SH_lToe04J3");}
	if (`objExists ($name + "_SH_lToe05J1")`)
		{select -add ($name + "_SH_lToe05J1") ($name + "_SH_lToe05J2") ($name + "_SH_lToe05J3");}
	if (`objExists ($name + "_SH_lToe06J1")`)
		{select -add ($name + "_SH_lToe06J1") ($name + "_SH_lToe06J2") ($name + "_SH_lToe06J3");}
	if (`objExists ($name + "_SH_lToe07J1")`)
		{select -add ($name + "_SH_lToe07J1") ($name + "_SH_lToe07J2") ($name + "_SH_lToe07J3");}
	if (`objExists ($name + "_SH_lToe08J1")`)
		{select -add ($name + "_SH_lToe08J1") ($name + "_SH_lToe08J2") ($name + "_SH_lToe08J3");}
	if (`objExists ($name + "_SH_lToe09J1")`)
		{select -add ($name + "_SH_lToe09J1") ($name + "_SH_lToe09J2") ($name + "_SH_lToe09J3");}
	if (`objExists ($name + "_SH_lToe10J1")`)
		{select -add ($name + "_SH_lToe10J1") ($name + "_SH_lToe10J2") ($name + "_SH_lToe10J3");}
	
	if (`objExists ($name + "_SH_rToe01J1")`)
		{select -add ($name + "_SH_rToe01J1") ($name + "_SH_rToe01J2");}
	if (`objExists ($name + "_SH_rToe02J1")`)
		{select -add ($name + "_SH_rToe02J1") ($name + "_SH_rToe02J2") ($name + "_SH_rToe02J3");}
	if (`objExists ($name + "_SH_rToe03J1")`)
		{select -add ($name + "_SH_rToe03J1") ($name + "_SH_rToe03J2") ($name + "_SH_rToe03J3");}
	if (`objExists ($name + "_SH_rToe04J1")`)
		{select -add ($name + "_SH_rToe04J1") ($name + "_SH_rToe04J2") ($name + "_SH_rToe04J3");}
	if (`objExists ($name + "_SH_rToe05J1")`)
		{select -add ($name + "_SH_rToe05J1") ($name + "_SH_rToe05J2") ($name + "_SH_rToe05J3");}
	if (`objExists ($name + "_SH_rToe06J1")`)
		{select -add ($name + "_SH_rToe06J1") ($name + "_SH_rToe06J2") ($name + "_SH_rToe06J3");}
	if (`objExists ($name + "_SH_rToe07J1")`)
		{select -add ($name + "_SH_rToe07J1") ($name + "_SH_rToe07J2") ($name + "_SH_rToe07J3");}
	if (`objExists ($name + "_SH_rToe08J1")`)
		{select -add ($name + "_SH_rToe08J1") ($name + "_SH_rToe08J2") ($name + "_SH_rToe08J3");}
	if (`objExists ($name + "_SH_rToe09J1")`)
		{select -add ($name + "_SH_rToe09J1") ($name + "_SH_rToe09J2") ($name + "_SH_rToe09J3");}
	if (`objExists ($name + "_SH_rToe10J1")`)
		{select -add ($name + "_SH_rToe10J1") ($name + "_SH_rToe10J2") ($name + "_SH_rToe10J3");}
	
	string $toes[] = `ls -sl`;
	
	select -add ($name + "_SH_lAnkleJ") ($name + "_SH_lBallJ") ($name + "_SH_rAnkleJ") ($name + "_SH_rBallJ")
	($name + "_SH_Spine??J") ($name + "_SH_SpineTopJ") ($name + "_SH_Neck??J") ($name + "_SH_HeadJ") ($name + "_SH_JawJ") ($name + "_SH_lClavicleJ")
	($name + "_SH_rClavicleJ") ($name + "_SH_lWristJ") ($name + "_SH_rWristJ") ($name + "_SH_lPalmJ") ($name + "_SH_rPalmJ") $fingers
	$toes ($name + "_SH_ROOTJ");
	
	if (`objExists ($name + "_SH_lShoulderCurveJ")`)
	{
		select -add ($name + "_SH_lShoulderCurveJ") ($name + "_SH_lLowerArmCurveJ1") ($name + "_SH_lLowerArmCurveJ2") ($name + "_SH_lLowerArmCurveJ3")
		($name + "_SH_lElbowCurveJ") ($name + "_SH_lUpperArmCurveJ1") ($name + "_SH_lUpperArmCurveJ2") ($name + "_SH_lUpperArmCurveJ3")
		($name + "_SH_rShoulderCurveJ") ($name + "_SH_rLowerArmCurveJ1") ($name + "_SH_rLowerArmCurveJ2") ($name + "_SH_rLowerArmCurveJ3")
		($name + "_SH_rElbowCurveJ") ($name + "_SH_rUpperArmCurveJ1") ($name + "_SH_rUpperArmCurveJ2") ($name + "_SH_rUpperArmCurveJ3");
	}
	else
	{
		select -add ($name + "_SH_lShoulderJ") ($name + "_SH_lElbowJ") ($name + "_SH_lForearmJ") ($name + "_SH_rShoulderJ") ($name + "_SH_rElbowJ") ($name + "_SH_rForearmJ");
	}
	
	if (`objExists ($name + "_SH_lHipCurveJ")`)
	{
		select -add ($name + "_SH_lLowerLegCurveJ1") ($name + "_SH_lLowerLegCurveJ2") ($name + "_SH_lLowerLegCurveJ3") ($name + "_SH_lKneeCurveJ")
		($name + "_SH_lUpperLegCurveJ1") ($name + "_SH_lUpperLegCurveJ2") ($name + "_SH_lUpperLegCurveJ3") ($name + "_SH_lHipCurveJ")
		($name + "_SH_rLowerLegCurveJ1") ($name + "_SH_rLowerLegCurveJ2") ($name + "_SH_rLowerLegCurveJ3") ($name + "_SH_rKneeCurveJ")
		($name + "_SH_rUpperLegCurveJ1") ($name + "_SH_rUpperLegCurveJ2") ($name + "_SH_rUpperLegCurveJ3") ($name + "_SH_rHipCurveJ");
	}
	else
	{
		select -add ($name + "_SH_lHipJ") ($name + "_SH_lKneeJ") ($name + "_SH_rHipJ") ($name + "_SH_rKneeJ");
	}
}


global proc RRA_SelectJoints(string $name)
{
	//string $name = `textField -q -text RRA_CharName`;
		
	if (`objExists ($name + "_SH_ROOTJ")`)
	{
		string $returnVal_Skin = `confirmDialog
		-title "Select Skinning Joints"
		-message "Which joints do you wish to select?"
		-button "Standard"
		-button "Single Hierarchy"
		-button "Cancel"
		-defaultButton "Cancel"
		-cancelButton "Cancel"`;
	
		if ($returnVal_Skin == "Standard")
		{
			RRA_SelectStandardJoints($name);
			print "STANDARD JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIG.\n";
		}
	
		if ($returnVal_Skin == "Single Hierarchy")
		{
			RRA_SelectSingleHierarchyJoints($name);
			print "SINGLE HIERARCHY JOINTS SELECTED! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIG.\n";
		}
	}
	else if (`objExists ($name + "_ROOTJ")`)
	{
		RRA_SelectStandardJoints($name);
		print "SUCCESS! NOW SELECT THE GEOMETRY YOU WANT TO ATTACH TO THE RIG.\n";		
	}
	else
	{
		error "NO JOINTS HAVE BEEN CREATED YET!\n";
	}
}

global proc RRA_LoadRig()
{
	$selection = `ls -sl`;
	$selectionSize = `size $selection`;
	if ($selectionSize > 0)
	{
		if (`objExists ($selection[0] + ".RRARigConnection")`)
		{
			$rigName = `getAttr ($selection[0] + ".RRARigConnection")`;
			textFieldButtonGrp -e -tx $rigName RRA_LoadRigTextFieldButtonGrp;
		}
		else
		{warning "Selected Object is not a Rapid Rig Control";}
	}
	else
	{warning "Nothing Selected. Please Select a Rapid Rig Control";}
}

//SAVE/LOAD CONTROLS//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////

global proc RRA_WritePathControls()
{
	string $mayaFolder;

	fileBrowserDialog -mode 1
    -fileCommand ( "RRA_WriteControls \"" + $mayaFolder + "\"" )
    -actionName "Save";
}

global proc RRA_WriteControls(string $mayaFolder, string $result, string $type)
{
	print ("\nSAVING CONTROLS TO: "+ $result + "\n");
	$fileID = `fopen $result "w"`;
		
	$controls = `ls -sl`;
	string $currentControl;
	int $currentCV = 0;
	string $currentCV2;
	string $currentCurve;
	
	for ($currentControl in $controls)
	{
		fprint $fileID ("if (`objExists " + $currentControl + "`) (");
		select $currentControl;
		//selectCurveCV("all");
		//$CVs = `filterExpand -ex true -sm 28`;
		string $curves[] = `listRelatives -shapes -type "nurbsCurve" $currentControl`;
		for ($currentCurve in $curves)
		{
			int $numCVs = `getAttr -size ($currentCurve + ".controlPoints")`;
			$currentCV = 0;
			while ($currentCV < $numCVs)
			{		
				$CVPos = `pointPosition -l ($currentCurve + ".cv[" + $currentCV + "]")`;
				fprint $fileID ("setAttr " + $currentCurve + ".cv[" + $currentCV + "].xValue " + $CVPos[0] + ";");
				fprint $fileID ("setAttr " + $currentCurve + ".cv[" + $currentCV + "].yValue " + $CVPos[1] + ";");
				fprint $fileID ("setAttr " + $currentCurve + ".cv[" + $currentCV + "].zValue " + $CVPos[2] + ";");
				$currentCV++;
			}
		}
		fprint $fileID (")\n");
	}
	fclose $fileID;
}
		
		
global proc RRA_WritePathControlsCheck()
{
	string $rig[] = `ls -sl`;
	int $rigSize = `size $rig`;
	if ($rigSize == 1)
	{
		if (`objExists ($rig[0] + ".RRARigName")`)
		{
			string $rigName = `getAttr ($rig[0] + ".RRARigName")`;
			select ($rigName + "_*C");
			RRA_WritePathControls;
		}
		else
		{warning "\nPLEASE SELECT A VALID CONTROL FROM YOUR RIG\n";}

	}
	else
	{
		warning "\nPLEASE SELECT ONE VALID CONTROL FROM YOUR RIG\n";
	}
	select $rig;
}

global proc RRA_ReadPathControls()
{
	string $mayaFolder2;

	fileBrowserDialog -mode 0
    -fileCommand ( "RRA_LoadControls \"" + $mayaFolder2 + "\"" )
    -actionName "Load";
}

global proc RRA_LoadControls(string $mayaFolder2, string $result2, string $type2)
{
	$rigName = `ls -sl`;
	//FILE PATH
	print ("LOADING POSE FROM "+$result2+"...\n");
	//OPEN FILE FOR READING
	$fileID = `fopen $result2 "r"`;
	print ($fileID+" is FileID"+"\n");
	//GET FIRST LINE
	string $nextLine = `fgetline $fileID`;
	print ($nextLine+" is nextLine"+"\n");
	//LOOP
	while (size($nextLine) > 0)
	{
		eval ($nextLine);
		print ($nextLine);
		$nextLine = `fgetline $fileID`;
	}
	//RETURN ARRAY
	fclose $fileID;
}


global proc RRA_ReadPathControlsCheck()
{
	string $rig[] = `ls -sl`;
	int $rigSize = `size $rig`;
	if ($rigSize == 1)
	{
		if (`objExists ($rig[0] + ".RRARigName")`)
		{
			string $rigName = `getAttr ($rig[0] + ".RRARigName")`;
			select ($rigName + "_*C");
			RRA_ReadPathControls;
		}
		else
		{warning "\nPLEASE SELECT A VALID CONTROL FROM YOUR RIG\n";}

	}
	else
	{
		warning "\nPLEASE SELECT ONE VALID CONTROL FROM YOUR RIG\n";
	}
	select $rig;
}

//DELETE RIG
global proc RRA_DeleteRig(string $rigName, int $keep)
{
	//if ($keep == 0)
	//{
	//	select ($rigName + "_QSS");
	//}
	if ($keep == 1)
	{
		parent -w ($rigName + "_SH_ROOTJ");
		select -hi ($rigName + "_SH_ROOTJ");
		$SHJoints = `ls -sl -type "joint"`;
		string $each;
		for ($each in $SHJoints)
		{
			delete -constraints $each;
		}
		select ($rigName + "_QSS");
		select -d $SHJoints;
	}
	
	$allRig = `ls -sl`;
	select -hi $rigName;
	$dagNodes = `ls -sl`;
	select $allRig;
	select -d $dagNodes;
	$nonDagNodes = `ls -sl`;

		
	//DELETE NODES
	delete $rigName;
	string $each;
	for ($each in $nonDagNodes)
	{
		if (`objExists $each`)
		{
			delete $each;
		}
	}
	
	//EXTRA UTILITY NODES
	select ($rigName + "_*");
	$MD_Nodes = `ls -sl -type "multiplyDivide"`;
	$Blend_Nodes = `ls -sl -type "blendColors"`;
	$Condition_Nodes = `ls -sl -type "condition"`;
	
	select $MD_Nodes $Blend_Nodes $Condition_Nodes;
	$Util_Nodes = `ls -sl`;
	int $i = 0;
	string $each;
	while ($i < 10)
	{
		for ($each in $Util_Nodes)
		{
			$connections = `listConnections -s off $each`;
			$numConnections = `size $connections`;
			if ($numConnections <= 1)
			{
				select $Util_Nodes;
				select -d $each;
				$Util_Nodes = `ls -sl`;
				delete $each;
			}
		}
		$i++;
	}
	
	//LAYERS
	if (`objExists ($rigName + "_Joints_SH_Layer")`)
	{
		delete ($rigName + "_Joints_SH_Layer");
	}
	if (`objExists ($rigName + "_GeoLayer")`)
	{
		delete ($rigName + "_GeoLayer");
	}
	if (`objExists ($rigName + "_ControlsLayer")`)
	{
		delete ($rigName + "_ControlsLayer");
	}
	if (`objExists ($rigName + "JointsLayer")`)
	{
		delete ($rigName + "JointsLayer");
	}
	
	//MATERIALS
	if (`objExists ($rigName + "_geoColour01")`)
	{
		delete ($rigName + "_geoColour01");
	}
	if (`objExists ($rigName + "_geoColour02")`)
	{
		delete ($rigName + "_geoColour02");
	}
	if (`objExists ($rigName + "_EyeWhites")`)
	{
		delete ($rigName + "_EyeWhites");
	}
	if (`objExists ($rigName + "_Pupils")`)
	{
		delete ($rigName + "_Pupils");
	}
	
			
}

global proc RRA_DeleteRigUI()
{
	$selection = `ls -sl`;
	$selectSize = `size $selection`;
	
	if ($selectSize == 1)
	{
		if (`objExists ($selection[0] + ".RRARigName")`)
		{
			$rigName = `getAttr ($selection[0] + ".RRARigName")`;
			
			if (!`objExists ($rigName + "_SH_ROOTJ")`)
			{
				string $returnVal_DeleteRig = `confirmDialog
				-title ("Are you sure you want to delete \"" + ($rigName) + "\" rig?")
				-message ("This will delete the entire rig and anything you may have added to the \"" + ($rigName) + "\" hierarchy. You may not be able to undo.")
				-button "Proceed"
				-button "Cancel"
				-defaultButton "Cancel"
				-cancelButton "Cancel"`;
				
				if ($returnVal_DeleteRig == "Proceed") 
				{
					print ("DELETING \"" + ($rigName) + "\"...\n");
					RRA_DeleteRig($rigName, 0);
					print ("\"" + ($rigName) + "\" DELETED\n");
				}
			}
			else
			{
				string $returnVal_DeleteRig = `confirmDialog
				-title ("Are you sure you want to delete \"" + ($rigName) + "\" rig?")
				-message ("This will delete the entire rig and anything you may have added to the \"" + ($rigName) + "\" hierarchy. You may not be able to undo.")
				-button "Proceed"
				-button "Proceed, Keep SH Joints"
				-button "Cancel"
				-defaultButton "Cancel"
				-cancelButton "Cancel"`;
				
				if ($returnVal_DeleteRig == "Proceed") 
				{
					print ("DELETING \"" + ($rigName) + "\"...\n");
					RRA_DeleteRig($rigName, 0);
					print ("\" + ($rigName) + \" DELETED\n");
				}
				if ($returnVal_DeleteRig == "Proceed, Keep SH Joints") 
				{
					print ("DELETING \"" + ($rigName) + "\"...\n");
					RRA_DeleteRig($rigName, 1);
					print ("\" + ($rigName) + \" DELETED. SINGLE HIERARCHY JOINTS PRESERVED\n");
				}
			}				
		}
		else
		{
			confirmDialog
			-title "Warning: Select \"MainC\""
			-message "You need to select a control of the rig you wish to delete"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
		}
	}
	else if ($selectSize == 0)
	{
			confirmDialog
			-title "Warning: Nothing Selected"
			-message "You need to select a control of the rig you wish to delete"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
	}
	else
	{
			confirmDialog
			-title "Warning: More Than One Object Selected"
			-message "Please select only one control of the rig you wish to delete"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
	}
}	
		
global proc RRA_GetVersionNumber()
{
	$selection = `ls -sl`;
	$selectSize = `size $selection`;
	
	if ($selectSize == 1)
	{
		if (`objExists ($selection[0] + ".versionNumber")`)
		{
			$rigName = `getAttr ($selection[0] + ".RRARigName")`;
			$rigVersionNumber = `getAttr ($selection[0] + ".versionNumber")`;
			
			string $returnVal_DeleteRig = `confirmDialog
			-title ("The rig \"" + ($rigName) + "\" is version: " + $rigVersionNumber)
			-message ("Click the \"Go To Rapid Rig Web Page\" button to see if you have the latest version.")
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK"`;

		}
		else
		{
			confirmDialog
			-title "Warning: Select \"MainC\""
			-message "You need to select the Main Controller to check your rig's version"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
		}
	}
	else if ($selectSize == 0)
	{
			confirmDialog
			-title "Warning: Nothing Selected"
			-message "You need to select the Main Controller to check your rig's version"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
	}
	else
	{
			confirmDialog
			-title "Warning: More Than One Object Selected"
			-message "You need to select the Main Controller to check your rig's version"
			-button "OK"
			-defaultButton "OK"
			-cancelButton "OK";
	}
}

global proc RRA_GoToCreativeCrash()
{
	launch -web "http://www.creativecrash.com/maya/marketplace/scripts-plugins/character/c/-rapid-rig-advanced-auto-rig-for-maya--2";
}
//////////////////////////////////////////////////////////////////
////////////////////////Main Window///////////////////////////////
//////////////////////////////////////////////////////////////////

global proc RRA_CreateGUI()
{
	string $form = `formLayout`;
	string $tabs = `tabLayout -cr false rigTabs`;
	
	//TAB 1
	$proxySteps = `columnLayout RRA_ProxySteps`;
	//STEP 1.1
		frameLayout -label "Step 1.1: Fingers and Toes (Per Side)"
			-width 310;
	
	    columnLayout -cw 50 -cat "left" 5;
	    $thumbsG = `checkBox
			-label "Thumbs"
			-value 1
			-ann "Choose whether you want your rig to have thumbs or not."
			RRA_ThumbsOn`;
		$fingersG = `intSliderGrp
			-min 1
			-max 9
			-label "Fingers"
			-field true
			-cal 1 left
			-cw 1 50
			-value 4
			-ann "Set the number of fingers."
			RRA_FingersG`;
	
		$toesG = `intSliderGrp
			-min 1
			-max 10
			-label "Toes"
			-field true
			-cal 1 left
			-cw 1 50
			-value 1
			-ann "Set the number of toes."
			RRA_ToesG`;
	
			setParent RRA_ProxySteps;
	

	//STEP 1.2
		frameLayout -label "Step 1.2: Spine and Neck Joints"
			-width 310;
	
	    columnLayout -cw 50 -cat "left" 5;

		$spineG = `intSliderGrp
			-min 2
			-max 10
			-label "Spine"
			-field true
			-cal 1 left
			-cw 1 50
			-value 4
			-ann "Set the number of joints for the spine."
			RRA_SpineG`;
	
	
		$neckG = `intSliderGrp
			-min 1
			-max 9
			-label "Neck"
			-field true
			-cal 1 left
			-cw 1 50
			-value 3
			-ann "Set the number of joints for the neck."
			RRA_NeckG`;

			setParent RRA_ProxySteps;
		
	//STEP 1.3
		frameLayout -label "Step 1.3: Create Proxy Rig"
			-width 310;
	
			button -bgc .30 .65 .30 -label "Create Proxies"
			-annotation "Generates proxies based on the above settings for your Rapid Rig used to determine positions for your joints and controls."
			-command "RRA_GenerateProxies(`checkBox -q -v RRA_ThumbsOn`,\
			`intSliderGrp -q -v RRA_FingersG`,\
			`intSliderGrp -q -v RRA_ToesG`,\
			`intSliderGrp -q -v RRA_SpineG`,\
			`intSliderGrp -q -v RRA_NeckG`);"

			RRA_GenerateProxiesButton;
	
			setParent RRA_ProxySteps;
	
	//STEP 1.4
		frameLayout -label "Step 1.4: Pose Proxy Rig"
			-width 310;
	
			rowColumnLayout -nc 3 -cw 1 102 -cw 2 102 -cw 3 102;
			button -label "Right to Left"
			-annotation "Takes the transform data from the proxies on the right side and mirrors that date to the left side"
			-command "RRA_RightToLeftProxies"
			RRA_RightToLeftProxiesButton;
			button -label "Reset"
			-annotation "Resets the proxies' transforms to their default positions"
			-command "RRA_ResetProxies"
			RRA_ResetProxiesButton;		
			button -label "Left to Right"
			-annotation "Takes the transform data from the proxies on the left side and mirrors that date to the right side"
			-command "RRA_LeftToRightProxies"
			RRA_LeftToRightProxiesButton;
	
			setParent RRA_ProxySteps;

	//STEP 1.5
		frameLayout -label "Step 1.5: Save/Load Proxy transforms"
			-width 310;
				
			rowColumnLayout -nc 2 -cw 1 153 -cw 2 153;
			button -label "Save"
			-annotation "Writes a text file with a user-defined name and location that stores the values of the current proxies."
			-command "RRA_WritePathProx"
			RRA_WritePathProxButton;
			button -label "Load"
			-annotation "Loads the positional data from a text file onto the proxies in the scene."
			-command "RRA_ReadPathProx"
			RRA_ReadPathProxButton;		
	
			setParent rigTabs;
			
			
	
	//TAB 2
	$rigSteps = `columnLayout RRA_RigSteps`;
	//STEP 2.1
		frameLayout -label "Step 2.1: Character Name"
			-width 310;
		
		columnLayout -cw 50 -cat "left" 5;
		$RRA_CharName = `textField
			-width 296
			-ann "Enter a unique name for your Rapid Rig. Name cannot begin with a number or contain special character. Numbers, letters and underscores are acceptable."
			RRA_CharName`;
			
			setParent RRA_RigSteps;

			
	
	//STEP 2.2
		frameLayout -label "Step 2.2: Optional Geometry for Animation"
			-width 310;
	
	    columnLayout -cw 50 -cat "left" 5;
	    $geoG = `checkBox
			-label "Create Rapid Mesh"
			-value 0
			-ann "Generates a low-resolution that is bound to your Rapid Rig. Useful as a placeholder for hi-rez geometry or as a model on its own."
			RRA_RapidMesh`;
	
			setParent RRA_RigSteps;
	
	//STEP 2.3
		frameLayout -label "Step 2.3: Enable Toon Limbs"
			-width 310;
	
	    rowColumnLayout -nc 2;
	    $RRA_ToonArms = `checkBox
			-label "Toon Arms"
			-value 0
			-ann "Toon Arms create several extra joints and controls which can used to give your character \"spaghetti-like\" arms."
			RRA_ToonArms`;
	
		//columnLayout -cw 50 -cat "left" 5;
	    $RRA_ToonLegs = `checkBox
			-label "Toon Legs"
			-value 0
			-ann "Toon Legs create several extra joints and controls which can used to give your character \"spaghetti-like\" legs."
			RRA_ToonLegs`;
			
			setParent RRA_RigSteps;
		
	//STEP 2.4
		frameLayout -label "Step 2.4: Create Character Rig"
			-width 310;
	
			//rowColumnLayout -nc 2;
			button -bgc .30 .65 .30 -label "Generate Rig"
			-ann "Once you are happy with your proxies' positions and the settings in this tab, click this button to generate your Rapid Rig."
			-command "RRA_RigPrompts(`textField -q -text RRA_CharName`)"
			RRA_RigPromptsButton;
	
			setParent RRA_RigSteps;
	
	//STEP 2.5
		frameLayout -label "Step 2.5: Skin Geometry to Rig"
			-width 310;
			
			columnLayout -cw 310;
			
			textFieldButtonGrp -buttonLabel "Load Rig"
			-ann "Select a control of the Rapid Rig you want to load"
			-buttonCommand "RRA_LoadRig"
			RRA_LoadRigTextFieldButtonGrp;
	
			button -w 305 -label "Select Skinning Joints"
			-ann "This will select all the joints your character should be skinned to. Make sure to enter the correct name of your rig in the top text field."
			-command "RRA_SelectJoints(`textFieldButtonGrp -q -tx RRA_LoadRigTextFieldButtonGrp`)"
			RRA_SelectJointsButton;
	
			setParent rigTabs;
			
		
	//TAB 3
	$rigExtras = `columnLayout RRA_RigExtras`;
	////STEP 3.1
	//	frameLayout -label "Step 3.1: Save Control Sizes"
	//		-width 310;
	//		
	//	button -label "Save Control Sizes to File"
	//	-command "RRA_WritePathControlsCheck"
	//	RRA_WritePathControlsCheckButton;
	//	
	//	setParent..;
	////setParent..;
	//
	////STEP 3.2
	//	frameLayout -label "Step 3.2: Load Control Sizes From File"
	//		-width 310;
	//		
	//	//columnLayout -cw 50 -cat "left" 5
	//	button -label "Load Control Sizes from File"
	//	-command "RRA_ReadPathControlsCheck"
	//	RRA_ReadPathControlsCheckButton;
	//	
	//	setParent..;
	////setParent..;
	////setParent..;
	
		frameLayout -label "Delete the proxy rig"
			-width 310;	
			button -label "Delete Proxies"
			-bgc .8 0.25 0.25
			-ann "This will delete your proxy rig once you have no further use for it."
			-command "RRA_DeleteProxies"
			RRA_DeleteRigButton;
			
		setParent RRA_RigExtras;
			
			//STEP 3.1
		frameLayout -label "Select a control of the rig to delete"
			-width 310;
			
		button -label "Delete Rig"
		-bgc .8 0.25 0.25
		-annotation "Select a control of your rig and click this button to delete that rig."
		-command "RRA_DeleteRigUI"
		RRA_DeleteRigUIButton;
		
		setParent RRA_RigExtras;

		//STEP 3.3
		frameLayout -label "Rapid Rig Info"
			-width 310;
			
		columnLayout -cw 310;

		//columnLayout -cw 50 -cat "left" 5
		button -w 305 -label "Rig Version Number"
		-annotation "Select the Main Control and click this button to see what version your rig is."
		-command "RRA_GetVersionNumber"
		RRA_GetVersionNumberButton;
		
		button -w 305 -label "Go To \"Rapid Rig: Advanced\" Web Page"
		-annotation "Go to the CreativecCrash webpage for Rapid Rig: Advanced."
		-command "RRA_GoToCreativeCrash"
		RRA_GoToCreativeCrashButton;
		
		
		text -label "\n\n\n\n                Email your questions and feedback:\n\n                           dustin@rapidrig.com\n\n\n" -align "left";
		
		setParent rigTabs;

	tabLayout -edit -tabLabel $proxySteps "Proxy Rig" -tabLabel $rigSteps "Generate Rig" -tabLabel $rigExtras "Rig Extras" $tabs;
}


//MAIN PROCEDURE FOR WINDOW
global proc RapidRig_Advanced_V2()                                        
{
	if (`window -exists RRA_BiPed`) 
	{
		deleteUI RRA_BiPed; 
	}
	window -title "Rapid Rig: Advanced 2"
		-wh 314 318
		-rtf on
		-mnb false
		-mxb false
		-s 0
		RRA_BiPed;
	
	RRA_CreateGUI();
	
	showWindow RRA_BiPed;
	window -e -w 314 -h 318 RRA_BiPed;
}

RapidRig_Advanced_V2;
